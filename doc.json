[
    {
        "defines": [
            {
                "extends": {
                    "finish": 680007,
                    "start": 680005,
                    "type": "table",
                    "view": "_G"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/basic.lua",
                "finish": 680002,
                "start": 680000,
                "type": "setglobal"
            }
        ],
        "desc": "\nA global variable (not a function) that holds the global environment (see [ยง2.2](http://www.lua.org/manual/5.4/manual.html#2.2)). Lua itself does not use this variable; changing its value does not affect any environment, nor vice versa.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-_G)\n",
        "name": "_G",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "finish": 3670020,
                    "start": 3670011,
                    "type": "string",
                    "view": "string"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/basic.lua",
                "finish": 3670008,
                "start": 3670000,
                "type": "setglobal"
            }
        ],
        "desc": "\nA global variable (not a function) that holds a string containing the running Lua version.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-_VERSION)\n",
        "name": "_VERSION",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "finish": 620066,
                    "start": 620054,
                    "type": "getlocal",
                    "view": "boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/events.lua",
                "finish": 620051,
                "start": 620000,
                "type": "setfield"
            }
        ],
        "name": "_discreteEventsRegistrar_events_lua_fileModified",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "finish": 630074,
                    "start": 630058,
                    "type": "getlocal",
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/events.lua",
                "finish": 630055,
                "start": 630000,
                "type": "setfield"
            }
        ],
        "name": "_discreteEventsRegistrar_events_lua_regressionNumber",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "finish": 610068,
                    "start": 610055,
                    "type": "getlocal",
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/events.lua",
                "finish": 610052,
                "start": 610000,
                "type": "setfield"
            }
        ],
        "name": "_discreteEventsRegistrar_events_lua_versionNumber",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "finish": 710015,
                    "start": 710013,
                    "type": "table",
                    "view": "table"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/events.lua",
                "finish": 710010,
                "start": 710000,
                "type": "setfield"
            }
        ],
        "name": "_global",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "finish": 720028,
                    "start": 720023,
                    "type": "boolean",
                    "view": "boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/events.lua",
                "finish": 720020,
                "start": 720000,
                "type": "setfield"
            }
        ],
        "desc": " set to true to run event civ.ui.text statements in default code",
        "name": "_global.eventTesting",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "finish": 10540034,
                    "start": 10540020,
                    "type": "getindex",
                    "view": "unknown"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/events.lua",
                "finish": 10540017,
                "start": 10540004,
                "type": "setfield"
            }
        ],
        "name": "_global.state",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "finish": 80008,
                    "start": 80006,
                    "type": "table",
                    "view": "string[]"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/basic.lua",
                "finish": 80003,
                "start": 80000,
                "type": "setglobal"
            }
        ],
        "desc": "\nCommand-line arguments of Lua Standalone.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-arg)\n",
        "name": "arg",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 200017,
                            "name": "v",
                            "start": 200016,
                            "type": "local",
                            "view": "<T>?"
                        },
                        {
                            "finish": 200026,
                            "name": "message",
                            "start": 200019,
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": 200031,
                            "start": 200028,
                            "type": "...",
                            "view": "unknown"
                        }
                    ],
                    "desc": "\nRaises an error if the value of its argument v is false (i.e., `nil` or `false`); otherwise, returns all its arguments. In case of error, `message` is the error object; when absent, it defaults to `\"assertion failed!\"`\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-assert)",
                    "finish": 200036,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "<T>"
                        },
                        {
                            "name": "...",
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": 200000,
                    "type": "function",
                    "view": "function assert(v?: <T>, message?: any, ...any)\n  -> <T>\n  2. ...any"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/basic.lua",
                "finish": 200015,
                "start": 200009,
                "type": "setglobal"
            }
        ],
        "desc": "\nRaises an error if the value of its argument v is false (i.e., `nil` or `false`); otherwise, returns all its arguments. In case of error, `message` is the error object; when absent, it defaults to `\"assertion failed!\"`\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-assert)",
        "name": "assert",
        "type": "variable"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 4420027,
                "start": 4420010,
                "type": "doc.class"
            }
        ],
        "desc": "A base terrain object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents the 'basic' terrain characteristics for a terrain type, which is to say those aspects of terrain which do not change for special resources. The 'terrain' object deals with the characteristics that do change for special resources.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#baseterrain)",
        "fields": [
            {
                "desc": "(get) The terrain abbreviation for this baseTerrain (e.g. 'Drt', 'Pln' etc.).",
                "extends": {
                    "finish": 4430023,
                    "start": 4430017,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 4430023,
                            "start": 4430017,
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 4430023,
                "name": "abbrev",
                "start": 4430010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set - ephemeral) Returns `true` if the underlying terrain type allows irrigation, `false` otherwise.",
                "extends": {
                    "finish": 4440029,
                    "start": 4440022,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 4440029,
                            "start": 4440022,
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 4440029,
                "name": "canIrrigate",
                "start": 4440010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set - ephemeral) Returns `true` if the underlying terrain type allows mining, `false` otherwise.",
                "extends": {
                    "finish": 4450025,
                    "start": 4450018,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 4450025,
                            "start": 4450018,
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 4450025,
                "name": "canMine",
                "start": 4450010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set - ephemeral) The defense factor of the underlying terrain type.",
                "extends": {
                    "finish": 4460025,
                    "start": 4460018,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 4460025,
                            "start": 4460018,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 4460025,
                "name": "defense",
                "start": 4460010,
                "type": "doc.field"
            },
            {
                "desc": "Returns the terrain object corresponding to the underlying terrain type and the given resource.\n\n```lua\nresource:\n    | 0 -- no resource\n    | 1 -- fish resource\n    | 2 -- whales resource\n```",
                "extends": {
                    "args": [
                        {
                            "finish": 4690008,
                            "name": "self",
                            "start": 4690008,
                            "type": "self",
                            "view": "baseTerrainObject"
                        },
                        {
                            "finish": 4690046,
                            "name": "resource",
                            "start": 4690038,
                            "type": "local",
                            "view": "0|1|2"
                        }
                    ],
                    "desc": "Returns the terrain object corresponding to the underlying terrain type and the given resource.\n\n```lua\nresource:\n    | 0 -- no resource\n    | 1 -- fish resource\n    | 2 -- whales resource\n```",
                    "finish": 4690051,
                    "returns": [
                        {
                            "name": "terrain",
                            "type": "function.return",
                            "view": "terrainObject"
                        }
                    ],
                    "start": 4690000,
                    "type": "function",
                    "view": "(method) baseTerrainObject:getTerrain(resource: 0|1|2)\n  -> terrain: terrainObject"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 4690037,
                "name": "getTerrain",
                "start": 4690009,
                "type": "setmethod"
            },
            {
                "desc": "(get/set - ephemeral) Returns `true` if the underlying terrain type is impassable, `false` otherwise.",
                "extends": {
                    "finish": 4470028,
                    "start": 4470021,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 4470028,
                            "start": 4470021,
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 4470028,
                "name": "impassable",
                "start": 4470010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set - ephemeral) The minimum government level needed for the AI to consider irrigating.",
                "extends": {
                    "finish": 4480028,
                    "start": 4480021,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 4480028,
                            "start": 4480021,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 4480028,
                "name": "irrigateAI",
                "start": 4480010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set - ephemeral) The extra amount of food from irrigation.",
                "extends": {
                    "finish": 4490031,
                    "start": 4490024,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 4490031,
                            "start": 4490024,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 4490031,
                "name": "irrigateBonus",
                "start": 4490010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set - ephemeral) If the irrigation order changes the underlying terrain type return the baseTerrain of the new terrain type, `nil` otherwise.",
                "extends": {
                    "finish": 4500042,
                    "start": 4500021,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 4500038,
                            "start": 4500021,
                            "type": "doc.type.name",
                            "view": "baseTerrainObject"
                        },
                        {
                            "finish": 4500042,
                            "start": 4500039,
                            "type": "doc.type.name",
                            "view": "nil"
                        }
                    ],
                    "view": "baseTerrainObject|nil"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 4500042,
                "name": "irrigateTo",
                "start": 4500010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set - ephemeral) The number of turns for settlers to irrigate.",
                "extends": {
                    "finish": 4510031,
                    "start": 4510024,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 4510031,
                            "start": 4510024,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 4510031,
                "name": "irrigateTurns",
                "start": 4510010,
                "type": "doc.field"
            },
            {
                "desc": "(get) The map associated with the baseTerrain object.",
                "extends": {
                    "finish": 4520021,
                    "start": 4520014,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 4520021,
                            "start": 4520014,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 4520021,
                "name": "map",
                "start": 4520010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set - ephemeral) The minimum government level needed for the AI to consider mining.",
                "extends": {
                    "finish": 4530024,
                    "start": 4530017,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 4530024,
                            "start": 4530017,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 4530024,
                "name": "mineAI",
                "start": 4530010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set - ephemeral) The extra amount of production from mining.",
                "extends": {
                    "finish": 4540027,
                    "start": 4540020,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 4540027,
                            "start": 4540020,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 4540027,
                "name": "mineBonus",
                "start": 4540010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set - ephemeral) If the mine order changes the underlying terrain type return the baseTerrain of the new terrain type, `nil` otherwise.",
                "extends": {
                    "finish": 4550038,
                    "start": 4550017,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 4550034,
                            "start": 4550017,
                            "type": "doc.type.name",
                            "view": "baseTerrainObject"
                        },
                        {
                            "finish": 4550038,
                            "start": 4550035,
                            "type": "doc.type.name",
                            "view": "nil"
                        }
                    ],
                    "view": "baseTerrainObject|nil"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 4550038,
                "name": "mineTo",
                "start": 4550010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set - ephemeral) The number of turns for settlers to mine.",
                "extends": {
                    "finish": 4560027,
                    "start": 4560020,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 4560027,
                            "start": 4560020,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 4560027,
                "name": "mineTurns",
                "start": 4560010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set - ephemeral) The movement cost of the underlying terrain type.",
                "extends": {
                    "finish": 4570026,
                    "start": 4570019,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 4570026,
                            "start": 4570019,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 4570026,
                "name": "moveCost",
                "start": 4570010,
                "type": "doc.field"
            },
            {
                "desc": "(get) The name of this baseTerrain.",
                "extends": {
                    "finish": 4580021,
                    "start": 4580015,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 4580021,
                            "start": 4580015,
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 4580021,
                "name": "name",
                "start": 4580010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set - ephemeral) If the underlying terrain type can be transformed return the baseTerrain of the new terrain type, `nil` otherwise.",
                "extends": {
                    "finish": 4590043,
                    "start": 4590022,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 4590039,
                            "start": 4590022,
                            "type": "doc.type.name",
                            "view": "baseTerrainObject"
                        },
                        {
                            "finish": 4590043,
                            "start": 4590040,
                            "type": "doc.type.name",
                            "view": "nil"
                        }
                    ],
                    "view": "baseTerrainObject|nil"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 4590043,
                "name": "transformTo",
                "start": 4590010,
                "type": "doc.field"
            },
            {
                "desc": "(get) The terrain type associated with the baseTerrain object.",
                "extends": {
                    "finish": 4600022,
                    "start": 4600015,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 4600022,
                            "start": 4600015,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 4600022,
                "name": "type",
                "start": 4600010,
                "type": "doc.field"
            }
        ],
        "name": "baseTerrainObject",
        "type": "type"
    },
    {
        "defines": [
            {
                "extends": [
                    {
                        "finish": 640026,
                        "start": 640019,
                        "type": "doc.extends.name",
                        "view": "integer"
                    }
                ],
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 640026,
                "start": 640010,
                "type": "doc.class"
            }
        ],
        "desc": "<p>A bitmask is an integer that is not meant to be interpreted as a number, but rather as a sequence of 1's and 0's (the binary representation of the number), with each 1 or 0 representing whether a condition is true or false. Bitmasks often have functions written to facilitate their manipulation. If none are available, Lua provides bitwise operators.</p><p>Typically, the leftmost bit (the bit representing the largest value) is interpreted as negative. Hence, the bitmask integer is not guaranteed to be positive.</p>\n[Lua 5.3 Reference Manual 3.4.2 -- Bitwise Operators](https://www.lua.org/manual/5.3/manual.html#3.4.2)\n[Twos complement: Negative numbers in binary (Youtube Video)](https://www.youtube.com/watch?v=4qH4unVtJkE)",
        "fields": [],
        "name": "bitmask",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/calendar.lua",
                "finish": 110018,
                "start": 110010,
                "type": "doc.class"
            }
        ],
        "fields": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 2540035,
                            "name": "turn",
                            "start": 2540031,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "finish": 2790003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "integer|unknown"
                        },
                        {
                            "type": "function.return",
                            "view": "integer|unknown|nil"
                        }
                    ],
                    "start": 2540000,
                    "type": "function",
                    "view": "function calendar.dateFromTurn(turn: any)\n  -> integer|unknown\n  2. integer|unknown|nil"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/calendar.lua",
                "finish": 2540030,
                "name": "dateFromTurn",
                "start": 2540009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 730035,
                            "name": "year",
                            "start": 730031,
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": 730040,
                            "name": "arg1",
                            "start": 730036,
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": 730045,
                            "name": "arg2",
                            "start": 730041,
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": 730050,
                            "name": "arg3",
                            "start": 730046,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "finish": 2470003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": 730000,
                    "type": "function",
                    "view": "function calendar.turnFromDate(year: any, arg1: any, arg2: any, arg3: any)\n  -> integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/calendar.lua",
                "finish": 730030,
                "name": "turnFromDate",
                "start": 730009,
                "type": "setfield"
            }
        ],
        "name": "calendar",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 830020,
                "start": 830010,
                "type": "doc.class"
            }
        ],
        "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
        "fields": [
            {
                "desc": "Alias for `civ.addImprovement(city, improvement)`.",
                "extends": {
                    "args": [
                        {
                            "finish": 1140008,
                            "name": "self",
                            "start": 1140008,
                            "type": "self",
                            "view": "cityObject"
                        },
                        {
                            "desc": "An improvement object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents an improvement entry in the rules.txt, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#improvement)",
                            "finish": 1140046,
                            "name": "improvement",
                            "start": 1140035,
                            "type": "local",
                            "view": "improvementObject"
                        }
                    ],
                    "desc": "Alias for `civ.addImprovement(city, improvement)`.",
                    "finish": 1140051,
                    "start": 1140000,
                    "type": "function",
                    "view": "(method) cityObject:addImprovement(improvement: improvementObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 1140034,
                "name": "addImprovement",
                "start": 1140009,
                "type": "setmethod"
            },
            {
                "desc": "Adds a new trade route to city `destination`, with commodity `commodity`. Returns an error if all 3 trade slots are already in use.\n\n@*param* `destination` โ The destination city for the trade route.\n\n@*param* `commodity` โ The trade route commodity.",
                "extends": {
                    "args": [
                        {
                            "finish": 1380008,
                            "name": "self",
                            "start": 1380008,
                            "type": "self",
                            "view": "cityObject"
                        },
                        {
                            "desc": "The destination city for the trade route.",
                            "finish": 1380045,
                            "name": "destination",
                            "start": 1380034,
                            "type": "local",
                            "view": "cityObject"
                        },
                        {
                            "desc": "The trade route commodity.",
                            "finish": 1380055,
                            "name": "commodity",
                            "start": 1380046,
                            "type": "local",
                            "view": "commodityObject"
                        }
                    ],
                    "desc": "Adds a new trade route to city `destination`, with commodity `commodity`. Returns an error if all 3 trade slots are already in use.\n\n@*param* `destination` โ The destination city for the trade route.\n\n@*param* `commodity` โ The trade route commodity.",
                    "finish": 1380060,
                    "start": 1380000,
                    "type": "function",
                    "view": "(method) cityObject:addTradeRoute(destination: cityObject, commodity: commodityObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 1380033,
                "name": "addTradeRoute",
                "start": 1380009,
                "type": "setmethod"
            },
            {
                "desc": "(get/set) Returns the city's attributes (bitmask).",
                "extends": {
                    "finish": 840028,
                    "start": 840021,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 840028,
                            "start": 840021,
                            "type": "doc.type.name",
                            "view": "bitmask"
                        }
                    ],
                    "view": "bitmask"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 840028,
                "name": "attributes",
                "start": 840010,
                "type": "doc.field"
            },
            {
                "desc": "(get) Returns the number of trade arrows before trade routes.",
                "extends": {
                    "finish": 850027,
                    "start": 850020,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 850027,
                            "start": 850020,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 850027,
                "name": "baseTrade",
                "start": 850010,
                "type": "doc.field"
            },
            {
                "desc": "Returns whether or not `item` can currently be built in the city. `item` can be a unitType, improvement or wonder.",
                "extends": {
                    "args": [
                        {
                            "finish": 1190008,
                            "name": "self",
                            "start": 1190008,
                            "type": "self",
                            "view": "cityObject"
                        },
                        {
                            "desc": "A production item is an object that can be under production in a city. It can be a unit type object, an improvement object, or a wonder object. Note that it is a unit type object, not a unit object, since the unit hasn't been added to the game yet.",
                            "finish": 1190033,
                            "name": "item",
                            "start": 1190029,
                            "type": "local",
                            "view": "improvementObject|unitTypeObject|wonderObject"
                        }
                    ],
                    "desc": "Returns whether or not `item` can currently be built in the city. `item` can be a unitType, improvement or wonder.",
                    "finish": 1190038,
                    "returns": [
                        {
                            "name": "boolean",
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 1190000,
                    "type": "function",
                    "view": "(method) cityObject:canBuild(item: improvementObject|unitTypeObject|wonderObject)\n  -> boolean: boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 1190028,
                "name": "canBuild",
                "start": 1190009,
                "type": "setmethod"
            },
            {
                "desc": "(get) Returns whether or not the city is on a coast (can build coastal improvements).",
                "extends": {
                    "finish": 860025,
                    "start": 860018,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 860025,
                            "start": 860018,
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 860025,
                "name": "coastal",
                "start": 860010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set) Returns the city's current production.",
                "extends": {
                    "finish": 870036,
                    "start": 870028,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 870036,
                            "start": 870028,
                            "type": "doc.type.name",
                            "view": "improvementObject|unitTypeObject|wonderObject"
                        }
                    ],
                    "view": "improvementObject|unitTypeObject|wonderObject"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 870036,
                "name": "currentProduction",
                "start": 870010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set) Returns the quantity of food in store.",
                "extends": {
                    "finish": 880022,
                    "start": 880015,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 880022,
                            "start": 880015,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 880022,
                "name": "food",
                "start": 880010,
                "type": "doc.field"
            },
            {
                "desc": "Alias for `civ.hasImprovement(city, improvement)`.",
                "extends": {
                    "args": [
                        {
                            "finish": 1240008,
                            "name": "self",
                            "start": 1240008,
                            "type": "self",
                            "view": "cityObject"
                        },
                        {
                            "desc": "An improvement object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents an improvement entry in the rules.txt, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#improvement)",
                            "finish": 1240046,
                            "name": "improvement",
                            "start": 1240035,
                            "type": "local",
                            "view": "improvementObject"
                        }
                    ],
                    "desc": "Alias for `civ.hasImprovement(city, improvement)`.",
                    "finish": 1240051,
                    "returns": [
                        {
                            "name": "boolean",
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 1240000,
                    "type": "function",
                    "view": "(method) cityObject:hasImprovement(improvement: improvementObject)\n  -> boolean: boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 1240034,
                "name": "hasImprovement",
                "start": 1240009,
                "type": "setmethod"
            },
            {
                "desc": "(get) Returns the city's id.",
                "extends": {
                    "finish": 890020,
                    "start": 890013,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 890020,
                            "start": 890013,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 890020,
                "name": "id",
                "start": 890010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set) Returns a bitmask indicating the tribes that have knowledge of this city.",
                "extends": {
                    "finish": 900025,
                    "start": 900018,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 900025,
                            "start": 900018,
                            "type": "doc.type.name",
                            "view": "bitmask"
                        }
                    ],
                    "view": "bitmask"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 900025,
                "name": "knownTo",
                "start": 900010,
                "type": "doc.field"
            },
            {
                "desc": "(get) Returns the city's location. See the `relocate` method for a way to set this.",
                "extends": {
                    "finish": 910029,
                    "start": 910019,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 910029,
                            "start": 910019,
                            "type": "doc.type.name",
                            "view": "tileObject"
                        }
                    ],
                    "view": "tileObject"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 910029,
                "name": "location",
                "start": 910010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set) Returns the city's name.",
                "extends": {
                    "finish": 920021,
                    "start": 920015,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 920021,
                            "start": 920015,
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 920021,
                "name": "name",
                "start": 920010,
                "type": "doc.field"
            },
            {
                "desc": "(get) Returns the number of happy citizens.",
                "extends": {
                    "finish": 930026,
                    "start": 930019,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 930026,
                            "start": 930019,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 930026,
                "name": "numHappy",
                "start": 930010,
                "type": "doc.field"
            },
            {
                "desc": "(get) Returns the number of trade routes of the city.",
                "extends": {
                    "finish": 940032,
                    "start": 940025,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 940032,
                            "start": 940025,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 940032,
                "name": "numTradeRoutes",
                "start": 940010,
                "type": "doc.field"
            },
            {
                "desc": "(get) Returns the number of unhappy citizens.",
                "extends": {
                    "finish": 950028,
                    "start": 950021,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 950028,
                            "start": 950021,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 950028,
                "name": "numUnhappy",
                "start": 950010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set) Returns the city's original owner. This can be different from `owner` if the city was captured in the past.",
                "extends": {
                    "finish": 960035,
                    "start": 960024,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 960035,
                            "start": 960024,
                            "type": "doc.type.name",
                            "view": "tribeObject"
                        }
                    ],
                    "view": "tribeObject"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 960035,
                "name": "originalOwner",
                "start": 960010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set) Returns the city's owner.",
                "extends": {
                    "finish": 970027,
                    "start": 970016,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 970027,
                            "start": 970016,
                            "type": "doc.type.name",
                            "view": "tribeObject"
                        }
                    ],
                    "view": "tribeObject"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 970027,
                "name": "owner",
                "start": 970010,
                "type": "doc.field"
            },
            {
                "desc": "Removes the last trade route, or does nothing if no trade routes are in use.",
                "extends": {
                    "args": [
                        {
                            "finish": 1410008,
                            "name": "self",
                            "start": 1410008,
                            "type": "self",
                            "view": "cityObject"
                        }
                    ],
                    "desc": "Removes the last trade route, or does nothing if no trade routes are in use.",
                    "finish": 1410039,
                    "start": 1410000,
                    "type": "function",
                    "view": "(method) cityObject:popTradeRoute()"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 1410033,
                "name": "popTradeRoute",
                "start": 1410009,
                "type": "setmethod"
            },
            {
                "desc": "Relocates the city to the location given by `tile`. Returns `true` if successful, `false` otherwise (if a city is already present for example).",
                "extends": {
                    "args": [
                        {
                            "finish": 1290008,
                            "name": "self",
                            "start": 1290008,
                            "type": "self",
                            "view": "cityObject"
                        },
                        {
                            "desc": "A tile object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a map \"square\" in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tile)",
                            "finish": 1290033,
                            "name": "tile",
                            "start": 1290029,
                            "type": "local",
                            "view": "tileObject"
                        }
                    ],
                    "desc": "Relocates the city to the location given by `tile`. Returns `true` if successful, `false` otherwise (if a city is already present for example).",
                    "finish": 1290038,
                    "returns": [
                        {
                            "name": "boolean",
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 1290000,
                    "type": "function",
                    "view": "(method) cityObject:relocate(tile: tileObject)\n  -> boolean: boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 1290028,
                "name": "relocate",
                "start": 1290009,
                "type": "setmethod"
            },
            {
                "desc": "Alias for `civ.removeImprovement(city, improvement)`.",
                "extends": {
                    "args": [
                        {
                            "finish": 1330008,
                            "name": "self",
                            "start": 1330008,
                            "type": "self",
                            "view": "cityObject"
                        },
                        {
                            "desc": "An improvement object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents an improvement entry in the rules.txt, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#improvement)",
                            "finish": 1330049,
                            "name": "improvement",
                            "start": 1330038,
                            "type": "local",
                            "view": "improvementObject"
                        }
                    ],
                    "desc": "Alias for `civ.removeImprovement(city, improvement)`.",
                    "finish": 1330054,
                    "start": 1330000,
                    "type": "function",
                    "view": "(method) cityObject:removeImprovement(improvement: improvementObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 1330037,
                "name": "removeImprovement",
                "start": 1330009,
                "type": "setmethod"
            },
            {
                "desc": "Removes the trade route with index `id` (0-2). This shifts elements after `id` to fill gaps in the array, so references to trade routes may not be valid anymore after calling this.",
                "extends": {
                    "args": [
                        {
                            "finish": 1450008,
                            "name": "self",
                            "start": 1450008,
                            "type": "self",
                            "view": "cityObject"
                        },
                        {
                            "desc": "An id number is a positive integer that corresponds to an object in the game or the rules.txt file. If you know what <em>kind</em> of object the id corresponds to, you can then use the id to get the specific item in question. The maximum value for an id will depend on its corresponding object. For example, the maximum id for a tribe object is 7, but (at least for programming purposes) there is no limit to the id number of a unit.",
                            "finish": 1450039,
                            "name": "id",
                            "start": 1450037,
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "desc": "Removes the trade route with index `id` (0-2). This shifts elements after `id` to fill gaps in the array, so references to trade routes may not be valid anymore after calling this.",
                    "finish": 1450044,
                    "start": 1450000,
                    "type": "function",
                    "view": "(method) cityObject:removeTradeRoute(id: integer)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 1450036,
                "name": "removeTradeRoute",
                "start": 1450009,
                "type": "setmethod"
            },
            {
                "desc": "(get) Returns the amount of science the city produces.",
                "extends": {
                    "finish": 980025,
                    "start": 980018,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 980025,
                            "start": 980018,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 980025,
                "name": "science",
                "start": 980010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set) Returns the number of shields towards the current item in production.",
                "extends": {
                    "finish": 990025,
                    "start": 990018,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 990025,
                            "start": 990018,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 990025,
                "name": "shields",
                "start": 990010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set) Returns the city's size.",
                "extends": {
                    "finish": 1000022,
                    "start": 1000015,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 1000022,
                            "start": 1000015,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 1000022,
                "name": "size",
                "start": 1000010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set) cityObject.sizeForTribe[tribe] -> integer Returns the city's size as known by the given tribe.",
                "extends": {
                    "finish": 1010033,
                    "start": 1010023,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 1010033,
                            "start": 1010023,
                            "type": "doc.type.name",
                            "view": "tribeToInt"
                        }
                    ],
                    "view": "tribeToInt"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 1010033,
                "name": "sizeForTribe",
                "start": 1010010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set) Returns the city's specialists as a integer, 16 x 2 bits per specialist (0 - No specialist, 1 - Entertainer, 2 - Taxman, 3 - Scientist)",
                "extends": {
                    "finish": 1020029,
                    "start": 1020022,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 1020029,
                            "start": 1020022,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 1020029,
                "name": "specialists",
                "start": 1020010,
                "type": "doc.field"
            },
            {
                "desc": "(get) Returns the amount of tax the city produces.",
                "extends": {
                    "finish": 1030021,
                    "start": 1030014,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 1030021,
                            "start": 1030014,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 1030021,
                "name": "tax",
                "start": 1030010,
                "type": "doc.field"
            },
            {
                "desc": "(get) Returns the total amount of food the city produces.",
                "extends": {
                    "finish": 1040027,
                    "start": 1040020,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 1040027,
                            "start": 1040020,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 1040027,
                "name": "totalFood",
                "start": 1040010,
                "type": "doc.field"
            },
            {
                "desc": "(get) Returns the total amount of shields the city produces.",
                "extends": {
                    "finish": 1050029,
                    "start": 1050022,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 1050029,
                            "start": 1050022,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 1050029,
                "name": "totalShield",
                "start": 1050010,
                "type": "doc.field"
            },
            {
                "desc": "(get) Returns the total amount of trade arrows the city produces (including trade routes).",
                "extends": {
                    "finish": 1060028,
                    "start": 1060021,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 1060028,
                            "start": 1060021,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 1060028,
                "name": "totalTrade",
                "start": 1060010,
                "type": "doc.field"
            },
            {
                "desc": "(get) Returns the trade route with id `id` (0-2), or `nil` if not in use.",
                "extends": {
                    "finish": 1090042,
                    "start": 1090022,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 1090038,
                            "start": 1090022,
                            "type": "doc.type.name",
                            "view": "traderouteObject"
                        },
                        {
                            "finish": 1090042,
                            "start": 1090039,
                            "type": "doc.type.name",
                            "view": "nil"
                        }
                    ],
                    "view": "traderouteObject|nil"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 1090042,
                "name": "tradeRoutes",
                "start": 1090010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set) Returns the number of turns since the city was last captured.",
                "extends": {
                    "finish": 1070035,
                    "start": 1070028,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 1070035,
                            "start": 1070028,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 1070035,
                "name": "turnsSinceCapture",
                "start": 1070010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set) Returns a bitmask with the workers and specialists of the city.",
                "extends": {
                    "finish": 1080025,
                    "start": 1080018,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 1080025,
                            "start": 1080018,
                            "type": "doc.type.name",
                            "view": "bitmask"
                        }
                    ],
                    "view": "bitmask"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 1080025,
                "name": "workers",
                "start": 1080010,
                "type": "doc.field"
            }
        ],
        "name": "cityObject",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 5200013,
                "start": 5200010,
                "type": "doc.class"
            }
        ],
        "desc": " The civ module provides functions which can interact directly with the game.  It is always in scope, so you never need to use a `require` call in order to access it.",
        "fields": [
            {
                "desc": "Adds city improvement `improvement` to city `city`.",
                "extends": {
                    "args": [
                        {
                            "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
                            "finish": 5300032,
                            "name": "city",
                            "start": 5300028,
                            "type": "local",
                            "view": "cityObject"
                        },
                        {
                            "desc": "An improvement object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents an improvement entry in the rules.txt, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#improvement)",
                            "finish": 5300044,
                            "name": "improvement",
                            "start": 5300033,
                            "type": "local",
                            "view": "improvementObject"
                        }
                    ],
                    "desc": "Adds city improvement `improvement` to city `city`.",
                    "finish": 5300049,
                    "start": 5300000,
                    "type": "function",
                    "view": "function civ.addImprovement(city: cityObject, improvement: improvementObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 5300027,
                "name": "addImprovement",
                "start": 5300009,
                "type": "setfield"
            },
            {
                "desc": "Returns `true` if the given unittype can enter tile `tile`, `false` otherwise.",
                "extends": {
                    "args": [
                        {
                            "desc": "A unit type object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit type entry in the rules.txt, and provides a means of interacting with it. This should not be confused with the unit object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unittype)",
                            "finish": 5360030,
                            "name": "unitType",
                            "start": 5360022,
                            "type": "local",
                            "view": "unitTypeObject"
                        },
                        {
                            "desc": "A tile object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a map \"square\" in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tile)",
                            "finish": 5360035,
                            "name": "tile",
                            "start": 5360031,
                            "type": "local",
                            "view": "tileObject"
                        }
                    ],
                    "desc": "Returns `true` if the given unittype can enter tile `tile`, `false` otherwise.",
                    "finish": 5360040,
                    "returns": [
                        {
                            "name": "boolean",
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 5360000,
                    "type": "function",
                    "view": "function civ.canEnter(unitType: unitTypeObject, tile: tileObject)\n  -> boolean: boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 5360021,
                "name": "canEnter",
                "start": 5360009,
                "type": "setfield"
            },
            {
                "desc": "Captures city `city` for tribe `tribe`.",
                "extends": {
                    "args": [
                        {
                            "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
                            "finish": 5410029,
                            "name": "city",
                            "start": 5410025,
                            "type": "local",
                            "view": "cityObject"
                        },
                        {
                            "desc": "A tribe object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a tribe, which is to say the characteristics of the tribe overall, in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tribe)",
                            "finish": 5410035,
                            "name": "tribe",
                            "start": 5410030,
                            "type": "local",
                            "view": "tribeObject"
                        }
                    ],
                    "desc": "Captures city `city` for tribe `tribe`.",
                    "finish": 5410040,
                    "start": 5410000,
                    "type": "function",
                    "view": "function civ.captureCity(city: cityObject, tribe: tribeObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 5410024,
                "name": "captureCity",
                "start": 5410009,
                "type": "setfield"
            },
            {
                "desc": "",
                "extends": {
                    "finish": 5220031,
                    "start": 5220021,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 5220031,
                            "start": 5220021,
                            "type": "doc.type.name",
                            "view": "civ.cosmic"
                        }
                    ],
                    "view": "civ.cosmic"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 5220031,
                "name": "civ.cosmic",
                "start": 5220010,
                "type": "doc.field"
            },
            {
                "desc": "",
                "extends": {
                    "finish": 5230027,
                    "start": 5230019,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 5230027,
                            "start": 5230019,
                            "type": "doc.type.name",
                            "view": "civ.game"
                        }
                    ],
                    "view": "civ.game"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 5230027,
                "name": "civ.game",
                "start": 5230010,
                "type": "doc.field"
            },
            {
                "desc": "",
                "extends": {
                    "finish": 5240027,
                    "start": 5240019,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 5240027,
                            "start": 5240019,
                            "type": "doc.type.name",
                            "view": "civ.scen"
                        }
                    ],
                    "view": "civ.scen"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 5240027,
                "name": "civ.scen",
                "start": 5240010,
                "type": "doc.field"
            },
            {
                "desc": "",
                "extends": {
                    "finish": 5210023,
                    "start": 5210017,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 5210023,
                            "start": 5210017,
                            "type": "doc.type.name",
                            "view": "civ.ui"
                        }
                    ],
                    "view": "civ.ui"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 5210023,
                "name": "civ.ui",
                "start": 5210010,
                "type": "doc.field"
            },
            {
                "desc": "",
                "extends": {
                    "finish": 9240015,
                    "start": 9240013,
                    "type": "table",
                    "view": "civ.cosmic"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 9240010,
                "name": "cosmic",
                "start": 9240000,
                "type": "setfield"
            },
            {
                "desc": "Creates a city owned by `tribe` at the location given by `tile`. Returns `nil` if a city could not be created.",
                "extends": {
                    "args": [
                        {
                            "desc": "A tribe object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a tribe, which is to say the characteristics of the tribe overall, in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tribe)",
                            "finish": 5470029,
                            "name": "tribe",
                            "start": 5470024,
                            "type": "local",
                            "view": "tribeObject"
                        },
                        {
                            "desc": "A tile object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a map \"square\" in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tile)",
                            "finish": 5470034,
                            "name": "tile",
                            "start": 5470030,
                            "type": "local",
                            "view": "tileObject"
                        }
                    ],
                    "desc": "Creates a city owned by `tribe` at the location given by `tile`. Returns `nil` if a city could not be created.",
                    "finish": 5470039,
                    "returns": [
                        {
                            "name": "city",
                            "type": "function.return",
                            "view": "cityObject|nil"
                        }
                    ],
                    "start": 5470000,
                    "type": "function",
                    "view": "function civ.createCity(tribe: tribeObject, tile: tileObject)\n  -> city: cityObject|nil"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 5470023,
                "name": "createCity",
                "start": 5470009,
                "type": "setfield"
            },
            {
                "desc": "Creates a unit of type `unittype`, owned by `tribe`, at the location given by `tile`.",
                "extends": {
                    "args": [
                        {
                            "desc": "A unit type object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit type entry in the rules.txt, and provides a means of interacting with it. This should not be confused with the unit object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unittype)",
                            "finish": 5540032,
                            "name": "unitType",
                            "start": 5540024,
                            "type": "local",
                            "view": "unitTypeObject"
                        },
                        {
                            "desc": "A tribe object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a tribe, which is to say the characteristics of the tribe overall, in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tribe)",
                            "finish": 5540038,
                            "name": "tribe",
                            "start": 5540033,
                            "type": "local",
                            "view": "tribeObject"
                        },
                        {
                            "desc": "A tile object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a map \"square\" in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tile)",
                            "finish": 5540043,
                            "name": "tile",
                            "start": 5540039,
                            "type": "local",
                            "view": "tileObject"
                        }
                    ],
                    "desc": "Creates a unit of type `unittype`, owned by `tribe`, at the location given by `tile`.",
                    "finish": 5540048,
                    "returns": [
                        {
                            "name": "unit",
                            "type": "function.return",
                            "view": "unitObject"
                        }
                    ],
                    "start": 5540000,
                    "type": "function",
                    "view": "function civ.createUnit(unitType: unitTypeObject, tribe: tribeObject, tile: tileObject)\n  -> unit: unitObject"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 5540023,
                "name": "createUnit",
                "start": 5540009,
                "type": "setfield"
            },
            {
                "desc": "Deletes city `city` from the game.",
                "extends": {
                    "args": [
                        {
                            "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
                            "finish": 5580028,
                            "name": "city",
                            "start": 5580024,
                            "type": "local",
                            "view": "cityObject"
                        }
                    ],
                    "desc": "Deletes city `city` from the game.",
                    "finish": 5580033,
                    "start": 5580000,
                    "type": "function",
                    "view": "function civ.deleteCity(city: cityObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 5580023,
                "name": "deleteCity",
                "start": 5580009,
                "type": "setfield"
            },
            {
                "desc": "Deletes unit `unit` from the game.\nConsider unsing `gen.defeatUnit`, `gen.killUnit`, `gen.deleteUnit`, or `gen.replaceUnit` instead, for event integration.\n<br>Deprecation flag is only here so that designers see the above notice.",
                "extends": {
                    "args": [
                        {
                            "desc": "A unit object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit in the game, and provides a means of interacting with it. This should not be confused with the unit type object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unit)",
                            "finish": 5650028,
                            "name": "unit",
                            "start": 5650024,
                            "type": "local",
                            "view": "unitObject"
                        }
                    ],
                    "desc": "Deletes unit `unit` from the game.\nConsider unsing `gen.defeatUnit`, `gen.killUnit`, `gen.deleteUnit`, or `gen.replaceUnit` instead, for event integration.\n<br>Deprecation flag is only here so that designers see the above notice.",
                    "finish": 5650033,
                    "start": 5650000,
                    "type": "function",
                    "view": "function civ.deleteUnit(unit: unitObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 5650023,
                "name": "deleteUnit",
                "start": 5650009,
                "type": "setfield"
            },
            {
                "desc": "Destroys wonder `wonder`, removing it from the game, and marking it as 'lost'.",
                "extends": {
                    "args": [
                        {
                            "desc": "A wonder object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a Wonder of the World, both its entry in the rules.txt and also its characteristics within the game.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#wonder)",
                            "finish": 5690033,
                            "name": "wonder",
                            "start": 5690027,
                            "type": "local",
                            "view": "wonderObject"
                        }
                    ],
                    "desc": "Destroys wonder `wonder`, removing it from the game, and marking it as 'lost'.",
                    "finish": 5690038,
                    "start": 5690000,
                    "type": "function",
                    "view": "function civ.destroyWonder(wonder: wonderObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 5690026,
                "name": "destroyWonder",
                "start": 5690009,
                "type": "setfield"
            },
            {
                "desc": "Sets the value of tech group `techgroup` (0-7) to value `value` (0-2, 0 = can research, can own, 1 = can't research, can own, 2 = can't research, can't own) for tribe `tribe`.\n\n@*param* `techgroup` โ integer in [0,7]\n\n```lua\nvalue:\n    | 0 -- can research, can own\n    | 1 -- can't research, can own\n    | 2 -- can't research, can't own\n```",
                "extends": {
                    "args": [
                        {
                            "desc": "A tribe object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a tribe, which is to say the characteristics of the tribe overall, in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tribe)",
                            "finish": 5780034,
                            "name": "tribe",
                            "start": 5780029,
                            "type": "local",
                            "view": "tribeObject"
                        },
                        {
                            "desc": "integer in [0,7]",
                            "finish": 5780044,
                            "name": "techgroup",
                            "start": 5780035,
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": 5780050,
                            "name": "value",
                            "start": 5780045,
                            "type": "local",
                            "view": "0|1|2"
                        }
                    ],
                    "desc": "Sets the value of tech group `techgroup` (0-7) to value `value` (0-2, 0 = can research, can own, 1 = can't research, can own, 2 = can't research, can't own) for tribe `tribe`.\n\n@*param* `techgroup` โ integer in [0,7]\n\n```lua\nvalue:\n    | 0 -- can research, can own\n    | 1 -- can't research, can own\n    | 2 -- can't research, can't own\n```",
                    "finish": 5780055,
                    "start": 5780000,
                    "type": "function",
                    "view": "function civ.enableTechGroup(tribe: tribeObject, techgroup: integer, value: 0|1|2)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 5780028,
                "name": "enableTechGroup",
                "start": 5780009,
                "type": "setfield"
            },
            {
                "desc": "Ends the game. `endscreens` is a boolean that determines whether to show the powergraph and related screens.\n\n@*param* `endscreens` โ This argument is false by default.",
                "extends": {
                    "args": [
                        {
                            "desc": "This argument is false by default.",
                            "finish": 5820031,
                            "name": "endscreens",
                            "start": 5820021,
                            "type": "local",
                            "view": "boolean"
                        }
                    ],
                    "desc": "Ends the game. `endscreens` is a boolean that determines whether to show the powergraph and related screens.\n\n@*param* `endscreens` โ This argument is false by default.",
                    "finish": 5820036,
                    "start": 5820000,
                    "type": "function",
                    "view": "function civ.endGame(endscreens: boolean)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 5820020,
                "name": "endGame",
                "start": 5820009,
                "type": "setfield"
            },
            {
                "desc": "",
                "extends": {
                    "finish": 9380013,
                    "start": 9380011,
                    "type": "table",
                    "view": "civ.game"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 9380008,
                "name": "game",
                "start": 9380000,
                "type": "setfield"
            },
            {
                "desc": "Returns the currently active unit.",
                "extends": {
                    "args": [],
                    "desc": "Returns the currently active unit.",
                    "finish": 5860032,
                    "returns": [
                        {
                            "name": "unit",
                            "type": "function.return",
                            "view": "unitObject"
                        }
                    ],
                    "start": 5860000,
                    "type": "function",
                    "view": "function civ.getActiveUnit()\n  -> unit: unitObject"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 5860026,
                "name": "getActiveUnit",
                "start": 5860009,
                "type": "setfield"
            },
            {
                "desc": "Returns three integers, the width and height of the map and the number of maps.",
                "extends": {
                    "args": [],
                    "desc": "Returns three integers, the width and height of the map and the number of maps.",
                    "finish": 5920037,
                    "returns": [
                        {
                            "name": "width",
                            "type": "function.return",
                            "view": "integer"
                        },
                        {
                            "name": "height",
                            "type": "function.return",
                            "view": "integer"
                        },
                        {
                            "name": "number_of_maps",
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": 5920000,
                    "type": "function",
                    "view": "function civ.getAtlasDimensions()\n  -> width: integer\n  2. height: integer\n  3. number_of_maps: integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 5920031,
                "name": "getAtlasDimensions",
                "start": 5920009,
                "type": "setfield"
            },
            {
                "desc": "Returns the base terrain object for the given map and terrain type.\n\n@*param* `map` โ The map for the base terrain type we want, or its id.\n\n@*param* `terrainId` โ The id number of the base terrain type sought",
                "extends": {
                    "args": [
                        {
                            "desc": "The map for the base terrain type we want, or its id.",
                            "finish": 5980031,
                            "name": "map",
                            "start": 5980028,
                            "type": "local",
                            "view": "integer|mapObject"
                        },
                        {
                            "desc": "The id number of the base terrain type sought",
                            "finish": 5980041,
                            "name": "terrainId",
                            "start": 5980032,
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "desc": "Returns the base terrain object for the given map and terrain type.\n\n@*param* `map` โ The map for the base terrain type we want, or its id.\n\n@*param* `terrainId` โ The id number of the base terrain type sought",
                    "finish": 5980046,
                    "returns": [
                        {
                            "name": "baseTerrain",
                            "type": "function.return",
                            "view": "baseTerrainObject"
                        }
                    ],
                    "start": 5980000,
                    "type": "function",
                    "view": "function civ.getBaseTerrain(map: integer|mapObject, terrainId: integer)\n  -> baseTerrain: baseTerrainObject"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 5980027,
                "name": "getBaseTerrain",
                "start": 5980009,
                "type": "setfield"
            },
            {
                "desc": "Returns the city with id `id`, or `nil` if it doesn't exist.",
                "extends": {
                    "args": [
                        {
                            "desc": "An id number is a positive integer that corresponds to an object in the game or the rules.txt file. If you know what <em>kind</em> of object the id corresponds to, you can then use the id to get the specific item in question. The maximum value for an id will depend on its corresponding object. For example, the maximum id for a tribe object is 7, but (at least for programming purposes) there is no limit to the id number of a unit.",
                            "finish": 6030023,
                            "name": "id",
                            "start": 6030021,
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "desc": "Returns the city with id `id`, or `nil` if it doesn't exist.",
                    "finish": 6030028,
                    "returns": [
                        {
                            "name": "city",
                            "type": "function.return",
                            "view": "cityObject|nil"
                        }
                    ],
                    "start": 6030000,
                    "type": "function",
                    "view": "function civ.getCity(id: integer)\n  -> city: cityObject|nil"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 6030020,
                "name": "getCity",
                "start": 6030009,
                "type": "setfield"
            },
            {
                "desc": "Returns the commodity with id `id` (0-15 for regular commodities, -1 for food supplies), or `nil` if it doesn't exist.",
                "extends": {
                    "args": [
                        {
                            "desc": "An id number is a positive integer that corresponds to an object in the game or the rules.txt file. If you know what <em>kind</em> of object the id corresponds to, you can then use the id to get the specific item in question. The maximum value for an id will depend on its corresponding object. For example, the maximum id for a tribe object is 7, but (at least for programming purposes) there is no limit to the id number of a unit.",
                            "finish": 8310028,
                            "name": "id",
                            "start": 8310026,
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "desc": "Returns the commodity with id `id` (0-15 for regular commodities, -1 for food supplies), or `nil` if it doesn't exist.",
                    "finish": 8310033,
                    "returns": [
                        {
                            "name": "commodity",
                            "type": "function.return",
                            "view": "commodityObject|nil"
                        }
                    ],
                    "start": 8310000,
                    "type": "function",
                    "view": "function civ.getCommodity(id: integer)\n  -> commodity: commodityObject|nil"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 8310025,
                "name": "getCommodity",
                "start": 8310009,
                "type": "setfield"
            },
            {
                "desc": "Returns the currently selected tile.",
                "extends": {
                    "args": [],
                    "desc": "Returns the currently selected tile.",
                    "finish": 6070033,
                    "returns": [
                        {
                            "name": "tile",
                            "type": "function.return",
                            "view": "tileObject"
                        }
                    ],
                    "start": 6070000,
                    "type": "function",
                    "view": "function civ.getCurrentTile()\n  -> tile: tileObject"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 6070027,
                "name": "getCurrentTile",
                "start": 6070009,
                "type": "setfield"
            },
            {
                "desc": "Returns the currently active tribe.",
                "extends": {
                    "args": [],
                    "desc": "Returns the currently active tribe.",
                    "finish": 6110034,
                    "returns": [
                        {
                            "name": "tribe",
                            "type": "function.return",
                            "view": "tribeObject"
                        }
                    ],
                    "start": 6110000,
                    "type": "function",
                    "view": "function civ.getCurrentTribe()\n  -> tribe: tribeObject"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 6110028,
                "name": "getCurrentTribe",
                "start": 6110009,
                "type": "setfield"
            },
            {
                "desc": "Returns the current game year.",
                "extends": {
                    "args": [],
                    "desc": "Returns the current game year.",
                    "finish": 6150030,
                    "returns": [
                        {
                            "name": "integer",
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": 6150000,
                    "type": "function",
                    "view": "function civ.getGameYear()\n  -> integer: integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 6150024,
                "name": "getGameYear",
                "start": 6150009,
                "type": "setfield"
            },
            {
                "desc": "Returns the improvement with id `id` (0-39), or `nil` if it doesn't exist.",
                "extends": {
                    "args": [
                        {
                            "desc": "An id number is a positive integer that corresponds to an object in the game or the rules.txt file. If you know what <em>kind</em> of object the id corresponds to, you can then use the id to get the specific item in question. The maximum value for an id will depend on its corresponding object. For example, the maximum id for a tribe object is 7, but (at least for programming purposes) there is no limit to the id number of a unit.",
                            "finish": 6200030,
                            "name": "id",
                            "start": 6200028,
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "desc": "Returns the improvement with id `id` (0-39), or `nil` if it doesn't exist.",
                    "finish": 6200035,
                    "returns": [
                        {
                            "name": "improvement",
                            "type": "function.return",
                            "view": "improvementObject|nil"
                        }
                    ],
                    "start": 6200000,
                    "type": "function",
                    "view": "function civ.getImprovement(id: integer)\n  -> improvement: improvementObject|nil"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 6200027,
                "name": "getImprovement",
                "start": 6200009,
                "type": "setfield"
            },
            {
                "desc": "Returns the map with id `id` (0-3) or `nil` if it doesn't exist.",
                "extends": {
                    "args": [
                        {
                            "desc": "An id number is a positive integer that corresponds to an object in the game or the rules.txt file. If you know what <em>kind</em> of object the id corresponds to, you can then use the id to get the specific item in question. The maximum value for an id will depend on its corresponding object. For example, the maximum id for a tribe object is 7, but (at least for programming purposes) there is no limit to the id number of a unit.",
                            "finish": 6250022,
                            "name": "id",
                            "start": 6250020,
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "desc": "Returns the map with id `id` (0-3) or `nil` if it doesn't exist.",
                    "finish": 6250027,
                    "returns": [
                        {
                            "name": "map",
                            "type": "function.return",
                            "view": "mapObject|nil"
                        }
                    ],
                    "start": 6250000,
                    "type": "function",
                    "view": "function civ.getMap(id: integer)\n  -> map: mapObject|nil"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 6250019,
                "name": "getMap",
                "start": 6250009,
                "type": "setfield"
            },
            {
                "desc": "Alias for getAtlasDimensions. (deprecated since 0.16)",
                "extends": {
                    "args": [],
                    "desc": "Alias for getAtlasDimensions. (deprecated since 0.16)",
                    "finish": 6320035,
                    "returns": [
                        {
                            "name": "width",
                            "type": "function.return",
                            "view": "integer"
                        },
                        {
                            "name": "height",
                            "type": "function.return",
                            "view": "integer"
                        },
                        {
                            "name": "number_of_maps",
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": 6320000,
                    "type": "function",
                    "view": "function civ.getMapDimensions()\n  -> width: integer\n  2. height: integer\n  3. number_of_maps: integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 6320029,
                "name": "getMapDimensions",
                "start": 6320009,
                "type": "setfield"
            },
            {
                "desc": "Returns the city currently opened in the city window, `nil` if the city window is closed.",
                "extends": {
                    "args": [],
                    "desc": "Returns the city currently opened in the city window, `nil` if the city window is closed.",
                    "finish": 6360030,
                    "returns": [
                        {
                            "name": "city",
                            "type": "function.return",
                            "view": "cityObject|nil"
                        }
                    ],
                    "start": 6360000,
                    "type": "function",
                    "view": "function civ.getOpenCity()\n  -> city: cityObject|nil"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 6360024,
                "name": "getOpenCity",
                "start": 6360009,
                "type": "setfield"
            },
            {
                "desc": "Returns the player's tribe.",
                "extends": {
                    "args": [],
                    "desc": "Returns the player's tribe.",
                    "finish": 6400033,
                    "returns": [
                        {
                            "name": "tribe",
                            "type": "function.return",
                            "view": "tribeObject"
                        }
                    ],
                    "start": 6400000,
                    "type": "function",
                    "view": "function civ.getPlayerTribe()\n  -> tribe: tribeObject"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 6400027,
                "name": "getPlayerTribe",
                "start": 6400009,
                "type": "setfield"
            },
            {
                "desc": "Returns the tech with id `id` (0-99), or `nil` if it doesn't exist.",
                "extends": {
                    "args": [
                        {
                            "desc": "An id number is a positive integer that corresponds to an object in the game or the rules.txt file. If you know what <em>kind</em> of object the id corresponds to, you can then use the id to get the specific item in question. The maximum value for an id will depend on its corresponding object. For example, the maximum id for a tribe object is 7, but (at least for programming purposes) there is no limit to the id number of a unit.",
                            "finish": 6450023,
                            "name": "id",
                            "start": 6450021,
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "desc": "Returns the tech with id `id` (0-99), or `nil` if it doesn't exist.",
                    "finish": 6450028,
                    "returns": [
                        {
                            "name": "tech",
                            "type": "function.return",
                            "view": "techObject|nil"
                        }
                    ],
                    "start": 6450000,
                    "type": "function",
                    "view": "function civ.getTech(id: integer)\n  -> tech: techObject|nil"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 6450020,
                "name": "getTech",
                "start": 6450009,
                "type": "setfield"
            },
            {
                "desc": "Returns the terrain object for the given map, terrain type and resource. Out of bound id's cause errors.\n\n@*param* `map` โ The map for the terrain we want, or its id.\n\n@*param* `terrainId` โ The id number of the base terrain type sought.\n\n```lua\nresource:\n    | 0 -- no resource\n    | 1 -- fish resource\n    | 2 -- whales resource\n```",
                "extends": {
                    "args": [
                        {
                            "desc": "The map for the terrain we want, or its id.",
                            "finish": 6550027,
                            "name": "map",
                            "start": 6550024,
                            "type": "local",
                            "view": "integer|mapObject"
                        },
                        {
                            "desc": "The id number of the base terrain type sought.",
                            "finish": 6550037,
                            "name": "terrainId",
                            "start": 6550028,
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": 6550046,
                            "name": "resource",
                            "start": 6550038,
                            "type": "local",
                            "view": "0|1|2"
                        }
                    ],
                    "desc": "Returns the terrain object for the given map, terrain type and resource. Out of bound id's cause errors.\n\n@*param* `map` โ The map for the terrain we want, or its id.\n\n@*param* `terrainId` โ The id number of the base terrain type sought.\n\n```lua\nresource:\n    | 0 -- no resource\n    | 1 -- fish resource\n    | 2 -- whales resource\n```",
                    "finish": 6550051,
                    "returns": [
                        {
                            "name": "terrain",
                            "type": "function.return",
                            "view": "terrainObject"
                        }
                    ],
                    "start": 6550000,
                    "type": "function",
                    "view": "function civ.getTerrain(map: integer|mapObject, terrainId: integer, resource: 0|1|2)\n  -> terrain: terrainObject"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 6550023,
                "name": "getTerrain",
                "start": 6550009,
                "type": "setfield"
            },
            {
                "desc": "Returns the tile with coordinates `x`, `y`, `z`, or `nil` if it doesn't exist.\n\n@*param* `x` โ the 'x' coordinate of the tile\n\n@*param* `y` โ the 'y' coordinate of the tile\n\n@*param* `z` โ the 'z' coordinate of the tile ([0,3])",
                "extends": {
                    "args": [
                        {
                            "desc": "the 'x' coordinate of the tile",
                            "finish": 6620022,
                            "name": "x",
                            "start": 6620021,
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "desc": "the 'y' coordinate of the tile",
                            "finish": 6620024,
                            "name": "y",
                            "start": 6620023,
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "desc": "the 'z' coordinate of the tile ([0,3])",
                            "finish": 6620026,
                            "name": "z",
                            "start": 6620025,
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "desc": "Returns the tile with coordinates `x`, `y`, `z`, or `nil` if it doesn't exist.\n\n@*param* `x` โ the 'x' coordinate of the tile\n\n@*param* `y` โ the 'y' coordinate of the tile\n\n@*param* `z` โ the 'z' coordinate of the tile ([0,3])",
                    "finish": 6620031,
                    "returns": [
                        {
                            "name": "tile",
                            "type": "function.return",
                            "view": "tileObject|nil"
                        }
                    ],
                    "start": 6620000,
                    "type": "function",
                    "view": "function civ.getTile(x: integer, y: integer, z: integer)\n  -> tile: tileObject|nil"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 6620020,
                "name": "getTile",
                "start": 6620009,
                "type": "setfield"
            },
            {
                "desc": "Returns the absolute path of the ToT installation directory.\n\n@*return* โ ",
                "extends": {
                    "args": [],
                    "desc": "Returns the absolute path of the ToT installation directory.\n\n@*return* โ ",
                    "finish": 6660028,
                    "returns": [
                        {
                            "desc": "",
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": 6660000,
                    "type": "function",
                    "view": "function civ.getToTDir()\n  -> string"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 6660022,
                "name": "getToTDir",
                "start": 6660009,
                "type": "setfield"
            },
            {
                "desc": "Returns the tribe with id `id` (0-7), or `nil` if it doesn't exist.",
                "extends": {
                    "args": [
                        {
                            "desc": "An id number is a positive integer that corresponds to an object in the game or the rules.txt file. If you know what <em>kind</em> of object the id corresponds to, you can then use the id to get the specific item in question. The maximum value for an id will depend on its corresponding object. For example, the maximum id for a tribe object is 7, but (at least for programming purposes) there is no limit to the id number of a unit.",
                            "finish": 6710024,
                            "name": "id",
                            "start": 6710022,
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "desc": "Returns the tribe with id `id` (0-7), or `nil` if it doesn't exist.",
                    "finish": 6710029,
                    "returns": [
                        {
                            "name": "tribe",
                            "type": "function.return",
                            "view": "tribeObject|nil"
                        }
                    ],
                    "start": 6710000,
                    "type": "function",
                    "view": "function civ.getTribe(id: integer)\n  -> tribe: tribeObject|nil"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 6710021,
                "name": "getTribe",
                "start": 6710009,
                "type": "setfield"
            },
            {
                "desc": "Returns the current turn number.\n\n@*return* โ ",
                "extends": {
                    "args": [],
                    "desc": "Returns the current turn number.\n\n@*return* โ ",
                    "finish": 6750026,
                    "returns": [
                        {
                            "desc": "",
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": 6750000,
                    "type": "function",
                    "view": "function civ.getTurn()\n  -> integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 6750020,
                "name": "getTurn",
                "start": 6750009,
                "type": "setfield"
            },
            {
                "desc": "Returns the unit with id `id`, or `nil` if it doesn't exist.",
                "extends": {
                    "args": [
                        {
                            "desc": "An id number is a positive integer that corresponds to an object in the game or the rules.txt file. If you know what <em>kind</em> of object the id corresponds to, you can then use the id to get the specific item in question. The maximum value for an id will depend on its corresponding object. For example, the maximum id for a tribe object is 7, but (at least for programming purposes) there is no limit to the id number of a unit.",
                            "finish": 6800023,
                            "name": "id",
                            "start": 6800021,
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "desc": "Returns the unit with id `id`, or `nil` if it doesn't exist.",
                    "finish": 6800028,
                    "returns": [
                        {
                            "name": "unit",
                            "type": "function.return",
                            "view": "unitObject|nil"
                        }
                    ],
                    "start": 6800000,
                    "type": "function",
                    "view": "function civ.getUnit(id: integer)\n  -> unit: unitObject|nil"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 6800020,
                "name": "getUnit",
                "start": 6800009,
                "type": "setfield"
            },
            {
                "desc": "Returns the unit type with id `id`, or `nil` if it doesn't exist.",
                "extends": {
                    "args": [
                        {
                            "desc": "An id number is a positive integer that corresponds to an object in the game or the rules.txt file. If you know what <em>kind</em> of object the id corresponds to, you can then use the id to get the specific item in question. The maximum value for an id will depend on its corresponding object. For example, the maximum id for a tribe object is 7, but (at least for programming purposes) there is no limit to the id number of a unit.",
                            "finish": 6850027,
                            "name": "id",
                            "start": 6850025,
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "desc": "Returns the unit type with id `id`, or `nil` if it doesn't exist.",
                    "finish": 6850032,
                    "returns": [
                        {
                            "name": "unitType",
                            "type": "function.return",
                            "view": "unitTypeObject|nil"
                        }
                    ],
                    "start": 6850000,
                    "type": "function",
                    "view": "function civ.getUnitType(id: integer)\n  -> unitType: unitTypeObject|nil"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 6850024,
                "name": "getUnitType",
                "start": 6850009,
                "type": "setfield"
            },
            {
                "desc": "Returns the wonder with id `id` (0-27), or `nil` if it doesn't exist.",
                "extends": {
                    "args": [
                        {
                            "desc": "An id number is a positive integer that corresponds to an object in the game or the rules.txt file. If you know what <em>kind</em> of object the id corresponds to, you can then use the id to get the specific item in question. The maximum value for an id will depend on its corresponding object. For example, the maximum id for a tribe object is 7, but (at least for programming purposes) there is no limit to the id number of a unit.",
                            "finish": 6900025,
                            "name": "id",
                            "start": 6900023,
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "desc": "Returns the wonder with id `id` (0-27), or `nil` if it doesn't exist.",
                    "finish": 6900030,
                    "returns": [
                        {
                            "name": "wonder",
                            "type": "function.return",
                            "view": "wonderObject|nil"
                        }
                    ],
                    "start": 6900000,
                    "type": "function",
                    "view": "function civ.getWonder(id: integer)\n  -> wonder: wonderObject|nil"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 6900022,
                "name": "getWonder",
                "start": 6900009,
                "type": "setfield"
            },
            {
                "desc": "Gives tech `tech` to tribe `tribe`.",
                "extends": {
                    "args": [
                        {
                            "desc": "A tribe object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a tribe, which is to say the characteristics of the tribe overall, in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tribe)",
                            "finish": 6950027,
                            "name": "tribe",
                            "start": 6950022,
                            "type": "local",
                            "view": "tribeObject"
                        },
                        {
                            "desc": "A technology object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a technology entry in the rules.txt, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tech)",
                            "finish": 6950032,
                            "name": "tech",
                            "start": 6950028,
                            "type": "local",
                            "view": "techObject"
                        }
                    ],
                    "desc": "Gives tech `tech` to tribe `tribe`.",
                    "finish": 6950037,
                    "start": 6950000,
                    "type": "function",
                    "view": "function civ.giveTech(tribe: tribeObject, tech: techObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 6950021,
                "name": "giveTech",
                "start": 6950009,
                "type": "setfield"
            },
            {
                "desc": "Returns `true` if city `city` has improvement `improvement`, `false` otherwise.",
                "extends": {
                    "args": [
                        {
                            "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
                            "finish": 7000032,
                            "name": "city",
                            "start": 7000028,
                            "type": "local",
                            "view": "cityObject"
                        },
                        {
                            "desc": "An improvement object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents an improvement entry in the rules.txt, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#improvement)",
                            "finish": 7000044,
                            "name": "improvement",
                            "start": 7000033,
                            "type": "local",
                            "view": "improvementObject"
                        }
                    ],
                    "desc": "Returns `true` if city `city` has improvement `improvement`, `false` otherwise.",
                    "finish": 7000049,
                    "start": 7000000,
                    "type": "function",
                    "view": "function civ.hasImprovement(city: cityObject, improvement: improvementObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 7000027,
                "name": "hasImprovement",
                "start": 7000009,
                "type": "setfield"
            },
            {
                "desc": "Returns `true` if tribe `tribe` has tech `tech`, `false` otherwise.\n\n@*return* โ ",
                "extends": {
                    "args": [
                        {
                            "desc": "A tribe object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a tribe, which is to say the characteristics of the tribe overall, in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tribe)",
                            "finish": 7060026,
                            "name": "tribe",
                            "start": 7060021,
                            "type": "local",
                            "view": "tribeObject"
                        },
                        {
                            "desc": "A technology object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a technology entry in the rules.txt, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tech)",
                            "finish": 7060031,
                            "name": "tech",
                            "start": 7060027,
                            "type": "local",
                            "view": "techObject"
                        }
                    ],
                    "desc": "Returns `true` if tribe `tribe` has tech `tech`, `false` otherwise.\n\n@*return* โ ",
                    "finish": 7060036,
                    "returns": [
                        {
                            "desc": "",
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 7060000,
                    "type": "function",
                    "view": "function civ.hasTech(tribe: tribeObject, tech: techObject)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 7060020,
                "name": "hasTech",
                "start": 7060009,
                "type": "setfield"
            },
            {
                "desc": "Returns `true` if `object` is a base terrain, `false` otherwise.\n\n@*return* โ ",
                "extends": {
                    "args": [
                        {
                            "finish": 7110033,
                            "name": "object",
                            "start": 7110027,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "Returns `true` if `object` is a base terrain, `false` otherwise.\n\n@*return* โ ",
                    "finish": 7110038,
                    "returns": [
                        {
                            "desc": "",
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 7110000,
                    "type": "function",
                    "view": "function civ.isBaseTerrain(object: any)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 7110026,
                "name": "isBaseTerrain",
                "start": 7110009,
                "type": "setfield"
            },
            {
                "desc": "Returns `true` if `object` is a city, `false` otherwise.\n\n@*return* โ ",
                "extends": {
                    "args": [
                        {
                            "finish": 7160026,
                            "name": "object",
                            "start": 7160020,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "Returns `true` if `object` is a city, `false` otherwise.\n\n@*return* โ ",
                    "finish": 7160031,
                    "returns": [
                        {
                            "desc": "",
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 7160000,
                    "type": "function",
                    "view": "function civ.isCity(object: any)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 7160019,
                "name": "isCity",
                "start": 7160009,
                "type": "setfield"
            },
            {
                "desc": "Returns `true` if `object` is a dialog, `false` otherwise.\n\n@*return* โ ",
                "extends": {
                    "args": [
                        {
                            "finish": 7210028,
                            "name": "object",
                            "start": 7210022,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "Returns `true` if `object` is a dialog, `false` otherwise.\n\n@*return* โ ",
                    "finish": 7210033,
                    "returns": [
                        {
                            "desc": "",
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 7210000,
                    "type": "function",
                    "view": "function civ.isDialog(object: any)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 7210021,
                "name": "isDialog",
                "start": 7210009,
                "type": "setfield"
            },
            {
                "desc": "Returns `true` if `object` is an image, `false` otherwise.\n\n@*return* โ ",
                "extends": {
                    "args": [
                        {
                            "finish": 7260027,
                            "name": "object",
                            "start": 7260021,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "Returns `true` if `object` is an image, `false` otherwise.\n\n@*return* โ ",
                    "finish": 7260032,
                    "returns": [
                        {
                            "desc": "",
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 7260000,
                    "type": "function",
                    "view": "function civ.isImage(object: any)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 7260020,
                "name": "isImage",
                "start": 7260009,
                "type": "setfield"
            },
            {
                "desc": "Returns `true` if `object` is a city improvement, `false` otherwise.\n\n@*return* โ ",
                "extends": {
                    "args": [
                        {
                            "finish": 7310033,
                            "name": "object",
                            "start": 7310027,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "Returns `true` if `object` is a city improvement, `false` otherwise.\n\n@*return* โ ",
                    "finish": 7310038,
                    "returns": [
                        {
                            "desc": "",
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 7310000,
                    "type": "function",
                    "view": "function civ.isImprovement(object: any)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 7310026,
                "name": "isImprovement",
                "start": 7310009,
                "type": "setfield"
            },
            {
                "desc": "Returns `true` if `object` is a leader, `false` otherwise.\n\n@*return* โ ",
                "extends": {
                    "args": [
                        {
                            "finish": 7360028,
                            "name": "object",
                            "start": 7360022,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "Returns `true` if `object` is a leader, `false` otherwise.\n\n@*return* โ ",
                    "finish": 7360033,
                    "returns": [
                        {
                            "desc": "",
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 7360000,
                    "type": "function",
                    "view": "function civ.isLeader(object: any)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 7360021,
                "name": "isLeader",
                "start": 7360009,
                "type": "setfield"
            },
            {
                "desc": "Returns `true` if `object` is a map, `false` otherwise.\n\n@*return* โ ",
                "extends": {
                    "args": [
                        {
                            "finish": 7410025,
                            "name": "object",
                            "start": 7410019,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "Returns `true` if `object` is a map, `false` otherwise.\n\n@*return* โ ",
                    "finish": 7410030,
                    "returns": [
                        {
                            "desc": "",
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 7410000,
                    "type": "function",
                    "view": "function civ.isMap(object: any)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 7410018,
                "name": "isMap",
                "start": 7410009,
                "type": "setfield"
            },
            {
                "desc": "Returns `true` if `object` is a tech, `false` otherwise.\n\n@*return* โ ",
                "extends": {
                    "args": [
                        {
                            "finish": 7460026,
                            "name": "object",
                            "start": 7460020,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "Returns `true` if `object` is a tech, `false` otherwise.\n\n@*return* โ ",
                    "finish": 7460031,
                    "returns": [
                        {
                            "desc": "",
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 7460000,
                    "type": "function",
                    "view": "function civ.isTech(object: any)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 7460019,
                "name": "isTech",
                "start": 7460009,
                "type": "setfield"
            },
            {
                "desc": "Returns `true` if `object` is a terrain, `false` otherwise.\n\n@*return* โ ",
                "extends": {
                    "args": [
                        {
                            "finish": 7510029,
                            "name": "object",
                            "start": 7510023,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "Returns `true` if `object` is a terrain, `false` otherwise.\n\n@*return* โ ",
                    "finish": 7510034,
                    "returns": [
                        {
                            "desc": "",
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 7510000,
                    "type": "function",
                    "view": "function civ.isTerrain(object: any)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 7510022,
                "name": "isTerrain",
                "start": 7510009,
                "type": "setfield"
            },
            {
                "desc": "Returns `true` if `object` is a tile, `false` otherwise.\n\n@*return* โ ",
                "extends": {
                    "args": [
                        {
                            "finish": 7560026,
                            "name": "object",
                            "start": 7560020,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "Returns `true` if `object` is a tile, `false` otherwise.\n\n@*return* โ ",
                    "finish": 7560031,
                    "returns": [
                        {
                            "desc": "",
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 7560000,
                    "type": "function",
                    "view": "function civ.isTile(object: any)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 7560019,
                "name": "isTile",
                "start": 7560009,
                "type": "setfield"
            },
            {
                "desc": "Returns `true` if `object` is a trade route, `false` otherwise.\n\n@*return* โ ",
                "extends": {
                    "args": [
                        {
                            "finish": 8360032,
                            "name": "object",
                            "start": 8360026,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "Returns `true` if `object` is a trade route, `false` otherwise.\n\n@*return* โ ",
                    "finish": 8360037,
                    "returns": [
                        {
                            "desc": "",
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 8360000,
                    "type": "function",
                    "view": "function civ.isTradeRoute(object: any)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 8360025,
                "name": "isTradeRoute",
                "start": 8360009,
                "type": "setfield"
            },
            {
                "desc": "Returns `true` if `object` is a tribe, `false` otherwise.\n\n@*return* โ ",
                "extends": {
                    "args": [
                        {
                            "finish": 7610027,
                            "name": "object",
                            "start": 7610021,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "Returns `true` if `object` is a tribe, `false` otherwise.\n\n@*return* โ ",
                    "finish": 7610032,
                    "returns": [
                        {
                            "desc": "",
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 7610000,
                    "type": "function",
                    "view": "function civ.isTribe(object: any)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 7610020,
                "name": "isTribe",
                "start": 7610009,
                "type": "setfield"
            },
            {
                "desc": "Returns `true` if `object` is a unit, `false` otherwise.\n\n@*return* โ ",
                "extends": {
                    "args": [
                        {
                            "finish": 7660026,
                            "name": "object",
                            "start": 7660020,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "Returns `true` if `object` is a unit, `false` otherwise.\n\n@*return* โ ",
                    "finish": 7660031,
                    "returns": [
                        {
                            "desc": "",
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 7660000,
                    "type": "function",
                    "view": "function civ.isUnit(object: any)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 7660019,
                "name": "isUnit",
                "start": 7660009,
                "type": "setfield"
            },
            {
                "desc": "Returns `true` if `object` is a unit type, `false` otherwise.\n\n@*return* โ ",
                "extends": {
                    "args": [
                        {
                            "finish": 7710030,
                            "name": "object",
                            "start": 7710024,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "Returns `true` if `object` is a unit type, `false` otherwise.\n\n@*return* โ ",
                    "finish": 7710035,
                    "returns": [
                        {
                            "desc": "",
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 7710000,
                    "type": "function",
                    "view": "function civ.isUnitType(object: any)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 7710023,
                "name": "isUnitType",
                "start": 7710009,
                "type": "setfield"
            },
            {
                "desc": "Returns `true` if `object` is a wonder, `false` otherwise.\n\n@*return* โ ",
                "extends": {
                    "args": [
                        {
                            "finish": 7760028,
                            "name": "object",
                            "start": 7760022,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "Returns `true` if `object` is a wonder, `false` otherwise.\n\n@*return* โ ",
                    "finish": 7760033,
                    "returns": [
                        {
                            "desc": "",
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 7760000,
                    "type": "function",
                    "view": "function civ.isWonder(object: any)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 7760021,
                "name": "isWonder",
                "start": 7760009,
                "type": "setfield"
            },
            {
                "desc": "Returns an iterator yielding all cities in the game.\n\n@*return* โ ",
                "extends": {
                    "args": [],
                    "desc": "Returns an iterator yielding all cities in the game.\n\n@*return* โ ",
                    "finish": 7800032,
                    "returns": [
                        {
                            "desc": "",
                            "type": "function.return",
                            "view": "iterator"
                        }
                    ],
                    "start": 7800000,
                    "type": "function",
                    "view": "function civ.iterateCities()\n  -> iterator"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 7800026,
                "name": "iterateCities",
                "start": 7800009,
                "type": "setfield"
            },
            {
                "desc": "Returns an iterator yielding all units in the game.\n\n@*return* โ ",
                "extends": {
                    "args": [],
                    "desc": "Returns an iterator yielding all units in the game.\n\n@*return* โ ",
                    "finish": 7840031,
                    "returns": [
                        {
                            "desc": "",
                            "type": "function.return",
                            "view": "iterator"
                        }
                    ],
                    "start": 7840000,
                    "type": "function",
                    "view": "function civ.iterateUnits()\n  -> iterator"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 7840025,
                "name": "iterateUnits",
                "start": 7840009,
                "type": "setfield"
            },
            {
                "desc": "Removes tribe `tribe` from the game. All its cities and units are removed.",
                "extends": {
                    "args": [
                        {
                            "desc": "A tribe object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a tribe, which is to say the characteristics of the tribe overall, in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tribe)",
                            "finish": 7880028,
                            "name": "tribe",
                            "start": 7880023,
                            "type": "local",
                            "view": "tribeObject"
                        }
                    ],
                    "desc": "Removes tribe `tribe` from the game. All its cities and units are removed.",
                    "finish": 7880033,
                    "start": 7880000,
                    "type": "function",
                    "view": "function civ.killTribe(tribe: tribeObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 7880022,
                "name": "killTribe",
                "start": 7880009,
                "type": "setfield"
            },
            {
                "desc": "Cancels any peace treaties between tribe `who` and tribe `whom`, and make `who` declare war on `whom`.\n\n@*param* `who` โ The tribe declaring war.\n\n@*param* `whom` โ The tribe not declaring war.",
                "extends": {
                    "args": [
                        {
                            "desc": "The tribe declaring war.",
                            "finish": 7930031,
                            "name": "who",
                            "start": 7930028,
                            "type": "local",
                            "view": "tribeObject"
                        },
                        {
                            "desc": "The tribe not declaring war.",
                            "finish": 7930036,
                            "name": "whom",
                            "start": 7930032,
                            "type": "local",
                            "view": "tribeObject"
                        }
                    ],
                    "desc": "Cancels any peace treaties between tribe `who` and tribe `whom`, and make `who` declare war on `whom`.\n\n@*param* `who` โ The tribe declaring war.\n\n@*param* `whom` โ The tribe not declaring war.",
                    "finish": 7930041,
                    "start": 7930000,
                    "type": "function",
                    "view": "function civ.makeAggression(who: tribeObject, whom: tribeObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 7930027,
                "name": "makeAggression",
                "start": 7930009,
                "type": "setfield"
            },
            {
                "desc": "Plays CD track `trackNo`, or with the DirectShow music patch enabled, play the file given by `filename`, where `filename` is relative to the 'Music' directory.\n\n@*param* `trackOrFilename` โ Track number of cd or filename of music.",
                "extends": {
                    "args": [
                        {
                            "desc": "Track number of cd or filename of music.",
                            "finish": 7970038,
                            "name": "trackOrFilename",
                            "start": 7970023,
                            "type": "local",
                            "view": "string|integer"
                        }
                    ],
                    "desc": "Plays CD track `trackNo`, or with the DirectShow music patch enabled, play the file given by `filename`, where `filename` is relative to the 'Music' directory.\n\n@*param* `trackOrFilename` โ Track number of cd or filename of music.",
                    "finish": 7970043,
                    "start": 7970000,
                    "type": "function",
                    "view": "function civ.playMusic(trackOrFilename: string|integer)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 7970022,
                "name": "playMusic",
                "start": 7970009,
                "type": "setfield"
            },
            {
                "desc": "Plays the sound file given by `filename`.",
                "extends": {
                    "args": [
                        {
                            "desc": "A string is a data type native to Lua which consists of a sequence of characters. These often represent text to be displayed, but are also useful in other contexts. Strings are commonly used as keys in tables, since they make code more readable.\n[Programming in Lua, 2.4 -- Strings](https://www.lua.org/pil/2.4.html)",
                            "finish": 8010031,
                            "name": "filename",
                            "start": 8010023,
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "Plays the sound file given by `filename`.",
                    "finish": 8010036,
                    "start": 8010000,
                    "type": "function",
                    "view": "function civ.playSound(filename: string)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 8010022,
                "name": "playSound",
                "start": 8010009,
                "type": "setfield"
            },
            {
                "desc": "Plays the video file given by `filename`.",
                "extends": {
                    "args": [
                        {
                            "desc": "A string is a data type native to Lua which consists of a sequence of characters. These often represent text to be displayed, but are also useful in other contexts. Strings are commonly used as keys in tables, since they make code more readable.\n[Programming in Lua, 2.4 -- Strings](https://www.lua.org/pil/2.4.html)",
                            "finish": 8050031,
                            "name": "filename",
                            "start": 8050023,
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "Plays the video file given by `filename`.",
                    "finish": 8050036,
                    "start": 8050000,
                    "type": "function",
                    "view": "function civ.playVideo(filename: string)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 8050022,
                "name": "playVideo",
                "start": 8050009,
                "type": "setfield"
            },
            {
                "desc": "Removes city improvement `improvement` from city `city`.",
                "extends": {
                    "args": [
                        {
                            "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
                            "finish": 8100035,
                            "name": "city",
                            "start": 8100031,
                            "type": "local",
                            "view": "cityObject"
                        },
                        {
                            "desc": "An improvement object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents an improvement entry in the rules.txt, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#improvement)",
                            "finish": 8100047,
                            "name": "improvement",
                            "start": 8100036,
                            "type": "local",
                            "view": "improvementObject"
                        }
                    ],
                    "desc": "Removes city improvement `improvement` from city `city`.",
                    "finish": 8100052,
                    "start": 8100000,
                    "type": "function",
                    "view": "function civ.removeImprovement(city: cityObject, improvement: improvementObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 8100030,
                "name": "removeImprovement",
                "start": 8100009,
                "type": "setfield"
            },
            {
                "desc": "",
                "extends": {
                    "finish": 9490013,
                    "start": 9490011,
                    "type": "table",
                    "view": "civ.scen"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 9490008,
                "name": "scen",
                "start": 9490000,
                "type": "setfield"
            },
            {
                "desc": "Sleeps for the given number of milliseconds.",
                "extends": {
                    "args": [
                        {
                            "desc": "An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 8140031,
                            "name": "milliseconds",
                            "start": 8140019,
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "desc": "Sleeps for the given number of milliseconds.",
                    "finish": 8140036,
                    "start": 8140000,
                    "type": "function",
                    "view": "function civ.sleep(milliseconds: integer)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 8140018,
                "name": "sleep",
                "start": 8140009,
                "type": "setfield"
            },
            {
                "desc": "Takes away tech `tech` from tribe `tribe`, the optional `collapse` parameter determines whether to take away all techs that have `tech` as a prerequisite somewhere up the tree.\n\n@*param* `collapse` โ false by default",
                "extends": {
                    "args": [
                        {
                            "desc": "A tribe object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a tribe, which is to say the characteristics of the tribe overall, in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tribe)",
                            "finish": 8210027,
                            "name": "tribe",
                            "start": 8210022,
                            "type": "local",
                            "view": "tribeObject"
                        },
                        {
                            "desc": "A technology object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a technology entry in the rules.txt, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tech)",
                            "finish": 8210032,
                            "name": "tech",
                            "start": 8210028,
                            "type": "local",
                            "view": "techObject"
                        },
                        {
                            "desc": "false by default",
                            "finish": 8210041,
                            "name": "collapse",
                            "start": 8210033,
                            "type": "local",
                            "view": "boolean?"
                        }
                    ],
                    "desc": "Takes away tech `tech` from tribe `tribe`, the optional `collapse` parameter determines whether to take away all techs that have `tech` as a prerequisite somewhere up the tree.\n\n@*param* `collapse` โ false by default",
                    "finish": 8210046,
                    "start": 8210000,
                    "type": "function",
                    "view": "function civ.takeTech(tribe: tribeObject, tech: techObject, collapse?: boolean)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 8210021,
                "name": "takeTech",
                "start": 8210009,
                "type": "setfield"
            },
            {
                "desc": "Teleports (i.e. moves at no cost) unit `unit` to tile `tile`. The unit is moved regardless of whether it is a valid location for the unit. To check this, see `civ.canEnter` and `civlua.isValidUnitLocation`.",
                "extends": {
                    "args": [
                        {
                            "desc": "A unit object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit in the game, and provides a means of interacting with it. This should not be confused with the unit type object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unit)",
                            "finish": 8260030,
                            "name": "unit",
                            "start": 8260026,
                            "type": "local",
                            "view": "unitObject"
                        },
                        {
                            "desc": "A tile object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a map \"square\" in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tile)",
                            "finish": 8260035,
                            "name": "tile",
                            "start": 8260031,
                            "type": "local",
                            "view": "tileObject"
                        }
                    ],
                    "desc": "Teleports (i.e. moves at no cost) unit `unit` to tile `tile`. The unit is moved regardless of whether it is a valid location for the unit. To check this, see `civ.canEnter` and `civlua.isValidUnitLocation`.",
                    "finish": 8260040,
                    "start": 8260000,
                    "type": "function",
                    "view": "function civ.teleportUnit(unit: unitObject, tile: tileObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 8260025,
                "name": "teleportUnit",
                "start": 8260009,
                "type": "setfield"
            },
            {
                "desc": "",
                "extends": {
                    "finish": 8400011,
                    "start": 8400009,
                    "type": "table",
                    "view": "civ.ui"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 8400006,
                "name": "ui",
                "start": 8400000,
                "type": "setfield"
            }
        ],
        "name": "civ",
        "type": "type"
    },
    {
        "defines": [
            {
                "extends": {
                    "finish": 5250008,
                    "start": 5250006,
                    "type": "table",
                    "view": "civ"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 5250003,
                "start": 5250000,
                "type": "setglobal"
            }
        ],
        "desc": " The civ module provides functions which can interact directly with the game.  It is always in scope, so you never need to use a `require` call in order to access it.",
        "name": "civ",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
                            "finish": 5300032,
                            "name": "city",
                            "start": 5300028,
                            "type": "local",
                            "view": "cityObject"
                        },
                        {
                            "desc": "An improvement object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents an improvement entry in the rules.txt, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#improvement)",
                            "finish": 5300044,
                            "name": "improvement",
                            "start": 5300033,
                            "type": "local",
                            "view": "improvementObject"
                        }
                    ],
                    "desc": "Adds city improvement `improvement` to city `city`.",
                    "finish": 5300049,
                    "start": 5300000,
                    "type": "function",
                    "view": "function civ.addImprovement(city: cityObject, improvement: improvementObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 5300027,
                "start": 5300009,
                "type": "setfield"
            }
        ],
        "desc": "Adds city improvement `improvement` to city `city`.",
        "name": "civ.addImprovement",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A unit type object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit type entry in the rules.txt, and provides a means of interacting with it. This should not be confused with the unit object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unittype)",
                            "finish": 5360030,
                            "name": "unitType",
                            "start": 5360022,
                            "type": "local",
                            "view": "unitTypeObject"
                        },
                        {
                            "desc": "A tile object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a map \"square\" in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tile)",
                            "finish": 5360035,
                            "name": "tile",
                            "start": 5360031,
                            "type": "local",
                            "view": "tileObject"
                        }
                    ],
                    "desc": "Returns `true` if the given unittype can enter tile `tile`, `false` otherwise.",
                    "finish": 5360040,
                    "returns": [
                        {
                            "name": "boolean",
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 5360000,
                    "type": "function",
                    "view": "function civ.canEnter(unitType: unitTypeObject, tile: tileObject)\n  -> boolean: boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 5360021,
                "start": 5360009,
                "type": "setfield"
            }
        ],
        "desc": "Returns `true` if the given unittype can enter tile `tile`, `false` otherwise.",
        "name": "civ.canEnter",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
                            "finish": 5410029,
                            "name": "city",
                            "start": 5410025,
                            "type": "local",
                            "view": "cityObject"
                        },
                        {
                            "desc": "A tribe object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a tribe, which is to say the characteristics of the tribe overall, in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tribe)",
                            "finish": 5410035,
                            "name": "tribe",
                            "start": 5410030,
                            "type": "local",
                            "view": "tribeObject"
                        }
                    ],
                    "desc": "Captures city `city` for tribe `tribe`.",
                    "finish": 5410040,
                    "start": 5410000,
                    "type": "function",
                    "view": "function civ.captureCity(city: cityObject, tribe: tribeObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 5410024,
                "start": 5410009,
                "type": "setfield"
            }
        ],
        "desc": "Captures city `city` for tribe `tribe`.",
        "name": "civ.captureCity",
        "type": "variable"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 8900020,
                "start": 8900010,
                "type": "doc.class"
            }
        ],
        "desc": "",
        "fields": [
            {
                "desc": "(get/set - ephemeral) Returns the distance from palace used in happiness calculations under Communism.",
                "extends": {
                    "finish": 8910041,
                    "start": 8910034,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 8910041,
                            "start": 8910034,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 8910041,
                "name": "communismPalaceDistance",
                "start": 8910010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set - ephemeral) Returns the amount of food eaten by each citizen each turn.",
                "extends": {
                    "finish": 8920027,
                    "start": 8920020,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 8920027,
                            "start": 8920020,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 8920027,
                "name": "foodEaten",
                "start": 8920010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set - ephemeral) Returns the number of rows in the food box.",
                "extends": {
                    "finish": 8930026,
                    "start": 8930019,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 8930026,
                            "start": 8930019,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 8930026,
                "name": "foodRows",
                "start": 8930010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set - ephemeral) Returns the bitmask for goodie huts.",
                "extends": {
                    "finish": 8940032,
                    "start": 8940025,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 8940032,
                            "start": 8940025,
                            "type": "doc.type.name",
                            "view": "bitmask"
                        }
                    ],
                    "view": "bitmask"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 8940032,
                "name": "goodieHutsMask",
                "start": 8940010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set - ephemeral) Returns whether helicopters (domain 1, range 0 units) pick up huts or not.",
                "extends": {
                    "finish": 8950033,
                    "start": 8950026,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 8950033,
                            "start": 8950026,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 8950033,
                "name": "helisPickupHuts",
                "start": 8950010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set - ephemeral) Returns the mass/thrust paradigm.",
                "extends": {
                    "finish": 8960036,
                    "start": 8960029,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 8960036,
                            "start": 8960029,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 8960036,
                "name": "massThrustParadigm",
                "start": 8960010,
                "type": "doc.field"
            },
            {
                "desc": "(get) Returns the number of unit types from the @COSMIC2 key of the same name.",
                "extends": {
                    "finish": 8970035,
                    "start": 8970028,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 8970035,
                            "start": 8970028,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 8970035,
                "name": "numberOfUnitTypes",
                "start": 8970010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set - ephemeral) Returns the maximum paradrop range.",
                "extends": {
                    "finish": 8980031,
                    "start": 8980024,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 8980031,
                            "start": 8980024,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 8980031,
                "name": "paradropRange",
                "start": 8980010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set - ephemeral) Returns the penalty to the civilization score for each betrayal of another tribe.",
                "extends": {
                    "finish": 8990033,
                    "start": 8990026,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 8990033,
                            "start": 8990026,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 8990033,
                "name": "penaltyBetrayal",
                "start": 8990010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set - ephemeral) Returns the shield penalty percentage for changing production types.",
                "extends": {
                    "finish": 9000035,
                    "start": 9000028,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 9000035,
                            "start": 9000028,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 9000035,
                "name": "prodChangePenalty",
                "start": 9000010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set - ephemeral) Returns the riot factor based on the number of cities.",
                "extends": {
                    "finish": 9010028,
                    "start": 9010021,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 9010028,
                            "start": 9010021,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 9010028,
                "name": "riotFactor",
                "start": 9010010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set - ephemeral) Returns the road movement multiplier.",
                "extends": {
                    "finish": 9020032,
                    "start": 9020025,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 9020032,
                            "start": 9020025,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 9020032,
                "name": "roadMultiplier",
                "start": 9020010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set - ephemeral) Returns the percentage of science lost under Fundamentalism.",
                "extends": {
                    "finish": 9030043,
                    "start": 9030036,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 9030043,
                            "start": 9030036,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 9030043,
                "name": "scienceLostFundamentalism",
                "start": 9030010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set - ephemeral) Returns the maximum effective science rate under Fundamentalism.",
                "extends": {
                    "finish": 9040043,
                    "start": 9040036,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 9040043,
                            "start": 9040036,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 9040043,
                "name": "scienceRateFundamentalism",
                "start": 9040010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set - ephemeral) Returns the civilization score for each landing on Alpha Centauri first. Multiplied by number of habitats and success probability.",
                "extends": {
                    "finish": 9050031,
                    "start": 9050024,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 9050031,
                            "start": 9050024,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 9050031,
                "name": "scoreCentauri",
                "start": 9050010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set - ephemeral) Returns the civilization score for each citizen.",
                "extends": {
                    "finish": 9060030,
                    "start": 9060023,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 9060030,
                            "start": 9060023,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 9060030,
                "name": "scoreCitizen",
                "start": 9060010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set - ephemeral) Returns the civilization score for each future technology researched.",
                "extends": {
                    "finish": 9070033,
                    "start": 9070026,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 9070033,
                            "start": 9070026,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 9070033,
                "name": "scoreFutureTech",
                "start": 9070010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set - ephemeral) Returns the civilization score for each turn of peace after turn 199.",
                "extends": {
                    "finish": 9080028,
                    "start": 9080021,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 9080028,
                            "start": 9080021,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 9080028,
                "name": "scorePeace",
                "start": 9080010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set - ephemeral) Returns the civilization score for each extant non-AI controlled polluted tile. Normally a negative value, i.e. a penalty.",
                "extends": {
                    "finish": 9090032,
                    "start": 9090025,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 9090032,
                            "start": 9090025,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 9090032,
                "name": "scorePollution",
                "start": 9090010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set - ephemeral) Returns the civilization score for each unit killed.",
                "extends": {
                    "finish": 9100033,
                    "start": 9100026,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 9100033,
                            "start": 9100026,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 9100033,
                "name": "scoreUnitKilled",
                "start": 9100010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set - ephemeral) Returns the civilization score for each wonder.",
                "extends": {
                    "finish": 9110029,
                    "start": 9110022,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 9110029,
                            "start": 9110022,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 9110029,
                "name": "scoreWonder",
                "start": 9110010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set - ephemeral) Returns the amount of food eaten by settlers for governments โฅ Communism.",
                "extends": {
                    "finish": 9120033,
                    "start": 9120026,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 9120033,
                            "start": 9120026,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 9120033,
                "name": "settlersEatHigh",
                "start": 9120010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set - ephemeral) Returns the amount of food eaten by settlers for governments โค Monarchy.",
                "extends": {
                    "finish": 9130032,
                    "start": 9130025,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 9130032,
                            "start": 9130025,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 9130032,
                "name": "settlersEatLow",
                "start": 9130010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set - ephemeral) Returns the number of rows in the shield box.",
                "extends": {
                    "finish": 9140028,
                    "start": 9140021,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 9140028,
                            "start": 9140021,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 9140028,
                "name": "shieldRows",
                "start": 9140010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set - ephemeral) Returns the city size that cannot be exceeded without an Aquaduct.",
                "extends": {
                    "finish": 9150030,
                    "start": 9150023,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 9150030,
                            "start": 9150023,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 9150030,
                "name": "sizeAquaduct",
                "start": 9150010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set - ephemeral) Returns the city size that cannot be exceeded without a Sewer System.",
                "extends": {
                    "finish": 9160027,
                    "start": 9160020,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 9160027,
                            "start": 9160020,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 9160027,
                "name": "sizeSewer",
                "start": 9160010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set - ephemeral) Returns the city size at which the first unhappy citizen appears at Chieftain difficulty.",
                "extends": {
                    "finish": 9170033,
                    "start": 9170026,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 9170033,
                            "start": 9170026,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 9170033,
                "name": "sizeUnhappiness",
                "start": 9170010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set - ephemeral) Returns the number of units that are free of support under Communism.",
                "extends": {
                    "finish": 9180034,
                    "start": 9180027,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 9180034,
                            "start": 9180027,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 9180034,
                "name": "supportCommunism",
                "start": 9180010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set - ephemeral) Returns the number of units that are free of support costs under Fundamentalism.",
                "extends": {
                    "finish": 9190039,
                    "start": 9190032,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 9190039,
                            "start": 9190032,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 9190039,
                "name": "supportFundamentalism",
                "start": 9190010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set - ephemeral) Returns the number of units that are free of support under Monarchy.",
                "extends": {
                    "finish": 9200033,
                    "start": 9200026,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 9200033,
                            "start": 9200026,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 9200033,
                "name": "supportMonarchy",
                "start": 9200010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set - ephemeral) Returns the tech paradigm. Scenarios use civ.scen.params.techParadigm instead of this value.",
                "extends": {
                    "finish": 9210030,
                    "start": 9210023,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 9210030,
                            "start": 9210023,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 9210030,
                "name": "techParadigm",
                "start": 9210010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set - ephemeral) Returns the base time needed for engineers to transform terrain.",
                "extends": {
                    "finish": 9220031,
                    "start": 9220024,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 9220031,
                            "start": 9220024,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 9220031,
                "name": "transformBase",
                "start": 9220010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set - ephemeral) Returns the 1 in x chance of a trireme getting lost at sea.",
                "extends": {
                    "finish": 9230029,
                    "start": 9230022,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 9230029,
                            "start": 9230022,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 9230029,
                "name": "triremeLost",
                "start": 9230010,
                "type": "doc.field"
            }
        ],
        "name": "civ.cosmic",
        "type": "type"
    },
    {
        "defines": [
            {
                "extends": {
                    "finish": 9240015,
                    "start": 9240013,
                    "type": "table",
                    "view": "civ.cosmic"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 9240010,
                "start": 9240000,
                "type": "setfield"
            }
        ],
        "desc": "",
        "name": "civ.cosmic",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A tribe object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a tribe, which is to say the characteristics of the tribe overall, in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tribe)",
                            "finish": 5470029,
                            "name": "tribe",
                            "start": 5470024,
                            "type": "local",
                            "view": "tribeObject"
                        },
                        {
                            "desc": "A tile object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a map \"square\" in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tile)",
                            "finish": 5470034,
                            "name": "tile",
                            "start": 5470030,
                            "type": "local",
                            "view": "tileObject"
                        }
                    ],
                    "desc": "Creates a city owned by `tribe` at the location given by `tile`. Returns `nil` if a city could not be created.",
                    "finish": 5470039,
                    "returns": [
                        {
                            "name": "city",
                            "type": "function.return",
                            "view": "cityObject|nil"
                        }
                    ],
                    "start": 5470000,
                    "type": "function",
                    "view": "function civ.createCity(tribe: tribeObject, tile: tileObject)\n  -> city: cityObject|nil"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 5470023,
                "start": 5470009,
                "type": "setfield"
            }
        ],
        "desc": "Creates a city owned by `tribe` at the location given by `tile`. Returns `nil` if a city could not be created.",
        "name": "civ.createCity",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A unit type object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit type entry in the rules.txt, and provides a means of interacting with it. This should not be confused with the unit object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unittype)",
                            "finish": 5540032,
                            "name": "unitType",
                            "start": 5540024,
                            "type": "local",
                            "view": "unitTypeObject"
                        },
                        {
                            "desc": "A tribe object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a tribe, which is to say the characteristics of the tribe overall, in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tribe)",
                            "finish": 5540038,
                            "name": "tribe",
                            "start": 5540033,
                            "type": "local",
                            "view": "tribeObject"
                        },
                        {
                            "desc": "A tile object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a map \"square\" in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tile)",
                            "finish": 5540043,
                            "name": "tile",
                            "start": 5540039,
                            "type": "local",
                            "view": "tileObject"
                        }
                    ],
                    "desc": "Creates a unit of type `unittype`, owned by `tribe`, at the location given by `tile`.",
                    "finish": 5540048,
                    "returns": [
                        {
                            "name": "unit",
                            "type": "function.return",
                            "view": "unitObject"
                        }
                    ],
                    "start": 5540000,
                    "type": "function",
                    "view": "function civ.createUnit(unitType: unitTypeObject, tribe: tribeObject, tile: tileObject)\n  -> unit: unitObject"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 5540023,
                "start": 5540009,
                "type": "setfield"
            }
        ],
        "desc": "Creates a unit of type `unittype`, owned by `tribe`, at the location given by `tile`.",
        "name": "civ.createUnit",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
                            "finish": 5580028,
                            "name": "city",
                            "start": 5580024,
                            "type": "local",
                            "view": "cityObject"
                        }
                    ],
                    "desc": "Deletes city `city` from the game.",
                    "finish": 5580033,
                    "start": 5580000,
                    "type": "function",
                    "view": "function civ.deleteCity(city: cityObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 5580023,
                "start": 5580009,
                "type": "setfield"
            }
        ],
        "desc": "Deletes city `city` from the game.",
        "name": "civ.deleteCity",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A unit object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit in the game, and provides a means of interacting with it. This should not be confused with the unit type object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unit)",
                            "finish": 5650028,
                            "name": "unit",
                            "start": 5650024,
                            "type": "local",
                            "view": "unitObject"
                        }
                    ],
                    "desc": "Deletes unit `unit` from the game.\nConsider unsing `gen.defeatUnit`, `gen.killUnit`, `gen.deleteUnit`, or `gen.replaceUnit` instead, for event integration.\n<br>Deprecation flag is only here so that designers see the above notice.",
                    "finish": 5650033,
                    "start": 5650000,
                    "type": "function",
                    "view": "function civ.deleteUnit(unit: unitObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 5650023,
                "start": 5650009,
                "type": "setfield"
            }
        ],
        "desc": "Deletes unit `unit` from the game.\nConsider unsing `gen.defeatUnit`, `gen.killUnit`, `gen.deleteUnit`, or `gen.replaceUnit` instead, for event integration.\n<br>Deprecation flag is only here so that designers see the above notice.",
        "name": "civ.deleteUnit",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A wonder object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a Wonder of the World, both its entry in the rules.txt and also its characteristics within the game.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#wonder)",
                            "finish": 5690033,
                            "name": "wonder",
                            "start": 5690027,
                            "type": "local",
                            "view": "wonderObject"
                        }
                    ],
                    "desc": "Destroys wonder `wonder`, removing it from the game, and marking it as 'lost'.",
                    "finish": 5690038,
                    "start": 5690000,
                    "type": "function",
                    "view": "function civ.destroyWonder(wonder: wonderObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 5690026,
                "start": 5690009,
                "type": "setfield"
            }
        ],
        "desc": "Destroys wonder `wonder`, removing it from the game, and marking it as 'lost'.",
        "name": "civ.destroyWonder",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A tribe object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a tribe, which is to say the characteristics of the tribe overall, in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tribe)",
                            "finish": 5780034,
                            "name": "tribe",
                            "start": 5780029,
                            "type": "local",
                            "view": "tribeObject"
                        },
                        {
                            "desc": "integer in [0,7]",
                            "finish": 5780044,
                            "name": "techgroup",
                            "start": 5780035,
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": 5780050,
                            "name": "value",
                            "start": 5780045,
                            "type": "local",
                            "view": "0|1|2"
                        }
                    ],
                    "desc": "Sets the value of tech group `techgroup` (0-7) to value `value` (0-2, 0 = can research, can own, 1 = can't research, can own, 2 = can't research, can't own) for tribe `tribe`.\n\n@*param* `techgroup` โ integer in [0,7]\n\n```lua\nvalue:\n    | 0 -- can research, can own\n    | 1 -- can't research, can own\n    | 2 -- can't research, can't own\n```",
                    "finish": 5780055,
                    "start": 5780000,
                    "type": "function",
                    "view": "function civ.enableTechGroup(tribe: tribeObject, techgroup: integer, value: 0|1|2)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 5780028,
                "start": 5780009,
                "type": "setfield"
            }
        ],
        "desc": "Sets the value of tech group `techgroup` (0-7) to value `value` (0-2, 0 = can research, can own, 1 = can't research, can own, 2 = can't research, can't own) for tribe `tribe`.\n\n@*param* `techgroup` โ integer in [0,7]\n\n```lua\nvalue:\n    | 0 -- can research, can own\n    | 1 -- can't research, can own\n    | 2 -- can't research, can't own\n```",
        "name": "civ.enableTechGroup",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "This argument is false by default.",
                            "finish": 5820031,
                            "name": "endscreens",
                            "start": 5820021,
                            "type": "local",
                            "view": "boolean"
                        }
                    ],
                    "desc": "Ends the game. `endscreens` is a boolean that determines whether to show the powergraph and related screens.\n\n@*param* `endscreens` โ This argument is false by default.",
                    "finish": 5820036,
                    "start": 5820000,
                    "type": "function",
                    "view": "function civ.endGame(endscreens: boolean)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 5820020,
                "start": 5820009,
                "type": "setfield"
            }
        ],
        "desc": "Ends the game. `endscreens` is a boolean that determines whether to show the powergraph and related screens.\n\n@*param* `endscreens` โ This argument is false by default.",
        "name": "civ.endGame",
        "type": "variable"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 9270018,
                "start": 9270010,
                "type": "doc.class"
            }
        ],
        "desc": "",
        "fields": [
            {
                "desc": "(get/set) Returns the active tribe mask.",
                "extends": {
                    "finish": 9290030,
                    "start": 9290023,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 9290030,
                            "start": 9290023,
                            "type": "doc.type.name",
                            "view": "bitmask"
                        }
                    ],
                    "view": "bitmask"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 9290030,
                "name": "activeTribes",
                "start": 9290010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set) Returns the level of barbarian activity.",
                "extends": {
                    "finish": 9300035,
                    "start": 9300028,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 9300035,
                            "start": 9300028,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 9300035,
                "name": "barbarianActivity",
                "start": 9300010,
                "type": "doc.field"
            },
            {
                "desc": "",
                "extends": {
                    "finish": 9280039,
                    "start": 9280025,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 9280039,
                            "start": 9280025,
                            "type": "doc.type.name",
                            "view": "civ.game.rules"
                        }
                    ],
                    "view": "civ.game.rules"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 9280039,
                "name": "civ.game.rules",
                "start": 9280010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set) Returns the difficulty level.",
                "extends": {
                    "finish": 9310028,
                    "start": 9310021,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 9310028,
                            "start": 9310021,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 9310028,
                "name": "difficulty",
                "start": 9310010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set) Returns the game year, or for scenarios with monthly increments, the number of months * 12.",
                "extends": {
                    "finish": 9320026,
                    "start": 9320019,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 9320026,
                            "start": 9320019,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 9320026,
                "name": "gameYear",
                "start": 9320010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set) Returns the human players mask.",
                "extends": {
                    "finish": 9330030,
                    "start": 9330023,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 9330030,
                            "start": 9330023,
                            "type": "doc.type.name",
                            "view": "bitmask"
                        }
                    ],
                    "view": "bitmask"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 9330030,
                "name": "humanPlayers",
                "start": 9330010,
                "type": "doc.field"
            },
            {
                "desc": "(get) Returns the last active human tribe.",
                "extends": {
                    "finish": 9340032,
                    "start": 9340021,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 9340032,
                            "start": 9340021,
                            "type": "doc.type.name",
                            "view": "tribeObject"
                        }
                    ],
                    "view": "tribeObject"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 9340032,
                "name": "humanTribe",
                "start": 9340010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set) Returns the number of turns of peace.",
                "extends": {
                    "finish": 9350028,
                    "start": 9350021,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 9350028,
                            "start": 9350021,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 9350028,
                "name": "peaceTurns",
                "start": 9350010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set) Returns whether or not the full map is revealed.",
                "extends": {
                    "finish": 9360027,
                    "start": 9360020,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 9360027,
                            "start": 9360020,
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 9360027,
                "name": "revealMap",
                "start": 9360010,
                "type": "doc.field"
            },
            {
                "desc": "",
                "extends": {
                    "finish": 9430019,
                    "start": 9430017,
                    "type": "table",
                    "view": "civ.game.rules"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 9430014,
                "name": "rules",
                "start": 9430000,
                "type": "setfield"
            },
            {
                "desc": "(get/set) Returns the number of turns elapsed.",
                "extends": {
                    "finish": 9370030,
                    "start": 9370023,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 9370030,
                            "start": 9370023,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 9370030,
                "name": "turnsElapsed",
                "start": 9370010,
                "type": "doc.field"
            }
        ],
        "name": "civ.game",
        "type": "type"
    },
    {
        "defines": [
            {
                "extends": {
                    "finish": 9380013,
                    "start": 9380011,
                    "type": "table",
                    "view": "civ.game"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 9380008,
                "start": 9380000,
                "type": "setfield"
            }
        ],
        "desc": "",
        "name": "civ.game",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "finish": 9430019,
                    "start": 9430017,
                    "type": "table",
                    "view": "civ.game.rules"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 9430014,
                "start": 9430000,
                "type": "setfield"
            }
        ],
        "desc": "",
        "name": "civ.game.rules",
        "type": "variable"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 9410024,
                "start": 9410010,
                "type": "doc.class"
            }
        ],
        "desc": "",
        "fields": [
            {
                "desc": "(get/set) Returns `true` if the world map is flat, `false` otherwise.",
                "extends": {
                    "finish": 9420027,
                    "start": 9420020,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 9420027,
                            "start": 9420020,
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 9420027,
                "name": "flatWorld",
                "start": 9420010,
                "type": "doc.field"
            }
        ],
        "name": "civ.game.rules",
        "type": "type"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [],
                    "desc": "Returns the currently active unit.",
                    "finish": 5860032,
                    "returns": [
                        {
                            "name": "unit",
                            "type": "function.return",
                            "view": "unitObject"
                        }
                    ],
                    "start": 5860000,
                    "type": "function",
                    "view": "function civ.getActiveUnit()\n  -> unit: unitObject"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 5860026,
                "start": 5860009,
                "type": "setfield"
            }
        ],
        "desc": "Returns the currently active unit.",
        "name": "civ.getActiveUnit",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [],
                    "desc": "Returns three integers, the width and height of the map and the number of maps.",
                    "finish": 5920037,
                    "returns": [
                        {
                            "name": "width",
                            "type": "function.return",
                            "view": "integer"
                        },
                        {
                            "name": "height",
                            "type": "function.return",
                            "view": "integer"
                        },
                        {
                            "name": "number_of_maps",
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": 5920000,
                    "type": "function",
                    "view": "function civ.getAtlasDimensions()\n  -> width: integer\n  2. height: integer\n  3. number_of_maps: integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 5920031,
                "start": 5920009,
                "type": "setfield"
            }
        ],
        "desc": "Returns three integers, the width and height of the map and the number of maps.",
        "name": "civ.getAtlasDimensions",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "The map for the base terrain type we want, or its id.",
                            "finish": 5980031,
                            "name": "map",
                            "start": 5980028,
                            "type": "local",
                            "view": "integer|mapObject"
                        },
                        {
                            "desc": "The id number of the base terrain type sought",
                            "finish": 5980041,
                            "name": "terrainId",
                            "start": 5980032,
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "desc": "Returns the base terrain object for the given map and terrain type.\n\n@*param* `map` โ The map for the base terrain type we want, or its id.\n\n@*param* `terrainId` โ The id number of the base terrain type sought",
                    "finish": 5980046,
                    "returns": [
                        {
                            "name": "baseTerrain",
                            "type": "function.return",
                            "view": "baseTerrainObject"
                        }
                    ],
                    "start": 5980000,
                    "type": "function",
                    "view": "function civ.getBaseTerrain(map: integer|mapObject, terrainId: integer)\n  -> baseTerrain: baseTerrainObject"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 5980027,
                "start": 5980009,
                "type": "setfield"
            }
        ],
        "desc": "Returns the base terrain object for the given map and terrain type.\n\n@*param* `map` โ The map for the base terrain type we want, or its id.\n\n@*param* `terrainId` โ The id number of the base terrain type sought",
        "name": "civ.getBaseTerrain",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "An id number is a positive integer that corresponds to an object in the game or the rules.txt file. If you know what <em>kind</em> of object the id corresponds to, you can then use the id to get the specific item in question. The maximum value for an id will depend on its corresponding object. For example, the maximum id for a tribe object is 7, but (at least for programming purposes) there is no limit to the id number of a unit.",
                            "finish": 6030023,
                            "name": "id",
                            "start": 6030021,
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "desc": "Returns the city with id `id`, or `nil` if it doesn't exist.",
                    "finish": 6030028,
                    "returns": [
                        {
                            "name": "city",
                            "type": "function.return",
                            "view": "cityObject|nil"
                        }
                    ],
                    "start": 6030000,
                    "type": "function",
                    "view": "function civ.getCity(id: integer)\n  -> city: cityObject|nil"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 6030020,
                "start": 6030009,
                "type": "setfield"
            }
        ],
        "desc": "Returns the city with id `id`, or `nil` if it doesn't exist.",
        "name": "civ.getCity",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "An id number is a positive integer that corresponds to an object in the game or the rules.txt file. If you know what <em>kind</em> of object the id corresponds to, you can then use the id to get the specific item in question. The maximum value for an id will depend on its corresponding object. For example, the maximum id for a tribe object is 7, but (at least for programming purposes) there is no limit to the id number of a unit.",
                            "finish": 8310028,
                            "name": "id",
                            "start": 8310026,
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "desc": "Returns the commodity with id `id` (0-15 for regular commodities, -1 for food supplies), or `nil` if it doesn't exist.",
                    "finish": 8310033,
                    "returns": [
                        {
                            "name": "commodity",
                            "type": "function.return",
                            "view": "commodityObject|nil"
                        }
                    ],
                    "start": 8310000,
                    "type": "function",
                    "view": "function civ.getCommodity(id: integer)\n  -> commodity: commodityObject|nil"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 8310025,
                "start": 8310009,
                "type": "setfield"
            }
        ],
        "desc": "Returns the commodity with id `id` (0-15 for regular commodities, -1 for food supplies), or `nil` if it doesn't exist.",
        "name": "civ.getCommodity",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [],
                    "desc": "Returns the currently selected tile.",
                    "finish": 6070033,
                    "returns": [
                        {
                            "name": "tile",
                            "type": "function.return",
                            "view": "tileObject"
                        }
                    ],
                    "start": 6070000,
                    "type": "function",
                    "view": "function civ.getCurrentTile()\n  -> tile: tileObject"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 6070027,
                "start": 6070009,
                "type": "setfield"
            }
        ],
        "desc": "Returns the currently selected tile.",
        "name": "civ.getCurrentTile",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [],
                    "desc": "Returns the currently active tribe.",
                    "finish": 6110034,
                    "returns": [
                        {
                            "name": "tribe",
                            "type": "function.return",
                            "view": "tribeObject"
                        }
                    ],
                    "start": 6110000,
                    "type": "function",
                    "view": "function civ.getCurrentTribe()\n  -> tribe: tribeObject"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 6110028,
                "start": 6110009,
                "type": "setfield"
            }
        ],
        "desc": "Returns the currently active tribe.",
        "name": "civ.getCurrentTribe",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [],
                    "desc": "Returns the current game year.",
                    "finish": 6150030,
                    "returns": [
                        {
                            "name": "integer",
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": 6150000,
                    "type": "function",
                    "view": "function civ.getGameYear()\n  -> integer: integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 6150024,
                "start": 6150009,
                "type": "setfield"
            }
        ],
        "desc": "Returns the current game year.",
        "name": "civ.getGameYear",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "An id number is a positive integer that corresponds to an object in the game or the rules.txt file. If you know what <em>kind</em> of object the id corresponds to, you can then use the id to get the specific item in question. The maximum value for an id will depend on its corresponding object. For example, the maximum id for a tribe object is 7, but (at least for programming purposes) there is no limit to the id number of a unit.",
                            "finish": 6200030,
                            "name": "id",
                            "start": 6200028,
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "desc": "Returns the improvement with id `id` (0-39), or `nil` if it doesn't exist.",
                    "finish": 6200035,
                    "returns": [
                        {
                            "name": "improvement",
                            "type": "function.return",
                            "view": "improvementObject|nil"
                        }
                    ],
                    "start": 6200000,
                    "type": "function",
                    "view": "function civ.getImprovement(id: integer)\n  -> improvement: improvementObject|nil"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 6200027,
                "start": 6200009,
                "type": "setfield"
            }
        ],
        "desc": "Returns the improvement with id `id` (0-39), or `nil` if it doesn't exist.",
        "name": "civ.getImprovement",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "An id number is a positive integer that corresponds to an object in the game or the rules.txt file. If you know what <em>kind</em> of object the id corresponds to, you can then use the id to get the specific item in question. The maximum value for an id will depend on its corresponding object. For example, the maximum id for a tribe object is 7, but (at least for programming purposes) there is no limit to the id number of a unit.",
                            "finish": 6250022,
                            "name": "id",
                            "start": 6250020,
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "desc": "Returns the map with id `id` (0-3) or `nil` if it doesn't exist.",
                    "finish": 6250027,
                    "returns": [
                        {
                            "name": "map",
                            "type": "function.return",
                            "view": "mapObject|nil"
                        }
                    ],
                    "start": 6250000,
                    "type": "function",
                    "view": "function civ.getMap(id: integer)\n  -> map: mapObject|nil"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 6250019,
                "start": 6250009,
                "type": "setfield"
            }
        ],
        "desc": "Returns the map with id `id` (0-3) or `nil` if it doesn't exist.",
        "name": "civ.getMap",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [],
                    "desc": "Alias for getAtlasDimensions. (deprecated since 0.16)",
                    "finish": 6320035,
                    "returns": [
                        {
                            "name": "width",
                            "type": "function.return",
                            "view": "integer"
                        },
                        {
                            "name": "height",
                            "type": "function.return",
                            "view": "integer"
                        },
                        {
                            "name": "number_of_maps",
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": 6320000,
                    "type": "function",
                    "view": "function civ.getMapDimensions()\n  -> width: integer\n  2. height: integer\n  3. number_of_maps: integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 6320029,
                "start": 6320009,
                "type": "setfield"
            }
        ],
        "desc": "Alias for getAtlasDimensions. (deprecated since 0.16)",
        "name": "civ.getMapDimensions",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [],
                    "desc": "Returns the city currently opened in the city window, `nil` if the city window is closed.",
                    "finish": 6360030,
                    "returns": [
                        {
                            "name": "city",
                            "type": "function.return",
                            "view": "cityObject|nil"
                        }
                    ],
                    "start": 6360000,
                    "type": "function",
                    "view": "function civ.getOpenCity()\n  -> city: cityObject|nil"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 6360024,
                "start": 6360009,
                "type": "setfield"
            }
        ],
        "desc": "Returns the city currently opened in the city window, `nil` if the city window is closed.",
        "name": "civ.getOpenCity",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [],
                    "desc": "Returns the player's tribe.",
                    "finish": 6400033,
                    "returns": [
                        {
                            "name": "tribe",
                            "type": "function.return",
                            "view": "tribeObject"
                        }
                    ],
                    "start": 6400000,
                    "type": "function",
                    "view": "function civ.getPlayerTribe()\n  -> tribe: tribeObject"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 6400027,
                "start": 6400009,
                "type": "setfield"
            }
        ],
        "desc": "Returns the player's tribe.",
        "name": "civ.getPlayerTribe",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "An id number is a positive integer that corresponds to an object in the game or the rules.txt file. If you know what <em>kind</em> of object the id corresponds to, you can then use the id to get the specific item in question. The maximum value for an id will depend on its corresponding object. For example, the maximum id for a tribe object is 7, but (at least for programming purposes) there is no limit to the id number of a unit.",
                            "finish": 6450023,
                            "name": "id",
                            "start": 6450021,
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "desc": "Returns the tech with id `id` (0-99), or `nil` if it doesn't exist.",
                    "finish": 6450028,
                    "returns": [
                        {
                            "name": "tech",
                            "type": "function.return",
                            "view": "techObject|nil"
                        }
                    ],
                    "start": 6450000,
                    "type": "function",
                    "view": "function civ.getTech(id: integer)\n  -> tech: techObject|nil"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 6450020,
                "start": 6450009,
                "type": "setfield"
            }
        ],
        "desc": "Returns the tech with id `id` (0-99), or `nil` if it doesn't exist.",
        "name": "civ.getTech",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "The map for the terrain we want, or its id.",
                            "finish": 6550027,
                            "name": "map",
                            "start": 6550024,
                            "type": "local",
                            "view": "integer|mapObject"
                        },
                        {
                            "desc": "The id number of the base terrain type sought.",
                            "finish": 6550037,
                            "name": "terrainId",
                            "start": 6550028,
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": 6550046,
                            "name": "resource",
                            "start": 6550038,
                            "type": "local",
                            "view": "0|1|2"
                        }
                    ],
                    "desc": "Returns the terrain object for the given map, terrain type and resource. Out of bound id's cause errors.\n\n@*param* `map` โ The map for the terrain we want, or its id.\n\n@*param* `terrainId` โ The id number of the base terrain type sought.\n\n```lua\nresource:\n    | 0 -- no resource\n    | 1 -- fish resource\n    | 2 -- whales resource\n```",
                    "finish": 6550051,
                    "returns": [
                        {
                            "name": "terrain",
                            "type": "function.return",
                            "view": "terrainObject"
                        }
                    ],
                    "start": 6550000,
                    "type": "function",
                    "view": "function civ.getTerrain(map: integer|mapObject, terrainId: integer, resource: 0|1|2)\n  -> terrain: terrainObject"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 6550023,
                "start": 6550009,
                "type": "setfield"
            }
        ],
        "desc": "Returns the terrain object for the given map, terrain type and resource. Out of bound id's cause errors.\n\n@*param* `map` โ The map for the terrain we want, or its id.\n\n@*param* `terrainId` โ The id number of the base terrain type sought.\n\n```lua\nresource:\n    | 0 -- no resource\n    | 1 -- fish resource\n    | 2 -- whales resource\n```",
        "name": "civ.getTerrain",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "the 'x' coordinate of the tile",
                            "finish": 6620022,
                            "name": "x",
                            "start": 6620021,
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "desc": "the 'y' coordinate of the tile",
                            "finish": 6620024,
                            "name": "y",
                            "start": 6620023,
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "desc": "the 'z' coordinate of the tile ([0,3])",
                            "finish": 6620026,
                            "name": "z",
                            "start": 6620025,
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "desc": "Returns the tile with coordinates `x`, `y`, `z`, or `nil` if it doesn't exist.\n\n@*param* `x` โ the 'x' coordinate of the tile\n\n@*param* `y` โ the 'y' coordinate of the tile\n\n@*param* `z` โ the 'z' coordinate of the tile ([0,3])",
                    "finish": 6620031,
                    "returns": [
                        {
                            "name": "tile",
                            "type": "function.return",
                            "view": "tileObject|nil"
                        }
                    ],
                    "start": 6620000,
                    "type": "function",
                    "view": "function civ.getTile(x: integer, y: integer, z: integer)\n  -> tile: tileObject|nil"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 6620020,
                "start": 6620009,
                "type": "setfield"
            }
        ],
        "desc": "Returns the tile with coordinates `x`, `y`, `z`, or `nil` if it doesn't exist.\n\n@*param* `x` โ the 'x' coordinate of the tile\n\n@*param* `y` โ the 'y' coordinate of the tile\n\n@*param* `z` โ the 'z' coordinate of the tile ([0,3])",
        "name": "civ.getTile",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [],
                    "desc": "Returns the absolute path of the ToT installation directory.\n\n@*return* โ ",
                    "finish": 6660028,
                    "returns": [
                        {
                            "desc": "",
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": 6660000,
                    "type": "function",
                    "view": "function civ.getToTDir()\n  -> string"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 6660022,
                "start": 6660009,
                "type": "setfield"
            }
        ],
        "desc": "Returns the absolute path of the ToT installation directory.\n\n@*return* โ ",
        "name": "civ.getToTDir",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "An id number is a positive integer that corresponds to an object in the game or the rules.txt file. If you know what <em>kind</em> of object the id corresponds to, you can then use the id to get the specific item in question. The maximum value for an id will depend on its corresponding object. For example, the maximum id for a tribe object is 7, but (at least for programming purposes) there is no limit to the id number of a unit.",
                            "finish": 6710024,
                            "name": "id",
                            "start": 6710022,
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "desc": "Returns the tribe with id `id` (0-7), or `nil` if it doesn't exist.",
                    "finish": 6710029,
                    "returns": [
                        {
                            "name": "tribe",
                            "type": "function.return",
                            "view": "tribeObject|nil"
                        }
                    ],
                    "start": 6710000,
                    "type": "function",
                    "view": "function civ.getTribe(id: integer)\n  -> tribe: tribeObject|nil"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 6710021,
                "start": 6710009,
                "type": "setfield"
            }
        ],
        "desc": "Returns the tribe with id `id` (0-7), or `nil` if it doesn't exist.",
        "name": "civ.getTribe",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [],
                    "desc": "Returns the current turn number.\n\n@*return* โ ",
                    "finish": 6750026,
                    "returns": [
                        {
                            "desc": "",
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": 6750000,
                    "type": "function",
                    "view": "function civ.getTurn()\n  -> integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 6750020,
                "start": 6750009,
                "type": "setfield"
            }
        ],
        "desc": "Returns the current turn number.\n\n@*return* โ ",
        "name": "civ.getTurn",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "An id number is a positive integer that corresponds to an object in the game or the rules.txt file. If you know what <em>kind</em> of object the id corresponds to, you can then use the id to get the specific item in question. The maximum value for an id will depend on its corresponding object. For example, the maximum id for a tribe object is 7, but (at least for programming purposes) there is no limit to the id number of a unit.",
                            "finish": 6800023,
                            "name": "id",
                            "start": 6800021,
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "desc": "Returns the unit with id `id`, or `nil` if it doesn't exist.",
                    "finish": 6800028,
                    "returns": [
                        {
                            "name": "unit",
                            "type": "function.return",
                            "view": "unitObject|nil"
                        }
                    ],
                    "start": 6800000,
                    "type": "function",
                    "view": "function civ.getUnit(id: integer)\n  -> unit: unitObject|nil"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 6800020,
                "start": 6800009,
                "type": "setfield"
            }
        ],
        "desc": "Returns the unit with id `id`, or `nil` if it doesn't exist.",
        "name": "civ.getUnit",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "An id number is a positive integer that corresponds to an object in the game or the rules.txt file. If you know what <em>kind</em> of object the id corresponds to, you can then use the id to get the specific item in question. The maximum value for an id will depend on its corresponding object. For example, the maximum id for a tribe object is 7, but (at least for programming purposes) there is no limit to the id number of a unit.",
                            "finish": 6850027,
                            "name": "id",
                            "start": 6850025,
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "desc": "Returns the unit type with id `id`, or `nil` if it doesn't exist.",
                    "finish": 6850032,
                    "returns": [
                        {
                            "name": "unitType",
                            "type": "function.return",
                            "view": "unitTypeObject|nil"
                        }
                    ],
                    "start": 6850000,
                    "type": "function",
                    "view": "function civ.getUnitType(id: integer)\n  -> unitType: unitTypeObject|nil"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 6850024,
                "start": 6850009,
                "type": "setfield"
            }
        ],
        "desc": "Returns the unit type with id `id`, or `nil` if it doesn't exist.",
        "name": "civ.getUnitType",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "An id number is a positive integer that corresponds to an object in the game or the rules.txt file. If you know what <em>kind</em> of object the id corresponds to, you can then use the id to get the specific item in question. The maximum value for an id will depend on its corresponding object. For example, the maximum id for a tribe object is 7, but (at least for programming purposes) there is no limit to the id number of a unit.",
                            "finish": 6900025,
                            "name": "id",
                            "start": 6900023,
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "desc": "Returns the wonder with id `id` (0-27), or `nil` if it doesn't exist.",
                    "finish": 6900030,
                    "returns": [
                        {
                            "name": "wonder",
                            "type": "function.return",
                            "view": "wonderObject|nil"
                        }
                    ],
                    "start": 6900000,
                    "type": "function",
                    "view": "function civ.getWonder(id: integer)\n  -> wonder: wonderObject|nil"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 6900022,
                "start": 6900009,
                "type": "setfield"
            }
        ],
        "desc": "Returns the wonder with id `id` (0-27), or `nil` if it doesn't exist.",
        "name": "civ.getWonder",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A tribe object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a tribe, which is to say the characteristics of the tribe overall, in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tribe)",
                            "finish": 6950027,
                            "name": "tribe",
                            "start": 6950022,
                            "type": "local",
                            "view": "tribeObject"
                        },
                        {
                            "desc": "A technology object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a technology entry in the rules.txt, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tech)",
                            "finish": 6950032,
                            "name": "tech",
                            "start": 6950028,
                            "type": "local",
                            "view": "techObject"
                        }
                    ],
                    "desc": "Gives tech `tech` to tribe `tribe`.",
                    "finish": 6950037,
                    "start": 6950000,
                    "type": "function",
                    "view": "function civ.giveTech(tribe: tribeObject, tech: techObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 6950021,
                "start": 6950009,
                "type": "setfield"
            }
        ],
        "desc": "Gives tech `tech` to tribe `tribe`.",
        "name": "civ.giveTech",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
                            "finish": 7000032,
                            "name": "city",
                            "start": 7000028,
                            "type": "local",
                            "view": "cityObject"
                        },
                        {
                            "desc": "An improvement object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents an improvement entry in the rules.txt, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#improvement)",
                            "finish": 7000044,
                            "name": "improvement",
                            "start": 7000033,
                            "type": "local",
                            "view": "improvementObject"
                        }
                    ],
                    "desc": "Returns `true` if city `city` has improvement `improvement`, `false` otherwise.",
                    "finish": 7000049,
                    "start": 7000000,
                    "type": "function",
                    "view": "function civ.hasImprovement(city: cityObject, improvement: improvementObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 7000027,
                "start": 7000009,
                "type": "setfield"
            }
        ],
        "desc": "Returns `true` if city `city` has improvement `improvement`, `false` otherwise.",
        "name": "civ.hasImprovement",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A tribe object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a tribe, which is to say the characteristics of the tribe overall, in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tribe)",
                            "finish": 7060026,
                            "name": "tribe",
                            "start": 7060021,
                            "type": "local",
                            "view": "tribeObject"
                        },
                        {
                            "desc": "A technology object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a technology entry in the rules.txt, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tech)",
                            "finish": 7060031,
                            "name": "tech",
                            "start": 7060027,
                            "type": "local",
                            "view": "techObject"
                        }
                    ],
                    "desc": "Returns `true` if tribe `tribe` has tech `tech`, `false` otherwise.\n\n@*return* โ ",
                    "finish": 7060036,
                    "returns": [
                        {
                            "desc": "",
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 7060000,
                    "type": "function",
                    "view": "function civ.hasTech(tribe: tribeObject, tech: techObject)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 7060020,
                "start": 7060009,
                "type": "setfield"
            }
        ],
        "desc": "Returns `true` if tribe `tribe` has tech `tech`, `false` otherwise.\n\n@*return* โ ",
        "name": "civ.hasTech",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 7110033,
                            "name": "object",
                            "start": 7110027,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "Returns `true` if `object` is a base terrain, `false` otherwise.\n\n@*return* โ ",
                    "finish": 7110038,
                    "returns": [
                        {
                            "desc": "",
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 7110000,
                    "type": "function",
                    "view": "function civ.isBaseTerrain(object: any)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 7110026,
                "start": 7110009,
                "type": "setfield"
            }
        ],
        "desc": "Returns `true` if `object` is a base terrain, `false` otherwise.\n\n@*return* โ ",
        "name": "civ.isBaseTerrain",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 7160026,
                            "name": "object",
                            "start": 7160020,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "Returns `true` if `object` is a city, `false` otherwise.\n\n@*return* โ ",
                    "finish": 7160031,
                    "returns": [
                        {
                            "desc": "",
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 7160000,
                    "type": "function",
                    "view": "function civ.isCity(object: any)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 7160019,
                "start": 7160009,
                "type": "setfield"
            }
        ],
        "desc": "Returns `true` if `object` is a city, `false` otherwise.\n\n@*return* โ ",
        "name": "civ.isCity",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 7210028,
                            "name": "object",
                            "start": 7210022,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "Returns `true` if `object` is a dialog, `false` otherwise.\n\n@*return* โ ",
                    "finish": 7210033,
                    "returns": [
                        {
                            "desc": "",
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 7210000,
                    "type": "function",
                    "view": "function civ.isDialog(object: any)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 7210021,
                "start": 7210009,
                "type": "setfield"
            }
        ],
        "desc": "Returns `true` if `object` is a dialog, `false` otherwise.\n\n@*return* โ ",
        "name": "civ.isDialog",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 7260027,
                            "name": "object",
                            "start": 7260021,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "Returns `true` if `object` is an image, `false` otherwise.\n\n@*return* โ ",
                    "finish": 7260032,
                    "returns": [
                        {
                            "desc": "",
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 7260000,
                    "type": "function",
                    "view": "function civ.isImage(object: any)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 7260020,
                "start": 7260009,
                "type": "setfield"
            }
        ],
        "desc": "Returns `true` if `object` is an image, `false` otherwise.\n\n@*return* โ ",
        "name": "civ.isImage",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 7310033,
                            "name": "object",
                            "start": 7310027,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "Returns `true` if `object` is a city improvement, `false` otherwise.\n\n@*return* โ ",
                    "finish": 7310038,
                    "returns": [
                        {
                            "desc": "",
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 7310000,
                    "type": "function",
                    "view": "function civ.isImprovement(object: any)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 7310026,
                "start": 7310009,
                "type": "setfield"
            }
        ],
        "desc": "Returns `true` if `object` is a city improvement, `false` otherwise.\n\n@*return* โ ",
        "name": "civ.isImprovement",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 7360028,
                            "name": "object",
                            "start": 7360022,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "Returns `true` if `object` is a leader, `false` otherwise.\n\n@*return* โ ",
                    "finish": 7360033,
                    "returns": [
                        {
                            "desc": "",
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 7360000,
                    "type": "function",
                    "view": "function civ.isLeader(object: any)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 7360021,
                "start": 7360009,
                "type": "setfield"
            }
        ],
        "desc": "Returns `true` if `object` is a leader, `false` otherwise.\n\n@*return* โ ",
        "name": "civ.isLeader",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 7410025,
                            "name": "object",
                            "start": 7410019,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "Returns `true` if `object` is a map, `false` otherwise.\n\n@*return* โ ",
                    "finish": 7410030,
                    "returns": [
                        {
                            "desc": "",
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 7410000,
                    "type": "function",
                    "view": "function civ.isMap(object: any)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 7410018,
                "start": 7410009,
                "type": "setfield"
            }
        ],
        "desc": "Returns `true` if `object` is a map, `false` otherwise.\n\n@*return* โ ",
        "name": "civ.isMap",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 7460026,
                            "name": "object",
                            "start": 7460020,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "Returns `true` if `object` is a tech, `false` otherwise.\n\n@*return* โ ",
                    "finish": 7460031,
                    "returns": [
                        {
                            "desc": "",
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 7460000,
                    "type": "function",
                    "view": "function civ.isTech(object: any)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 7460019,
                "start": 7460009,
                "type": "setfield"
            }
        ],
        "desc": "Returns `true` if `object` is a tech, `false` otherwise.\n\n@*return* โ ",
        "name": "civ.isTech",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 7510029,
                            "name": "object",
                            "start": 7510023,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "Returns `true` if `object` is a terrain, `false` otherwise.\n\n@*return* โ ",
                    "finish": 7510034,
                    "returns": [
                        {
                            "desc": "",
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 7510000,
                    "type": "function",
                    "view": "function civ.isTerrain(object: any)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 7510022,
                "start": 7510009,
                "type": "setfield"
            }
        ],
        "desc": "Returns `true` if `object` is a terrain, `false` otherwise.\n\n@*return* โ ",
        "name": "civ.isTerrain",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 7560026,
                            "name": "object",
                            "start": 7560020,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "Returns `true` if `object` is a tile, `false` otherwise.\n\n@*return* โ ",
                    "finish": 7560031,
                    "returns": [
                        {
                            "desc": "",
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 7560000,
                    "type": "function",
                    "view": "function civ.isTile(object: any)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 7560019,
                "start": 7560009,
                "type": "setfield"
            }
        ],
        "desc": "Returns `true` if `object` is a tile, `false` otherwise.\n\n@*return* โ ",
        "name": "civ.isTile",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 8360032,
                            "name": "object",
                            "start": 8360026,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "Returns `true` if `object` is a trade route, `false` otherwise.\n\n@*return* โ ",
                    "finish": 8360037,
                    "returns": [
                        {
                            "desc": "",
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 8360000,
                    "type": "function",
                    "view": "function civ.isTradeRoute(object: any)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 8360025,
                "start": 8360009,
                "type": "setfield"
            }
        ],
        "desc": "Returns `true` if `object` is a trade route, `false` otherwise.\n\n@*return* โ ",
        "name": "civ.isTradeRoute",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 7610027,
                            "name": "object",
                            "start": 7610021,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "Returns `true` if `object` is a tribe, `false` otherwise.\n\n@*return* โ ",
                    "finish": 7610032,
                    "returns": [
                        {
                            "desc": "",
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 7610000,
                    "type": "function",
                    "view": "function civ.isTribe(object: any)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 7610020,
                "start": 7610009,
                "type": "setfield"
            }
        ],
        "desc": "Returns `true` if `object` is a tribe, `false` otherwise.\n\n@*return* โ ",
        "name": "civ.isTribe",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 7660026,
                            "name": "object",
                            "start": 7660020,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "Returns `true` if `object` is a unit, `false` otherwise.\n\n@*return* โ ",
                    "finish": 7660031,
                    "returns": [
                        {
                            "desc": "",
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 7660000,
                    "type": "function",
                    "view": "function civ.isUnit(object: any)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 7660019,
                "start": 7660009,
                "type": "setfield"
            }
        ],
        "desc": "Returns `true` if `object` is a unit, `false` otherwise.\n\n@*return* โ ",
        "name": "civ.isUnit",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 7710030,
                            "name": "object",
                            "start": 7710024,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "Returns `true` if `object` is a unit type, `false` otherwise.\n\n@*return* โ ",
                    "finish": 7710035,
                    "returns": [
                        {
                            "desc": "",
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 7710000,
                    "type": "function",
                    "view": "function civ.isUnitType(object: any)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 7710023,
                "start": 7710009,
                "type": "setfield"
            }
        ],
        "desc": "Returns `true` if `object` is a unit type, `false` otherwise.\n\n@*return* โ ",
        "name": "civ.isUnitType",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 7760028,
                            "name": "object",
                            "start": 7760022,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "Returns `true` if `object` is a wonder, `false` otherwise.\n\n@*return* โ ",
                    "finish": 7760033,
                    "returns": [
                        {
                            "desc": "",
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 7760000,
                    "type": "function",
                    "view": "function civ.isWonder(object: any)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 7760021,
                "start": 7760009,
                "type": "setfield"
            }
        ],
        "desc": "Returns `true` if `object` is a wonder, `false` otherwise.\n\n@*return* โ ",
        "name": "civ.isWonder",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [],
                    "desc": "Returns an iterator yielding all cities in the game.\n\n@*return* โ ",
                    "finish": 7800032,
                    "returns": [
                        {
                            "desc": "",
                            "type": "function.return",
                            "view": "iterator"
                        }
                    ],
                    "start": 7800000,
                    "type": "function",
                    "view": "function civ.iterateCities()\n  -> iterator"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 7800026,
                "start": 7800009,
                "type": "setfield"
            }
        ],
        "desc": "Returns an iterator yielding all cities in the game.\n\n@*return* โ ",
        "name": "civ.iterateCities",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [],
                    "desc": "Returns an iterator yielding all units in the game.\n\n@*return* โ ",
                    "finish": 7840031,
                    "returns": [
                        {
                            "desc": "",
                            "type": "function.return",
                            "view": "iterator"
                        }
                    ],
                    "start": 7840000,
                    "type": "function",
                    "view": "function civ.iterateUnits()\n  -> iterator"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 7840025,
                "start": 7840009,
                "type": "setfield"
            }
        ],
        "desc": "Returns an iterator yielding all units in the game.\n\n@*return* โ ",
        "name": "civ.iterateUnits",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A tribe object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a tribe, which is to say the characteristics of the tribe overall, in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tribe)",
                            "finish": 7880028,
                            "name": "tribe",
                            "start": 7880023,
                            "type": "local",
                            "view": "tribeObject"
                        }
                    ],
                    "desc": "Removes tribe `tribe` from the game. All its cities and units are removed.",
                    "finish": 7880033,
                    "start": 7880000,
                    "type": "function",
                    "view": "function civ.killTribe(tribe: tribeObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 7880022,
                "start": 7880009,
                "type": "setfield"
            }
        ],
        "desc": "Removes tribe `tribe` from the game. All its cities and units are removed.",
        "name": "civ.killTribe",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "The tribe declaring war.",
                            "finish": 7930031,
                            "name": "who",
                            "start": 7930028,
                            "type": "local",
                            "view": "tribeObject"
                        },
                        {
                            "desc": "The tribe not declaring war.",
                            "finish": 7930036,
                            "name": "whom",
                            "start": 7930032,
                            "type": "local",
                            "view": "tribeObject"
                        }
                    ],
                    "desc": "Cancels any peace treaties between tribe `who` and tribe `whom`, and make `who` declare war on `whom`.\n\n@*param* `who` โ The tribe declaring war.\n\n@*param* `whom` โ The tribe not declaring war.",
                    "finish": 7930041,
                    "start": 7930000,
                    "type": "function",
                    "view": "function civ.makeAggression(who: tribeObject, whom: tribeObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 7930027,
                "start": 7930009,
                "type": "setfield"
            }
        ],
        "desc": "Cancels any peace treaties between tribe `who` and tribe `whom`, and make `who` declare war on `whom`.\n\n@*param* `who` โ The tribe declaring war.\n\n@*param* `whom` โ The tribe not declaring war.",
        "name": "civ.makeAggression",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "Track number of cd or filename of music.",
                            "finish": 7970038,
                            "name": "trackOrFilename",
                            "start": 7970023,
                            "type": "local",
                            "view": "string|integer"
                        }
                    ],
                    "desc": "Plays CD track `trackNo`, or with the DirectShow music patch enabled, play the file given by `filename`, where `filename` is relative to the 'Music' directory.\n\n@*param* `trackOrFilename` โ Track number of cd or filename of music.",
                    "finish": 7970043,
                    "start": 7970000,
                    "type": "function",
                    "view": "function civ.playMusic(trackOrFilename: string|integer)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 7970022,
                "start": 7970009,
                "type": "setfield"
            }
        ],
        "desc": "Plays CD track `trackNo`, or with the DirectShow music patch enabled, play the file given by `filename`, where `filename` is relative to the 'Music' directory.\n\n@*param* `trackOrFilename` โ Track number of cd or filename of music.",
        "name": "civ.playMusic",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A string is a data type native to Lua which consists of a sequence of characters. These often represent text to be displayed, but are also useful in other contexts. Strings are commonly used as keys in tables, since they make code more readable.\n[Programming in Lua, 2.4 -- Strings](https://www.lua.org/pil/2.4.html)",
                            "finish": 8010031,
                            "name": "filename",
                            "start": 8010023,
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "Plays the sound file given by `filename`.",
                    "finish": 8010036,
                    "start": 8010000,
                    "type": "function",
                    "view": "function civ.playSound(filename: string)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 8010022,
                "start": 8010009,
                "type": "setfield"
            }
        ],
        "desc": "Plays the sound file given by `filename`.",
        "name": "civ.playSound",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A string is a data type native to Lua which consists of a sequence of characters. These often represent text to be displayed, but are also useful in other contexts. Strings are commonly used as keys in tables, since they make code more readable.\n[Programming in Lua, 2.4 -- Strings](https://www.lua.org/pil/2.4.html)",
                            "finish": 8050031,
                            "name": "filename",
                            "start": 8050023,
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "Plays the video file given by `filename`.",
                    "finish": 8050036,
                    "start": 8050000,
                    "type": "function",
                    "view": "function civ.playVideo(filename: string)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 8050022,
                "start": 8050009,
                "type": "setfield"
            }
        ],
        "desc": "Plays the video file given by `filename`.",
        "name": "civ.playVideo",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
                            "finish": 8100035,
                            "name": "city",
                            "start": 8100031,
                            "type": "local",
                            "view": "cityObject"
                        },
                        {
                            "desc": "An improvement object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents an improvement entry in the rules.txt, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#improvement)",
                            "finish": 8100047,
                            "name": "improvement",
                            "start": 8100036,
                            "type": "local",
                            "view": "improvementObject"
                        }
                    ],
                    "desc": "Removes city improvement `improvement` from city `city`.",
                    "finish": 8100052,
                    "start": 8100000,
                    "type": "function",
                    "view": "function civ.removeImprovement(city: cityObject, improvement: improvementObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 8100030,
                "start": 8100009,
                "type": "setfield"
            }
        ],
        "desc": "Removes city improvement `improvement` from city `city`.",
        "name": "civ.removeImprovement",
        "type": "variable"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 9460018,
                "start": 9460010,
                "type": "doc.class"
            }
        ],
        "desc": "",
        "fields": [
            {
                "extends": {
                    "finish": 9480046,
                    "start": 9480024,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 9480046,
                            "start": 9480024,
                            "type": "doc.type.name",
                            "view": "civ.scen.compatibility"
                        }
                    ],
                    "view": "civ.scen.compatibility"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 9480046,
                "name": "compatibility",
                "start": 9480010,
                "type": "doc.field"
            },
            {
                "desc": "Registers a function to be called every time a unit is activated. The callback takes the unit activated as a parameter, and the source of unit activation. `source` is `true` if activated by keyboard or mouse click, `false` if activated by the game itself. `repeatMove` is `true` if it's a repeat activation caused by moving (see civ.scen.compatibility), `false` otherwise.",
                "extends": {
                    "args": [
                        {
                            "finish": 9530037,
                            "name": "code",
                            "start": 9530033,
                            "type": "local",
                            "view": "fun(unit: unitObject, source: boolean, repeatMove: boolean)"
                        }
                    ],
                    "desc": "Registers a function to be called every time a unit is activated. The callback takes the unit activated as a parameter, and the source of unit activation. `source` is `true` if activated by keyboard or mouse click, `false` if activated by the game itself. `repeatMove` is `true` if it's a repeat activation caused by moving (see civ.scen.compatibility), `false` otherwise.",
                    "finish": 9530042,
                    "start": 9530000,
                    "type": "function",
                    "view": "function civ.scen.onActivateUnit(code: fun(unit: unitObject, source: boolean, repeatMove: boolean))"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 9530032,
                "name": "onActivateUnit",
                "start": 9530009,
                "type": "setfield"
            },
            {
                "desc": "Registers a function that is called when a unit is bribed successfully. unit.owner is the new owner at this point, `previousOwner` the old owner.",
                "extends": {
                    "args": [
                        {
                            "finish": 9570034,
                            "name": "code",
                            "start": 9570030,
                            "type": "local",
                            "view": "fun(unit: unitObject, previousOwner: tribeObject)"
                        }
                    ],
                    "desc": "Registers a function that is called when a unit is bribed successfully. unit.owner is the new owner at this point, `previousOwner` the old owner.",
                    "finish": 9570039,
                    "start": 9570000,
                    "type": "function",
                    "view": "function civ.scen.onBribeUnit(code: fun(unit: unitObject, previousOwner: tribeObject))"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 9570029,
                "name": "onBribeUnit",
                "start": 9570009,
                "type": "setfield"
            },
            {
                "desc": "Registers a function to be called every time a city calculates its total resource yield. Input is the city, and the food, shields and trade of its tiles. Returns a 5-tuple of modifiers, food change, shield change before waste, shield change after waste, trade change before corruption, trade change after corruption. These modifiers are applied at the following points in the calculation:\n<br>Calculate yield from all worked tiles\n<br>Run onCalculateCityYield\n<br>Add foodChange, shieldChangeBeforeWaste and tradeChangeBeforeCorruption\n<br>Add changes from food trade routes\n<br>Add shields from improvements\n<br>Calculate and subtract waste\n<br>Calculate corruption and add changes from commodity trade routes\n<br>Calculate corruption again (now using the value after trade routes) and subtract.\n<br>Add shieldChangeAfterWaste and tradeChangeAfterCorruption\n<br>Calculate Tax/Lux/Sci",
                "extends": {
                    "args": [
                        {
                            "finish": 9710043,
                            "name": "code",
                            "start": 9710039,
                            "type": "local",
                            "view": "fun(city: cityObject, food: integer, shields: integer, trade: integer):(foodChange: integer, shieldChangeBeforeWaste: integer, shieldChangeAfterWaste: integer, tradeChangeBeforeCor...(too long)...: integer)"
                        }
                    ],
                    "desc": "Registers a function to be called every time a city calculates its total resource yield. Input is the city, and the food, shields and trade of its tiles. Returns a 5-tuple of modifiers, food change, shield change before waste, shield change after waste, trade change before corruption, trade change after corruption. These modifiers are applied at the following points in the calculation:\n<br>Calculate yield from all worked tiles\n<br>Run onCalculateCityYield\n<br>Add foodChange, shieldChangeBeforeWaste and tradeChangeBeforeCorruption\n<br>Add changes from food trade routes\n<br>Add shields from improvements\n<br>Calculate and subtract waste\n<br>Calculate corruption and add changes from commodity trade routes\n<br>Calculate corruption again (now using the value after trade routes) and subtract.\n<br>Add shieldChangeAfterWaste and tradeChangeAfterCorruption\n<br>Calculate Tax/Lux/Sci",
                    "finish": 9710048,
                    "start": 9710000,
                    "type": "function",
                    "view": "function civ.scen.onCalculateCityYield(code: fun(city: cityObject, food: integer, shields: integer, trade: integer):(foodChange: integer, shieldChangeBeforeWaste: integer, shieldChangeAfterWaste: integer, tradeChangeBeforeCor...(too long)...: integer))"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 9710038,
                "name": "onCalculateCityYield",
                "start": 9710009,
                "type": "setfield"
            },
            {
                "desc": "Registers a function to be called every time a check is done whether a city can build something or not. It is called for all unit types, improvements and wonders. The first parameter of the callback is the default build function, as implemented by the game. It takes the city and item as parameters. You can call this to produce a result for cases you don't need to handle yourself. `item` can be a unittype, improvement or wonder.\nReturn `true` if `city` is allowed to produce `item`, `false` if not. \n",
                "extends": {
                    "args": [
                        {
                            "finish": 9780033,
                            "name": "code",
                            "start": 9780029,
                            "type": "local",
                            "view": "fun(defaultBuildFunction: fun(city: cityObject, item: improvementObject|unitTypeObject|wonderObject):(cityCanBuildItemByDefault: boolean, city: cityObject, item: improvementObject|...(too long)...: boolean)"
                        }
                    ],
                    "desc": "Registers a function to be called every time a check is done whether a city can build something or not. It is called for all unit types, improvements and wonders. The first parameter of the callback is the default build function, as implemented by the game. It takes the city and item as parameters. You can call this to produce a result for cases you don't need to handle yourself. `item` can be a unittype, improvement or wonder.\nReturn `true` if `city` is allowed to produce `item`, `false` if not. \n",
                    "finish": 9780038,
                    "start": 9780000,
                    "type": "function",
                    "view": "function civ.scen.onCanBuild(code: fun(defaultBuildFunction: fun(city: cityObject, item: improvementObject|unitTypeObject|wonderObject):(cityCanBuildItemByDefault: boolean, city: cityObject, item: improvementObject|...(too long)...: boolean))"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 9780028,
                "name": "onCanBuild",
                "start": 9780009,
                "type": "setfield"
            },
            {
                "desc": "Registers a function that is called to determine if `unit` can found a city at the unit's location. `advancedTribe` is `true` when picking up a hut with `unit` triggers an advanced tribe. Return `true` to allow, `false` to disallow.\n",
                "extends": {
                    "args": [
                        {
                            "finish": 9840037,
                            "name": "code",
                            "start": 9840033,
                            "type": "local",
                            "view": "fun(unit: unitObject, advancedTribe: boolean):boolean"
                        }
                    ],
                    "desc": "Registers a function that is called to determine if `unit` can found a city at the unit's location. `advancedTribe` is `true` when picking up a hut with `unit` triggers an advanced tribe. Return `true` to allow, `false` to disallow.\n",
                    "finish": 9840042,
                    "start": 9840000,
                    "type": "function",
                    "view": "function civ.scen.onCanFoundCity(code: fun(unit: unitObject, advancedTribe: boolean):boolean)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 9840032,
                "name": "onCanFoundCity",
                "start": 9840009,
                "type": "setfield"
            },
            {
                "desc": "Registers a function that is called when a tribe's spaceship reaches its target. Just registering this function causes the game to not end at this point (\"endgame override\").\n",
                "extends": {
                    "args": [
                        {
                            "finish": 9900040,
                            "name": "code",
                            "start": 9900036,
                            "type": "local",
                            "view": "fun(tribe: tribeObject)"
                        }
                    ],
                    "desc": "Registers a function that is called when a tribe's spaceship reaches its target. Just registering this function causes the game to not end at this point (\"endgame override\").\n",
                    "finish": 9900045,
                    "start": 9900000,
                    "type": "function",
                    "view": "function civ.scen.onCentauriArrival(code: fun(tribe: tribeObject))"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 9900035,
                "name": "onCentauriArrival",
                "start": 9900009,
                "type": "setfield"
            },
            {
                "desc": "Registers a function that is called every time a unit is chosen to defend a tile. The first parameter is the default function as implemented by the game. It takes `tile` and `attacker` as parameters. You can call this to produce a result for cases you don't need to handle yourself. The second parameter is the tile that's being considered, the third is the attacking unit, and the fourth, `isCombat`, is a boolean that indicates if this invocation will be followed by combat. This function is also called by the AI to determine its goals, in which case `isCombat` is false.\n",
                "extends": {
                    "args": [
                        {
                            "finish": 9980039,
                            "name": "code",
                            "start": 9980035,
                            "type": "local",
                            "view": "fun(defaultFunction: fun(tile: tileObject, attacker: unitObject):(chosenUnit: unitObject), tile: tileObject, attacker: unitObject, isCombat: boolean):(chosenUnit: unitObject)"
                        }
                    ],
                    "desc": "Registers a function that is called every time a unit is chosen to defend a tile. The first parameter is the default function as implemented by the game. It takes `tile` and `attacker` as parameters. You can call this to produce a result for cases you don't need to handle yourself. The second parameter is the tile that's being considered, the third is the attacking unit, and the fourth, `isCombat`, is a boolean that indicates if this invocation will be followed by combat. This function is also called by the AI to determine its goals, in which case `isCombat` is false.\n",
                    "finish": 9980044,
                    "start": 9980000,
                    "type": "function",
                    "view": "function civ.scen.onChooseDefender(code: fun(defaultFunction: fun(tile: tileObject, attacker: unitObject):(chosenUnit: unitObject), tile: tileObject, attacker: unitObject, isCombat: boolean):(chosenUnit: unitObject))"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 9980034,
                "name": "onChooseDefender",
                "start": 9980009,
                "type": "setfield"
            },
            {
                "desc": "Registers a function that is called when a city is destroyed.\n",
                "extends": {
                    "args": [
                        {
                            "finish": 10050038,
                            "name": "code",
                            "start": 10050034,
                            "type": "local",
                            "view": "fun(city: cityObject)"
                        }
                    ],
                    "desc": "Registers a function that is called when a city is destroyed.\n",
                    "finish": 10050043,
                    "start": 10050000,
                    "type": "function",
                    "view": "function civ.scen.onCityDestroyed(code: fun(city: cityObject))"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 10050033,
                "name": "onCityDestroyed",
                "start": 10050009,
                "type": "setfield"
            },
            {
                "desc": "Registers a function to be called every time a city is founded. The callback takes the city as a parameter, and can optionally return a function (since 0.18) that is called to perform cleanup when the user cancels founding the city.\n",
                "extends": {
                    "args": [
                        {
                            "finish": 10120036,
                            "name": "code",
                            "start": 10120032,
                            "type": "local",
                            "view": "fun(city: cityObject)|fun(city: cityObject):fun()"
                        }
                    ],
                    "desc": "Registers a function to be called every time a city is founded. The callback takes the city as a parameter, and can optionally return a function (since 0.18) that is called to perform cleanup when the user cancels founding the city.\n",
                    "finish": 10120041,
                    "start": 10120000,
                    "type": "function",
                    "view": "function civ.scen.onCityFounded(code: fun(city: cityObject)|fun(city: cityObject):fun())"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 10120031,
                "name": "onCityFounded",
                "start": 10120009,
                "type": "setfield"
            },
            {
                "desc": "Registers a function that is called when a tribe's cities have been processed for that turn. See `onTurn` for interaction with other \"turn\" triggers.\n",
                "extends": {
                    "args": [
                        {
                            "finish": 10190047,
                            "name": "code",
                            "start": 10190043,
                            "type": "local",
                            "view": "fun(turn: integer, tribe: tribeObject)"
                        }
                    ],
                    "desc": "Registers a function that is called when a tribe's cities have been processed for that turn. See `onTurn` for interaction with other \"turn\" triggers.\n",
                    "finish": 10190052,
                    "start": 10190000,
                    "type": "function",
                    "view": "function civ.scen.onCityProcessingComplete(code: fun(turn: integer, tribe: tribeObject))"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 10190042,
                "name": "onCityProcessingComplete",
                "start": 10190009,
                "type": "setfield"
            },
            {
                "desc": "Registers a function that is called when a city completes its production order. The produced item `prod` is either a unit, improvement or wonder (this can be checked with the civ.is* functions).\n",
                "extends": {
                    "args": [
                        {
                            "finish": 10310039,
                            "name": "code",
                            "start": 10310035,
                            "type": "local",
                            "view": "fun(city: cityObject, prod: improvementObject|unitObject|wonderObject)"
                        }
                    ],
                    "desc": "Registers a function that is called when a city completes its production order. The produced item `prod` is either a unit, improvement or wonder (this can be checked with the civ.is* functions).\n",
                    "finish": 10310044,
                    "start": 10310000,
                    "type": "function",
                    "view": "function civ.scen.onCityProduction(code: fun(city: cityObject, prod: improvementObject|unitObject|wonderObject))"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 10310034,
                "name": "onCityProduction",
                "start": 10310009,
                "type": "setfield"
            },
            {
                "desc": "Registers a function that is called when a city is captured. `city` is the city changing hands, at this point city.owner is the new owner already. `defender` is the old owner.\n",
                "extends": {
                    "args": [
                        {
                            "finish": 10380034,
                            "name": "code",
                            "start": 10380030,
                            "type": "local",
                            "view": "fun(city: cityObject, defender: tribeObject)"
                        }
                    ],
                    "desc": "Registers a function that is called when a city is captured. `city` is the city changing hands, at this point city.owner is the new owner already. `defender` is the old owner.\n",
                    "finish": 10380039,
                    "start": 10380000,
                    "type": "function",
                    "view": "function civ.scen.onCityTaken(code: fun(city: cityObject, defender: tribeObject))"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 10380029,
                "name": "onCityTaken",
                "start": 10380009,
                "type": "setfield"
            },
            {
                "desc": "Registers a function that is called when the game ends. `reason` is an integer between 1 and 6:\n<br>1 and 2 - Space race victory. This does not trigger if `onCentauriArrival` has a callback registered. 1 means victory by active player.\n<br>3 - Conquest victory\n<br>4 - Defeat\n<br>5 - Retirement\n<br>6 - Macro ENDGAME action\n<br>Return `true` to end the game, `false` to keep playing.\n",
                "extends": {
                    "args": [
                        {
                            "finish": 10610033,
                            "name": "code",
                            "start": 10610029,
                            "type": "local",
                            "view": "fun(reason: gameEndReasons):(gameIsOver: boolean)"
                        }
                    ],
                    "desc": "Registers a function that is called when the game ends. `reason` is an integer between 1 and 6:\n<br>1 and 2 - Space race victory. This does not trigger if `onCentauriArrival` has a callback registered. 1 means victory by active player.\n<br>3 - Conquest victory\n<br>4 - Defeat\n<br>5 - Retirement\n<br>6 - Macro ENDGAME action\n<br>Return `true` to end the game, `false` to keep playing.\n",
                    "finish": 10610038,
                    "start": 10610000,
                    "type": "function",
                    "view": "function civ.scen.onGameEnds(code: fun(reason: gameEndReasons):(gameIsOver: boolean))"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 10610028,
                "name": "onGameEnds",
                "start": 10610009,
                "type": "setfield"
            },
            {
                "desc": "Registers a function that is called when the game needs to get the date string for a given turn (e.g. \"4000 B.C.\" for turn 1). `turn` is the turn for which the date is requested (not always the current turn), and `defaultDateString` is the string as formatted by the game\n",
                "extends": {
                    "args": [
                        {
                            "finish": 10690041,
                            "name": "code",
                            "start": 10690037,
                            "type": "local",
                            "view": "fun(turn: integer, defaultDateString: string):(displayedDate: string)"
                        }
                    ],
                    "desc": "Registers a function that is called when the game needs to get the date string for a given turn (e.g. \"4000 B.C.\" for turn 1). `turn` is the turn for which the date is requested (not always the current turn), and `defaultDateString` is the string as formatted by the game\n",
                    "finish": 10690046,
                    "start": 10690000,
                    "type": "function",
                    "view": "function civ.scen.onGetFormattedDate(code: fun(turn: integer, defaultDateString: string):(displayedDate: string))"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 10690036,
                "name": "onGetFormattedDate",
                "start": 10690009,
                "type": "setfield"
            },
            {
                "desc": "Registers a function that is called when calculating the cost to rush-buy a city's current production. It takes the city and the cost as calculated by the game as parameters. Returns an integer representing the new costs.\n",
                "extends": {
                    "args": [
                        {
                            "finish": 10760039,
                            "name": "code",
                            "start": 10760035,
                            "type": "local",
                            "view": "fun(city: cityObject, defaultCost: integer):(costToComplete: integer)"
                        }
                    ],
                    "desc": "Registers a function that is called when calculating the cost to rush-buy a city's current production. It takes the city and the cost as calculated by the game as parameters. Returns an integer representing the new costs.\n",
                    "finish": 10760044,
                    "start": 10760000,
                    "type": "function",
                    "view": "function civ.scen.onGetRushBuyCost(code: fun(city: cityObject, defaultCost: integer):(costToComplete: integer))"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 10760034,
                "name": "onGetRushBuyCost",
                "start": 10760009,
                "type": "setfield"
            },
            {
                "desc": "Registers a function to be called every time combat is initiated. The callback takes seven parameters, the attacker, the defender, attackerDie ('die' as in dice, the attacker's chance to hit), attackerPower (attacker's firepower), defenderDie, defenderPower and isSneakAttack. Returns a coroutine that yields every time it wants to process a round, and returns when it wants combat to end. Example:\n\n```lua\nciv.scen.onInitiateCombat(function (attacker, defender, attackerDie, attackerPower, defenderDie, defenderPower)\n  print(\"Attacker's die: 1d\" .. attackerDie .. \", firepower: \" .. attackerPower)\n  print(\"Defender's die: 1d\" .. defenderDie .. \", firepower: \" .. defenderPower)\n  return coroutine.create(function ()\n    local round = 0\n    while (round < 5 and attacker.hitpoints >= 0 and defender.hitpoints >= 0) do\n      print(\"Round \" .. round)\n      print(attacker, defender)\n      if round % 2 == 0 then\n        attacker.damage = attacker.damage + 2\n        coroutine.yield(true, defender) -- either attacker or defender\n      else\n        print(\"Attack bonus!\")\n        result = coroutine.yield(false, attackerDie * 2, attackerPower * 2)\n        print(result.winner, result.attackerRoll, result.defenderRoll, result.reroll)\n      end\n      round = round + 1\n    end\n    print(\"End of combat\")\n  end)\nend)\n```\n\nThis example shows how to limit combat to five rounds, damages the attacker on even rounds and doubles the attacker's values on odd rounds.\n\nIf the coroutine yields true as its first value, the game's default combat resolution is skipped for that round and the designer is responsible for updating damage. The second value yielded is either the attacker or the defender, this is used to render animations etc. In this case the coroutine resumes without any values.\n\nIf the coroutine yields false as its first value, the game runs its default combat algorithm. The designer can additionally yield modified values for attackerDie, attackerPower, defenderDie and defenderPower (in this order) which will be used by the game for that round. In this case the coroutine resumes with the result of the round, a table containing four values:\n- winner, this is either attacker or defender.\n- attackerRoll, the result of the attacker's die roll\n- defenderRoll, the result of the defender's die roll\n- reroll, true if a reroll happened. \n\nThis can happen only if the attacker is tribe 0, the defender is a unit guarding a city, and the city is the capital or the tribe has less than 8 cities in total and the attacker's die roll is higher than the defender's. A reroll can happen at most once.\n",
                "extends": {
                    "args": [
                        {
                            "finish": 11190039,
                            "name": "code",
                            "start": 11190035,
                            "type": "local",
                            "view": "fun(attacker: unitObject, defender: unitObject, attackerDie: integer, attackerPower: integer, defenderDie: integer, defenderPower: integer, isSneakAttack: boolean):thread"
                        }
                    ],
                    "desc": "Registers a function to be called every time combat is initiated. The callback takes seven parameters, the attacker, the defender, attackerDie ('die' as in dice, the attacker's chance to hit), attackerPower (attacker's firepower), defenderDie, defenderPower and isSneakAttack. Returns a coroutine that yields every time it wants to process a round, and returns when it wants combat to end. Example:\n\n```lua\nciv.scen.onInitiateCombat(function (attacker, defender, attackerDie, attackerPower, defenderDie, defenderPower)\n  print(\"Attacker's die: 1d\" .. attackerDie .. \", firepower: \" .. attackerPower)\n  print(\"Defender's die: 1d\" .. defenderDie .. \", firepower: \" .. defenderPower)\n  return coroutine.create(function ()\n    local round = 0\n    while (round < 5 and attacker.hitpoints >= 0 and defender.hitpoints >= 0) do\n      print(\"Round \" .. round)\n      print(attacker, defender)\n      if round % 2 == 0 then\n        attacker.damage = attacker.damage + 2\n        coroutine.yield(true, defender) -- either attacker or defender\n      else\n        print(\"Attack bonus!\")\n        result = coroutine.yield(false, attackerDie * 2, attackerPower * 2)\n        print(result.winner, result.attackerRoll, result.defenderRoll, result.reroll)\n      end\n      round = round + 1\n    end\n    print(\"End of combat\")\n  end)\nend)\n```\n\nThis example shows how to limit combat to five rounds, damages the attacker on even rounds and doubles the attacker's values on odd rounds.\n\nIf the coroutine yields true as its first value, the game's default combat resolution is skipped for that round and the designer is responsible for updating damage. The second value yielded is either the attacker or the defender, this is used to render animations etc. In this case the coroutine resumes without any values.\n\nIf the coroutine yields false as its first value, the game runs its default combat algorithm. The designer can additionally yield modified values for attackerDie, attackerPower, defenderDie and defenderPower (in this order) which will be used by the game for that round. In this case the coroutine resumes with the result of the round, a table containing four values:\n- winner, this is either attacker or defender.\n- attackerRoll, the result of the attacker's die roll\n- defenderRoll, the result of the defender's die roll\n- reroll, true if a reroll happened. \n\nThis can happen only if the attacker is tribe 0, the defender is a unit guarding a city, and the city is the capital or the tribe has less than 8 cities in total and the attacker's die roll is higher than the defender's. A reroll can happen at most once.\n",
                    "finish": 11190044,
                    "start": 11190000,
                    "type": "function",
                    "view": "function civ.scen.onInitiateCombat(code: fun(attacker: unitObject, defender: unitObject, attackerDie: integer, attackerPower: integer, defenderDie: integer, defenderPower: integer, isSneakAttack: boolean):thread)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 11190034,
                "name": "onInitiateCombat",
                "start": 11190009,
                "type": "setfield"
            },
            {
                "desc": "Registers a function to be called every time a key is pressed.\n\n\n@*param* `code` โ (keyCode:integer)",
                "extends": {
                    "args": [
                        {
                            "desc": "(keyCode:integer)",
                            "finish": 11400033,
                            "name": "code",
                            "start": 11400029,
                            "type": "local",
                            "view": "function"
                        }
                    ],
                    "desc": "Registers a function to be called every time a key is pressed.\n\n\n@*param* `code` โ (keyCode:integer)",
                    "finish": 11400038,
                    "start": 11400000,
                    "type": "function",
                    "view": "function civ.scen.onKeyPress(code: function)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 11400028,
                "name": "onKeyPress",
                "start": 11400009,
                "type": "setfield"
            },
            {
                "desc": "Registers a function that is called when the game is loaded.\n",
                "extends": {
                    "args": [
                        {
                            "finish": 11470029,
                            "name": "code",
                            "start": 11470025,
                            "type": "local",
                            "view": "fun(savedData: string)"
                        }
                    ],
                    "desc": "Registers a function that is called when the game is loaded.\n",
                    "finish": 11470034,
                    "start": 11470000,
                    "type": "function",
                    "view": "function civ.scen.onLoad(code: fun(savedData: string))"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 11470024,
                "name": "onLoad",
                "start": 11470009,
                "type": "setfield"
            },
            {
                "desc": "Registers a function that is called when two tribes attempt negotiations. `talker` is the tribe initiating the contact, `listener` the receiver. Return `true` to allow the negotiations to commence, `false` to deny.\n",
                "extends": {
                    "args": [
                        {
                            "finish": 11540036,
                            "name": "code",
                            "start": 11540032,
                            "type": "local",
                            "view": "fun(talker: tribeObject, listener: tribeObject):(canTalk: boolean)"
                        }
                    ],
                    "desc": "Registers a function that is called when two tribes attempt negotiations. `talker` is the tribe initiating the contact, `listener` the receiver. Return `true` to allow the negotiations to commence, `false` to deny.\n",
                    "finish": 11540041,
                    "start": 11540000,
                    "type": "function",
                    "view": "function civ.scen.onNegotiation(code: fun(talker: tribeObject, listener: tribeObject):(canTalk: boolean))"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 11540031,
                "name": "onNegotiation",
                "start": 11540009,
                "type": "setfield"
            },
            {
                "desc": "Registers a function to be called during every combat turn. The first parameter of the callback is the default resolution function, as implemented by the game. It takes the attacker and defender as parameters. You can call this to produce a result for cases you don't need to handle yourself.\nReturn `true` to continue combat, `false` to stop.\n\nSee onInitiateCombat for replacement.\n",
                "extends": {
                    "args": [
                        {
                            "finish": 11650038,
                            "name": "code",
                            "start": 11650034,
                            "type": "local",
                            "view": "fun(defaultResolutionFunction: fun(defender: unitObject, attacker: unitObject):(combatContinues: boolean), defender: unitObject, attacker: unitObject):(combatContinues: boolean)"
                        }
                    ],
                    "desc": "Registers a function to be called during every combat turn. The first parameter of the callback is the default resolution function, as implemented by the game. It takes the attacker and defender as parameters. You can call this to produce a result for cases you don't need to handle yourself.\nReturn `true` to continue combat, `false` to stop.\n\nSee onInitiateCombat for replacement.\n",
                    "finish": 11650043,
                    "start": 11650000,
                    "type": "function",
                    "view": "function civ.scen.onResolveCombat(code: fun(defaultResolutionFunction: fun(defender: unitObject, attacker: unitObject):(combatContinues: boolean), defender: unitObject, attacker: unitObject):(combatContinues: boolean))"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 11650033,
                "name": "onResolveCombat",
                "start": 11650009,
                "type": "setfield"
            },
            {
                "desc": "Registers a function that is called when the game is saved.\n",
                "extends": {
                    "args": [
                        {
                            "finish": 11730029,
                            "name": "code",
                            "start": 11730025,
                            "type": "local",
                            "view": "fun():(savedData: string)"
                        }
                    ],
                    "desc": "Registers a function that is called when the game is saved.\n",
                    "finish": 11730034,
                    "start": 11730000,
                    "type": "function",
                    "view": "function civ.scen.onSave(code: fun():(savedData: string))"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 11730024,
                "name": "onSave",
                "start": 11730009,
                "type": "setfield"
            },
            {
                "desc": "Registers a function that is called when the scenario is loaded.  (This is whenever a game is loaded, not just when the scenario is started.)\n",
                "extends": {
                    "args": [
                        {
                            "finish": 11800039,
                            "name": "code",
                            "start": 11800035,
                            "type": "local",
                            "view": "fun()"
                        }
                    ],
                    "desc": "Registers a function that is called when the scenario is loaded.  (This is whenever a game is loaded, not just when the scenario is started.)\n",
                    "finish": 11800044,
                    "start": 11800000,
                    "type": "function",
                    "view": "function civ.scen.onScenarioLoaded(code: fun())"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 11800034,
                "name": "onScenarioLoaded",
                "start": 11800009,
                "type": "setfield"
            },
            {
                "desc": "Registers a function that is called when a schism is triggered. This happens when the capital of a AI-controlled tribe with more than four cities is captured, and, if the attacker is human-controlled, it is ranked lower in power than the defender. If the attacker is AI-controlled the best human tribe must be ranked lower than the defender for the schism to trigger.\nIf the schism is allowed, a new tribe will be created that takes over about half the cities of the old tribe. If no new tribe can be created, the schism does not occur.\nReturn `true` to allow the schism to happen, `false` to deny.\n",
                "extends": {
                    "args": [
                        {
                            "finish": 11890031,
                            "name": "code",
                            "start": 11890027,
                            "type": "local",
                            "view": "fun(tribe: tribeObject):(allowSchism: boolean)"
                        }
                    ],
                    "desc": "Registers a function that is called when a schism is triggered. This happens when the capital of a AI-controlled tribe with more than four cities is captured, and, if the attacker is human-controlled, it is ranked lower in power than the defender. If the attacker is AI-controlled the best human tribe must be ranked lower than the defender for the schism to trigger.\nIf the schism is allowed, a new tribe will be created that takes over about half the cities of the old tribe. If no new tribe can be created, the schism does not occur.\nReturn `true` to allow the schism to happen, `false` to deny.\n",
                    "finish": 11890036,
                    "start": 11890000,
                    "type": "function",
                    "view": "function civ.scen.onSchism(code: fun(tribe: tribeObject):(allowSchism: boolean))"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 11890026,
                "name": "onSchism",
                "start": 11890009,
                "type": "setfield"
            },
            {
                "desc": "Registers a function that is called when a new music track is to be played. `track` is either nil or an integer. If nil, the game wants to play a random track, if not nil it's either due to the user choosing a track from the menu (first track has id 0), or the game playing one of it's special tracks (\"Funeral March\" - track id 0, and \"Ode to Joy\" - track id 1). To handle special tracks, you can return nil to signal that the game should play the default track associated with that track id. If you want to handle this track id, call civ.playMusic (this will check the Music folder of the scenario first before falling back to the global Music folder) and return an integer, which is used to synchronize the track list in the menu. The track names can be added in @PICKMUSICTOT in Game.txt.\n",
                "extends": {
                    "args": [
                        {
                            "finish": 11950036,
                            "name": "code",
                            "start": 11950032,
                            "type": "local",
                            "view": "fun(track: integer|nil):integer|nil"
                        }
                    ],
                    "desc": "Registers a function that is called when a new music track is to be played. `track` is either nil or an integer. If nil, the game wants to play a random track, if not nil it's either due to the user choosing a track from the menu (first track has id 0), or the game playing one of it's special tracks (\"Funeral March\" - track id 0, and \"Ode to Joy\" - track id 1). To handle special tracks, you can return nil to signal that the game should play the default track associated with that track id. If you want to handle this track id, call civ.playMusic (this will check the Music folder of the scenario first before falling back to the global Music folder) and return an integer, which is used to synchronize the track list in the menu. The track names can be added in @PICKMUSICTOT in Game.txt.\n",
                    "finish": 11950041,
                    "start": 11950000,
                    "type": "function",
                    "view": "function civ.scen.onSelectMusic(code: fun(track: integer|nil):integer|nil)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 11950031,
                "name": "onSelectMusic",
                "start": 11950009,
                "type": "setfield"
            },
            {
                "desc": "Registers a function that is called at the start of a tribe's turn. See `onTurn` for interaction with other \"turn\" triggers.\n",
                "extends": {
                    "args": [
                        {
                            "finish": 12020039,
                            "name": "code",
                            "start": 12020035,
                            "type": "local",
                            "view": "fun(turn: integer, tribe: tribeObject)"
                        }
                    ],
                    "desc": "Registers a function that is called at the start of a tribe's turn. See `onTurn` for interaction with other \"turn\" triggers.\n",
                    "finish": 12020044,
                    "start": 12020000,
                    "type": "function",
                    "view": "function civ.scen.onTribeTurnBegin(code: fun(turn: integer, tribe: tribeObject))"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 12020034,
                "name": "onTribeTurnBegin",
                "start": 12020009,
                "type": "setfield"
            },
            {
                "desc": "Registers a function that is called at the end of a tribe's turn. See `onTurn` for interaction with other \"turn\" triggers.\n",
                "extends": {
                    "args": [
                        {
                            "finish": 12090037,
                            "name": "code",
                            "start": 12090033,
                            "type": "local",
                            "view": "fun(turn: integer, tribe: tribeObject)"
                        }
                    ],
                    "desc": "Registers a function that is called at the end of a tribe's turn. See `onTurn` for interaction with other \"turn\" triggers.\n",
                    "finish": 12090042,
                    "start": 12090000,
                    "type": "function",
                    "view": "function civ.scen.onTribeTurnEnd(code: fun(turn: integer, tribe: tribeObject))"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 12090032,
                "name": "onTribeTurnEnd",
                "start": 12090009,
                "type": "setfield"
            },
            {
                "desc": "Registers a function that is called at the start of a turn. The basic sequence of this and other \"turn\" triggers is as follows:\n<br>`onTurn` fires\n<br>Non-tribe-specific updates take place\n<br>`onTribeTurnBegin` fires for tribe 0.\n<br>Tribe 0 cities are processed.\n<br>`onCityProcessingComplete` fires for tribe 0 (this fires even when a tribe has no cities).\n<br>Tribe 0 units move\n<br>`onTribeTurnEnd` fires for tribe 0.\n<br>All active tribes are processed in order according to the sequence for tribe 0\n<br>`onTribeTurnEnd` fires for tribe 7.\n<br>`onTurn` fires for the next turn\n",
                "extends": {
                    "args": [
                        {
                            "finish": 12260029,
                            "name": "code",
                            "start": 12260025,
                            "type": "local",
                            "view": "fun(turn: integer)"
                        }
                    ],
                    "desc": "Registers a function that is called at the start of a turn. The basic sequence of this and other \"turn\" triggers is as follows:\n<br>`onTurn` fires\n<br>Non-tribe-specific updates take place\n<br>`onTribeTurnBegin` fires for tribe 0.\n<br>Tribe 0 cities are processed.\n<br>`onCityProcessingComplete` fires for tribe 0 (this fires even when a tribe has no cities).\n<br>Tribe 0 units move\n<br>`onTribeTurnEnd` fires for tribe 0.\n<br>All active tribes are processed in order according to the sequence for tribe 0\n<br>`onTribeTurnEnd` fires for tribe 7.\n<br>`onTurn` fires for the next turn\n",
                    "finish": 12260034,
                    "start": 12260000,
                    "type": "function",
                    "view": "function civ.scen.onTurn(code: fun(turn: integer))"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 12260024,
                "name": "onTurn",
                "start": 12260009,
                "type": "setfield"
            },
            {
                "desc": "Registers a function that is called whenever a unit is killed. `loser` is the unit that is killed, `winner` is the unit responsible for it.\n",
                "extends": {
                    "args": [
                        {
                            "finish": 12330035,
                            "name": "code",
                            "start": 12330031,
                            "type": "local",
                            "view": "fun(loser: unitObject, winner: unitObject)"
                        }
                    ],
                    "desc": "Registers a function that is called whenever a unit is killed. `loser` is the unit that is killed, `winner` is the unit responsible for it.\n",
                    "finish": 12330040,
                    "start": 12330000,
                    "type": "function",
                    "view": "function civ.scen.onUnitKilled(code: fun(loser: unitObject, winner: unitObject))"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 12330030,
                "name": "onUnitKilled",
                "start": 12330009,
                "type": "setfield"
            },
            {
                "desc": "Registers a function that is called when a nuclear weapon is used. This is also called when a spy plants a nuclear device in a city. `unit` is the weapon or the spy unit, `tile` is the location of the attack. Return `false` to abort the attack, `true` to proceed.\n",
                "extends": {
                    "args": [
                        {
                            "finish": 12400041,
                            "name": "code",
                            "start": 12400037,
                            "type": "local",
                            "view": "fun(unit: unitObject, tile: tileObject):(attackProceeds: boolean)"
                        }
                    ],
                    "desc": "Registers a function that is called when a nuclear weapon is used. This is also called when a spy plants a nuclear device in a city. `unit` is the weapon or the spy unit, `tile` is the location of the attack. Return `false` to abort the attack, `true` to proceed.\n",
                    "finish": 12400046,
                    "start": 12400000,
                    "type": "function",
                    "view": "function civ.scen.onUseNuclearWeapon(code: fun(unit: unitObject, tile: tileObject):(attackProceeds: boolean))"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 12400036,
                "name": "onUseNuclearWeapon",
                "start": 12400009,
                "type": "setfield"
            },
            {
                "desc": "",
                "extends": {
                    "finish": 9470032,
                    "start": 9470017,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 9470032,
                            "start": 9470017,
                            "type": "doc.type.name",
                            "view": "civ.scen.params"
                        }
                    ],
                    "view": "civ.scen.params"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 9470032,
                "name": "params",
                "start": 9470010,
                "type": "doc.field"
            }
        ],
        "name": "civ.scen",
        "type": "type"
    },
    {
        "defines": [
            {
                "extends": {
                    "finish": 9490013,
                    "start": 9490011,
                    "type": "table",
                    "view": "civ.scen"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 9490008,
                "start": 9490000,
                "type": "setfield"
            }
        ],
        "desc": "",
        "name": "civ.scen",
        "type": "variable"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 12570032,
                "start": 12570010,
                "type": "doc.class"
            }
        ],
        "fields": [
            {
                "desc": "If set to true, onActivateUnit will re-trigger for every tile the active unit moves. Defaults to false, in which case onActivateUnit triggers only once.  In the Lua Scenario Template, this is set to true in LuaParameterFiles\\parameters.lua.",
                "extends": {
                    "finish": 12580039,
                    "start": 12580032,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 12580039,
                            "start": 12580032,
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 12580039,
                "name": "activateUnitEveryMove",
                "start": 12580010,
                "type": "doc.field"
            }
        ],
        "name": "civ.scen.compatibility",
        "type": "type"
    },
    {
        "defines": [
            {
                "extends": {
                    "finish": 12590027,
                    "start": 12590025,
                    "type": "table",
                    "view": "civ.scen.compatibility"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 12590022,
                "start": 12590000,
                "type": "setfield"
            }
        ],
        "name": "civ.scen.compatibility",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "finish": 840055,
                    "start": 840051,
                    "type": "boolean",
                    "view": "boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaParameterFiles/parameters.lua",
                "finish": 840048,
                "start": 840004,
                "type": "setfield"
            }
        ],
        "desc": "A boolean is a data type native to Lua with exactly two possible values, <code>true</code> and <code>false</code>. These are often used when evaluating logical statements, but logical statements accept other values as well. All values except <code>false</code> and <code>nil</code> are considered 'truthy', even values such as 0 or the empty string.\n[Programming in Lua, 2.2 -- Booleans](https://www.lua.org/pil/2.2.html)",
        "name": "civ.scen.compatibility.activateUnitEveryMove",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 9530037,
                            "name": "code",
                            "start": 9530033,
                            "type": "local",
                            "view": "fun(unit: unitObject, source: boolean, repeatMove: boolean)"
                        }
                    ],
                    "desc": "Registers a function to be called every time a unit is activated. The callback takes the unit activated as a parameter, and the source of unit activation. `source` is `true` if activated by keyboard or mouse click, `false` if activated by the game itself. `repeatMove` is `true` if it's a repeat activation caused by moving (see civ.scen.compatibility), `false` otherwise.",
                    "finish": 9530042,
                    "start": 9530000,
                    "type": "function",
                    "view": "function civ.scen.onActivateUnit(code: fun(unit: unitObject, source: boolean, repeatMove: boolean))"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 9530032,
                "start": 9530009,
                "type": "setfield"
            }
        ],
        "desc": "Registers a function to be called every time a unit is activated. The callback takes the unit activated as a parameter, and the source of unit activation. `source` is `true` if activated by keyboard or mouse click, `false` if activated by the game itself. `repeatMove` is `true` if it's a repeat activation caused by moving (see civ.scen.compatibility), `false` otherwise.",
        "name": "civ.scen.onActivateUnit",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 9570034,
                            "name": "code",
                            "start": 9570030,
                            "type": "local",
                            "view": "fun(unit: unitObject, previousOwner: tribeObject)"
                        }
                    ],
                    "desc": "Registers a function that is called when a unit is bribed successfully. unit.owner is the new owner at this point, `previousOwner` the old owner.",
                    "finish": 9570039,
                    "start": 9570000,
                    "type": "function",
                    "view": "function civ.scen.onBribeUnit(code: fun(unit: unitObject, previousOwner: tribeObject))"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 9570029,
                "start": 9570009,
                "type": "setfield"
            }
        ],
        "desc": "Registers a function that is called when a unit is bribed successfully. unit.owner is the new owner at this point, `previousOwner` the old owner.",
        "name": "civ.scen.onBribeUnit",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 9710043,
                            "name": "code",
                            "start": 9710039,
                            "type": "local",
                            "view": "fun(city: cityObject, food: integer, shields: integer, trade: integer):(foodChange: integer, shieldChangeBeforeWaste: integer, shieldChangeAfterWaste: integer, tradeChangeBeforeCor...(too long)...: integer)"
                        }
                    ],
                    "desc": "Registers a function to be called every time a city calculates its total resource yield. Input is the city, and the food, shields and trade of its tiles. Returns a 5-tuple of modifiers, food change, shield change before waste, shield change after waste, trade change before corruption, trade change after corruption. These modifiers are applied at the following points in the calculation:\n<br>Calculate yield from all worked tiles\n<br>Run onCalculateCityYield\n<br>Add foodChange, shieldChangeBeforeWaste and tradeChangeBeforeCorruption\n<br>Add changes from food trade routes\n<br>Add shields from improvements\n<br>Calculate and subtract waste\n<br>Calculate corruption and add changes from commodity trade routes\n<br>Calculate corruption again (now using the value after trade routes) and subtract.\n<br>Add shieldChangeAfterWaste and tradeChangeAfterCorruption\n<br>Calculate Tax/Lux/Sci",
                    "finish": 9710048,
                    "start": 9710000,
                    "type": "function",
                    "view": "function civ.scen.onCalculateCityYield(code: fun(city: cityObject, food: integer, shields: integer, trade: integer):(foodChange: integer, shieldChangeBeforeWaste: integer, shieldChangeAfterWaste: integer, tradeChangeBeforeCor...(too long)...: integer))"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 9710038,
                "start": 9710009,
                "type": "setfield"
            }
        ],
        "desc": "Registers a function to be called every time a city calculates its total resource yield. Input is the city, and the food, shields and trade of its tiles. Returns a 5-tuple of modifiers, food change, shield change before waste, shield change after waste, trade change before corruption, trade change after corruption. These modifiers are applied at the following points in the calculation:\n<br>Calculate yield from all worked tiles\n<br>Run onCalculateCityYield\n<br>Add foodChange, shieldChangeBeforeWaste and tradeChangeBeforeCorruption\n<br>Add changes from food trade routes\n<br>Add shields from improvements\n<br>Calculate and subtract waste\n<br>Calculate corruption and add changes from commodity trade routes\n<br>Calculate corruption again (now using the value after trade routes) and subtract.\n<br>Add shieldChangeAfterWaste and tradeChangeAfterCorruption\n<br>Calculate Tax/Lux/Sci",
        "name": "civ.scen.onCalculateCityYield",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 9780033,
                            "name": "code",
                            "start": 9780029,
                            "type": "local",
                            "view": "fun(defaultBuildFunction: fun(city: cityObject, item: improvementObject|unitTypeObject|wonderObject):(cityCanBuildItemByDefault: boolean, city: cityObject, item: improvementObject|...(too long)...: boolean)"
                        }
                    ],
                    "desc": "Registers a function to be called every time a check is done whether a city can build something or not. It is called for all unit types, improvements and wonders. The first parameter of the callback is the default build function, as implemented by the game. It takes the city and item as parameters. You can call this to produce a result for cases you don't need to handle yourself. `item` can be a unittype, improvement or wonder.\nReturn `true` if `city` is allowed to produce `item`, `false` if not. \n",
                    "finish": 9780038,
                    "start": 9780000,
                    "type": "function",
                    "view": "function civ.scen.onCanBuild(code: fun(defaultBuildFunction: fun(city: cityObject, item: improvementObject|unitTypeObject|wonderObject):(cityCanBuildItemByDefault: boolean, city: cityObject, item: improvementObject|...(too long)...: boolean))"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 9780028,
                "start": 9780009,
                "type": "setfield"
            }
        ],
        "desc": "Registers a function to be called every time a check is done whether a city can build something or not. It is called for all unit types, improvements and wonders. The first parameter of the callback is the default build function, as implemented by the game. It takes the city and item as parameters. You can call this to produce a result for cases you don't need to handle yourself. `item` can be a unittype, improvement or wonder.\nReturn `true` if `city` is allowed to produce `item`, `false` if not. \n",
        "name": "civ.scen.onCanBuild",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 9840037,
                            "name": "code",
                            "start": 9840033,
                            "type": "local",
                            "view": "fun(unit: unitObject, advancedTribe: boolean):boolean"
                        }
                    ],
                    "desc": "Registers a function that is called to determine if `unit` can found a city at the unit's location. `advancedTribe` is `true` when picking up a hut with `unit` triggers an advanced tribe. Return `true` to allow, `false` to disallow.\n",
                    "finish": 9840042,
                    "start": 9840000,
                    "type": "function",
                    "view": "function civ.scen.onCanFoundCity(code: fun(unit: unitObject, advancedTribe: boolean):boolean)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 9840032,
                "start": 9840009,
                "type": "setfield"
            }
        ],
        "desc": "Registers a function that is called to determine if `unit` can found a city at the unit's location. `advancedTribe` is `true` when picking up a hut with `unit` triggers an advanced tribe. Return `true` to allow, `false` to disallow.\n",
        "name": "civ.scen.onCanFoundCity",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 9900040,
                            "name": "code",
                            "start": 9900036,
                            "type": "local",
                            "view": "fun(tribe: tribeObject)"
                        }
                    ],
                    "desc": "Registers a function that is called when a tribe's spaceship reaches its target. Just registering this function causes the game to not end at this point (\"endgame override\").\n",
                    "finish": 9900045,
                    "start": 9900000,
                    "type": "function",
                    "view": "function civ.scen.onCentauriArrival(code: fun(tribe: tribeObject))"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 9900035,
                "start": 9900009,
                "type": "setfield"
            }
        ],
        "desc": "Registers a function that is called when a tribe's spaceship reaches its target. Just registering this function causes the game to not end at this point (\"endgame override\").\n",
        "name": "civ.scen.onCentauriArrival",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 9980039,
                            "name": "code",
                            "start": 9980035,
                            "type": "local",
                            "view": "fun(defaultFunction: fun(tile: tileObject, attacker: unitObject):(chosenUnit: unitObject), tile: tileObject, attacker: unitObject, isCombat: boolean):(chosenUnit: unitObject)"
                        }
                    ],
                    "desc": "Registers a function that is called every time a unit is chosen to defend a tile. The first parameter is the default function as implemented by the game. It takes `tile` and `attacker` as parameters. You can call this to produce a result for cases you don't need to handle yourself. The second parameter is the tile that's being considered, the third is the attacking unit, and the fourth, `isCombat`, is a boolean that indicates if this invocation will be followed by combat. This function is also called by the AI to determine its goals, in which case `isCombat` is false.\n",
                    "finish": 9980044,
                    "start": 9980000,
                    "type": "function",
                    "view": "function civ.scen.onChooseDefender(code: fun(defaultFunction: fun(tile: tileObject, attacker: unitObject):(chosenUnit: unitObject), tile: tileObject, attacker: unitObject, isCombat: boolean):(chosenUnit: unitObject))"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 9980034,
                "start": 9980009,
                "type": "setfield"
            }
        ],
        "desc": "Registers a function that is called every time a unit is chosen to defend a tile. The first parameter is the default function as implemented by the game. It takes `tile` and `attacker` as parameters. You can call this to produce a result for cases you don't need to handle yourself. The second parameter is the tile that's being considered, the third is the attacking unit, and the fourth, `isCombat`, is a boolean that indicates if this invocation will be followed by combat. This function is also called by the AI to determine its goals, in which case `isCombat` is false.\n",
        "name": "civ.scen.onChooseDefender",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 10050038,
                            "name": "code",
                            "start": 10050034,
                            "type": "local",
                            "view": "fun(city: cityObject)"
                        }
                    ],
                    "desc": "Registers a function that is called when a city is destroyed.\n",
                    "finish": 10050043,
                    "start": 10050000,
                    "type": "function",
                    "view": "function civ.scen.onCityDestroyed(code: fun(city: cityObject))"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 10050033,
                "start": 10050009,
                "type": "setfield"
            }
        ],
        "desc": "Registers a function that is called when a city is destroyed.\n",
        "name": "civ.scen.onCityDestroyed",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 10120036,
                            "name": "code",
                            "start": 10120032,
                            "type": "local",
                            "view": "fun(city: cityObject)|fun(city: cityObject):fun()"
                        }
                    ],
                    "desc": "Registers a function to be called every time a city is founded. The callback takes the city as a parameter, and can optionally return a function (since 0.18) that is called to perform cleanup when the user cancels founding the city.\n",
                    "finish": 10120041,
                    "start": 10120000,
                    "type": "function",
                    "view": "function civ.scen.onCityFounded(code: fun(city: cityObject)|fun(city: cityObject):fun())"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 10120031,
                "start": 10120009,
                "type": "setfield"
            }
        ],
        "desc": "Registers a function to be called every time a city is founded. The callback takes the city as a parameter, and can optionally return a function (since 0.18) that is called to perform cleanup when the user cancels founding the city.\n",
        "name": "civ.scen.onCityFounded",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 10190047,
                            "name": "code",
                            "start": 10190043,
                            "type": "local",
                            "view": "fun(turn: integer, tribe: tribeObject)"
                        }
                    ],
                    "desc": "Registers a function that is called when a tribe's cities have been processed for that turn. See `onTurn` for interaction with other \"turn\" triggers.\n",
                    "finish": 10190052,
                    "start": 10190000,
                    "type": "function",
                    "view": "function civ.scen.onCityProcessingComplete(code: fun(turn: integer, tribe: tribeObject))"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 10190042,
                "start": 10190009,
                "type": "setfield"
            }
        ],
        "desc": "Registers a function that is called when a tribe's cities have been processed for that turn. See `onTurn` for interaction with other \"turn\" triggers.\n",
        "name": "civ.scen.onCityProcessingComplete",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 10310039,
                            "name": "code",
                            "start": 10310035,
                            "type": "local",
                            "view": "fun(city: cityObject, prod: improvementObject|unitObject|wonderObject)"
                        }
                    ],
                    "desc": "Registers a function that is called when a city completes its production order. The produced item `prod` is either a unit, improvement or wonder (this can be checked with the civ.is* functions).\n",
                    "finish": 10310044,
                    "start": 10310000,
                    "type": "function",
                    "view": "function civ.scen.onCityProduction(code: fun(city: cityObject, prod: improvementObject|unitObject|wonderObject))"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 10310034,
                "start": 10310009,
                "type": "setfield"
            }
        ],
        "desc": "Registers a function that is called when a city completes its production order. The produced item `prod` is either a unit, improvement or wonder (this can be checked with the civ.is* functions).\n",
        "name": "civ.scen.onCityProduction",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 10380034,
                            "name": "code",
                            "start": 10380030,
                            "type": "local",
                            "view": "fun(city: cityObject, defender: tribeObject)"
                        }
                    ],
                    "desc": "Registers a function that is called when a city is captured. `city` is the city changing hands, at this point city.owner is the new owner already. `defender` is the old owner.\n",
                    "finish": 10380039,
                    "start": 10380000,
                    "type": "function",
                    "view": "function civ.scen.onCityTaken(code: fun(city: cityObject, defender: tribeObject))"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 10380029,
                "start": 10380009,
                "type": "setfield"
            }
        ],
        "desc": "Registers a function that is called when a city is captured. `city` is the city changing hands, at this point city.owner is the new owner already. `defender` is the old owner.\n",
        "name": "civ.scen.onCityTaken",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 10610033,
                            "name": "code",
                            "start": 10610029,
                            "type": "local",
                            "view": "fun(reason: gameEndReasons):(gameIsOver: boolean)"
                        }
                    ],
                    "desc": "Registers a function that is called when the game ends. `reason` is an integer between 1 and 6:\n<br>1 and 2 - Space race victory. This does not trigger if `onCentauriArrival` has a callback registered. 1 means victory by active player.\n<br>3 - Conquest victory\n<br>4 - Defeat\n<br>5 - Retirement\n<br>6 - Macro ENDGAME action\n<br>Return `true` to end the game, `false` to keep playing.\n",
                    "finish": 10610038,
                    "start": 10610000,
                    "type": "function",
                    "view": "function civ.scen.onGameEnds(code: fun(reason: gameEndReasons):(gameIsOver: boolean))"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 10610028,
                "start": 10610009,
                "type": "setfield"
            }
        ],
        "desc": "Registers a function that is called when the game ends. `reason` is an integer between 1 and 6:\n<br>1 and 2 - Space race victory. This does not trigger if `onCentauriArrival` has a callback registered. 1 means victory by active player.\n<br>3 - Conquest victory\n<br>4 - Defeat\n<br>5 - Retirement\n<br>6 - Macro ENDGAME action\n<br>Return `true` to end the game, `false` to keep playing.\n",
        "name": "civ.scen.onGameEnds",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 10690041,
                            "name": "code",
                            "start": 10690037,
                            "type": "local",
                            "view": "fun(turn: integer, defaultDateString: string):(displayedDate: string)"
                        }
                    ],
                    "desc": "Registers a function that is called when the game needs to get the date string for a given turn (e.g. \"4000 B.C.\" for turn 1). `turn` is the turn for which the date is requested (not always the current turn), and `defaultDateString` is the string as formatted by the game\n",
                    "finish": 10690046,
                    "start": 10690000,
                    "type": "function",
                    "view": "function civ.scen.onGetFormattedDate(code: fun(turn: integer, defaultDateString: string):(displayedDate: string))"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 10690036,
                "start": 10690009,
                "type": "setfield"
            }
        ],
        "desc": "Registers a function that is called when the game needs to get the date string for a given turn (e.g. \"4000 B.C.\" for turn 1). `turn` is the turn for which the date is requested (not always the current turn), and `defaultDateString` is the string as formatted by the game\n",
        "name": "civ.scen.onGetFormattedDate",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 10760039,
                            "name": "code",
                            "start": 10760035,
                            "type": "local",
                            "view": "fun(city: cityObject, defaultCost: integer):(costToComplete: integer)"
                        }
                    ],
                    "desc": "Registers a function that is called when calculating the cost to rush-buy a city's current production. It takes the city and the cost as calculated by the game as parameters. Returns an integer representing the new costs.\n",
                    "finish": 10760044,
                    "start": 10760000,
                    "type": "function",
                    "view": "function civ.scen.onGetRushBuyCost(code: fun(city: cityObject, defaultCost: integer):(costToComplete: integer))"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 10760034,
                "start": 10760009,
                "type": "setfield"
            }
        ],
        "desc": "Registers a function that is called when calculating the cost to rush-buy a city's current production. It takes the city and the cost as calculated by the game as parameters. Returns an integer representing the new costs.\n",
        "name": "civ.scen.onGetRushBuyCost",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 11190039,
                            "name": "code",
                            "start": 11190035,
                            "type": "local",
                            "view": "fun(attacker: unitObject, defender: unitObject, attackerDie: integer, attackerPower: integer, defenderDie: integer, defenderPower: integer, isSneakAttack: boolean):thread"
                        }
                    ],
                    "desc": "Registers a function to be called every time combat is initiated. The callback takes seven parameters, the attacker, the defender, attackerDie ('die' as in dice, the attacker's chance to hit), attackerPower (attacker's firepower), defenderDie, defenderPower and isSneakAttack. Returns a coroutine that yields every time it wants to process a round, and returns when it wants combat to end. Example:\n\n```lua\nciv.scen.onInitiateCombat(function (attacker, defender, attackerDie, attackerPower, defenderDie, defenderPower)\n  print(\"Attacker's die: 1d\" .. attackerDie .. \", firepower: \" .. attackerPower)\n  print(\"Defender's die: 1d\" .. defenderDie .. \", firepower: \" .. defenderPower)\n  return coroutine.create(function ()\n    local round = 0\n    while (round < 5 and attacker.hitpoints >= 0 and defender.hitpoints >= 0) do\n      print(\"Round \" .. round)\n      print(attacker, defender)\n      if round % 2 == 0 then\n        attacker.damage = attacker.damage + 2\n        coroutine.yield(true, defender) -- either attacker or defender\n      else\n        print(\"Attack bonus!\")\n        result = coroutine.yield(false, attackerDie * 2, attackerPower * 2)\n        print(result.winner, result.attackerRoll, result.defenderRoll, result.reroll)\n      end\n      round = round + 1\n    end\n    print(\"End of combat\")\n  end)\nend)\n```\n\nThis example shows how to limit combat to five rounds, damages the attacker on even rounds and doubles the attacker's values on odd rounds.\n\nIf the coroutine yields true as its first value, the game's default combat resolution is skipped for that round and the designer is responsible for updating damage. The second value yielded is either the attacker or the defender, this is used to render animations etc. In this case the coroutine resumes without any values.\n\nIf the coroutine yields false as its first value, the game runs its default combat algorithm. The designer can additionally yield modified values for attackerDie, attackerPower, defenderDie and defenderPower (in this order) which will be used by the game for that round. In this case the coroutine resumes with the result of the round, a table containing four values:\n- winner, this is either attacker or defender.\n- attackerRoll, the result of the attacker's die roll\n- defenderRoll, the result of the defender's die roll\n- reroll, true if a reroll happened. \n\nThis can happen only if the attacker is tribe 0, the defender is a unit guarding a city, and the city is the capital or the tribe has less than 8 cities in total and the attacker's die roll is higher than the defender's. A reroll can happen at most once.\n",
                    "finish": 11190044,
                    "start": 11190000,
                    "type": "function",
                    "view": "function civ.scen.onInitiateCombat(code: fun(attacker: unitObject, defender: unitObject, attackerDie: integer, attackerPower: integer, defenderDie: integer, defenderPower: integer, isSneakAttack: boolean):thread)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 11190034,
                "start": 11190009,
                "type": "setfield"
            }
        ],
        "desc": "Registers a function to be called every time combat is initiated. The callback takes seven parameters, the attacker, the defender, attackerDie ('die' as in dice, the attacker's chance to hit), attackerPower (attacker's firepower), defenderDie, defenderPower and isSneakAttack. Returns a coroutine that yields every time it wants to process a round, and returns when it wants combat to end. Example:\n\n```lua\nciv.scen.onInitiateCombat(function (attacker, defender, attackerDie, attackerPower, defenderDie, defenderPower)\n  print(\"Attacker's die: 1d\" .. attackerDie .. \", firepower: \" .. attackerPower)\n  print(\"Defender's die: 1d\" .. defenderDie .. \", firepower: \" .. defenderPower)\n  return coroutine.create(function ()\n    local round = 0\n    while (round < 5 and attacker.hitpoints >= 0 and defender.hitpoints >= 0) do\n      print(\"Round \" .. round)\n      print(attacker, defender)\n      if round % 2 == 0 then\n        attacker.damage = attacker.damage + 2\n        coroutine.yield(true, defender) -- either attacker or defender\n      else\n        print(\"Attack bonus!\")\n        result = coroutine.yield(false, attackerDie * 2, attackerPower * 2)\n        print(result.winner, result.attackerRoll, result.defenderRoll, result.reroll)\n      end\n      round = round + 1\n    end\n    print(\"End of combat\")\n  end)\nend)\n```\n\nThis example shows how to limit combat to five rounds, damages the attacker on even rounds and doubles the attacker's values on odd rounds.\n\nIf the coroutine yields true as its first value, the game's default combat resolution is skipped for that round and the designer is responsible for updating damage. The second value yielded is either the attacker or the defender, this is used to render animations etc. In this case the coroutine resumes without any values.\n\nIf the coroutine yields false as its first value, the game runs its default combat algorithm. The designer can additionally yield modified values for attackerDie, attackerPower, defenderDie and defenderPower (in this order) which will be used by the game for that round. In this case the coroutine resumes with the result of the round, a table containing four values:\n- winner, this is either attacker or defender.\n- attackerRoll, the result of the attacker's die roll\n- defenderRoll, the result of the defender's die roll\n- reroll, true if a reroll happened. \n\nThis can happen only if the attacker is tribe 0, the defender is a unit guarding a city, and the city is the capital or the tribe has less than 8 cities in total and the attacker's die roll is higher than the defender's. A reroll can happen at most once.\n",
        "name": "civ.scen.onInitiateCombat",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "(keyCode:integer)",
                            "finish": 11400033,
                            "name": "code",
                            "start": 11400029,
                            "type": "local",
                            "view": "function"
                        }
                    ],
                    "desc": "Registers a function to be called every time a key is pressed.\n\n\n@*param* `code` โ (keyCode:integer)",
                    "finish": 11400038,
                    "start": 11400000,
                    "type": "function",
                    "view": "function civ.scen.onKeyPress(code: function)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 11400028,
                "start": 11400009,
                "type": "setfield"
            }
        ],
        "desc": "Registers a function to be called every time a key is pressed.\n\n\n@*param* `code` โ (keyCode:integer)",
        "name": "civ.scen.onKeyPress",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 11470029,
                            "name": "code",
                            "start": 11470025,
                            "type": "local",
                            "view": "fun(savedData: string)"
                        }
                    ],
                    "desc": "Registers a function that is called when the game is loaded.\n",
                    "finish": 11470034,
                    "start": 11470000,
                    "type": "function",
                    "view": "function civ.scen.onLoad(code: fun(savedData: string))"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 11470024,
                "start": 11470009,
                "type": "setfield"
            }
        ],
        "desc": "Registers a function that is called when the game is loaded.\n",
        "name": "civ.scen.onLoad",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 11540036,
                            "name": "code",
                            "start": 11540032,
                            "type": "local",
                            "view": "fun(talker: tribeObject, listener: tribeObject):(canTalk: boolean)"
                        }
                    ],
                    "desc": "Registers a function that is called when two tribes attempt negotiations. `talker` is the tribe initiating the contact, `listener` the receiver. Return `true` to allow the negotiations to commence, `false` to deny.\n",
                    "finish": 11540041,
                    "start": 11540000,
                    "type": "function",
                    "view": "function civ.scen.onNegotiation(code: fun(talker: tribeObject, listener: tribeObject):(canTalk: boolean))"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 11540031,
                "start": 11540009,
                "type": "setfield"
            }
        ],
        "desc": "Registers a function that is called when two tribes attempt negotiations. `talker` is the tribe initiating the contact, `listener` the receiver. Return `true` to allow the negotiations to commence, `false` to deny.\n",
        "name": "civ.scen.onNegotiation",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 11650038,
                            "name": "code",
                            "start": 11650034,
                            "type": "local",
                            "view": "fun(defaultResolutionFunction: fun(defender: unitObject, attacker: unitObject):(combatContinues: boolean), defender: unitObject, attacker: unitObject):(combatContinues: boolean)"
                        }
                    ],
                    "desc": "Registers a function to be called during every combat turn. The first parameter of the callback is the default resolution function, as implemented by the game. It takes the attacker and defender as parameters. You can call this to produce a result for cases you don't need to handle yourself.\nReturn `true` to continue combat, `false` to stop.\n\nSee onInitiateCombat for replacement.\n",
                    "finish": 11650043,
                    "start": 11650000,
                    "type": "function",
                    "view": "function civ.scen.onResolveCombat(code: fun(defaultResolutionFunction: fun(defender: unitObject, attacker: unitObject):(combatContinues: boolean), defender: unitObject, attacker: unitObject):(combatContinues: boolean))"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 11650033,
                "start": 11650009,
                "type": "setfield"
            }
        ],
        "desc": "Registers a function to be called during every combat turn. The first parameter of the callback is the default resolution function, as implemented by the game. It takes the attacker and defender as parameters. You can call this to produce a result for cases you don't need to handle yourself.\nReturn `true` to continue combat, `false` to stop.\n\nSee onInitiateCombat for replacement.\n",
        "name": "civ.scen.onResolveCombat",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 11730029,
                            "name": "code",
                            "start": 11730025,
                            "type": "local",
                            "view": "fun():(savedData: string)"
                        }
                    ],
                    "desc": "Registers a function that is called when the game is saved.\n",
                    "finish": 11730034,
                    "start": 11730000,
                    "type": "function",
                    "view": "function civ.scen.onSave(code: fun():(savedData: string))"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 11730024,
                "start": 11730009,
                "type": "setfield"
            }
        ],
        "desc": "Registers a function that is called when the game is saved.\n",
        "name": "civ.scen.onSave",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 11800039,
                            "name": "code",
                            "start": 11800035,
                            "type": "local",
                            "view": "fun()"
                        }
                    ],
                    "desc": "Registers a function that is called when the scenario is loaded.  (This is whenever a game is loaded, not just when the scenario is started.)\n",
                    "finish": 11800044,
                    "start": 11800000,
                    "type": "function",
                    "view": "function civ.scen.onScenarioLoaded(code: fun())"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 11800034,
                "start": 11800009,
                "type": "setfield"
            }
        ],
        "desc": "Registers a function that is called when the scenario is loaded.  (This is whenever a game is loaded, not just when the scenario is started.)\n",
        "name": "civ.scen.onScenarioLoaded",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 11890031,
                            "name": "code",
                            "start": 11890027,
                            "type": "local",
                            "view": "fun(tribe: tribeObject):(allowSchism: boolean)"
                        }
                    ],
                    "desc": "Registers a function that is called when a schism is triggered. This happens when the capital of a AI-controlled tribe with more than four cities is captured, and, if the attacker is human-controlled, it is ranked lower in power than the defender. If the attacker is AI-controlled the best human tribe must be ranked lower than the defender for the schism to trigger.\nIf the schism is allowed, a new tribe will be created that takes over about half the cities of the old tribe. If no new tribe can be created, the schism does not occur.\nReturn `true` to allow the schism to happen, `false` to deny.\n",
                    "finish": 11890036,
                    "start": 11890000,
                    "type": "function",
                    "view": "function civ.scen.onSchism(code: fun(tribe: tribeObject):(allowSchism: boolean))"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 11890026,
                "start": 11890009,
                "type": "setfield"
            }
        ],
        "desc": "Registers a function that is called when a schism is triggered. This happens when the capital of a AI-controlled tribe with more than four cities is captured, and, if the attacker is human-controlled, it is ranked lower in power than the defender. If the attacker is AI-controlled the best human tribe must be ranked lower than the defender for the schism to trigger.\nIf the schism is allowed, a new tribe will be created that takes over about half the cities of the old tribe. If no new tribe can be created, the schism does not occur.\nReturn `true` to allow the schism to happen, `false` to deny.\n",
        "name": "civ.scen.onSchism",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 11950036,
                            "name": "code",
                            "start": 11950032,
                            "type": "local",
                            "view": "fun(track: integer|nil):integer|nil"
                        }
                    ],
                    "desc": "Registers a function that is called when a new music track is to be played. `track` is either nil or an integer. If nil, the game wants to play a random track, if not nil it's either due to the user choosing a track from the menu (first track has id 0), or the game playing one of it's special tracks (\"Funeral March\" - track id 0, and \"Ode to Joy\" - track id 1). To handle special tracks, you can return nil to signal that the game should play the default track associated with that track id. If you want to handle this track id, call civ.playMusic (this will check the Music folder of the scenario first before falling back to the global Music folder) and return an integer, which is used to synchronize the track list in the menu. The track names can be added in @PICKMUSICTOT in Game.txt.\n",
                    "finish": 11950041,
                    "start": 11950000,
                    "type": "function",
                    "view": "function civ.scen.onSelectMusic(code: fun(track: integer|nil):integer|nil)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 11950031,
                "start": 11950009,
                "type": "setfield"
            }
        ],
        "desc": "Registers a function that is called when a new music track is to be played. `track` is either nil or an integer. If nil, the game wants to play a random track, if not nil it's either due to the user choosing a track from the menu (first track has id 0), or the game playing one of it's special tracks (\"Funeral March\" - track id 0, and \"Ode to Joy\" - track id 1). To handle special tracks, you can return nil to signal that the game should play the default track associated with that track id. If you want to handle this track id, call civ.playMusic (this will check the Music folder of the scenario first before falling back to the global Music folder) and return an integer, which is used to synchronize the track list in the menu. The track names can be added in @PICKMUSICTOT in Game.txt.\n",
        "name": "civ.scen.onSelectMusic",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 12020039,
                            "name": "code",
                            "start": 12020035,
                            "type": "local",
                            "view": "fun(turn: integer, tribe: tribeObject)"
                        }
                    ],
                    "desc": "Registers a function that is called at the start of a tribe's turn. See `onTurn` for interaction with other \"turn\" triggers.\n",
                    "finish": 12020044,
                    "start": 12020000,
                    "type": "function",
                    "view": "function civ.scen.onTribeTurnBegin(code: fun(turn: integer, tribe: tribeObject))"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 12020034,
                "start": 12020009,
                "type": "setfield"
            }
        ],
        "desc": "Registers a function that is called at the start of a tribe's turn. See `onTurn` for interaction with other \"turn\" triggers.\n",
        "name": "civ.scen.onTribeTurnBegin",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 12090037,
                            "name": "code",
                            "start": 12090033,
                            "type": "local",
                            "view": "fun(turn: integer, tribe: tribeObject)"
                        }
                    ],
                    "desc": "Registers a function that is called at the end of a tribe's turn. See `onTurn` for interaction with other \"turn\" triggers.\n",
                    "finish": 12090042,
                    "start": 12090000,
                    "type": "function",
                    "view": "function civ.scen.onTribeTurnEnd(code: fun(turn: integer, tribe: tribeObject))"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 12090032,
                "start": 12090009,
                "type": "setfield"
            }
        ],
        "desc": "Registers a function that is called at the end of a tribe's turn. See `onTurn` for interaction with other \"turn\" triggers.\n",
        "name": "civ.scen.onTribeTurnEnd",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 12260029,
                            "name": "code",
                            "start": 12260025,
                            "type": "local",
                            "view": "fun(turn: integer)"
                        }
                    ],
                    "desc": "Registers a function that is called at the start of a turn. The basic sequence of this and other \"turn\" triggers is as follows:\n<br>`onTurn` fires\n<br>Non-tribe-specific updates take place\n<br>`onTribeTurnBegin` fires for tribe 0.\n<br>Tribe 0 cities are processed.\n<br>`onCityProcessingComplete` fires for tribe 0 (this fires even when a tribe has no cities).\n<br>Tribe 0 units move\n<br>`onTribeTurnEnd` fires for tribe 0.\n<br>All active tribes are processed in order according to the sequence for tribe 0\n<br>`onTribeTurnEnd` fires for tribe 7.\n<br>`onTurn` fires for the next turn\n",
                    "finish": 12260034,
                    "start": 12260000,
                    "type": "function",
                    "view": "function civ.scen.onTurn(code: fun(turn: integer))"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 12260024,
                "start": 12260009,
                "type": "setfield"
            }
        ],
        "desc": "Registers a function that is called at the start of a turn. The basic sequence of this and other \"turn\" triggers is as follows:\n<br>`onTurn` fires\n<br>Non-tribe-specific updates take place\n<br>`onTribeTurnBegin` fires for tribe 0.\n<br>Tribe 0 cities are processed.\n<br>`onCityProcessingComplete` fires for tribe 0 (this fires even when a tribe has no cities).\n<br>Tribe 0 units move\n<br>`onTribeTurnEnd` fires for tribe 0.\n<br>All active tribes are processed in order according to the sequence for tribe 0\n<br>`onTribeTurnEnd` fires for tribe 7.\n<br>`onTurn` fires for the next turn\n",
        "name": "civ.scen.onTurn",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 12330035,
                            "name": "code",
                            "start": 12330031,
                            "type": "local",
                            "view": "fun(loser: unitObject, winner: unitObject)"
                        }
                    ],
                    "desc": "Registers a function that is called whenever a unit is killed. `loser` is the unit that is killed, `winner` is the unit responsible for it.\n",
                    "finish": 12330040,
                    "start": 12330000,
                    "type": "function",
                    "view": "function civ.scen.onUnitKilled(code: fun(loser: unitObject, winner: unitObject))"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 12330030,
                "start": 12330009,
                "type": "setfield"
            }
        ],
        "desc": "Registers a function that is called whenever a unit is killed. `loser` is the unit that is killed, `winner` is the unit responsible for it.\n",
        "name": "civ.scen.onUnitKilled",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 12400041,
                            "name": "code",
                            "start": 12400037,
                            "type": "local",
                            "view": "fun(unit: unitObject, tile: tileObject):(attackProceeds: boolean)"
                        }
                    ],
                    "desc": "Registers a function that is called when a nuclear weapon is used. This is also called when a spy plants a nuclear device in a city. `unit` is the weapon or the spy unit, `tile` is the location of the attack. Return `false` to abort the attack, `true` to proceed.\n",
                    "finish": 12400046,
                    "start": 12400000,
                    "type": "function",
                    "view": "function civ.scen.onUseNuclearWeapon(code: fun(unit: unitObject, tile: tileObject):(attackProceeds: boolean))"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 12400036,
                "start": 12400009,
                "type": "setfield"
            }
        ],
        "desc": "Registers a function that is called when a nuclear weapon is used. This is also called when a spy plants a nuclear device in a city. `unit` is the weapon or the spy unit, `tile` is the location of the attack. Return `false` to abort the attack, `true` to proceed.\n",
        "name": "civ.scen.onUseNuclearWeapon",
        "type": "variable"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 12430025,
                "start": 12430010,
                "type": "doc.class"
            }
        ],
        "desc": "",
        "fields": [
            {
                "desc": "(get/set) Number of objectives required for a decisive defeat.",
                "extends": {
                    "finish": 12440032,
                    "start": 12440025,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 12440032,
                            "start": 12440025,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 12440032,
                "name": "decisiveDefeat",
                "start": 12440010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set) Number of objectives required for a decisive victory.",
                "extends": {
                    "finish": 12450033,
                    "start": 12450026,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 12450033,
                            "start": 12450026,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 12450033,
                "name": "decisiveVictory",
                "start": 12450010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set) Bitmask representing scenario flags:<br> <br>00000000 00000001 Total war <br>00000000 00000010 Use objective victory <br>00000000 00000100 Count wonders as objectives <br>00000000 00001000 Reveal cities <br>00000000 00010000 No government change <br>00000000 00100000 No tech conquest <br>00000000 01000000 No pollution <br>00000000 10000000 Terrain animation lockout <br>00000001 00000000 Unit animation lockout <br>00000010 00000000 .SPR file override <br>10000000 00000000 WWII AI",
                "extends": {
                    "finish": 12460023,
                    "start": 12460016,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 12460023,
                            "start": 12460016,
                            "type": "doc.type.name",
                            "view": "bitmask"
                        }
                    ],
                    "view": "bitmask"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 12460023,
                "name": "flags",
                "start": 12460010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set) Number of objectives required for a marginal defeat.",
                "extends": {
                    "finish": 12470032,
                    "start": 12470025,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 12470032,
                            "start": 12470025,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 12470032,
                "name": "marginalDefeat",
                "start": 12470010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set) Number of objectives required for a marginal victory.",
                "extends": {
                    "finish": 12480033,
                    "start": 12480026,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 12480033,
                            "start": 12480026,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 12480033,
                "name": "marginalVictory",
                "start": 12480010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set) Maximum number of turns before the scenario ends.",
                "extends": {
                    "finish": 12490026,
                    "start": 12490019,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 12490026,
                            "start": 12490019,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 12490026,
                "name": "maxTurns",
                "start": 12490010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set) The name of the scenario.",
                "extends": {
                    "finish": 12500021,
                    "start": 12500015,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 12500021,
                            "start": 12500015,
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 12500021,
                "name": "name",
                "start": 12500010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set) Returns the objectives protagonist.",
                "extends": {
                    "finish": 12510043,
                    "start": 12510032,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 12510043,
                            "start": 12510032,
                            "type": "doc.type.name",
                            "view": "tribeObject"
                        }
                    ],
                    "view": "tribeObject"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 12510043,
                "name": "objectivesProtagonist",
                "start": 12510010,
                "type": "doc.field"
            },
            {
                "desc": "(get) Returns the starting year of the scenario.",
                "extends": {
                    "finish": 12520030,
                    "start": 12520023,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 12520030,
                            "start": 12520023,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 12520030,
                "name": "startingYear",
                "start": 12520010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set) Returns the tech paradigm used by the scenario. Non-scenario games use civ.cosmic.techParadigm instead of this value.",
                "extends": {
                    "finish": 12530030,
                    "start": 12530023,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 12530030,
                            "start": 12530023,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 12530030,
                "name": "techParadigm",
                "start": 12530010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set) Returns the year increment (number of years per turn). Negative for monthly increments.",
                "extends": {
                    "finish": 12540031,
                    "start": 12540024,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 12540031,
                            "start": 12540024,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 12540031,
                "name": "yearIncrement",
                "start": 12540010,
                "type": "doc.field"
            }
        ],
        "name": "civ.scen.params",
        "type": "type"
    },
    {
        "defines": [
            {
                "extends": {
                    "finish": 12550020,
                    "start": 12550018,
                    "type": "table",
                    "view": "civ.scen.params"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 12550015,
                "start": 12550000,
                "type": "setfield"
            }
        ],
        "desc": "",
        "name": "civ.scen.params",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 8140031,
                            "name": "milliseconds",
                            "start": 8140019,
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "desc": "Sleeps for the given number of milliseconds.",
                    "finish": 8140036,
                    "start": 8140000,
                    "type": "function",
                    "view": "function civ.sleep(milliseconds: integer)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 8140018,
                "start": 8140009,
                "type": "setfield"
            }
        ],
        "desc": "Sleeps for the given number of milliseconds.",
        "name": "civ.sleep",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A tribe object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a tribe, which is to say the characteristics of the tribe overall, in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tribe)",
                            "finish": 8210027,
                            "name": "tribe",
                            "start": 8210022,
                            "type": "local",
                            "view": "tribeObject"
                        },
                        {
                            "desc": "A technology object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a technology entry in the rules.txt, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tech)",
                            "finish": 8210032,
                            "name": "tech",
                            "start": 8210028,
                            "type": "local",
                            "view": "techObject"
                        },
                        {
                            "desc": "false by default",
                            "finish": 8210041,
                            "name": "collapse",
                            "start": 8210033,
                            "type": "local",
                            "view": "boolean?"
                        }
                    ],
                    "desc": "Takes away tech `tech` from tribe `tribe`, the optional `collapse` parameter determines whether to take away all techs that have `tech` as a prerequisite somewhere up the tree.\n\n@*param* `collapse` โ false by default",
                    "finish": 8210046,
                    "start": 8210000,
                    "type": "function",
                    "view": "function civ.takeTech(tribe: tribeObject, tech: techObject, collapse?: boolean)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 8210021,
                "start": 8210009,
                "type": "setfield"
            }
        ],
        "desc": "Takes away tech `tech` from tribe `tribe`, the optional `collapse` parameter determines whether to take away all techs that have `tech` as a prerequisite somewhere up the tree.\n\n@*param* `collapse` โ false by default",
        "name": "civ.takeTech",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A unit object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit in the game, and provides a means of interacting with it. This should not be confused with the unit type object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unit)",
                            "finish": 8260030,
                            "name": "unit",
                            "start": 8260026,
                            "type": "local",
                            "view": "unitObject"
                        },
                        {
                            "desc": "A tile object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a map \"square\" in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tile)",
                            "finish": 8260035,
                            "name": "tile",
                            "start": 8260031,
                            "type": "local",
                            "view": "tileObject"
                        }
                    ],
                    "desc": "Teleports (i.e. moves at no cost) unit `unit` to tile `tile`. The unit is moved regardless of whether it is a valid location for the unit. To check this, see `civ.canEnter` and `civlua.isValidUnitLocation`.",
                    "finish": 8260040,
                    "start": 8260000,
                    "type": "function",
                    "view": "function civ.teleportUnit(unit: unitObject, tile: tileObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 8260025,
                "start": 8260009,
                "type": "setfield"
            }
        ],
        "desc": "Teleports (i.e. moves at no cost) unit `unit` to tile `tile`. The unit is moved regardless of whether it is a valid location for the unit. To check this, see `civ.canEnter` and `civlua.isValidUnitLocation`.",
        "name": "civ.teleportUnit",
        "type": "variable"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 8390016,
                "start": 8390010,
                "type": "doc.class"
            }
        ],
        "desc": "",
        "fields": [
            {
                "desc": "Centers the map on the given tile.",
                "extends": {
                    "args": [
                        {
                            "desc": "A tile object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a map \"square\" in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tile)",
                            "finish": 8440031,
                            "name": "tile",
                            "start": 8440027,
                            "type": "local",
                            "view": "tileObject"
                        }
                    ],
                    "desc": "Centers the map on the given tile.",
                    "finish": 8440036,
                    "start": 8440000,
                    "type": "function",
                    "view": "function civ.ui.centerView(tile: tileObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 8440026,
                "name": "centerView",
                "start": 8440009,
                "type": "setfield"
            },
            {
                "desc": "Creates and initializes a dialog. See the dialog section for more details.",
                "extends": {
                    "args": [],
                    "desc": "Creates and initializes a dialog. See the dialog section for more details.",
                    "finish": 8480034,
                    "returns": [
                        {
                            "name": "dialog",
                            "type": "function.return",
                            "view": "dialogObject"
                        }
                    ],
                    "start": 8480000,
                    "type": "function",
                    "view": "function civ.ui.createDialog()\n  -> dialog: dialogObject"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 8480028,
                "name": "createDialog",
                "start": 8480009,
                "type": "setfield"
            },
            {
                "desc": "Loads an image (BMP or GIF) from `filename`. Optionally accepts `x`, `y`, `width` and `height` to load part of the image.\n\n@*param* `x` โ pixel (x,y) is the top left corner of sub image\n\n@*param* `y` โ pixel (x,y) is the top left corner of sub image\n\n@*param* `width` โ width of sub image\n\n@*param* `height` โ height of sub image",
                "extends": {
                    "args": [
                        {
                            "desc": "A string is a data type native to Lua which consists of a sequence of characters. These often represent text to be displayed, but are also useful in other contexts. Strings are commonly used as keys in tables, since they make code more readable.\n[Programming in Lua, 2.4 -- Strings](https://www.lua.org/pil/2.4.html)",
                            "finish": 8580034,
                            "name": "filename",
                            "start": 8580026,
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "desc": "pixel (x,y) is the top left corner of sub image",
                            "finish": 8580037,
                            "name": "x",
                            "start": 8580036,
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "desc": "pixel (x,y) is the top left corner of sub image",
                            "finish": 8580040,
                            "name": "y",
                            "start": 8580039,
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "desc": "width of sub image",
                            "finish": 8580047,
                            "name": "width",
                            "start": 8580042,
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "desc": "height of sub image",
                            "finish": 8580055,
                            "name": "height",
                            "start": 8580049,
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "desc": "Loads an image (BMP or GIF) from `filename`. Optionally accepts `x`, `y`, `width` and `height` to load part of the image.\n\n@*param* `x` โ pixel (x,y) is the top left corner of sub image\n\n@*param* `y` โ pixel (x,y) is the top left corner of sub image\n\n@*param* `width` โ width of sub image\n\n@*param* `height` โ height of sub image",
                    "finish": 8580060,
                    "returns": [
                        {
                            "name": "image",
                            "type": "function.return",
                            "view": "imageObject"
                        }
                    ],
                    "start": 8580000,
                    "type": "function",
                    "view": "function civ.ui.loadImage(filename: string, x: integer, y: integer, width: integer, height: integer)\n  -> image: imageObject"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 8580025,
                "name": "loadImage",
                "start": 8580009,
                "type": "setfield"
            },
            {
                "desc": "Replaces terrain graphics for map number `map`, loading graphics from `filename1` (corresponding to \"TERRAIN1.BMP\") and `filename2` (corresponding to \"TERRAIN2.BMP\")",
                "extends": {
                    "args": [
                        {
                            "desc": "A map object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents the overall properties of one of the four possible maps in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#map)",
                            "finish": 8640031,
                            "name": "map",
                            "start": 8640028,
                            "type": "local",
                            "view": "integer|mapObject"
                        },
                        {
                            "desc": "A string is a data type native to Lua which consists of a sequence of characters. These often represent text to be displayed, but are also useful in other contexts. Strings are commonly used as keys in tables, since they make code more readable.\n[Programming in Lua, 2.4 -- Strings](https://www.lua.org/pil/2.4.html)",
                            "finish": 8640041,
                            "name": "filename1",
                            "start": 8640032,
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "desc": "A string is a data type native to Lua which consists of a sequence of characters. These often represent text to be displayed, but are also useful in other contexts. Strings are commonly used as keys in tables, since they make code more readable.\n[Programming in Lua, 2.4 -- Strings](https://www.lua.org/pil/2.4.html)",
                            "finish": 8640051,
                            "name": "filename2",
                            "start": 8640042,
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "Replaces terrain graphics for map number `map`, loading graphics from `filename1` (corresponding to \"TERRAIN1.BMP\") and `filename2` (corresponding to \"TERRAIN2.BMP\")",
                    "finish": 8640056,
                    "start": 8640000,
                    "type": "function",
                    "view": "function civ.ui.loadTerrain(map: integer|mapObject, filename1: string, filename2: string)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 8640027,
                "name": "loadTerrain",
                "start": 8640009,
                "type": "setfield"
            },
            {
                "desc": "Redraws the entire map.",
                "extends": {
                    "args": [],
                    "desc": "Redraws the entire map.",
                    "finish": 8670031,
                    "start": 8670000,
                    "type": "function",
                    "view": "function civ.ui.redrawMap()"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 8670025,
                "name": "redrawMap",
                "start": 8670009,
                "type": "setfield"
            },
            {
                "desc": "Redraws the given tile.",
                "extends": {
                    "args": [
                        {
                            "desc": "A tile object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a map \"square\" in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tile)",
                            "finish": 8710031,
                            "name": "tile",
                            "start": 8710027,
                            "type": "local",
                            "view": "tileObject"
                        }
                    ],
                    "desc": "Redraws the given tile.",
                    "finish": 8710036,
                    "start": 8710000,
                    "type": "function",
                    "view": "function civ.ui.redrawTile(tile: tileObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 8710026,
                "name": "redrawTile",
                "start": 8710009,
                "type": "setfield"
            },
            {
                "desc": "Sets the zoom level (range from -7 (max zoom out) to 8 (max zoom in)).",
                "extends": {
                    "args": [
                        {
                            "desc": "An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 8750031,
                            "name": "integer",
                            "start": 8750024,
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "desc": "Sets the zoom level (range from -7 (max zoom out) to 8 (max zoom in)).",
                    "finish": 8750036,
                    "start": 8750000,
                    "type": "function",
                    "view": "function civ.ui.setZoom(integer: integer)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 8750023,
                "name": "setZoom",
                "start": 8750009,
                "type": "setfield"
            },
            {
                "desc": "Display a pop-up text box with the given string as text.\n\n@*param* `string` โ text to show in a text box\n\n@*param* `...` โ more text",
                "extends": {
                    "args": [
                        {
                            "desc": "text to show in a text box",
                            "finish": 8810027,
                            "name": "string",
                            "start": 8810021,
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "desc": "A string is a data type native to Lua which consists of a sequence of characters. These often represent text to be displayed, but are also useful in other contexts. Strings are commonly used as keys in tables, since they make code more readable.\n[Programming in Lua, 2.4 -- Strings](https://www.lua.org/pil/2.4.html)",
                            "finish": 8810032,
                            "start": 8810029,
                            "type": "...",
                            "view": "string"
                        }
                    ],
                    "desc": "Display a pop-up text box with the given string as text.\n\n@*param* `string` โ text to show in a text box\n\n@*param* `...` โ more text",
                    "finish": 8810037,
                    "start": 8810000,
                    "type": "function",
                    "view": "function civ.ui.text(string: string, ...string)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 8810020,
                "name": "text",
                "start": 8810009,
                "type": "setfield"
            },
            {
                "desc": "Zooms in on the map (increases zoom level by 1).",
                "extends": {
                    "args": [],
                    "desc": "Zooms in on the map (increases zoom level by 1).",
                    "finish": 8840028,
                    "start": 8840000,
                    "type": "function",
                    "view": "function civ.ui.zoomIn()"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 8840022,
                "name": "zoomIn",
                "start": 8840009,
                "type": "setfield"
            },
            {
                "desc": "Zooms out of the map (decreases zoom level by 1).",
                "extends": {
                    "args": [],
                    "desc": "Zooms out of the map (decreases zoom level by 1).",
                    "finish": 8870029,
                    "start": 8870000,
                    "type": "function",
                    "view": "function civ.ui.zoomOut()"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 8870023,
                "name": "zoomOut",
                "start": 8870009,
                "type": "setfield"
            }
        ],
        "name": "civ.ui",
        "type": "type"
    },
    {
        "defines": [
            {
                "extends": {
                    "finish": 8400011,
                    "start": 8400009,
                    "type": "table",
                    "view": "civ.ui"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 8400006,
                "start": 8400000,
                "type": "setfield"
            }
        ],
        "desc": "",
        "name": "civ.ui",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A tile object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a map \"square\" in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tile)",
                            "finish": 8440031,
                            "name": "tile",
                            "start": 8440027,
                            "type": "local",
                            "view": "tileObject"
                        }
                    ],
                    "desc": "Centers the map on the given tile.",
                    "finish": 8440036,
                    "start": 8440000,
                    "type": "function",
                    "view": "function civ.ui.centerView(tile: tileObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 8440026,
                "start": 8440009,
                "type": "setfield"
            }
        ],
        "desc": "Centers the map on the given tile.",
        "name": "civ.ui.centerView",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [],
                    "desc": "Creates and initializes a dialog. See the dialog section for more details.",
                    "finish": 8480034,
                    "returns": [
                        {
                            "name": "dialog",
                            "type": "function.return",
                            "view": "dialogObject"
                        }
                    ],
                    "start": 8480000,
                    "type": "function",
                    "view": "function civ.ui.createDialog()\n  -> dialog: dialogObject"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 8480028,
                "start": 8480009,
                "type": "setfield"
            }
        ],
        "desc": "Creates and initializes a dialog. See the dialog section for more details.",
        "name": "civ.ui.createDialog",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A string is a data type native to Lua which consists of a sequence of characters. These often represent text to be displayed, but are also useful in other contexts. Strings are commonly used as keys in tables, since they make code more readable.\n[Programming in Lua, 2.4 -- Strings](https://www.lua.org/pil/2.4.html)",
                            "finish": 8580034,
                            "name": "filename",
                            "start": 8580026,
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "desc": "pixel (x,y) is the top left corner of sub image",
                            "finish": 8580037,
                            "name": "x",
                            "start": 8580036,
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "desc": "pixel (x,y) is the top left corner of sub image",
                            "finish": 8580040,
                            "name": "y",
                            "start": 8580039,
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "desc": "width of sub image",
                            "finish": 8580047,
                            "name": "width",
                            "start": 8580042,
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "desc": "height of sub image",
                            "finish": 8580055,
                            "name": "height",
                            "start": 8580049,
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "desc": "Loads an image (BMP or GIF) from `filename`. Optionally accepts `x`, `y`, `width` and `height` to load part of the image.\n\n@*param* `x` โ pixel (x,y) is the top left corner of sub image\n\n@*param* `y` โ pixel (x,y) is the top left corner of sub image\n\n@*param* `width` โ width of sub image\n\n@*param* `height` โ height of sub image",
                    "finish": 8580060,
                    "returns": [
                        {
                            "name": "image",
                            "type": "function.return",
                            "view": "imageObject"
                        }
                    ],
                    "start": 8580000,
                    "type": "function",
                    "view": "function civ.ui.loadImage(filename: string, x: integer, y: integer, width: integer, height: integer)\n  -> image: imageObject"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 8580025,
                "start": 8580009,
                "type": "setfield"
            }
        ],
        "desc": "Loads an image (BMP or GIF) from `filename`. Optionally accepts `x`, `y`, `width` and `height` to load part of the image.\n\n@*param* `x` โ pixel (x,y) is the top left corner of sub image\n\n@*param* `y` โ pixel (x,y) is the top left corner of sub image\n\n@*param* `width` โ width of sub image\n\n@*param* `height` โ height of sub image",
        "name": "civ.ui.loadImage",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A map object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents the overall properties of one of the four possible maps in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#map)",
                            "finish": 8640031,
                            "name": "map",
                            "start": 8640028,
                            "type": "local",
                            "view": "integer|mapObject"
                        },
                        {
                            "desc": "A string is a data type native to Lua which consists of a sequence of characters. These often represent text to be displayed, but are also useful in other contexts. Strings are commonly used as keys in tables, since they make code more readable.\n[Programming in Lua, 2.4 -- Strings](https://www.lua.org/pil/2.4.html)",
                            "finish": 8640041,
                            "name": "filename1",
                            "start": 8640032,
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "desc": "A string is a data type native to Lua which consists of a sequence of characters. These often represent text to be displayed, but are also useful in other contexts. Strings are commonly used as keys in tables, since they make code more readable.\n[Programming in Lua, 2.4 -- Strings](https://www.lua.org/pil/2.4.html)",
                            "finish": 8640051,
                            "name": "filename2",
                            "start": 8640042,
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "Replaces terrain graphics for map number `map`, loading graphics from `filename1` (corresponding to \"TERRAIN1.BMP\") and `filename2` (corresponding to \"TERRAIN2.BMP\")",
                    "finish": 8640056,
                    "start": 8640000,
                    "type": "function",
                    "view": "function civ.ui.loadTerrain(map: integer|mapObject, filename1: string, filename2: string)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 8640027,
                "start": 8640009,
                "type": "setfield"
            }
        ],
        "desc": "Replaces terrain graphics for map number `map`, loading graphics from `filename1` (corresponding to \"TERRAIN1.BMP\") and `filename2` (corresponding to \"TERRAIN2.BMP\")",
        "name": "civ.ui.loadTerrain",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [],
                    "desc": "Redraws the entire map.",
                    "finish": 8670031,
                    "start": 8670000,
                    "type": "function",
                    "view": "function civ.ui.redrawMap()"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 8670025,
                "start": 8670009,
                "type": "setfield"
            }
        ],
        "desc": "Redraws the entire map.",
        "name": "civ.ui.redrawMap",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A tile object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a map \"square\" in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tile)",
                            "finish": 8710031,
                            "name": "tile",
                            "start": 8710027,
                            "type": "local",
                            "view": "tileObject"
                        }
                    ],
                    "desc": "Redraws the given tile.",
                    "finish": 8710036,
                    "start": 8710000,
                    "type": "function",
                    "view": "function civ.ui.redrawTile(tile: tileObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 8710026,
                "start": 8710009,
                "type": "setfield"
            }
        ],
        "desc": "Redraws the given tile.",
        "name": "civ.ui.redrawTile",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 8750031,
                            "name": "integer",
                            "start": 8750024,
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "desc": "Sets the zoom level (range from -7 (max zoom out) to 8 (max zoom in)).",
                    "finish": 8750036,
                    "start": 8750000,
                    "type": "function",
                    "view": "function civ.ui.setZoom(integer: integer)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 8750023,
                "start": 8750009,
                "type": "setfield"
            }
        ],
        "desc": "Sets the zoom level (range from -7 (max zoom out) to 8 (max zoom in)).",
        "name": "civ.ui.setZoom",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "text to show in a text box",
                            "finish": 8810027,
                            "name": "string",
                            "start": 8810021,
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "desc": "A string is a data type native to Lua which consists of a sequence of characters. These often represent text to be displayed, but are also useful in other contexts. Strings are commonly used as keys in tables, since they make code more readable.\n[Programming in Lua, 2.4 -- Strings](https://www.lua.org/pil/2.4.html)",
                            "finish": 8810032,
                            "start": 8810029,
                            "type": "...",
                            "view": "string"
                        }
                    ],
                    "desc": "Display a pop-up text box with the given string as text.\n\n@*param* `string` โ text to show in a text box\n\n@*param* `...` โ more text",
                    "finish": 8810037,
                    "start": 8810000,
                    "type": "function",
                    "view": "function civ.ui.text(string: string, ...string)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 8810020,
                "start": 8810009,
                "type": "setfield"
            }
        ],
        "desc": "Display a pop-up text box with the given string as text.\n\n@*param* `string` โ text to show in a text box\n\n@*param* `...` โ more text",
        "name": "civ.ui.text",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [],
                    "desc": "Zooms in on the map (increases zoom level by 1).",
                    "finish": 8840028,
                    "start": 8840000,
                    "type": "function",
                    "view": "function civ.ui.zoomIn()"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 8840022,
                "start": 8840009,
                "type": "setfield"
            }
        ],
        "desc": "Zooms in on the map (increases zoom level by 1).",
        "name": "civ.ui.zoomIn",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [],
                    "desc": "Zooms out of the map (decreases zoom level by 1).",
                    "finish": 8870029,
                    "start": 8870000,
                    "type": "function",
                    "view": "function civ.ui.zoomOut()"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 8870023,
                "start": 8870009,
                "type": "setfield"
            }
        ],
        "desc": "Zooms out of the map (decreases zoom level by 1).",
        "name": "civ.ui.zoomOut",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 390027,
                            "name": "opt",
                            "start": 390024,
                            "type": "local",
                            "view": "(\"collect\"|\"count\"|\"generational\"|\"incremental\"|\"isrunning\"...(+3))?"
                        },
                        {
                            "finish": 390032,
                            "start": 390029,
                            "type": "...",
                            "view": "unknown"
                        }
                    ],
                    "desc": "\nThis function is a generic interface to the garbage collector. It performs different functions according to its first argument, `opt`.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-collectgarbage)\n\n\n```lua\nopt:\n   -> \"collect\" -- Performs a full garbage-collection cycle.\n    | \"stop\" -- Stops automatic execution.\n    | \"restart\" -- Restarts automatic execution.\n    | \"count\" -- Returns the total memory in Kbytes.\n    | \"step\" -- Performs a garbage-collection step.\n    | \"isrunning\" -- Returns whether the collector is running.\n    | \"incremental\" -- Change the collector mode to incremental.\n    | \"generational\" -- Change the collector mode to generational.\n```",
                    "finish": 390037,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": 390000,
                    "type": "function",
                    "view": "function collectgarbage(opt?: \"collect\"|\"count\"|\"generational\"|\"incremental\"|\"isrunning\"...(+3), ...any)\n  -> any"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/basic.lua",
                "finish": 390023,
                "start": 390009,
                "type": "setglobal"
            }
        ],
        "desc": "\nThis function is a generic interface to the garbage collector. It performs different functions according to its first argument, `opt`.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-collectgarbage)\n\n\n```lua\nopt:\n   -> \"collect\" -- Performs a full garbage-collection cycle.\n    | \"stop\" -- Stops automatic execution.\n    | \"restart\" -- Restarts automatic execution.\n    | \"count\" -- Returns the total memory in Kbytes.\n    | \"step\" -- Performs a garbage-collection step.\n    | \"isrunning\" -- Returns whether the collector is running.\n    | \"incremental\" -- Change the collector mode to incremental.\n    | \"generational\" -- Change the collector mode to generational.\n```",
        "name": "collectgarbage",
        "type": "variable"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 4950025,
                "start": 4950010,
                "type": "doc.class"
            }
        ],
        "desc": "A commodity object is a data type that describes a trade commodity that can be carried by trade units.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#commodity)",
        "fields": [
            {
                "desc": "(get) The id of the commodity (0-15 for regular commodities, -1 for food supplies).",
                "extends": {
                    "finish": 4960015,
                    "start": 4960013,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 4960015,
                            "start": 4960013,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 4960015,
                "name": "id",
                "start": 4960010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set - ephemeral) The name of the commodity.",
                "extends": {
                    "finish": 4970021,
                    "start": 4970015,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 4970021,
                            "start": 4970015,
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 4970021,
                "name": "name",
                "start": 4970010,
                "type": "doc.field"
            }
        ],
        "name": "commodityObject",
        "type": "type"
    },
    {
        "defines": [
            {
                "extends": {
                    "finish": 76120007,
                    "start": 76030023,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 76040008,
                            "start": 76040005,
                            "type": "doc.type.string",
                            "view": "\"N\""
                        },
                        {
                            "finish": 76050008,
                            "start": 76050005,
                            "type": "doc.type.string",
                            "view": "\"S\""
                        },
                        {
                            "finish": 76060008,
                            "start": 76060005,
                            "type": "doc.type.string",
                            "view": "\"E\""
                        },
                        {
                            "finish": 76070008,
                            "start": 76070005,
                            "type": "doc.type.string",
                            "view": "\"W\""
                        },
                        {
                            "finish": 76080009,
                            "start": 76080005,
                            "type": "doc.type.string",
                            "view": "\"NW\""
                        },
                        {
                            "finish": 76090009,
                            "start": 76090005,
                            "type": "doc.type.string",
                            "view": "\"NE\""
                        },
                        {
                            "finish": 76100009,
                            "start": 76100005,
                            "type": "doc.type.string",
                            "view": "\"SW\""
                        },
                        {
                            "finish": 76110009,
                            "start": 76110005,
                            "type": "doc.type.string",
                            "view": "\"SE\""
                        },
                        {
                            "finish": 76120007,
                            "start": 76120005,
                            "type": "doc.type.string",
                            "view": "\"\""
                        }
                    ],
                    "view": "\"\"|\"E\"|\"N\"|\"NE\"|\"NW\"...(+4)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 76120007,
                "start": 76030010,
                "type": "doc.alias"
            }
        ],
        "desc": "```lua\ncompassPoints:\n    | \"N\"\n    | \"S\"\n    | \"E\"\n    | \"W\"\n    | \"NW\"\n    | \"NE\"\n    | \"SW\"\n    | \"SE\"\n    | \"\"\n```",
        "fields": [],
        "name": "compassPoints",
        "type": "type"
    },
    {
        "defines": [
            {
                "extends": {
                    "finish": 640028,
                    "start": 640015,
                    "type": "binary",
                    "view": "table"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/legacyEventBuilder.lua",
                "finish": 640014,
                "start": 640004,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 910029,
                    "start": 910013,
                    "type": "binary",
                    "view": "table"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/Scripts/changeLandmass.lua",
                "finish": 910010,
                "start": 910000,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 660015,
                    "start": 660013,
                    "type": "table",
                    "view": "table"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/events.lua",
                "finish": 660010,
                "start": 660000,
                "type": "setfield"
            }
        ],
        "desc": " this stuff shouldn't actually be necessary\nscenarioFolderPath = scenarioFolderPath or string.gsub(eventsPath, \"legacyEventBuilder.lua\", \"?.lua\")\nif string.find(package.path, scenarioFolderPath, 1, true) == nil then\n   package.path = package.path .. \";\" .. scenarioFolderPath\nend",
        "name": "console",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [],
                    "finish": 5590095,
                    "start": 5590026,
                    "type": "function",
                    "view": "function console.afterProduction()"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/events.lua",
                "finish": 5590023,
                "start": 5590000,
                "type": "setfield"
            }
        ],
        "name": "console.afterProduction",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [],
                    "finish": 9200098,
                    "start": 9200027,
                    "type": "function",
                    "view": "function console.beforeProduction()"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/events.lua",
                "finish": 9200024,
                "start": 9200000,
                "type": "setfield"
            }
        ],
        "name": "console.beforeProduction",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "finish": 19570039,
                    "start": 19570028,
                    "type": "getlocal",
                    "view": "table"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/changeRules.lua",
                "finish": 19570026,
                "start": 19570004,
                "type": "setfield"
            }
        ],
        "name": "console.changeRules",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "finish": 3450037,
                    "start": 3450029,
                    "type": "getlocal",
                    "view": "unknown"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/cityData.lua",
                "finish": 3450026,
                "start": 3450004,
                "type": "setfield"
            }
        ],
        "name": "console.cityData",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "finish": 1850057,
                    "start": 1850036,
                    "type": "getlocal",
                    "view": "table"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/rules.lua",
                "finish": 1850033,
                "start": 1850004,
                "type": "setfield"
            }
        ],
        "name": "console.combatGroupMembership",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [],
                    "finish": 700011,
                    "start": 670019,
                    "type": "function",
                    "view": "function console.commands()"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/events.lua",
                "finish": 670016,
                "start": 670000,
                "type": "setfield"
            }
        ],
        "name": "console.commands",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "finish": 4430035,
                    "start": 4430028,
                    "type": "getlocal",
                    "view": "counter"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/counter.lua",
                "finish": 4430025,
                "start": 4430004,
                "type": "setfield"
            }
        ],
        "name": "console.counter",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "finish": 13890056,
                    "start": 13890019,
                    "type": "getfield",
                    "view": "table"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/changeRules.lua",
                "finish": 13890016,
                "start": 13890000,
                "type": "setfield"
            }
        ],
        "name": "console.defaults",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "finish": 10430039,
                    "start": 10430030,
                    "type": "getlocal",
                    "view": "table"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/diplomacy.lua",
                "finish": 10430027,
                "start": 10430004,
                "type": "setfield"
            }
        ],
        "name": "console.diplomacy",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "finish": 1850029,
                    "start": 1850025,
                    "type": "getlocal",
                    "view": "flag"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/flag.lua",
                "finish": 1850022,
                "start": 1850004,
                "type": "setfield"
            }
        ],
        "desc": " table of flag functions to be returned with the module",
        "name": "console.flag",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "finish": 89140027,
                    "start": 89140024,
                    "type": "getlocal",
                    "view": "gen"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 89140021,
                "start": 89140004,
                "type": "setfield"
            }
        ],
        "desc": "The General Library offers a variety of tools to make it easier to build events. To access functions from the General Library, you should include the following line at the top of your file:\n```lua\nlocal gen = require(\"generalLibrary\")\n```",
        "name": "console.gen",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [],
                    "finish": 940065,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "unknown"
                        }
                    ],
                    "start": 940029,
                    "type": "function",
                    "view": "function console.getEventNumber()\n  -> unknown"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/legacyEventEngine.lua",
                "finish": 940026,
                "start": 940004,
                "type": "setfield"
            }
        ],
        "name": "console.getEventNumber",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [],
                    "finish": 32060003,
                    "start": 32040000,
                    "type": "function",
                    "view": "function console.hireMercTest()"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/text.lua",
                "finish": 32040029,
                "start": 32040009,
                "type": "setfield"
            }
        ],
        "name": "console.hireMercTest",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "finish": 6360064,
                    "start": 6360035,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/leaderBonus.lua",
                "finish": 6360032,
                "start": 6360004,
                "type": "setfield"
            }
        ],
        "name": "console.initializeLeaders",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "finish": 19670027,
                    "start": 19670021,
                    "type": "getlocal",
                    "view": "table"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/legacyEventEngine.lua",
                "finish": 19670018,
                "start": 19670004,
                "type": "setfield"
            }
        ],
        "name": "console.legacy",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "finish": 6930051,
                    "start": 6930030,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/civilopedia.lua",
                "finish": 6930027,
                "start": 6930004,
                "type": "setfield"
            }
        ],
        "name": "console.makeDescribeTxt",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 29980037,
                            "name": "tribeID",
                            "start": 29980030,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "finish": 30380003,
                    "start": 29980000,
                    "type": "function",
                    "view": "function console.menuAutoTest(tribeID: any)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/text.lua",
                "finish": 29980029,
                "start": 29980009,
                "type": "setfield"
            }
        ],
        "name": "console.menuAutoTest",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "finish": 5600058,
                    "start": 5600035,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/events.lua",
                "finish": 5600032,
                "start": 5600000,
                "type": "setfield"
            }
        ],
        "name": "console.onCityProcessingComplete",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "finish": 9210051,
                    "start": 9210027,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/events.lua",
                "finish": 9210024,
                "start": 9210000,
                "type": "setfield"
            }
        ],
        "name": "console.onTribeTurnBegin",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [],
                    "finish": 3980055,
                    "start": 3980017,
                    "type": "function",
                    "view": "function console.onTurn()"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/events.lua",
                "finish": 3980014,
                "start": 3980000,
                "type": "setfield"
            }
        ],
        "name": "console.onTurn",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 10110043,
                            "name": "terrainID",
                            "start": 10110034,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "finish": 10160003,
                    "start": 10110000,
                    "type": "function",
                    "view": "function console.printBaseTerrain(terrainID: any)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/changeRules.lua",
                "finish": 10110033,
                "start": 10110009,
                "type": "setfield"
            }
        ],
        "name": "console.printBaseTerrain",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "finish": 43010048,
                    "start": 43010031,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 43010028,
                "start": 43010004,
                "type": "setfield"
            }
        ],
        "name": "console.restoreGlobal",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 29820035,
                            "name": "tribeID",
                            "start": 29820028,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "finish": 29880003,
                    "start": 29820000,
                    "type": "function",
                    "view": "function console.sampleMenu(tribeID: any)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/text.lua",
                "finish": 29820027,
                "start": 29820009,
                "type": "setfield"
            }
        ],
        "name": "console.sampleMenu",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 940042,
                            "name": "xMin",
                            "start": 940038,
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": 940047,
                            "name": "xMax",
                            "start": 940043,
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": 940052,
                            "name": "yMin",
                            "start": 940048,
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": 940057,
                            "name": "yMax",
                            "start": 940053,
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": 940066,
                            "name": "landmass",
                            "start": 940058,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "finish": 1040003,
                    "start": 940000,
                    "type": "function",
                    "view": "function _G.console.setLandmassNumber(xMin: any, xMax: any, yMin: any, yMax: any, landmass: any)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/Scripts/changeLandmass.lua",
                "finish": 940037,
                "start": 940009,
                "type": "setfield"
            }
        ],
        "name": "console.setLandmassNumber",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [],
                    "finish": 12380003,
                    "start": 11990000,
                    "type": "function",
                    "view": "function console.testSubstitution()"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/text.lua",
                "finish": 11990033,
                "start": 11990009,
                "type": "setfield"
            }
        ],
        "name": "console.testSubstitution",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "finish": 29780019,
                    "start": 29780015,
                    "type": "getlocal",
                    "view": "table"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/text.lua",
                "finish": 29780012,
                "start": 29780000,
                "type": "setfield"
            }
        ],
        "name": "console.text",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "finish": 3590037,
                    "start": 3590029,
                    "type": "getlocal",
                    "view": "unknown"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/unitData.lua",
                "finish": 3590026,
                "start": 3590004,
                "type": "setfield"
            }
        ],
        "name": "console.unitData",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "finish": 80014,
                    "start": 80012,
                    "type": "table",
                    "view": "coroutinelib"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/coroutine.lua",
                "finish": 80009,
                "start": 80000,
                "type": "setglobal"
            }
        ],
        "desc": "\n\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-coroutine)\n",
        "name": "coroutine",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "finish": 11260026,
                    "start": 11260020,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 11260026,
                            "start": 11260020,
                            "type": "doc.type.name",
                            "view": "thread"
                        }
                    ],
                    "view": "thread"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 11260026,
                "start": 11260010,
                "type": "doc.alias"
            }
        ],
        "desc": "A coroutine is a line of execution, with its own stack and its own local variables; but sharing global variables and mostly anything else with other coroutines. Coroutines are collaborative: A program with coroutines is, at any given time, running only one of its coroutines and this running coroutine only suspends its execution when it explicitly requests to be suspended.\n\n[Programming in Lua, 9 -- Coroutines](https://www.lua.org/pil/9.html)\n\n[Tutorialspoint Lua -- Coroutines](https://www.tutorialspoint.com/lua/lua_coroutines.htm)",
        "fields": [],
        "name": "coroutine",
        "type": "type"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "Thread is the name that Lua Language Server uses for a coroutine.  A coroutine is a line of execution, with its own stack and its own local variables; but sharing global variables and mostly anything else with other coroutines. Coroutines are collaborative: A program with coroutines is, at any given time, running only one of its coroutines and this running coroutine only suspends its execution when it explicitly requests to be suspended.\n\n[Programming in Lua, 9 -- Coroutines](https://www.lua.org/pil/9.html)\n\n[Tutorialspoint Lua -- Coroutines](https://www.tutorialspoint.com/lua/lua_coroutines.htm)",
                            "finish": 390027,
                            "name": "co",
                            "start": 390025,
                            "type": "local",
                            "view": "thread"
                        }
                    ],
                    "desc": "\nCloses coroutine `co` , closing all its pending to-be-closed variables and putting the coroutine in a dead state.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-coroutine.close)",
                    "finish": 390032,
                    "returns": [
                        {
                            "name": "noerror",
                            "type": "function.return",
                            "view": "boolean"
                        },
                        {
                            "name": "errorobject",
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": 390000,
                    "type": "function",
                    "view": "function coroutine.close(co: thread)\n  -> noerror: boolean\n  2. errorobject: any"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/coroutine.lua",
                "finish": 390024,
                "start": 390009,
                "type": "setfield"
            }
        ],
        "desc": "\nCloses coroutine `co` , closing all its pending to-be-closed variables and putting the coroutine in a dead state.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-coroutine.close)",
        "name": "coroutine.close",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 180027,
                            "name": "f",
                            "start": 180026,
                            "type": "local",
                            "view": "fun(...any):...unknown"
                        }
                    ],
                    "desc": "\nCreates a new coroutine, with body `f`. `f` must be a function. Returns this new coroutine, an object with type `\"thread\"`.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-coroutine.create)",
                    "finish": 180032,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "thread"
                        }
                    ],
                    "start": 180000,
                    "type": "function",
                    "view": "function coroutine.create(f: fun(...any):...unknown)\n  -> thread"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/coroutine.lua",
                "finish": 180025,
                "start": 180009,
                "type": "setfield"
            }
        ],
        "desc": "\nCreates a new coroutine, with body `f`. `f` must be a function. Returns this new coroutine, an object with type `\"thread\"`.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-coroutine.create)",
        "name": "coroutine.create",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "Thread is the name that Lua Language Server uses for a coroutine.  A coroutine is a line of execution, with its own stack and its own local variables; but sharing global variables and mostly anything else with other coroutines. Coroutines are collaborative: A program with coroutines is, at any given time, running only one of its coroutines and this running coroutine only suspends its execution when it explicitly requests to be suspended.\n\n[Programming in Lua, 9 -- Coroutines](https://www.lua.org/pil/9.html)\n\n[Tutorialspoint Lua -- Coroutines](https://www.tutorialspoint.com/lua/lua_coroutines.htm)",
                            "finish": 280033,
                            "name": "co",
                            "start": 280031,
                            "type": "local",
                            "view": "thread?"
                        }
                    ],
                    "desc": "\nReturns true when the coroutine `co` can yield. The default for `co` is the running coroutine.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-coroutine.isyieldable)",
                    "finish": 280038,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 280000,
                    "type": "function",
                    "view": "function coroutine.isyieldable(co?: thread)\n  -> boolean"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/coroutine.lua",
                "finish": 280030,
                "start": 280009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns true when the coroutine `co` can yield. The default for `co` is the running coroutine.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-coroutine.isyieldable)",
        "name": "coroutine.isyieldable",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "Thread is the name that Lua Language Server uses for a coroutine.  A coroutine is a line of execution, with its own stack and its own local variables; but sharing global variables and mostly anything else with other coroutines. Coroutines are collaborative: A program with coroutines is, at any given time, running only one of its coroutines and this running coroutine only suspends its execution when it explicitly requests to be suspended.\n\n[Programming in Lua, 9 -- Coroutines](https://www.lua.org/pil/9.html)\n\n[Tutorialspoint Lua -- Coroutines](https://www.tutorialspoint.com/lua/lua_coroutines.htm)",
                            "finish": 500028,
                            "name": "co",
                            "start": 500026,
                            "type": "local",
                            "view": "thread"
                        },
                        {
                            "finish": 500034,
                            "name": "val1",
                            "start": 500030,
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": 500039,
                            "start": 500036,
                            "type": "...",
                            "view": "unknown"
                        }
                    ],
                    "desc": "\nStarts or continues the execution of coroutine `co`.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-coroutine.resume)",
                    "finish": 500044,
                    "returns": [
                        {
                            "name": "success",
                            "type": "function.return",
                            "view": "boolean"
                        },
                        {
                            "name": "...",
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": 500000,
                    "type": "function",
                    "view": "function coroutine.resume(co: thread, val1?: any, ...any)\n  -> success: boolean\n  2. ...any"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/coroutine.lua",
                "finish": 500025,
                "start": 500009,
                "type": "setfield"
            }
        ],
        "desc": "\nStarts or continues the execution of coroutine `co`.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-coroutine.resume)",
        "name": "coroutine.resume",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [],
                    "desc": "\nReturns the running coroutine plus a boolean, true when the running coroutine is the main one.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-coroutine.running)",
                    "finish": 600032,
                    "returns": [
                        {
                            "name": "running",
                            "type": "function.return",
                            "view": "thread"
                        },
                        {
                            "name": "ismain",
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 600000,
                    "type": "function",
                    "view": "function coroutine.running()\n  -> running: thread\n  2. ismain: boolean"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/coroutine.lua",
                "finish": 600026,
                "start": 600009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the running coroutine plus a boolean, true when the running coroutine is the main one.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-coroutine.running)",
        "name": "coroutine.running",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "Thread is the name that Lua Language Server uses for a coroutine.  A coroutine is a line of execution, with its own stack and its own local variables; but sharing global variables and mostly anything else with other coroutines. Coroutines are collaborative: A program with coroutines is, at any given time, running only one of its coroutines and this running coroutine only suspends its execution when it explicitly requests to be suspended.\n\n[Programming in Lua, 9 -- Coroutines](https://www.lua.org/pil/9.html)\n\n[Tutorialspoint Lua -- Coroutines](https://www.tutorialspoint.com/lua/lua_coroutines.htm)",
                            "finish": 740028,
                            "name": "co",
                            "start": 740026,
                            "type": "local",
                            "view": "thread"
                        }
                    ],
                    "desc": "\nReturns the status of coroutine `co`.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-coroutine.status)\n\n\n```lua\nreturn #1:\n    | \"running\" -- Is running.\n    | \"suspended\" -- Is suspended or not started.\n    | \"normal\" -- Is active but not running.\n    | \"dead\" -- Has finished or stopped with an error.\n```",
                    "finish": 740033,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "\"dead\"|\"normal\"|\"running\"|\"suspended\""
                        }
                    ],
                    "start": 740000,
                    "type": "function",
                    "view": "function coroutine.status(co: thread)\n  -> \"dead\"|\"normal\"|\"running\"|\"suspended\""
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/coroutine.lua",
                "finish": 740025,
                "start": 740009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the status of coroutine `co`.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-coroutine.status)\n\n\n```lua\nreturn #1:\n    | \"running\" -- Is running.\n    | \"suspended\" -- Is suspended or not started.\n    | \"normal\" -- Is active but not running.\n    | \"dead\" -- Has finished or stopped with an error.\n```",
        "name": "coroutine.status",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 840025,
                            "name": "f",
                            "start": 840024,
                            "type": "local",
                            "view": "fun(...any):...unknown"
                        }
                    ],
                    "desc": "\nCreates a new coroutine, with body `f`; `f` must be a function. Returns a function that resumes the coroutine each time it is called.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-coroutine.wrap)",
                    "finish": 840030,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "fun(...any):...unknown"
                        }
                    ],
                    "start": 840000,
                    "type": "function",
                    "view": "function coroutine.wrap(f: fun(...any):...unknown)\n  -> fun(...any):...unknown"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/coroutine.lua",
                "finish": 840023,
                "start": 840009,
                "type": "setfield"
            }
        ],
        "desc": "\nCreates a new coroutine, with body `f`; `f` must be a function. Returns a function that resumes the coroutine each time it is called.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-coroutine.wrap)",
        "name": "coroutine.wrap",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 930028,
                            "start": 930025,
                            "type": "...",
                            "view": "unknown"
                        }
                    ],
                    "desc": "\nSuspends the execution of the calling coroutine.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-coroutine.yield)",
                    "finish": 930033,
                    "returns": [
                        {
                            "name": "...",
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": 930000,
                    "type": "function",
                    "view": "(async) function coroutine.yield(...any)\n  -> ...any"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/coroutine.lua",
                "finish": 930024,
                "start": 930009,
                "type": "setfield"
            }
        ],
        "desc": "\nSuspends the execution of the calling coroutine.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-coroutine.yield)",
        "name": "coroutine.yield",
        "type": "variable"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/counter.lua",
                "finish": 670017,
                "start": 670010,
                "type": "doc.class"
            }
        ],
        "fields": [
            {
                "extends": {
                    "finish": 1910017,
                    "start": 1910014,
                    "type": "getlocal",
                    "view": "function"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/counter.lua",
                "finish": 1910011,
                "name": "add",
                "start": 1910000,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 1420023,
                    "start": 1420017,
                    "type": "getlocal",
                    "view": "function"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/counter.lua",
                "finish": 1420014,
                "name": "define",
                "start": 1420000,
                "type": "setfield"
            },
            {
                "desc": " this allows for object.js to be built",
                "extends": {
                    "finish": 1140026,
                    "start": 1140024,
                    "type": "table",
                    "view": "table"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/counter.lua",
                "finish": 1140021,
                "name": "eventsKeyList",
                "start": 1140000,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 1570047,
                    "start": 1570029,
                    "type": "getlocal",
                    "view": "function"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/counter.lua",
                "finish": 1570026,
                "name": "initializeCounters",
                "start": 1570000,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 4240029,
                    "start": 4240020,
                    "type": "getlocal",
                    "view": "function"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/counter.lua",
                "finish": 4240017,
                "name": "isAtLeast",
                "start": 4240000,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 4400027,
                    "start": 4400019,
                    "type": "getlocal",
                    "view": "function"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/counter.lua",
                "finish": 4400016,
                "name": "isAtMost",
                "start": 4400000,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 3910031,
                    "start": 3910021,
                    "type": "getlocal",
                    "view": "function"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/counter.lua",
                "finish": 3910018,
                "name": "isNegative",
                "start": 3910000,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 3580031,
                    "start": 3580021,
                    "type": "getlocal",
                    "view": "function"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/counter.lua",
                "finish": 3580018,
                "name": "isPositive",
                "start": 3580000,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 4080047,
                    "start": 4080029,
                    "type": "getlocal",
                    "view": "function"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/counter.lua",
                "finish": 4080026,
                "name": "isStrictlyNegative",
                "start": 4080000,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 3750047,
                    "start": 3750029,
                    "type": "getlocal",
                    "view": "function"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/counter.lua",
                "finish": 3750026,
                "name": "isStrictlyPositive",
                "start": 3750000,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 3420023,
                    "start": 3420017,
                    "type": "getlocal",
                    "view": "function"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/counter.lua",
                "finish": 3420014,
                "name": "isZero",
                "start": 3420000,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 1160029,
                    "start": 1160020,
                    "type": "getlocal",
                    "view": "function"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/counter.lua",
                "finish": 1160017,
                "name": "linkState",
                "start": 1160000,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 2530031,
                    "start": 2530021,
                    "type": "getlocal",
                    "view": "function"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/counter.lua",
                "finish": 2530018,
                "name": "setAtLeast",
                "start": 2530000,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 2640039,
                    "start": 2640025,
                    "type": "getlocal",
                    "view": "function"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/counter.lua",
                "finish": 2640022,
                "name": "setAtLeastZero",
                "start": 2640000,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 2850029,
                    "start": 2850020,
                    "type": "getlocal",
                    "view": "function"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/counter.lua",
                "finish": 2850017,
                "name": "setAtMost",
                "start": 2850000,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 2970037,
                    "start": 2970024,
                    "type": "getlocal",
                    "view": "function"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/counter.lua",
                "finish": 2970021,
                "name": "setAtMostZero",
                "start": 2970000,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 2310027,
                    "start": 2310019,
                    "type": "getlocal",
                    "view": "function"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/counter.lua",
                "finish": 2310016,
                "name": "setValue",
                "start": 2310000,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 2110027,
                    "start": 2110019,
                    "type": "getlocal",
                    "view": "function"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/counter.lua",
                "finish": 2110016,
                "name": "subtract",
                "start": 2110000,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 1710021,
                    "start": 1710016,
                    "type": "getlocal",
                    "view": "function"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/counter.lua",
                "finish": 1710013,
                "name": "value",
                "start": 1710000,
                "type": "setfield"
            }
        ],
        "name": "counter",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/customCosmic.lua",
                "finish": 510022,
                "start": 510010,
                "type": "doc.class"
            }
        ],
        "fields": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 18740049,
                            "name": "city",
                            "start": 18740045,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "finish": 18840003,
                    "start": 18740000,
                    "type": "function",
                    "view": "function customCosmic.changeEphemeralForCity(city: any)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/customCosmic.lua",
                "finish": 18740044,
                "name": "changeEphemeralForCity",
                "start": 18740009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 23620051,
                            "name": "tribe",
                            "start": 23620046,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "finish": 23700003,
                    "start": 23620000,
                    "type": "function",
                    "view": "function customCosmic.changeEphemeralForTribe(tribe: any)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/customCosmic.lua",
                "finish": 23620045,
                "name": "changeEphemeralForTribe",
                "start": 23620009,
                "type": "setfield"
            },
            {
                "desc": "Changes the ephemeral rules so that the unit customisations\nwill work",
                "extends": {
                    "args": [
                        {
                            "desc": "A unit object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit in the game, and provides a means of interacting with it. This should not be confused with the unit type object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unit)",
                            "finish": 10680049,
                            "name": "unit",
                            "start": 10680045,
                            "type": "local",
                            "view": "unitObject"
                        }
                    ],
                    "desc": "Changes the ephemeral rules so that the unit customisations\nwill work",
                    "finish": 10860003,
                    "start": 10680000,
                    "type": "function",
                    "view": "function customCosmic.changeEphemeralForUnit(unit: unitObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/customCosmic.lua",
                "finish": 10680044,
                "name": "changeEphemeralForUnit",
                "start": 10680009,
                "type": "setfield"
            },
            {
                "desc": "Computes the value that `unit.type.move` should have so that `unit` satisfies\nall its customisations.\n\n@*param* `customisation` โ If not defined, customCosmic.getUnitTypeCustomisation is called to retrieve it.",
                "extends": {
                    "args": [
                        {
                            "desc": "A unit object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit in the game, and provides a means of interacting with it. This should not be confused with the unit type object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unit)",
                            "finish": 9140051,
                            "name": "unit",
                            "start": 9140047,
                            "type": "local",
                            "view": "unitObject"
                        },
                        {
                            "desc": "If not defined, customCosmic.getUnitTypeCustomisation is called to retrieve it.",
                            "finish": 9140065,
                            "name": "customisation",
                            "start": 9140052,
                            "type": "local",
                            "view": "table?"
                        }
                    ],
                    "desc": "Computes the value that `unit.type.move` should have so that `unit` satisfies\nall its customisations.\n\n@*param* `customisation` โ If not defined, customCosmic.getUnitTypeCustomisation is called to retrieve it.",
                    "finish": 9290003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": 9140000,
                    "type": "function",
                    "view": "function customCosmic.computeMovementAllowance(unit: unitObject, customisation?: table)\n  -> integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/customCosmic.lua",
                "finish": 9140046,
                "name": "computeMovementAllowance",
                "start": 9140009,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 1100002,
                    "start": 1050042,
                    "type": "select",
                    "view": "unknown"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/customCosmic.lua",
                "finish": 1050039,
                "name": "defaultMovementMultipliers",
                "start": 1050000,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [],
                    "finish": 600003,
                    "start": 570000,
                    "type": "function",
                    "view": "function customCosmic.enableCustomCosmic()"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/customCosmic.lua",
                "finish": 570040,
                "name": "enableCustomCosmic",
                "start": 570009,
                "type": "setfield"
            },
            {
                "desc": "Enables the nativeTransport, buildTransport, useTransport fields\n to be altered by the customCosmic module.  Usually, these\n fields are saved as part of the game, so game events can enable\n or disable transport.  Those kinds of events will no longer work,\n (unless you program them into customCosmic customisations instead).",
                "extends": {
                    "args": [],
                    "desc": "Enables the nativeTransport, buildTransport, useTransport fields\n to be altered by the customCosmic module.  Usually, these\n fields are saved as part of the game, so game events can enable\n or disable transport.  Those kinds of events will no longer work,\n (unless you program them into customCosmic customisations instead).",
                    "finish": 2260003,
                    "start": 2240000,
                    "type": "function",
                    "view": "function customCosmic.enableEphemeralMapTransportSettings()"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/customCosmic.lua",
                "finish": 2240057,
                "name": "enableEphemeralMapTransportSettings",
                "start": 2240009,
                "type": "setfield"
            },
            {
                "desc": "Computes the movement allowance for the unit if it is at full health. \n\n@*param* `customisation` โ If not defined, customCosmic.getUnitTypeCustomisation is called to retrieve it.",
                "extends": {
                    "args": [
                        {
                            "desc": "A unit object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit in the game, and provides a means of interacting with it. This should not be confused with the unit type object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unit)",
                            "finish": 8780054,
                            "name": "unit",
                            "start": 8780050,
                            "type": "local",
                            "view": "unitObject"
                        },
                        {
                            "desc": "If not defined, customCosmic.getUnitTypeCustomisation is called to retrieve it.",
                            "finish": 8780068,
                            "name": "customisation",
                            "start": 8780055,
                            "type": "local",
                            "view": "table?"
                        }
                    ],
                    "desc": "Computes the movement allowance for the unit if it is at full health. \n\n@*param* `customisation` โ If not defined, customCosmic.getUnitTypeCustomisation is called to retrieve it.",
                    "finish": 9070003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": 8780000,
                    "type": "function",
                    "view": "function customCosmic.fullHealthMovementAllowance(unit: unitObject, customisation?: table)\n  -> integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/customCosmic.lua",
                "finish": 8780049,
                "name": "fullHealthMovementAllowance",
                "start": 8780009,
                "type": "setfield"
            },
            {
                "desc": "Returns the cityCustomisation for `city`",
                "extends": {
                    "args": [
                        {
                            "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
                            "finish": 17320047,
                            "name": "city",
                            "start": 17320043,
                            "type": "local",
                            "view": "cityObject"
                        }
                    ],
                    "desc": "Returns the cityCustomisation for `city`",
                    "finish": 17340003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "table"
                        }
                    ],
                    "start": 17320000,
                    "type": "function",
                    "view": "function customCosmic.getCityCustomisation(city: cityObject)\n  -> table"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/customCosmic.lua",
                "finish": 17320042,
                "name": "getCityCustomisation",
                "start": 17320009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 23930051,
                            "name": "tile",
                            "start": 23930047,
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": 23930056,
                            "name": "city",
                            "start": 23930052,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "finish": 24260003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "table"
                        },
                        {
                            "type": "function.return",
                            "view": "table"
                        },
                        {
                            "type": "function.return",
                            "view": "table<integer|mapObject, bitmask>"
                        }
                    ],
                    "start": 23930000,
                    "type": "function",
                    "view": "function customCosmic.getCustomisedTerrainInfo(tile: any, city: any)\n  -> table\n  2. table\n  3. table<integer|mapObject, bitmask>"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/customCosmic.lua",
                "finish": 23930046,
                "name": "getCustomisedTerrainInfo",
                "start": 23930009,
                "type": "setfield"
            },
            {
                "desc": "Returns an 'empty' unitTypeCustomisation, with priority set to -1",
                "extends": {
                    "args": [],
                    "desc": "Returns an 'empty' unitTypeCustomisation, with priority set to -1",
                    "finish": 7020003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "table"
                        }
                    ],
                    "start": 7000000,
                    "type": "function",
                    "view": "function customCosmic.getEmptyUnitTypeCustomisation()\n  -> table"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/customCosmic.lua",
                "finish": 7000051,
                "name": "getEmptyUnitTypeCustomisation",
                "start": 7000009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 23720042,
                            "name": "tribe",
                            "start": 23720037,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "finish": 23910003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "table"
                        }
                    ],
                    "start": 23720000,
                    "type": "function",
                    "view": "function customCosmic.getFreeSupport(tribe: any)\n  -> table"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/customCosmic.lua",
                "finish": 23720036,
                "name": "getFreeSupport",
                "start": 23720009,
                "type": "setfield"
            },
            {
                "desc": "Returns the movementMultipliers for `unit` in a table.",
                "extends": {
                    "args": [
                        {
                            "desc": "A unit object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit in the game, and provides a means of interacting with it. This should not be confused with the unit type object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unit)",
                            "finish": 7510049,
                            "name": "unit",
                            "start": 7510045,
                            "type": "local",
                            "view": "unitObject"
                        },
                        {
                            "desc": "A table is a data type native to Lua, and links \"keys\" (usually numbers or strings) to \"values\" (any kind of data, including other tables). This is the only data structuring mechanism in Lua, and many of the data types documented here are simply tables with restrictions on their keys or values. If a key has not been assigned a value, the table returns nil as the corresponding value, and assigning nil as a value to a key removes that key from the table.\n[Programming in Lua, 2.5 -- Tables](https://www.lua.org/pil/2.5.html)",
                            "finish": 7510063,
                            "name": "customisation",
                            "start": 7510050,
                            "type": "local",
                            "view": "table?"
                        }
                    ],
                    "desc": "Returns the movementMultipliers for `unit` in a table.",
                    "finish": 7780003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "{ alpine: integer, road: integer, railroad: integer, river: integer, aggregate: integer }"
                        }
                    ],
                    "start": 7510000,
                    "type": "function",
                    "view": "function customCosmic.getMovementMultipliers(unit: unitObject, customisation?: table)\n  -> { alpine: integer, road: integer, railroad: integer, river: integer, aggregate: integer }"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/customCosmic.lua",
                "finish": 7510044,
                "name": "getMovementMultipliers",
                "start": 7510009,
                "type": "setfield"
            },
            {
                "desc": "Returns the tribeCustomisation for `tribe`",
                "extends": {
                    "args": [
                        {
                            "desc": "A tribe object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a tribe, which is to say the characteristics of the tribe overall, in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tribe)",
                            "finish": 22830049,
                            "name": "tribe",
                            "start": 22830044,
                            "type": "local",
                            "view": "tribeObject"
                        }
                    ],
                    "desc": "Returns the tribeCustomisation for `tribe`",
                    "finish": 22850003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "table"
                        }
                    ],
                    "start": 22830000,
                    "type": "function",
                    "view": "function customCosmic.getTribeCustomisation(tribe: tribeObject)\n  -> table"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/customCosmic.lua",
                "finish": 22830043,
                "name": "getTribeCustomisation",
                "start": 22830009,
                "type": "setfield"
            },
            {
                "desc": "Returns the total improvement maintenance cost a tribe must pay each turn.\nIf `recalculate` is false or absent, the value is from the most recent\nupdate of each city.  If `recalculate` is true, city improvement customisations\nare calculated to get the current version of upkeep.",
                "extends": {
                    "args": [
                        {
                            "desc": "A tribe object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a tribe, which is to say the characteristics of the tribe overall, in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tribe)",
                            "finish": 18240042,
                            "name": "tribe",
                            "start": 18240037,
                            "type": "local",
                            "view": "tribeObject"
                        },
                        {
                            "desc": "A boolean is a data type native to Lua with exactly two possible values, <code>true</code> and <code>false</code>. These are often used when evaluating logical statements, but logical statements accept other values as well. All values except <code>false</code> and <code>nil</code> are considered 'truthy', even values such as 0 or the empty string.\n[Programming in Lua, 2.2 -- Booleans](https://www.lua.org/pil/2.2.html)",
                            "finish": 18240054,
                            "name": "recalculate",
                            "start": 18240043,
                            "type": "local",
                            "view": "boolean?"
                        }
                    ],
                    "desc": "Returns the total improvement maintenance cost a tribe must pay each turn.\nIf `recalculate` is false or absent, the value is from the most recent\nupdate of each city.  If `recalculate` is true, city improvement customisations\nare calculated to get the current version of upkeep.",
                    "finish": 18350003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": 18240000,
                    "type": "function",
                    "view": "function customCosmic.getTribeUpkeep(tribe: tribeObject, recalculate?: boolean)\n  -> integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/customCosmic.lua",
                "finish": 18240036,
                "name": "getTribeUpkeep",
                "start": 18240009,
                "type": "setfield"
            },
            {
                "desc": "Returns the unitTypeCustomisation for `unit`.",
                "extends": {
                    "args": [
                        {
                            "desc": "A unit object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit in the game, and provides a means of interacting with it. This should not be confused with the unit type object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unit)",
                            "finish": 7240051,
                            "name": "unit",
                            "start": 7240047,
                            "type": "local",
                            "view": "unitObject"
                        }
                    ],
                    "desc": "Returns the unitTypeCustomisation for `unit`.",
                    "finish": 7260003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "table"
                        }
                    ],
                    "start": 7240000,
                    "type": "function",
                    "view": "function customCosmic.getUnitTypeCustomisation(unit: unitObject)\n  -> table"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/customCosmic.lua",
                "finish": 7240046,
                "name": "getUnitTypeCustomisation",
                "start": 7240009,
                "type": "setfield"
            },
            {
                "desc": "Returns true if the customCosmic module has been enabled \nusing `cusomCosmic.enableCustomCosmic()`, and false otherwise.",
                "extends": {
                    "args": [],
                    "desc": "Returns true if the customCosmic module has been enabled \nusing `cusomCosmic.enableCustomCosmic()`, and false otherwise.",
                    "finish": 670003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 650000,
                    "type": "function",
                    "view": "function customCosmic.isEnabled()\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/customCosmic.lua",
                "finish": 650031,
                "name": "isEnabled",
                "start": 650009,
                "type": "setfield"
            },
            {
                "desc": "Determines if a base terrain type is impassable for the specified unit.\n\n@*param* `customisation` โ if nil, the customisation is retrieved by calling `customCosmic.getUnitTypeCustomisation`",
                "extends": {
                    "args": [
                        {
                            "desc": "A base terrain object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents the 'basic' terrain characteristics for a terrain type, which is to say those aspects of terrain which do not change for special resources. The 'terrain' object deals with the characteristics that do change for special resources.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#baseterrain)",
                            "finish": 9880049,
                            "name": "baseTerrain",
                            "start": 9880038,
                            "type": "local",
                            "view": "baseTerrainObject"
                        },
                        {
                            "desc": "A unit object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit in the game, and provides a means of interacting with it. This should not be confused with the unit type object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unit)",
                            "finish": 9880054,
                            "name": "unit",
                            "start": 9880050,
                            "type": "local",
                            "view": "unitObject"
                        },
                        {
                            "desc": "if nil, the customisation is retrieved by calling `customCosmic.getUnitTypeCustomisation`",
                            "finish": 9880068,
                            "name": "customisation",
                            "start": 9880055,
                            "type": "local",
                            "view": "table|nil"
                        }
                    ],
                    "desc": "Determines if a base terrain type is impassable for the specified unit.\n\n@*param* `customisation` โ if nil, the customisation is retrieved by calling `customCosmic.getUnitTypeCustomisation`",
                    "finish": 9900003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 9880000,
                    "type": "function",
                    "view": "function customCosmic.isImpassableFor(baseTerrain: baseTerrainObject, unit: unitObject, customisation: table|nil)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/customCosmic.lua",
                "finish": 9880037,
                "name": "isImpassableFor",
                "start": 9880009,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 5250062,
                    "start": 5250039,
                    "type": "getlocal",
                    "view": "fun(item: any):boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/customCosmic.lua",
                "finish": 5250036,
                "name": "isUnitTypeCustomisation",
                "start": 5250000,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 14700049,
                            "name": "table",
                            "start": 14700044,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "finish": 15200003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "unknown"
                        }
                    ],
                    "start": 14700000,
                    "type": "function",
                    "view": "function customCosmic.makeCityCustomisation(table: any)\n  -> unknown"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/customCosmic.lua",
                "finish": 14700043,
                "name": "makeCityCustomisation",
                "start": 14700009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 20830050,
                            "name": "table",
                            "start": 20830045,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "finish": 21300003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "unknown"
                        }
                    ],
                    "start": 20830000,
                    "type": "function",
                    "view": "function customCosmic.makeTribeCustomisation(table: any)\n  -> unknown"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/customCosmic.lua",
                "finish": 20830044,
                "name": "makeTribeCustomisation",
                "start": 20830009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 4770053,
                            "name": "table",
                            "start": 4770048,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "finish": 5240003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "unknown"
                        }
                    ],
                    "start": 4770000,
                    "type": "function",
                    "view": "function customCosmic.makeUnitTypeCustomisation(table: any)\n  -> unknown"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/customCosmic.lua",
                "finish": 4770047,
                "name": "makeUnitTypeCustomisation",
                "start": 4770009,
                "type": "setfield"
            },
            {
                "desc": "Registers a customisation for cities.<br>\nKeys and descriptions for city customisation tables:\n\n- These keys are used to change cosmic parameters that relate to city \nproduction.  Some cosmic parameters relating to city production are in the tribe\ncustomisations, because they are used before code in onCalculateCityYield can\nchange them.\n    * `communismPalaceDistance` = nil|int>=0 or function(city) --> nil|int>=0\n        + Specifies the base value to be used for civ.cosmic.communismPalaceDistance \n        + If nil, the value from the authoritativeDefaultRules is used.\n        + If function, use the returned value when given the city as the argument.\n    * `communismPalaceDistanceModifier` = nil|int or function(city) --> nil|int\n        + Add this to the base value to be used for civ.cosmic.communismPalaceDistance \n        + If nil, add 0.  Note, a negative number here will not reduce the base value below 0.\n        + If function, use the returned value when given the city as the argument.\n    * `foodEaten` = nil|int>=0 or function(city) --> nil|int>=0\n        + Specifies the base value to be used for civ.cosmic.foodEaten \n        + If nil, the value from the authoritativeDefaultRules is used.\n        + If function, use the returned value when given the city as the argument.\n    * `foodEatenModifier` = nil|int or function(city) --> nil|int\n        + Add this to the base value to be used for civ.cosmic.foodEaten \n        + If nil, add 0.  Note, a negative number here will not reduce the base value below 0.\n        + If function, use the returned value when given the city as the argument.\n    * `prodChangePenalty`= nil|int>=0 or function(city) --> nil|int>=0\n        + Specifies the base value to be used for civ.cosmic.prodChangePenalty\n        + If nil, the value from the authoritativeDefaultRules is used.\n        + If function, use the returned value when given the city as the argument.\n    * `prodChangePenaltyModifier`= nil|int or function(city) --> nil|int\n        + Add this to the base value to be used for civ.cosmic.prodChangePenalty\n        + If nil, add 0.  Note, a negative number here will not reduce the base value below 0.\n        + If function, use the returned value when given the city as the argument.\n    * `riotFactor`= nil|int>=0 or function(city) --> nil|int>=0\n        + Specifies the base value to be used for civ.cosmic.riotFactor\n        + If nil, the value from the authoritativeDefaultRules is used.\n        + If function, use the returned value when given the city as the argument.\n    * `riotFactorModifier` = nil|int or function(city) --> nil|int\n        + Add this to the base value to be used for civ.cosmic.riotFactor\n        + If nil, add 0.  Note, a negative number here will not reduce the base value below 0.\n        + If function, use the returned value when given the city as the argument.\n    * `scienceLostFundamentalism`= nil|int>=0 or function(city) --> nil|int>=0\n        + Specifies the base value to be used for civ.cosmic.scienceLostFundamentalism\n        + If nil, the value from the authoritativeDefaultRules is used.\n        + If function, use the returned value when given the city as the argument.\n    * `scienceLostFundamentalismModifier`= nil|int or function(city) --> nil|int\n        + Add this to the base value to be used for civ.cosmic.scienceLostFundamentalism\n        + If nil, add 0.  Note, a negative number here will not reduce the base value below 0.\n        + If function, use the returned value when given the city as the argument.\n    * `scienceRateFundamentalism`= nil|int>=0 or function(city) --> nil|int>=0\n        + Specifies the base value to be used for civ.cosmic.scienceRateFundamentalism\n        + If nil, the value from the authoritativeDefaultRules is used.\n        + If function, use the returned value when given the city as the argument.\n    * `scienceRateFundamentalismModifier`= nil|int or function(city) --> nil|int\n        + Add this to the base value to be used for civ.cosmic.scienceRateFundamentalism\n        + If nil, add 0.  Note, a negative number here will not reduce the base value below 0.\n        + If function, use the returned value when given the city as the argument.\n    * `sizeUnhappiness`= nil|int>=0 or function(city) --> nil|int>=0\n        + Specifies the base value to be used for civ.cosmic.sizeUnhappiness\n        + If nil, the value from the authoritativeDefaultRules is used.\n        + If function, use the returned value when given the city as the argument.\n    * `sizeUnhappinessModifier`= nil|int or function(city) --> nil|int\n        + Add this to the base value to be used for  civ.cosmic.sizeUnhappiness\n        + If nil, add 0.  Note, a negative number here will not reduce the base value below 0.\n        + If function, use the returned value when given the city as the argument.\n- The `condition` and `priority` keys determine which customisation table is chosen for a particular city.  The `customisationName` key is used to give the customisation a name which is used in some error messages.\n    * `customisationName` = nil|string\n        + A name to be used during certain kinds of error and debugging messages\n        + nil will give \"Unnamed City Customisation\"\n    * `condition` = nil|tribeObject|traitString|function(city)-->boolean or table of tribeObject|traitString\n        + if nil, this customisation applies to all cities (unless a higher  priority customisation also applies)\n        + if tribeObject, this customisation applies to cities owned by the tribe\n        + if traitString, this customisation applies to tribes which have the trait\n        + if table of tribeObject|traitString, this applies to any tribe or traitString in the table\n        + if function(city) --> boolean, then this customisation applies to cities which make this function return true\n        + only one customisation can apply to any city.  The `priority` key is used to tie break.\n    * `priority` = nil or number >= 0\n        + If multiple customisations can apply to a city, this value chooses among them, with higher priority taking precedence.\n        + If the city is eligible for two customisations of the same priority, an error may be generated, and will certainly be generated if they are of the highest priority.\n- The following types of objects can also be keys in a city customisation table: `unitTypeObject`, `improvementObject`, `wonderObject`, `baseTerrainObject`, and `terrainObject`.  (These are associated with integer values behind the scenes, but don't worry about that.  Just use the object (NOT the ID) as the key.)  Each key takes a table value (or nil), to govern some aspects of the item.\n    * `[unitTypeObject]` = nil|table \n        + `cost` = nil|int>=0 or function(city)-->nil|int>=0\n            - Sets the base cost (in shield rows) for the city\n            - If nil, refer to authoritativeDefaultRules\n            - If function, use result after evaluating function(city)\n        + `costModifier` = nil|int or function(city)-->nil|int\n            - Add this to the base cost, but cost won't be less than 0\n            - If nil, use 0\n            - If function, use result after evaluating function(city)\n\n    * `[improvementObject]` = nil|table \n        + `cost` = nil|int>=0 or function(city)-->nil|int>=0\n            - Sets the base cost (in shield rows) for the city\n            - If nil, refer to authoritativeDefaultRules\n            - If function, use result after evaluating function(city)\n        + `costModifier` = nil|int or function(city)-->nil|int\n            - Add this to the base cost, but cost won't be less than 0\n            - If nil, use 0\n            - If function, use result after evaluating function(city)\n        + `cantSell` = nil|boolean or function(city)-->nil|boolean\n            - If true, the city can't sell the improvement, if false, it can.\n            - If nil, refer to the authoritativeDefaultRules\n        + `upkeep` = nil|int>=0 or function(city)-->nil|int>=0\n            - Sets the base upkeep (gold per turn) this improvement in this city\n            - If nil, refer to authoritativeDefaultRules\n            - If function, use result after evaluating function(city)\n            - Note: Upkeep costs will be calculated correctly during city processing, but the Tax Rate and Trade Adviser windows will not be correct if the upkeep isn't the same for all cities (Costs for the most recently looked at city will be used.)\n            - `customCosmic.getTribeUpkeep` will calculate the actual upkeep per turn for the tribe.\n        + `upkeepModifier` = nil|int or function(city)-->nil|int\n            - Add this to the base upkeep, but upkeep won't be less than 0\n            - If nil, use 0 \n            - If function, use result after evaluating function(city)\n    * `[wonderObject]` = nil|table\n        + `cost` = nil|int>=0 or function(city)-->nil|int>=0\n            - Sets the base cost (in shield rows) for the city\n            - If nil, refer to authoritativeDefaultRules\n            - If function, use result after evaluating function(city)\n        + `costModifier` = nil|int or function(city)-->nil|int\n            - Add this to the base cost, but cost won't be less than 0\n            - If nil, use 0\n            - If function, use result after evaluating function(city)\n    * `[baseTerrainObject]` = nil|table\n        + `irrigateBonus` = nil|int>=0 or function(city)-->nil|int>=0\n            - Sets the base value of the irrigation bonus for the city and baseTerrain.\n            - If nil, refer to the authoritativeDefaultRules,\n            - If function, use the result of function(city), \n        + `irrigateBonusModifier` = nil|int or function(city)-->nil|int\n            - Add this to the base irrigation bonus, but results less than 0 will be set to 0.\n            - If nil, use 0.\n            - If function, use result after evaluating function(city)\n        + `mineBonus` = nil|int>=0 or function(city)-->nil|int>=0\n            - Sets the base value of the mining bonus for the city and baseTerrain.\n            - If nil, refer to the authoritativeDefaultRules,\n            - If function, use the result of function(city), \n        + `mineBonusModifier` = nil|int or function(city)-->nil|int\n            - Add this to the base mining bonus, but results less than 0 will be set to 0.\n            - If nil, use 0.\n            - If function, use result after evaluating function(city)\n        + `roadTrade` = nil|boolean or function(city)-->nil|boolean\n            - If true, for this city and baseTerrain, the road trade bonus is applied.  If false, it is not.\n            - If nil, refer to the authoritativeDefaultRules\n            - If function, use result after evaluating function(city)\n    * `[terrainObject]` = {\n        + `food` = nil|int>=0 or function(city)-->nil|int>=0\n            - Sets the base value for the food produced for this city by this terrain type.\n            - If nil, refer to the authoritativeDefaultRules\n            - If function, use the result of function(city)\n        + `foodModifier` = nil|int or function(city)-->nil|int\n            - Add this to the base food production value, but if the result is less than 0, it will be raised to 0.\n            - If nil, use 0.\n            - If function, use the result of function(city) \n        + `shields` = nil|int>=0 or function(city)-->nil|int>=0\n            - Sets the base value for the shields produced for this city by this terrain type.\n            - If nil, refer to the authoritativeDefaultRules\n            - If function, use the result of function(city)\n        + `shieldsModifier` = nil|int or function(city)-->nil|int\n            - Add this to the base shield production value, but if the result is less than 0, it will be raised to 0.\n            - If nil, use 0.\n            - If function, use the result of function(city) \n        + `trade` = nil|int>=0 or function(city)-->nil|int>=0\n            - Sets the base value for the trade produced for this city by this terrain type.\n            - If nil, refer to the authoritativeDefaultRules\n            - If function, use the result of function(city)\n        + `tradeModifier` = nil|int or function(city)-->nil|int\n            - Add this to the base trade production value, but if the result is less than 0, it will be raised to 0.\n            - If nil, use 0.\n            - If function, use the result of function(city) \n- You can assign the same data table to multiple items by providing a table as the key, instead of a string or luaObject.  Consider:\n<br> [keyTable] = data\n<br>For each value in the `keyTable`, if value is not a trait, assign\n<br>customisation[value] = gen.copyTable(data)\n<br>if the value is a trait, for each ITEM such that \n<br>traits.hasTrait(ITEM,value)` \n<br>is true, assign\n<br>customisation[ITEM] = gen.copyTable(data)\n\n\n@*param* `customisation` โ A city customisation table, described above.",
                "extends": {
                    "args": [
                        {
                            "desc": "A city customisation table, described above.",
                            "finish": 17020061,
                            "name": "customisation",
                            "start": 17020048,
                            "type": "local",
                            "view": "table"
                        }
                    ],
                    "desc": "Registers a customisation for cities.<br>\nKeys and descriptions for city customisation tables:\n\n- These keys are used to change cosmic parameters that relate to city \nproduction.  Some cosmic parameters relating to city production are in the tribe\ncustomisations, because they are used before code in onCalculateCityYield can\nchange them.\n    * `communismPalaceDistance` = nil|int>=0 or function(city) --> nil|int>=0\n        + Specifies the base value to be used for civ.cosmic.communismPalaceDistance \n        + If nil, the value from the authoritativeDefaultRules is used.\n        + If function, use the returned value when given the city as the argument.\n    * `communismPalaceDistanceModifier` = nil|int or function(city) --> nil|int\n        + Add this to the base value to be used for civ.cosmic.communismPalaceDistance \n        + If nil, add 0.  Note, a negative number here will not reduce the base value below 0.\n        + If function, use the returned value when given the city as the argument.\n    * `foodEaten` = nil|int>=0 or function(city) --> nil|int>=0\n        + Specifies the base value to be used for civ.cosmic.foodEaten \n        + If nil, the value from the authoritativeDefaultRules is used.\n        + If function, use the returned value when given the city as the argument.\n    * `foodEatenModifier` = nil|int or function(city) --> nil|int\n        + Add this to the base value to be used for civ.cosmic.foodEaten \n        + If nil, add 0.  Note, a negative number here will not reduce the base value below 0.\n        + If function, use the returned value when given the city as the argument.\n    * `prodChangePenalty`= nil|int>=0 or function(city) --> nil|int>=0\n        + Specifies the base value to be used for civ.cosmic.prodChangePenalty\n        + If nil, the value from the authoritativeDefaultRules is used.\n        + If function, use the returned value when given the city as the argument.\n    * `prodChangePenaltyModifier`= nil|int or function(city) --> nil|int\n        + Add this to the base value to be used for civ.cosmic.prodChangePenalty\n        + If nil, add 0.  Note, a negative number here will not reduce the base value below 0.\n        + If function, use the returned value when given the city as the argument.\n    * `riotFactor`= nil|int>=0 or function(city) --> nil|int>=0\n        + Specifies the base value to be used for civ.cosmic.riotFactor\n        + If nil, the value from the authoritativeDefaultRules is used.\n        + If function, use the returned value when given the city as the argument.\n    * `riotFactorModifier` = nil|int or function(city) --> nil|int\n        + Add this to the base value to be used for civ.cosmic.riotFactor\n        + If nil, add 0.  Note, a negative number here will not reduce the base value below 0.\n        + If function, use the returned value when given the city as the argument.\n    * `scienceLostFundamentalism`= nil|int>=0 or function(city) --> nil|int>=0\n        + Specifies the base value to be used for civ.cosmic.scienceLostFundamentalism\n        + If nil, the value from the authoritativeDefaultRules is used.\n        + If function, use the returned value when given the city as the argument.\n    * `scienceLostFundamentalismModifier`= nil|int or function(city) --> nil|int\n        + Add this to the base value to be used for civ.cosmic.scienceLostFundamentalism\n        + If nil, add 0.  Note, a negative number here will not reduce the base value below 0.\n        + If function, use the returned value when given the city as the argument.\n    * `scienceRateFundamentalism`= nil|int>=0 or function(city) --> nil|int>=0\n        + Specifies the base value to be used for civ.cosmic.scienceRateFundamentalism\n        + If nil, the value from the authoritativeDefaultRules is used.\n        + If function, use the returned value when given the city as the argument.\n    * `scienceRateFundamentalismModifier`= nil|int or function(city) --> nil|int\n        + Add this to the base value to be used for civ.cosmic.scienceRateFundamentalism\n        + If nil, add 0.  Note, a negative number here will not reduce the base value below 0.\n        + If function, use the returned value when given the city as the argument.\n    * `sizeUnhappiness`= nil|int>=0 or function(city) --> nil|int>=0\n        + Specifies the base value to be used for civ.cosmic.sizeUnhappiness\n        + If nil, the value from the authoritativeDefaultRules is used.\n        + If function, use the returned value when given the city as the argument.\n    * `sizeUnhappinessModifier`= nil|int or function(city) --> nil|int\n        + Add this to the base value to be used for  civ.cosmic.sizeUnhappiness\n        + If nil, add 0.  Note, a negative number here will not reduce the base value below 0.\n        + If function, use the returned value when given the city as the argument.\n- The `condition` and `priority` keys determine which customisation table is chosen for a particular city.  The `customisationName` key is used to give the customisation a name which is used in some error messages.\n    * `customisationName` = nil|string\n        + A name to be used during certain kinds of error and debugging messages\n        + nil will give \"Unnamed City Customisation\"\n    * `condition` = nil|tribeObject|traitString|function(city)-->boolean or table of tribeObject|traitString\n        + if nil, this customisation applies to all cities (unless a higher  priority customisation also applies)\n        + if tribeObject, this customisation applies to cities owned by the tribe\n        + if traitString, this customisation applies to tribes which have the trait\n        + if table of tribeObject|traitString, this applies to any tribe or traitString in the table\n        + if function(city) --> boolean, then this customisation applies to cities which make this function return true\n        + only one customisation can apply to any city.  The `priority` key is used to tie break.\n    * `priority` = nil or number >= 0\n        + If multiple customisations can apply to a city, this value chooses among them, with higher priority taking precedence.\n        + If the city is eligible for two customisations of the same priority, an error may be generated, and will certainly be generated if they are of the highest priority.\n- The following types of objects can also be keys in a city customisation table: `unitTypeObject`, `improvementObject`, `wonderObject`, `baseTerrainObject`, and `terrainObject`.  (These are associated with integer values behind the scenes, but don't worry about that.  Just use the object (NOT the ID) as the key.)  Each key takes a table value (or nil), to govern some aspects of the item.\n    * `[unitTypeObject]` = nil|table \n        + `cost` = nil|int>=0 or function(city)-->nil|int>=0\n            - Sets the base cost (in shield rows) for the city\n            - If nil, refer to authoritativeDefaultRules\n            - If function, use result after evaluating function(city)\n        + `costModifier` = nil|int or function(city)-->nil|int\n            - Add this to the base cost, but cost won't be less than 0\n            - If nil, use 0\n            - If function, use result after evaluating function(city)\n\n    * `[improvementObject]` = nil|table \n        + `cost` = nil|int>=0 or function(city)-->nil|int>=0\n            - Sets the base cost (in shield rows) for the city\n            - If nil, refer to authoritativeDefaultRules\n            - If function, use result after evaluating function(city)\n        + `costModifier` = nil|int or function(city)-->nil|int\n            - Add this to the base cost, but cost won't be less than 0\n            - If nil, use 0\n            - If function, use result after evaluating function(city)\n        + `cantSell` = nil|boolean or function(city)-->nil|boolean\n            - If true, the city can't sell the improvement, if false, it can.\n            - If nil, refer to the authoritativeDefaultRules\n        + `upkeep` = nil|int>=0 or function(city)-->nil|int>=0\n            - Sets the base upkeep (gold per turn) this improvement in this city\n            - If nil, refer to authoritativeDefaultRules\n            - If function, use result after evaluating function(city)\n            - Note: Upkeep costs will be calculated correctly during city processing, but the Tax Rate and Trade Adviser windows will not be correct if the upkeep isn't the same for all cities (Costs for the most recently looked at city will be used.)\n            - `customCosmic.getTribeUpkeep` will calculate the actual upkeep per turn for the tribe.\n        + `upkeepModifier` = nil|int or function(city)-->nil|int\n            - Add this to the base upkeep, but upkeep won't be less than 0\n            - If nil, use 0 \n            - If function, use result after evaluating function(city)\n    * `[wonderObject]` = nil|table\n        + `cost` = nil|int>=0 or function(city)-->nil|int>=0\n            - Sets the base cost (in shield rows) for the city\n            - If nil, refer to authoritativeDefaultRules\n            - If function, use result after evaluating function(city)\n        + `costModifier` = nil|int or function(city)-->nil|int\n            - Add this to the base cost, but cost won't be less than 0\n            - If nil, use 0\n            - If function, use result after evaluating function(city)\n    * `[baseTerrainObject]` = nil|table\n        + `irrigateBonus` = nil|int>=0 or function(city)-->nil|int>=0\n            - Sets the base value of the irrigation bonus for the city and baseTerrain.\n            - If nil, refer to the authoritativeDefaultRules,\n            - If function, use the result of function(city), \n        + `irrigateBonusModifier` = nil|int or function(city)-->nil|int\n            - Add this to the base irrigation bonus, but results less than 0 will be set to 0.\n            - If nil, use 0.\n            - If function, use result after evaluating function(city)\n        + `mineBonus` = nil|int>=0 or function(city)-->nil|int>=0\n            - Sets the base value of the mining bonus for the city and baseTerrain.\n            - If nil, refer to the authoritativeDefaultRules,\n            - If function, use the result of function(city), \n        + `mineBonusModifier` = nil|int or function(city)-->nil|int\n            - Add this to the base mining bonus, but results less than 0 will be set to 0.\n            - If nil, use 0.\n            - If function, use result after evaluating function(city)\n        + `roadTrade` = nil|boolean or function(city)-->nil|boolean\n            - If true, for this city and baseTerrain, the road trade bonus is applied.  If false, it is not.\n            - If nil, refer to the authoritativeDefaultRules\n            - If function, use result after evaluating function(city)\n    * `[terrainObject]` = {\n        + `food` = nil|int>=0 or function(city)-->nil|int>=0\n            - Sets the base value for the food produced for this city by this terrain type.\n            - If nil, refer to the authoritativeDefaultRules\n            - If function, use the result of function(city)\n        + `foodModifier` = nil|int or function(city)-->nil|int\n            - Add this to the base food production value, but if the result is less than 0, it will be raised to 0.\n            - If nil, use 0.\n            - If function, use the result of function(city) \n        + `shields` = nil|int>=0 or function(city)-->nil|int>=0\n            - Sets the base value for the shields produced for this city by this terrain type.\n            - If nil, refer to the authoritativeDefaultRules\n            - If function, use the result of function(city)\n        + `shieldsModifier` = nil|int or function(city)-->nil|int\n            - Add this to the base shield production value, but if the result is less than 0, it will be raised to 0.\n            - If nil, use 0.\n            - If function, use the result of function(city) \n        + `trade` = nil|int>=0 or function(city)-->nil|int>=0\n            - Sets the base value for the trade produced for this city by this terrain type.\n            - If nil, refer to the authoritativeDefaultRules\n            - If function, use the result of function(city)\n        + `tradeModifier` = nil|int or function(city)-->nil|int\n            - Add this to the base trade production value, but if the result is less than 0, it will be raised to 0.\n            - If nil, use 0.\n            - If function, use the result of function(city) \n- You can assign the same data table to multiple items by providing a table as the key, instead of a string or luaObject.  Consider:\n<br> [keyTable] = data\n<br>For each value in the `keyTable`, if value is not a trait, assign\n<br>customisation[value] = gen.copyTable(data)\n<br>if the value is a trait, for each ITEM such that \n<br>traits.hasTrait(ITEM,value)` \n<br>is true, assign\n<br>customisation[ITEM] = gen.copyTable(data)\n\n\n@*param* `customisation` โ A city customisation table, described above.",
                    "finish": 17070003,
                    "start": 17020000,
                    "type": "function",
                    "view": "function customCosmic.registerCityCustomisation(customisation: table)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/customCosmic.lua",
                "finish": 17020047,
                "name": "registerCityCustomisation",
                "start": 17020009,
                "type": "setfield"
            },
            {
                "desc": "Allows the scenario designer to register a function(city)-->cityCustomisation\nto be used instead of the `customCosmic.registerCityCustomisation` system.\nThe function must return a cityCustomisation for every \ncity under all circumstances",
                "extends": {
                    "args": [
                        {
                            "finish": 17410054,
                            "name": "fun",
                            "start": 17410051,
                            "type": "local",
                            "view": "fun(city: cityObject):table"
                        }
                    ],
                    "desc": "Allows the scenario designer to register a function(city)-->cityCustomisation\nto be used instead of the `customCosmic.registerCityCustomisation` system.\nThe function must return a cityCustomisation for every \ncity under all circumstances",
                    "finish": 17430003,
                    "start": 17410000,
                    "type": "function",
                    "view": "function customCosmic.registerGetCityCustomisation(fun: fun(city: cityObject):table)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/customCosmic.lua",
                "finish": 17410050,
                "name": "registerGetCityCustomisation",
                "start": 17410009,
                "type": "setfield"
            },
            {
                "desc": "Allows the scenario designer to register a function(tribe)-->tribeCustomisation\nto be used instead of the `customCosmic.registerTribeCustomisation` system.\nThe function must return a tribeCustomisation for every \ntribe under all circumstances",
                "extends": {
                    "args": [
                        {
                            "finish": 22930055,
                            "name": "fun",
                            "start": 22930052,
                            "type": "local",
                            "view": "fun(tribe: tribeObject):table"
                        }
                    ],
                    "desc": "Allows the scenario designer to register a function(tribe)-->tribeCustomisation\nto be used instead of the `customCosmic.registerTribeCustomisation` system.\nThe function must return a tribeCustomisation for every \ntribe under all circumstances",
                    "finish": 22950003,
                    "start": 22930000,
                    "type": "function",
                    "view": "function customCosmic.registerGetTribeCustomisation(fun: fun(tribe: tribeObject):table)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/customCosmic.lua",
                "finish": 22930051,
                "name": "registerGetTribeCustomisation",
                "start": 22930009,
                "type": "setfield"
            },
            {
                "desc": "Allows a scenario designer to register a function(unit)-->unitTypeCustomisation\nto be used instead of the `customCosmic.registerUnitTypeCustomisation` system.\nThe function must return a unitTypeCustomisation for every unit\nunder all circumstances",
                "extends": {
                    "args": [
                        {
                            "finish": 7330058,
                            "name": "fun",
                            "start": 7330055,
                            "type": "local",
                            "view": "fun(unit: unitObject):table"
                        }
                    ],
                    "desc": "Allows a scenario designer to register a function(unit)-->unitTypeCustomisation\nto be used instead of the `customCosmic.registerUnitTypeCustomisation` system.\nThe function must return a unitTypeCustomisation for every unit\nunder all circumstances",
                    "finish": 7350003,
                    "start": 7330000,
                    "type": "function",
                    "view": "function customCosmic.registerGetUnitTypeCustomisation(fun: fun(unit: unitObject):table)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/customCosmic.lua",
                "finish": 7330054,
                "name": "registerGetUnitTypeCustomisation",
                "start": 7330009,
                "type": "setfield"
            },
            {
                "desc": "Registers a customisation for tribes.<br>\nKeys and descriptions for tribe customisation tables:\n\n- These keys are used to change cosmic parameters that relate to city\nproduction.  These are customised by tribe because the game uses them\nbefore onCalculateCityYield can change them. Other customisations can be made on a per city basis.\n    * `foodRows`= nil|int>=0 or function(tribe) --> nil|int>=0\n        + Specifies the base value to be used for civ.cosmic.foodRows\n        + If nil, the value from the authoritativeDefaultRules is used.\n        + If function, use the returned value when given the tribe as the argument.\n    * `foodRowsModifier` = nil|int or function(tribe) --> nil|int\n        + Add this to the base value to be used for  civ.cosmic.foodRows\n        + If nil, add 0.  Note, a negative number here will not reduce the base value below 0.\n        + If function, use the returned value when given the tribe as the argument.\n    * `settlersEatHigh`= nil|int>=0 or function(tribe) --> nil|int>=0\n        + Specifies the base value to be used for civ.cosmic.settlersEatHigh\n        + If nil, the value from the authoritativeDefaultRules is used.\n        + If function, use the returned value when given the tribe as the argument.\n    * `settlersEatHighModifier`= nil|int or function(tribe) --> nil|int\n        + Add this to the base value to be used for  civ.cosmic.settlersEatHigh\n        + If nil, add 0.  Note, a negative number here will not reduce the base value below 0.\n        + If function, use the returned value when given the tribe as the argument.\n    * `settlersEatLow`= nil|int>=0 or function(tribe) --> nil|int>=0\n        + Specifies the base value to be used for civ.cosmic.settlersEatLow\n        + If nil, the value from the authoritativeDefaultRules is used.\n        + If function, use the returned value when given the tribe as the argument.\n    * `settlersEatLowModifier`= nil|int or function(tribe) --> nil|int\n        + Add this to the base value to be used for  civ.cosmic.settlersEatLow\n        + If nil, add 0.  Note, a negative number here will not reduce the base value below 0.\n        + If function, use the returned value when given the tribe as the argument.\n    * `shieldRows`= nil|int>=0 or function(tribe) --> nil|int>=0\n        + Specifies the base value to be used for civ.cosmic.shieldRows\n        + If nil, the value from the authoritativeDefaultRules is used.\n        + If function, use the returned value when given the tribe as the argument.\n    * `shieldRowsModifier`= nil|int or function(tribe) --> nil|int\n        + Add this to the base value to be used for  civ.cosmic.shieldRows\n        + If nil, add 0.  Note, a negative number here will not reduce the base value below 0.\n        + If function, use the returned value when given the tribe as the argument.\n    * `sizeAquaduct`= nil|int>=0 or function(tribe) --> nil|int>=0\n        + Specifies the base value to be used for civ.cosmic.sizeAquaduct\n        + If nil, the value from the authoritativeDefaultRules is used.\n        + If function, use the returned value when given the tribe as the argument.\n        + NOTE: sizeAqueduct can be used instead to refer to this value.\n    * `sizeAquaductModifier`= nil|int or function(tribe) --> nil|int\n        + Add this to the base value to be used for  civ.cosmic.sizeAquaduct\n        + If nil, add 0.  Note, a negative number here will not reduce the base value below 0.\n        + If function, use the returned value when given the tribe as the argument.\n        + NOTE: sizeAqueductModifier can be used instead to refer to this value.\n    * `sizeSewer`= nil|int>=0 or function(tribe) --> nil|int>=0\n        + Specifies the base value to be used for civ.cosmic.sizeSewer\n        + If nil, the value from the authoritativeDefaultRules is used.\n        + If function, use the returned value when given the tribe as the argument.\n    * `sizeSewerModifier`= nil|int or function(tribe) --> nil|int\n        + Add this to the base value to be used for  civ.cosmic.sizeSewer\n        + If nil, add 0.  Note, a negative number here will not reduce the base value below 0.\n        + If function, use the returned value when given the tribe as the argument.\n    * `supportCommunism`= nil|int>=0 or function(tribe) --> nil|int>=0\n        + Specifies the base value to be used for civ.cosmic.supportCommunism\n        + If nil, the value from the authoritativeDefaultRules is used.\n        + If function, use the returned value when given the tribe as the argument.\n    * `supportCommunismModifier`= nil|int or function(tribe) --> nil|int\n        + Add this to the base value to be used for  civ.cosmic.supportCommunism\n        + If nil, add 0.  Note, a negative number here will not reduce the base value below 0.\n        + If function, use the returned value when given the tribe as the argument.\n    * `supportFundamentalism`= nil|int>=0 or function(tribe) --> nil|int>=0\n        + Specifies the base value to be used for civ.cosmic.supportFundamentalism\n        + If nil, the value from the authoritativeDefaultRules is used.\n        + If function, use the returned value when given the tribe as the argument.\n    * `supportFundamentalismModifier`= nil|int or function(tribe) --> nil|int\n        + Add this to the base value to be used for  civ.cosmic.supportFundamentalism\n        + If nil, add 0.  Note, a negative number here will not reduce the base value below 0.\n        + If function, use the returned value when given the tribe as the argument.\n    * `supportMonarchy`= nil|int>=0 or function(tribe) --> nil|int>=0\n        + Specifies the base value to be used for civ.cosmic.supportMonarchy\n        + If nil, the value from the authoritativeDefaultRules is used.\n        + If function, use the returned value when given the tribe as the argument.\n    * `supportMonarchyModifier`= nil|int or function(tribe) --> nil|int\n        + Add this to the base value to be used for  civ.cosmic.supportMonarchy\n        + If nil, add 0.  Note, a negative number here will not reduce the base value below 0.\n        + If function, use the returned value when given the tribe as the argument.\n- The `condition` and `priority` keys determine which customisation table is chosen for a particular tribe.  The `customisationName` key is used to give the customisation a name which is used in some error messages.\n    * `customisationName` = nil|string\n        + A name to be used during certain kinds of error and debugging messages\n        + nil will give \"Unnamed Tribe Customisation\"\n    * `condition` = nil|tribeObject|traitString|function(tribe)-->boolean or table of tribeObject|traitString\n        + if nil, this customisation applies to all tribes (unless a higher  priority customisation also applies)\n        + if tribeObject, this customisation applies to that tribe\n        + if traitString, this customisation applies to tribes which have the trait\n        + if table of tribeObject|traitString, this applies to any tribe or traitString in the table\n        + if function(tribe) --> boolean, then this customisation applies to tribes which make this function return true\n        + only one customisation can apply to any tribe.  The `priority` key is used to tie break.\n    * `priority` = nil|number>=0\n        + If multiple customisations can apply to a tribe, this value chooses among them, with higher priority taking precedence.\n        + If the tribe is eligible for two customisations of the same priority, an error may be generated, and will certainly be generated if they are of the highest priority.\n- `unitTypeObject`s can also be keys in a tribe customisation table.\n(These are associated with integer values behind the scenes,\n but don't worry about that.  Just use the object (NOT the ID) as the key.)\nEach key takes a table (or nil) as a value, to govern the support\ncharacteristics of the item.\n    * `[unitTypeObject]` = nil|table\n        + `freeSupportUnderFundamentalism` = nil|boolean or function(tribe)-->nil|boolean\n            - If true, unitType has the freeSupportUnderFundamentalism flag for this tribe.  If false, it does not.\n            - If nil, refer to the authoritativeDefaultRules\n        + `requiresFoodSupport` = nil|boolean or function(tribe)-->nil|boolean\n            - If true, the tribe must pay food support for this unitType.\n            - If false, it does not. (Setting this to true makes both settler and non-settler unit types require food.)\n            - If nil, refer to the authoritativeDefaultRules\n    --          }\n- You can assign the same data table to multiple items by providing a table as the key, instead of a string or luaObject.  Consider:\n<br> [keyTable] = data\n<br>For each value in the `keyTable`, if value is not a trait, assign\n<br>customisation[value] = gen.copyTable(data)\n<br>if the value is a trait, for each ITEM such that \n<br>traits.hasTrait(ITEM,value)` \n<br>is true, assign\n<br>customisation[ITEM] = gen.copyTable(data)\n",
                "extends": {
                    "args": [
                        {
                            "desc": "A table is a data type native to Lua, and links \"keys\" (usually numbers or strings) to \"values\" (any kind of data, including other tables). This is the only data structuring mechanism in Lua, and many of the data types documented here are simply tables with restrictions on their keys or values. If a key has not been assigned a value, the table returns nil as the corresponding value, and assigning nil as a value to a key removes that key from the table.\n[Programming in Lua, 2.5 -- Tables](https://www.lua.org/pil/2.5.html)",
                            "finish": 22530062,
                            "name": "customisation",
                            "start": 22530049,
                            "type": "local",
                            "view": "table"
                        }
                    ],
                    "desc": "Registers a customisation for tribes.<br>\nKeys and descriptions for tribe customisation tables:\n\n- These keys are used to change cosmic parameters that relate to city\nproduction.  These are customised by tribe because the game uses them\nbefore onCalculateCityYield can change them. Other customisations can be made on a per city basis.\n    * `foodRows`= nil|int>=0 or function(tribe) --> nil|int>=0\n        + Specifies the base value to be used for civ.cosmic.foodRows\n        + If nil, the value from the authoritativeDefaultRules is used.\n        + If function, use the returned value when given the tribe as the argument.\n    * `foodRowsModifier` = nil|int or function(tribe) --> nil|int\n        + Add this to the base value to be used for  civ.cosmic.foodRows\n        + If nil, add 0.  Note, a negative number here will not reduce the base value below 0.\n        + If function, use the returned value when given the tribe as the argument.\n    * `settlersEatHigh`= nil|int>=0 or function(tribe) --> nil|int>=0\n        + Specifies the base value to be used for civ.cosmic.settlersEatHigh\n        + If nil, the value from the authoritativeDefaultRules is used.\n        + If function, use the returned value when given the tribe as the argument.\n    * `settlersEatHighModifier`= nil|int or function(tribe) --> nil|int\n        + Add this to the base value to be used for  civ.cosmic.settlersEatHigh\n        + If nil, add 0.  Note, a negative number here will not reduce the base value below 0.\n        + If function, use the returned value when given the tribe as the argument.\n    * `settlersEatLow`= nil|int>=0 or function(tribe) --> nil|int>=0\n        + Specifies the base value to be used for civ.cosmic.settlersEatLow\n        + If nil, the value from the authoritativeDefaultRules is used.\n        + If function, use the returned value when given the tribe as the argument.\n    * `settlersEatLowModifier`= nil|int or function(tribe) --> nil|int\n        + Add this to the base value to be used for  civ.cosmic.settlersEatLow\n        + If nil, add 0.  Note, a negative number here will not reduce the base value below 0.\n        + If function, use the returned value when given the tribe as the argument.\n    * `shieldRows`= nil|int>=0 or function(tribe) --> nil|int>=0\n        + Specifies the base value to be used for civ.cosmic.shieldRows\n        + If nil, the value from the authoritativeDefaultRules is used.\n        + If function, use the returned value when given the tribe as the argument.\n    * `shieldRowsModifier`= nil|int or function(tribe) --> nil|int\n        + Add this to the base value to be used for  civ.cosmic.shieldRows\n        + If nil, add 0.  Note, a negative number here will not reduce the base value below 0.\n        + If function, use the returned value when given the tribe as the argument.\n    * `sizeAquaduct`= nil|int>=0 or function(tribe) --> nil|int>=0\n        + Specifies the base value to be used for civ.cosmic.sizeAquaduct\n        + If nil, the value from the authoritativeDefaultRules is used.\n        + If function, use the returned value when given the tribe as the argument.\n        + NOTE: sizeAqueduct can be used instead to refer to this value.\n    * `sizeAquaductModifier`= nil|int or function(tribe) --> nil|int\n        + Add this to the base value to be used for  civ.cosmic.sizeAquaduct\n        + If nil, add 0.  Note, a negative number here will not reduce the base value below 0.\n        + If function, use the returned value when given the tribe as the argument.\n        + NOTE: sizeAqueductModifier can be used instead to refer to this value.\n    * `sizeSewer`= nil|int>=0 or function(tribe) --> nil|int>=0\n        + Specifies the base value to be used for civ.cosmic.sizeSewer\n        + If nil, the value from the authoritativeDefaultRules is used.\n        + If function, use the returned value when given the tribe as the argument.\n    * `sizeSewerModifier`= nil|int or function(tribe) --> nil|int\n        + Add this to the base value to be used for  civ.cosmic.sizeSewer\n        + If nil, add 0.  Note, a negative number here will not reduce the base value below 0.\n        + If function, use the returned value when given the tribe as the argument.\n    * `supportCommunism`= nil|int>=0 or function(tribe) --> nil|int>=0\n        + Specifies the base value to be used for civ.cosmic.supportCommunism\n        + If nil, the value from the authoritativeDefaultRules is used.\n        + If function, use the returned value when given the tribe as the argument.\n    * `supportCommunismModifier`= nil|int or function(tribe) --> nil|int\n        + Add this to the base value to be used for  civ.cosmic.supportCommunism\n        + If nil, add 0.  Note, a negative number here will not reduce the base value below 0.\n        + If function, use the returned value when given the tribe as the argument.\n    * `supportFundamentalism`= nil|int>=0 or function(tribe) --> nil|int>=0\n        + Specifies the base value to be used for civ.cosmic.supportFundamentalism\n        + If nil, the value from the authoritativeDefaultRules is used.\n        + If function, use the returned value when given the tribe as the argument.\n    * `supportFundamentalismModifier`= nil|int or function(tribe) --> nil|int\n        + Add this to the base value to be used for  civ.cosmic.supportFundamentalism\n        + If nil, add 0.  Note, a negative number here will not reduce the base value below 0.\n        + If function, use the returned value when given the tribe as the argument.\n    * `supportMonarchy`= nil|int>=0 or function(tribe) --> nil|int>=0\n        + Specifies the base value to be used for civ.cosmic.supportMonarchy\n        + If nil, the value from the authoritativeDefaultRules is used.\n        + If function, use the returned value when given the tribe as the argument.\n    * `supportMonarchyModifier`= nil|int or function(tribe) --> nil|int\n        + Add this to the base value to be used for  civ.cosmic.supportMonarchy\n        + If nil, add 0.  Note, a negative number here will not reduce the base value below 0.\n        + If function, use the returned value when given the tribe as the argument.\n- The `condition` and `priority` keys determine which customisation table is chosen for a particular tribe.  The `customisationName` key is used to give the customisation a name which is used in some error messages.\n    * `customisationName` = nil|string\n        + A name to be used during certain kinds of error and debugging messages\n        + nil will give \"Unnamed Tribe Customisation\"\n    * `condition` = nil|tribeObject|traitString|function(tribe)-->boolean or table of tribeObject|traitString\n        + if nil, this customisation applies to all tribes (unless a higher  priority customisation also applies)\n        + if tribeObject, this customisation applies to that tribe\n        + if traitString, this customisation applies to tribes which have the trait\n        + if table of tribeObject|traitString, this applies to any tribe or traitString in the table\n        + if function(tribe) --> boolean, then this customisation applies to tribes which make this function return true\n        + only one customisation can apply to any tribe.  The `priority` key is used to tie break.\n    * `priority` = nil|number>=0\n        + If multiple customisations can apply to a tribe, this value chooses among them, with higher priority taking precedence.\n        + If the tribe is eligible for two customisations of the same priority, an error may be generated, and will certainly be generated if they are of the highest priority.\n- `unitTypeObject`s can also be keys in a tribe customisation table.\n(These are associated with integer values behind the scenes,\n but don't worry about that.  Just use the object (NOT the ID) as the key.)\nEach key takes a table (or nil) as a value, to govern the support\ncharacteristics of the item.\n    * `[unitTypeObject]` = nil|table\n        + `freeSupportUnderFundamentalism` = nil|boolean or function(tribe)-->nil|boolean\n            - If true, unitType has the freeSupportUnderFundamentalism flag for this tribe.  If false, it does not.\n            - If nil, refer to the authoritativeDefaultRules\n        + `requiresFoodSupport` = nil|boolean or function(tribe)-->nil|boolean\n            - If true, the tribe must pay food support for this unitType.\n            - If false, it does not. (Setting this to true makes both settler and non-settler unit types require food.)\n            - If nil, refer to the authoritativeDefaultRules\n    --          }\n- You can assign the same data table to multiple items by providing a table as the key, instead of a string or luaObject.  Consider:\n<br> [keyTable] = data\n<br>For each value in the `keyTable`, if value is not a trait, assign\n<br>customisation[value] = gen.copyTable(data)\n<br>if the value is a trait, for each ITEM such that \n<br>traits.hasTrait(ITEM,value)` \n<br>is true, assign\n<br>customisation[ITEM] = gen.copyTable(data)\n",
                    "finish": 22580003,
                    "start": 22530000,
                    "type": "function",
                    "view": "function customCosmic.registerTribeCustomisation(customisation: table)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/customCosmic.lua",
                "finish": 22530048,
                "name": "registerTribeCustomisation",
                "start": 22530009,
                "type": "setfield"
            },
            {
                "desc": "Registers a customisation for a unitType, a trait for unitTypes, or a table of unitTypes and traits for unitTypes.<br>\nKeys and descriptions for unitType customisation tables:\n<br>\n- If both `atomicMovementBonus` and `movementBonus` are used, both modify movement.\n    * `atomicMovementBonus` = nil|int or function(unit)-->nil|Int\n        +  Bonus movement points (compared to authoritativeDefaultRules)\n        +  Positive means add, negative means subtract\n        +  nil means no change\n        +  if function, the returned value of function(unit) is used.\n    * `movementBonus` = nil|num or function(unit)-->nil|num\n        + Bonus movement points (compared to authoritativeDefaultRules)\n        + whole movement points, positive means add, negative means subtract\n        + nil means no change\n        + if function, the returned value of function(unit) is used.\n- Only one of `atomicCustomMovement` and `customMovement` is permissible.  If both exist, `atomicCustomMovement` is used.  If this and the `movementBonus` both exist, the `movementBonus` is added to this instead of the authoritativeDefaultRules.  If both are nil, refer to the authoritativeDefaultRules.\n    * `atomicCustomMovement` = nil|int>=0 or function(unit)-->nil|int>=0\n        + Unit type will have this amount of atomic movement points, regardless of the authoritativeDefaultRules\n        + if function, the returned value of function(unit) is used.\n    * `customMovement` = nil|num>=0 or function(unit)--> nil|num>=0\n        + Unit type will have this amount of movement points, regardless of the authoritativeDefaultRules.\n        + if function, the returned value of function(unit) is used.\n- If both of `atomicMinMove` and `minMove` are specified, the one yielding a larger bonus is used.\n    * `atomicMinMove` = nil|int or function(unit)-->nil|int\n        + Ensures a damaged land or sea unit will still be able to move this many atomic movement points (unless that would require setting it's unit type's atomic movement beyond 255, which can't be overcome.  If this is a problem,\n        consider changing movement multipliers for the unit to have\n        a lower aggregate value)\n        + nil means no minimum movement\n        + does not increase movement beyond the unit's movement allowance\n        + since a damaged unit can't have a fractional movement allowance,\n        the effective atomicMinMove is reduced to the next lowest full\n        movement point.\n    * `minMove` = nil|num or function(unit)-->nil|num\n        + Ensures a damaged land or sea unit will still be able to move this many movement points (unless that would require setting it's unit type's atomic movement beyond 255, which can't be overcome.  If this is a problem,\n        consider changing movement multipliers for the unit to have\n        a lower aggregate value)\n        + nil means no minimum movement\n        + does not increase movement beyond the unit's movement allowance\n- Movement Multipliers have no special interactions.\n    * `roadMultiplier` = nil or int>=-1 or function(unit)-->nil int>=-1\n        + The road multiplier for the unit type\n        + nil means refer first to the defaultMovementMultipliers, then to authoritativeDefaultRules\n        + if function, the returned value of function(unit) is used.\n    * `railroadMultiplier` = nil or int>=-1 or function(unit)-->nil int>=-1\n        + The railroad multiplier for this unit type\n        + nil means refer first to the defaultMovementMultipliers, then to authoritativeDefaultRules\n        + if function, the returned value of function(unit) is used.\n    * `alpineMultiplier` = nil or int>=-1 or function(unit)-->nil int>=-1\n        + The alpine multiplier for this unit type\n        + nil means refer first to the defaultMovementMultipliers, then to authoritativeDefaultRules\n        + if function, the returned value of function(unit) is used.\n    * `riverMultiplier` = nil or int>=-1 or function(unit)-->nil int>=-1\n        + The river multiplier for this unit type\n        + nil means refer first to the defaultMovementMultipliers, then to authoritativeDefaultRules\n        + if function, the returned value of function(unit) is used.\n\n- The `isImpassable` and `moveCost` keys have tables as values (or nil, if you wish to make no changes).  These tables accept either `baseTerrainObject`s as keys, or integers, as determined by `gen.getBaseTerrainID`. Using the baseTerrainObject is recommended for clarity.\n    * `isImpassable[baseTerrainObject/ID]` = nil or boolean or function(unit)-->nil or boolean\n        + if true, the baseTerrain is impassable for the unit type\n        + if false, the baseTerrain is not impassable for the unit type\n        + if nil, refer to the authoritativeDefaultRules\n        + if function, the returned value of function(unit) is used.\n    * `moveCost[baseTerrainObject/ID]` = nil|int>=0 or function(unit)-->nil|int>=0\n        + if integer, this is the (full movement point) movement cost of the base terrain \n        + if nil, refer to the authoritativeDefaultRules\n        + if function, the returned value of function(unit) is used.\n\n- The `cosmic` and `flag` keys have tables as values.  The `cosmic` table keys change the `civ.cosmic` fields with the same key.  The `flags` table keys are derived from General Library function names.\n    * `cosmic[cosmicKey]` = int>=0|nil or function(unit)-->int>=0|nil\n        + if nil, use the value in the authoritativeDefaultRules instead\n        + possible values for cosmicKey:\n            - \"paradropRange\"\n            - \"triremeLost\"\n            - \"transformBase\" \n        + if function, the returned value of function(unit) is used.\n    * `flags[flagKey]` = nil or boolean or function(unit)-->nil or boolean\n        + if true, the unit has the flag corresponding to the flagKey\n        + if false, the unit does not have the flag corresponding to flagKey\n        + if nil, flags from the authoritativeDefaultRules are used\n        + possible values for flagKey:\n            - \"canCrossImpassableTerrain\"\n            - \"canFoundCities\"\n            - \"canImproveTiles\" (no effect if not settler)\n            - \"seeTwoSpaces\"\n            - \"ignoreZOC\"\n            - \"amphibious\"\n            - \"coastal\"\n            - \"ignoreWalls\"\n            - \"carryAir\"\n            - \"paradrop\"\n            - \"alpine\"\n            - \"destroyedAfterAttacking\"\n            - \"spotSubmarines\"\n        + if function, the returned value of function(unit) is used.\n- The `condition` and `priority` keys determine which customisation table is chosen for a particular unit.  The `customisationName` key is used to give the customisation a name which is used in some error messages.\n    * `condition` = nil|tribeObject|traitString|function(unit)-->boolean or table of tribeObject|traitString\n        + if nil, this unit type customisation applies to all units of the relevant type(s).\n        + if tribeObject, this customisation can only apply to units owned by that tribe (as long as the unit is also of the relevant type)\n        + if traitString, this customisation applies to tribes which have the trait\n        + if table of tribeObject|traitString, this applies to any tribe or traitString in the table\n        + if function(unit) --> boolean, then this customisation applies to units of the relevant type(s) which also make this function return true\n        + Only one customisation can apply to any unit.  The `priority` key is used to tie break.\n    * `priority` = nil or number>=0\n        + If multiple customisations can apply to a unit, this value chooses among them, with higher priority taking precedence.\n        + If the unit is eligible for two customisations of the same priority, an error may be generated, and will certainly be generated if they are of the highest priority.\n    * `customisationName` = nil|string,\n        + A name to be used during certain kinds of error and debugging messages\n        + nil will give \"Unnamed UnitType Customisation\"\n- Transport settings have no effect unless `customCosmic.ephemeralMapTransportSettings()` has been called.  The final transport settings are computed as follows:\n<br>1. restore the unitType to the authoritativeDefaultRules transportation settings\n<br>2. Apply the <something>Transport strings to the result of step 1\n<br>3. Apply transportXY data to the result of step 2\n    * `nativeTransport` = string|nil or function(unit) --> string|nil\n        + Governs the unitType nativeTransport field\n        + String should be 16 characters, 0,1, or x \n        + Each of the 16 characters reference one of the possible map transport relationships.  If it is 0, the corresponding relationship is disabled, if it is 1, the corresponding relationship is enabled, and if it is x, reference the authoritativeDefaultRules\n        + if nil, use authoritativeDefaultRules, if function, \n        + evaluate function(unit) and use the result\n\n    * `buildTransport` = string|nil or function(unit) --> string|nil\n        + Governs the unitType buildTransport field\n        + String should be 16 characters, 0,1, or x \n        + Each of the 16 characters reference one of the possible map transport relationships.  If it is 0, the corresponding relationship is disabled, if it is 1, the corresponding relationship is enabled, and if it is x, reference the authoritativeDefaultRules\n        + if nil, use authoritativeDefaultRules, if function, \n        + evaluate function(unit) and use the result\n    * `useTransport` = string|nil or function(unit) --> string|nil\n        + Governs the unitType useTransport field\n        + String should be 16 characters, 0,1, or x \n        + Each of the 16 characters reference one of the possible map transport relationships.  If it is 0, the corresponding relationship is disabled, if it is 1, the corresponding relationship is enabled, and if it is x, reference the authoritativeDefaultRules\n        + if nil, use authoritativeDefaultRules, if function, \n        + evaluate function(unit) and use the result\n\n    * `transportXY` = {\n    <br> nativeTransport = nil|boolean or function(unit) --> nil|boolean\n    <br> buildTransport = nil|boolean or function(unit) --> nil|boolean\n    <br> useTransport = nil|boolean or function(unit) --> nil|boolean\n    <br>}\n        + transportXY governs the transport relationship between maps X and Y\n        + if `somethingTransport` key is true, then the relationship between the two maps is enabled for maps X and Y in unitType.somethingTransport\n        + if it is false, the relationship is disabled\n        + if nil, use the authoritativeDefaultRules, or the relationship set out by the somethingTransport key defined above\n        + if function, evaluate function(unit) and use the result\n        + `transportXY` represents the following available keys:\n            - `transport01`\n            - `transport02`\n            - `transport03`\n            - `transport12`\n            - `transport13`\n            - `transport23`\n--",
                "extends": {
                    "args": [
                        {
                            "desc": "A unit type object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit type entry in the rules.txt, and provides a means of interacting with it. This should not be confused with the unit object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unittype)",
                            "finish": 6850067,
                            "name": "unitTypeOrTrait",
                            "start": 6850052,
                            "type": "local",
                            "view": "string|table<any, string|unitTypeObject>|unitTypeObject"
                        },
                        {
                            "desc": "A table is a data type native to Lua, and links \"keys\" (usually numbers or strings) to \"values\" (any kind of data, including other tables). This is the only data structuring mechanism in Lua, and many of the data types documented here are simply tables with restrictions on their keys or values. If a key has not been assigned a value, the table returns nil as the corresponding value, and assigning nil as a value to a key removes that key from the table.\n[Programming in Lua, 2.5 -- Tables](https://www.lua.org/pil/2.5.html)",
                            "finish": 6850089,
                            "name": "unitTypeCustomisation",
                            "start": 6850068,
                            "type": "local",
                            "view": "table"
                        }
                    ],
                    "desc": "Registers a customisation for a unitType, a trait for unitTypes, or a table of unitTypes and traits for unitTypes.<br>\nKeys and descriptions for unitType customisation tables:\n<br>\n- If both `atomicMovementBonus` and `movementBonus` are used, both modify movement.\n    * `atomicMovementBonus` = nil|int or function(unit)-->nil|Int\n        +  Bonus movement points (compared to authoritativeDefaultRules)\n        +  Positive means add, negative means subtract\n        +  nil means no change\n        +  if function, the returned value of function(unit) is used.\n    * `movementBonus` = nil|num or function(unit)-->nil|num\n        + Bonus movement points (compared to authoritativeDefaultRules)\n        + whole movement points, positive means add, negative means subtract\n        + nil means no change\n        + if function, the returned value of function(unit) is used.\n- Only one of `atomicCustomMovement` and `customMovement` is permissible.  If both exist, `atomicCustomMovement` is used.  If this and the `movementBonus` both exist, the `movementBonus` is added to this instead of the authoritativeDefaultRules.  If both are nil, refer to the authoritativeDefaultRules.\n    * `atomicCustomMovement` = nil|int>=0 or function(unit)-->nil|int>=0\n        + Unit type will have this amount of atomic movement points, regardless of the authoritativeDefaultRules\n        + if function, the returned value of function(unit) is used.\n    * `customMovement` = nil|num>=0 or function(unit)--> nil|num>=0\n        + Unit type will have this amount of movement points, regardless of the authoritativeDefaultRules.\n        + if function, the returned value of function(unit) is used.\n- If both of `atomicMinMove` and `minMove` are specified, the one yielding a larger bonus is used.\n    * `atomicMinMove` = nil|int or function(unit)-->nil|int\n        + Ensures a damaged land or sea unit will still be able to move this many atomic movement points (unless that would require setting it's unit type's atomic movement beyond 255, which can't be overcome.  If this is a problem,\n        consider changing movement multipliers for the unit to have\n        a lower aggregate value)\n        + nil means no minimum movement\n        + does not increase movement beyond the unit's movement allowance\n        + since a damaged unit can't have a fractional movement allowance,\n        the effective atomicMinMove is reduced to the next lowest full\n        movement point.\n    * `minMove` = nil|num or function(unit)-->nil|num\n        + Ensures a damaged land or sea unit will still be able to move this many movement points (unless that would require setting it's unit type's atomic movement beyond 255, which can't be overcome.  If this is a problem,\n        consider changing movement multipliers for the unit to have\n        a lower aggregate value)\n        + nil means no minimum movement\n        + does not increase movement beyond the unit's movement allowance\n- Movement Multipliers have no special interactions.\n    * `roadMultiplier` = nil or int>=-1 or function(unit)-->nil int>=-1\n        + The road multiplier for the unit type\n        + nil means refer first to the defaultMovementMultipliers, then to authoritativeDefaultRules\n        + if function, the returned value of function(unit) is used.\n    * `railroadMultiplier` = nil or int>=-1 or function(unit)-->nil int>=-1\n        + The railroad multiplier for this unit type\n        + nil means refer first to the defaultMovementMultipliers, then to authoritativeDefaultRules\n        + if function, the returned value of function(unit) is used.\n    * `alpineMultiplier` = nil or int>=-1 or function(unit)-->nil int>=-1\n        + The alpine multiplier for this unit type\n        + nil means refer first to the defaultMovementMultipliers, then to authoritativeDefaultRules\n        + if function, the returned value of function(unit) is used.\n    * `riverMultiplier` = nil or int>=-1 or function(unit)-->nil int>=-1\n        + The river multiplier for this unit type\n        + nil means refer first to the defaultMovementMultipliers, then to authoritativeDefaultRules\n        + if function, the returned value of function(unit) is used.\n\n- The `isImpassable` and `moveCost` keys have tables as values (or nil, if you wish to make no changes).  These tables accept either `baseTerrainObject`s as keys, or integers, as determined by `gen.getBaseTerrainID`. Using the baseTerrainObject is recommended for clarity.\n    * `isImpassable[baseTerrainObject/ID]` = nil or boolean or function(unit)-->nil or boolean\n        + if true, the baseTerrain is impassable for the unit type\n        + if false, the baseTerrain is not impassable for the unit type\n        + if nil, refer to the authoritativeDefaultRules\n        + if function, the returned value of function(unit) is used.\n    * `moveCost[baseTerrainObject/ID]` = nil|int>=0 or function(unit)-->nil|int>=0\n        + if integer, this is the (full movement point) movement cost of the base terrain \n        + if nil, refer to the authoritativeDefaultRules\n        + if function, the returned value of function(unit) is used.\n\n- The `cosmic` and `flag` keys have tables as values.  The `cosmic` table keys change the `civ.cosmic` fields with the same key.  The `flags` table keys are derived from General Library function names.\n    * `cosmic[cosmicKey]` = int>=0|nil or function(unit)-->int>=0|nil\n        + if nil, use the value in the authoritativeDefaultRules instead\n        + possible values for cosmicKey:\n            - \"paradropRange\"\n            - \"triremeLost\"\n            - \"transformBase\" \n        + if function, the returned value of function(unit) is used.\n    * `flags[flagKey]` = nil or boolean or function(unit)-->nil or boolean\n        + if true, the unit has the flag corresponding to the flagKey\n        + if false, the unit does not have the flag corresponding to flagKey\n        + if nil, flags from the authoritativeDefaultRules are used\n        + possible values for flagKey:\n            - \"canCrossImpassableTerrain\"\n            - \"canFoundCities\"\n            - \"canImproveTiles\" (no effect if not settler)\n            - \"seeTwoSpaces\"\n            - \"ignoreZOC\"\n            - \"amphibious\"\n            - \"coastal\"\n            - \"ignoreWalls\"\n            - \"carryAir\"\n            - \"paradrop\"\n            - \"alpine\"\n            - \"destroyedAfterAttacking\"\n            - \"spotSubmarines\"\n        + if function, the returned value of function(unit) is used.\n- The `condition` and `priority` keys determine which customisation table is chosen for a particular unit.  The `customisationName` key is used to give the customisation a name which is used in some error messages.\n    * `condition` = nil|tribeObject|traitString|function(unit)-->boolean or table of tribeObject|traitString\n        + if nil, this unit type customisation applies to all units of the relevant type(s).\n        + if tribeObject, this customisation can only apply to units owned by that tribe (as long as the unit is also of the relevant type)\n        + if traitString, this customisation applies to tribes which have the trait\n        + if table of tribeObject|traitString, this applies to any tribe or traitString in the table\n        + if function(unit) --> boolean, then this customisation applies to units of the relevant type(s) which also make this function return true\n        + Only one customisation can apply to any unit.  The `priority` key is used to tie break.\n    * `priority` = nil or number>=0\n        + If multiple customisations can apply to a unit, this value chooses among them, with higher priority taking precedence.\n        + If the unit is eligible for two customisations of the same priority, an error may be generated, and will certainly be generated if they are of the highest priority.\n    * `customisationName` = nil|string,\n        + A name to be used during certain kinds of error and debugging messages\n        + nil will give \"Unnamed UnitType Customisation\"\n- Transport settings have no effect unless `customCosmic.ephemeralMapTransportSettings()` has been called.  The final transport settings are computed as follows:\n<br>1. restore the unitType to the authoritativeDefaultRules transportation settings\n<br>2. Apply the <something>Transport strings to the result of step 1\n<br>3. Apply transportXY data to the result of step 2\n    * `nativeTransport` = string|nil or function(unit) --> string|nil\n        + Governs the unitType nativeTransport field\n        + String should be 16 characters, 0,1, or x \n        + Each of the 16 characters reference one of the possible map transport relationships.  If it is 0, the corresponding relationship is disabled, if it is 1, the corresponding relationship is enabled, and if it is x, reference the authoritativeDefaultRules\n        + if nil, use authoritativeDefaultRules, if function, \n        + evaluate function(unit) and use the result\n\n    * `buildTransport` = string|nil or function(unit) --> string|nil\n        + Governs the unitType buildTransport field\n        + String should be 16 characters, 0,1, or x \n        + Each of the 16 characters reference one of the possible map transport relationships.  If it is 0, the corresponding relationship is disabled, if it is 1, the corresponding relationship is enabled, and if it is x, reference the authoritativeDefaultRules\n        + if nil, use authoritativeDefaultRules, if function, \n        + evaluate function(unit) and use the result\n    * `useTransport` = string|nil or function(unit) --> string|nil\n        + Governs the unitType useTransport field\n        + String should be 16 characters, 0,1, or x \n        + Each of the 16 characters reference one of the possible map transport relationships.  If it is 0, the corresponding relationship is disabled, if it is 1, the corresponding relationship is enabled, and if it is x, reference the authoritativeDefaultRules\n        + if nil, use authoritativeDefaultRules, if function, \n        + evaluate function(unit) and use the result\n\n    * `transportXY` = {\n    <br> nativeTransport = nil|boolean or function(unit) --> nil|boolean\n    <br> buildTransport = nil|boolean or function(unit) --> nil|boolean\n    <br> useTransport = nil|boolean or function(unit) --> nil|boolean\n    <br>}\n        + transportXY governs the transport relationship between maps X and Y\n        + if `somethingTransport` key is true, then the relationship between the two maps is enabled for maps X and Y in unitType.somethingTransport\n        + if it is false, the relationship is disabled\n        + if nil, use the authoritativeDefaultRules, or the relationship set out by the somethingTransport key defined above\n        + if function, evaluate function(unit) and use the result\n        + `transportXY` represents the following available keys:\n            - `transport01`\n            - `transport02`\n            - `transport03`\n            - `transport12`\n            - `transport13`\n            - `transport23`\n--",
                    "finish": 6930003,
                    "start": 6850000,
                    "type": "function",
                    "view": "function customCosmic.registerUnitTypeCustomisation(unitTypeOrTrait: string|table<any, string|unitTypeObject>|unitTypeObject, unitTypeCustomisation: table)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/customCosmic.lua",
                "finish": 6850051,
                "name": "registerUnitTypeCustomisation",
                "start": 6850009,
                "type": "setfield"
            }
        ],
        "name": "customCosmic",
        "type": "type"
    },
    {
        "defines": [
            {
                "extends": [
                    {
                        "finish": 65260025,
                        "start": 65260020,
                        "type": "doc.extends.name",
                        "view": "table"
                    }
                ],
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 65260025,
                "start": 65260010,
                "type": "doc.class"
            }
        ],
        "desc": "A dataTable acts as an ordinary table, but, if desired, you can forbid values from being changed, forbid new key-value pairs from being stored, and forbid trying to access keys with a `nil` value.  These features can make debugging easier by causing an error to happen on the line the mistake is made.\n\nThe following functions can be used to control the data table's features:\n\ngen.forbidReplacement(dataTable) --> void\n\ngen.allowReplacement(dataTable) --> void\n\ngen.forbidNewKeys(dataTable) --> void\n\ngen.allowNewKeys(dataTable) --> void\n\ngen.forbidNilValueAccess(dataTable) --> void\n\ngen.allowNilValueAccess(dataTable) --> void\n\ngen.restrictValues(dataTable,isValidValueFn,makeValidValueFn) --> void\n",
        "fields": [],
        "name": "dataTable",
        "type": "type"
    },
    {
        "defines": [
            {
                "extends": {
                    "finish": 80010,
                    "start": 80008,
                    "type": "table",
                    "view": "debuglib"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/debug.lua",
                "finish": 80005,
                "start": 80000,
                "type": "setglobal"
            }
        ],
        "desc": "\n\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-debug)\n",
        "name": "debug",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [],
                    "desc": "\nEnters an interactive mode with the user, running each string that the user enters.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-debug.debug)",
                    "finish": 330026,
                    "start": 330000,
                    "type": "function",
                    "view": "function debug.debug()"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/debug.lua",
                "finish": 330020,
                "start": 330009,
                "type": "setfield"
            }
        ],
        "desc": "\nEnters an interactive mode with the user, running each string that the user enters.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-debug.debug)",
        "name": "debug.debug",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 440024,
                            "name": "o",
                            "start": 440023,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "\nReturns the environment of object `o` .\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-debug.getfenv)",
                    "finish": 440029,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "table"
                        }
                    ],
                    "start": 440000,
                    "type": "function",
                    "view": "function debug.getfenv(o: any)\n  -> table"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/debug.lua",
                "finish": 440022,
                "start": 440009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the environment of object `o` .\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-debug.getfenv)",
        "name": "debug.getfenv",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "Thread is the name that Lua Language Server uses for a coroutine.  A coroutine is a line of execution, with its own stack and its own local variables; but sharing global variables and mostly anything else with other coroutines. Coroutines are collaborative: A program with coroutines is, at any given time, running only one of its coroutines and this running coroutine only suspends its execution when it explicitly requests to be suspended.\n\n[Programming in Lua, 9 -- Coroutines](https://www.lua.org/pil/9.html)\n\n[Tutorialspoint Lua -- Coroutines](https://www.tutorialspoint.com/lua/lua_coroutines.htm)",
                            "finish": 560025,
                            "name": "co",
                            "start": 560023,
                            "type": "local",
                            "view": "thread?"
                        }
                    ],
                    "desc": "\nReturns the current hook settings of the thread.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-debug.gethook)",
                    "finish": 560030,
                    "returns": [
                        {
                            "name": "hook",
                            "type": "function.return",
                            "view": "function"
                        },
                        {
                            "name": "mask",
                            "type": "function.return",
                            "view": "string"
                        },
                        {
                            "name": "count",
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": 560000,
                    "type": "function",
                    "view": "function debug.gethook(co?: thread)\n  -> hook: function\n  2. mask: string\n  3. count: integer"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/debug.lua",
                "finish": 560022,
                "start": 560009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the current hook settings of the thread.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-debug.gethook)",
        "name": "debug.gethook",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "Thread is the name that Lua Language Server uses for a coroutine.  A coroutine is a line of execution, with its own stack and its own local variables; but sharing global variables and mostly anything else with other coroutines. Coroutines are collaborative: A program with coroutines is, at any given time, running only one of its coroutines and this running coroutine only suspends its execution when it explicitly requests to be suspended.\n\n[Programming in Lua, 9 -- Coroutines](https://www.lua.org/pil/9.html)\n\n[Tutorialspoint Lua -- Coroutines](https://www.tutorialspoint.com/lua/lua_coroutines.htm)",
                            "finish": 790029,
                            "name": "thread",
                            "start": 790023,
                            "type": "local",
                            "view": "thread"
                        },
                        {
                            "desc": "An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 790032,
                            "name": "f",
                            "start": 790031,
                            "type": "local",
                            "view": "integer|fun(...any):...unknown"
                        },
                        {
                            "desc": "A string is a data type native to Lua which consists of a sequence of characters. These often represent text to be displayed, but are also useful in other contexts. Strings are commonly used as keys in tables, since they make code more readable.\n[Programming in Lua, 2.4 -- Strings](https://www.lua.org/pil/2.4.html)",
                            "finish": 790038,
                            "name": "what",
                            "start": 790034,
                            "type": "local",
                            "view": "(string|\"L\"|\"S\"|\"f\"|\"l\"...(+4))?"
                        }
                    ],
                    "desc": "\nReturns a table with information about a function.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-debug.getinfo)\n\n\n---\n\n```lua\n-- A string is a data type native to Lua which consists of a sequence of characters. These often represent text to be displayed, but are also useful in other contexts. Strings are commonly used as keys in tables, since they make code more readable.\n-- [Programming in Lua, 2.4 -- Strings](https://www.lua.org/pil/2.4.html)\n-- A string is a data type native to Lua which consists of a sequence of characters. These often represent text to be displayed, but are also useful in other contexts. Strings are commonly used as keys in tables, since they make code more readable.\n-- [Programming in Lua, 2.4 -- Strings](https://www.lua.org/pil/2.4.html)\n-- A string is a data type native to Lua which consists of a sequence of characters. These often represent text to be displayed, but are also useful in other contexts. Strings are commonly used as keys in tables, since they make code more readable.\n-- [Programming in Lua, 2.4 -- Strings](https://www.lua.org/pil/2.4.html)\nwhat:\n   +> \"n\" -- `name` and `namewhat`\n   +> \"S\" -- `source`, `short_src`, `linedefined`, `lastlinedefined`, and `what`\n   +> \"l\" -- `currentline`\n   +> \"t\" -- `istailcall`\n   +> \"u\" -- `nups`, `nparams`, and `isvararg`\n   +> \"f\" -- `func`\n   +> \"r\" -- `ftransfer` and `ntransfer`\n   +> \"L\" -- `activelines`\n```",
                    "finish": 790043,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "debuginfo"
                        }
                    ],
                    "start": 790000,
                    "type": "function",
                    "view": "function debug.getinfo(thread: thread, f: integer|fun(...any):...unknown, what?: string|\"L\"|\"S\"|\"f\"|\"l\"...(+4))\n  -> debuginfo"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/debug.lua",
                "finish": 790022,
                "start": 790009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns a table with information about a function.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-debug.getinfo)\n\n\n---\n\n```lua\n-- A string is a data type native to Lua which consists of a sequence of characters. These often represent text to be displayed, but are also useful in other contexts. Strings are commonly used as keys in tables, since they make code more readable.\n-- [Programming in Lua, 2.4 -- Strings](https://www.lua.org/pil/2.4.html)\n-- A string is a data type native to Lua which consists of a sequence of characters. These often represent text to be displayed, but are also useful in other contexts. Strings are commonly used as keys in tables, since they make code more readable.\n-- [Programming in Lua, 2.4 -- Strings](https://www.lua.org/pil/2.4.html)\n-- A string is a data type native to Lua which consists of a sequence of characters. These often represent text to be displayed, but are also useful in other contexts. Strings are commonly used as keys in tables, since they make code more readable.\n-- [Programming in Lua, 2.4 -- Strings](https://www.lua.org/pil/2.4.html)\nwhat:\n   +> \"n\" -- `name` and `namewhat`\n   +> \"S\" -- `source`, `short_src`, `linedefined`, `lastlinedefined`, and `what`\n   +> \"l\" -- `currentline`\n   +> \"t\" -- `istailcall`\n   +> \"u\" -- `nups`, `nparams`, and `isvararg`\n   +> \"f\" -- `func`\n   +> \"r\" -- `ftransfer` and `ntransfer`\n   +> \"L\" -- `activelines`\n```",
        "name": "debug.getinfo",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "Thread is the name that Lua Language Server uses for a coroutine.  A coroutine is a line of execution, with its own stack and its own local variables; but sharing global variables and mostly anything else with other coroutines. Coroutines are collaborative: A program with coroutines is, at any given time, running only one of its coroutines and this running coroutine only suspends its execution when it explicitly requests to be suspended.\n\n[Programming in Lua, 9 -- Coroutines](https://www.lua.org/pil/9.html)\n\n[Tutorialspoint Lua -- Coroutines](https://www.tutorialspoint.com/lua/lua_coroutines.htm)",
                            "finish": 930030,
                            "name": "thread",
                            "start": 930024,
                            "type": "local",
                            "view": "thread"
                        },
                        {
                            "desc": "An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 930033,
                            "name": "f",
                            "start": 930032,
                            "type": "local",
                            "view": "integer|fun(...any):...unknown"
                        },
                        {
                            "desc": "An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 930040,
                            "name": "index",
                            "start": 930035,
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "desc": "\nReturns the name and the value of the local variable with index `local` of the function at level `f` of the stack.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-debug.getlocal)",
                    "finish": 930045,
                    "returns": [
                        {
                            "name": "name",
                            "type": "function.return",
                            "view": "string"
                        },
                        {
                            "name": "value",
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": 930000,
                    "type": "function",
                    "view": "function debug.getlocal(thread: thread, f: integer|fun(...any):...unknown, index: integer)\n  -> name: string\n  2. value: any"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/debug.lua",
                "finish": 930023,
                "start": 930009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the name and the value of the local variable with index `local` of the function at level `f` of the stack.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-debug.getlocal)",
        "name": "debug.getlocal",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1030034,
                            "name": "object",
                            "start": 1030028,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "\nReturns the metatable of the given value.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-debug.getmetatable)",
                    "finish": 1030039,
                    "returns": [
                        {
                            "name": "metatable",
                            "type": "function.return",
                            "view": "table"
                        }
                    ],
                    "start": 1030000,
                    "type": "function",
                    "view": "function debug.getmetatable(object: any)\n  -> metatable: table"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/debug.lua",
                "finish": 1030027,
                "start": 1030009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the metatable of the given value.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-debug.getmetatable)",
        "name": "debug.getmetatable",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [],
                    "desc": "\nReturns the registry table.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-debug.getregistry)",
                    "finish": 1120032,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "table"
                        }
                    ],
                    "start": 1120000,
                    "type": "function",
                    "view": "function debug.getregistry()\n  -> table"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/debug.lua",
                "finish": 1120026,
                "start": 1120009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the registry table.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-debug.getregistry)",
        "name": "debug.getregistry",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1240027,
                            "name": "f",
                            "start": 1240026,
                            "type": "local",
                            "view": "fun(...any):...unknown"
                        },
                        {
                            "desc": "An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 1240031,
                            "name": "up",
                            "start": 1240029,
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "desc": "\nReturns the name and the value of the upvalue with index `up` of the function.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-debug.getupvalue)",
                    "finish": 1240036,
                    "returns": [
                        {
                            "name": "name",
                            "type": "function.return",
                            "view": "string"
                        },
                        {
                            "name": "value",
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": 1240000,
                    "type": "function",
                    "view": "function debug.getupvalue(f: fun(...any):...unknown, up: integer)\n  -> name: string\n  2. value: any"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/debug.lua",
                "finish": 1240025,
                "start": 1240009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the name and the value of the upvalue with index `up` of the function.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-debug.getupvalue)",
        "name": "debug.getupvalue",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1390029,
                            "name": "u",
                            "start": 1390028,
                            "type": "local",
                            "view": "userdata"
                        },
                        {
                            "desc": "An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 1390032,
                            "name": "n",
                            "start": 1390031,
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nReturns the `n`-th user value associated\nto the userdata `u` plus a boolean,\n`false` if the userdata does not have that value.\n\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-debug.getuservalue)",
                    "finish": 1390037,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "any"
                        },
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 1390000,
                    "type": "function",
                    "view": "function debug.getuservalue(u: userdata, n?: integer)\n  -> any\n  2. boolean"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/debug.lua",
                "finish": 1390027,
                "start": 1390009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the `n`-th user value associated\nto the userdata `u` plus a boolean,\n`false` if the userdata does not have that value.\n\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-debug.getuservalue)",
        "name": "debug.getuservalue",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 1540035,
                            "name": "limit",
                            "start": 1540030,
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "desc": "\n### **Deprecated in `Lua 5.4.2`**\n\nSets a new limit for the C stack. This limit controls how deeply nested calls can go in Lua, with the intent of avoiding a stack overflow.\n\nIn case of success, this function returns the old limit. In case of error, it returns `false`.\n\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-debug.setcstacklimit)",
                    "finish": 1540040,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean|integer"
                        }
                    ],
                    "start": 1540000,
                    "type": "function",
                    "view": "function debug.setcstacklimit(limit: integer)\n  -> boolean|integer"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/debug.lua",
                "finish": 1540029,
                "start": 1540009,
                "type": "setfield"
            }
        ],
        "desc": "\n### **Deprecated in `Lua 5.4.2`**\n\nSets a new limit for the C stack. This limit controls how deeply nested calls can go in Lua, with the intent of avoiding a stack overflow.\n\nIn case of success, this function returns the old limit. In case of error, it returns `false`.\n\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-debug.setcstacklimit)",
        "name": "debug.setcstacklimit",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1660029,
                            "name": "object",
                            "start": 1660023,
                            "type": "local",
                            "view": "<T>"
                        },
                        {
                            "desc": "A table is a data type native to Lua, and links \"keys\" (usually numbers or strings) to \"values\" (any kind of data, including other tables). This is the only data structuring mechanism in Lua, and many of the data types documented here are simply tables with restrictions on their keys or values. If a key has not been assigned a value, the table returns nil as the corresponding value, and assigning nil as a value to a key removes that key from the table.\n[Programming in Lua, 2.5 -- Tables](https://www.lua.org/pil/2.5.html)",
                            "finish": 1660034,
                            "name": "env",
                            "start": 1660031,
                            "type": "local",
                            "view": "table"
                        }
                    ],
                    "desc": "\nSets the environment of the given `object` to the given `table` .\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-debug.setfenv)",
                    "finish": 1660039,
                    "returns": [
                        {
                            "name": "object",
                            "type": "function.return",
                            "view": "<T>"
                        }
                    ],
                    "start": 1660000,
                    "type": "function",
                    "view": "function debug.setfenv(object: <T>, env: table)\n  -> object: <T>"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/debug.lua",
                "finish": 1660022,
                "start": 1660009,
                "type": "setfield"
            }
        ],
        "desc": "\nSets the environment of the given `object` to the given `table` .\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-debug.setfenv)",
        "name": "debug.setfenv",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "Thread is the name that Lua Language Server uses for a coroutine.  A coroutine is a line of execution, with its own stack and its own local variables; but sharing global variables and mostly anything else with other coroutines. Coroutines are collaborative: A program with coroutines is, at any given time, running only one of its coroutines and this running coroutine only suspends its execution when it explicitly requests to be suspended.\n\n[Programming in Lua, 9 -- Coroutines](https://www.lua.org/pil/9.html)\n\n[Tutorialspoint Lua -- Coroutines](https://www.tutorialspoint.com/lua/lua_coroutines.htm)",
                            "finish": 1850029,
                            "name": "thread",
                            "start": 1850023,
                            "type": "local",
                            "view": "thread"
                        },
                        {
                            "finish": 1850035,
                            "name": "hook",
                            "start": 1850031,
                            "type": "local",
                            "view": "fun(...any):...unknown"
                        },
                        {
                            "desc": "A string is a data type native to Lua which consists of a sequence of characters. These often represent text to be displayed, but are also useful in other contexts. Strings are commonly used as keys in tables, since they make code more readable.\n[Programming in Lua, 2.4 -- Strings](https://www.lua.org/pil/2.4.html)",
                            "finish": 1850041,
                            "name": "mask",
                            "start": 1850037,
                            "type": "local",
                            "view": "string|\"c\"|\"l\"|\"r\""
                        },
                        {
                            "desc": "An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 1850048,
                            "name": "count",
                            "start": 1850043,
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nSets the given function as a hook.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-debug.sethook)\n\n\n---\n\n```lua\n-- A string is a data type native to Lua which consists of a sequence of characters. These often represent text to be displayed, but are also useful in other contexts. Strings are commonly used as keys in tables, since they make code more readable.\n-- [Programming in Lua, 2.4 -- Strings](https://www.lua.org/pil/2.4.html)\n-- A string is a data type native to Lua which consists of a sequence of characters. These often represent text to be displayed, but are also useful in other contexts. Strings are commonly used as keys in tables, since they make code more readable.\n-- [Programming in Lua, 2.4 -- Strings](https://www.lua.org/pil/2.4.html)\n-- A string is a data type native to Lua which consists of a sequence of characters. These often represent text to be displayed, but are also useful in other contexts. Strings are commonly used as keys in tables, since they make code more readable.\n-- [Programming in Lua, 2.4 -- Strings](https://www.lua.org/pil/2.4.html)\nmask:\n   +> \"c\" -- Calls hook when Lua calls a function.\n   +> \"r\" -- Calls hook when Lua returns from a function.\n   +> \"l\" -- Calls hook when Lua enters a new line of code.\n```",
                    "finish": 1850053,
                    "start": 1850000,
                    "type": "function",
                    "view": "function debug.sethook(thread: thread, hook: fun(...any):...unknown, mask: string|\"c\"|\"l\"|\"r\", count?: integer)"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/debug.lua",
                "finish": 1850022,
                "start": 1850009,
                "type": "setfield"
            }
        ],
        "desc": "\nSets the given function as a hook.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-debug.sethook)\n\n\n---\n\n```lua\n-- A string is a data type native to Lua which consists of a sequence of characters. These often represent text to be displayed, but are also useful in other contexts. Strings are commonly used as keys in tables, since they make code more readable.\n-- [Programming in Lua, 2.4 -- Strings](https://www.lua.org/pil/2.4.html)\n-- A string is a data type native to Lua which consists of a sequence of characters. These often represent text to be displayed, but are also useful in other contexts. Strings are commonly used as keys in tables, since they make code more readable.\n-- [Programming in Lua, 2.4 -- Strings](https://www.lua.org/pil/2.4.html)\n-- A string is a data type native to Lua which consists of a sequence of characters. These often represent text to be displayed, but are also useful in other contexts. Strings are commonly used as keys in tables, since they make code more readable.\n-- [Programming in Lua, 2.4 -- Strings](https://www.lua.org/pil/2.4.html)\nmask:\n   +> \"c\" -- Calls hook when Lua calls a function.\n   +> \"r\" -- Calls hook when Lua returns from a function.\n   +> \"l\" -- Calls hook when Lua enters a new line of code.\n```",
        "name": "debug.sethook",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "Thread is the name that Lua Language Server uses for a coroutine.  A coroutine is a line of execution, with its own stack and its own local variables; but sharing global variables and mostly anything else with other coroutines. Coroutines are collaborative: A program with coroutines is, at any given time, running only one of its coroutines and this running coroutine only suspends its execution when it explicitly requests to be suspended.\n\n[Programming in Lua, 9 -- Coroutines](https://www.lua.org/pil/9.html)\n\n[Tutorialspoint Lua -- Coroutines](https://www.tutorialspoint.com/lua/lua_coroutines.htm)",
                            "finish": 1980030,
                            "name": "thread",
                            "start": 1980024,
                            "type": "local",
                            "view": "thread"
                        },
                        {
                            "desc": "An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 1980037,
                            "name": "level",
                            "start": 1980032,
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "desc": "An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 1980044,
                            "name": "index",
                            "start": 1980039,
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": 1980051,
                            "name": "value",
                            "start": 1980046,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "\nAssigns the `value` to the local variable with index `local` of the function at `level` of the stack.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-debug.setlocal)",
                    "finish": 1980056,
                    "returns": [
                        {
                            "name": "name",
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": 1980000,
                    "type": "function",
                    "view": "function debug.setlocal(thread: thread, level: integer, index: integer, value: any)\n  -> name: string"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/debug.lua",
                "finish": 1980023,
                "start": 1980009,
                "type": "setfield"
            }
        ],
        "desc": "\nAssigns the `value` to the local variable with index `local` of the function at `level` of the stack.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-debug.setlocal)",
        "name": "debug.setlocal",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 2090033,
                            "name": "value",
                            "start": 2090028,
                            "type": "local",
                            "view": "<T>"
                        },
                        {
                            "desc": "A table is a data type native to Lua, and links \"keys\" (usually numbers or strings) to \"values\" (any kind of data, including other tables). This is the only data structuring mechanism in Lua, and many of the data types documented here are simply tables with restrictions on their keys or values. If a key has not been assigned a value, the table returns nil as the corresponding value, and assigning nil as a value to a key removes that key from the table.\n[Programming in Lua, 2.5 -- Tables](https://www.lua.org/pil/2.5.html)",
                            "finish": 2090039,
                            "name": "meta",
                            "start": 2090035,
                            "type": "local",
                            "view": "table?"
                        }
                    ],
                    "desc": "\nSets the metatable for the given value to the given table (which can be `nil`).\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-debug.setmetatable)",
                    "finish": 2090044,
                    "returns": [
                        {
                            "name": "value",
                            "type": "function.return",
                            "view": "<T>"
                        }
                    ],
                    "start": 2090000,
                    "type": "function",
                    "view": "function debug.setmetatable(value: <T>, meta?: table)\n  -> value: <T>"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/debug.lua",
                "finish": 2090027,
                "start": 2090009,
                "type": "setfield"
            }
        ],
        "desc": "\nSets the metatable for the given value to the given table (which can be `nil`).\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-debug.setmetatable)",
        "name": "debug.setmetatable",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 2200027,
                            "name": "f",
                            "start": 2200026,
                            "type": "local",
                            "view": "fun(...any):...unknown"
                        },
                        {
                            "desc": "An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 2200031,
                            "name": "up",
                            "start": 2200029,
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": 2200038,
                            "name": "value",
                            "start": 2200033,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "\nAssigns the `value` to the upvalue with index `up` of the function.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-debug.setupvalue)",
                    "finish": 2200043,
                    "returns": [
                        {
                            "name": "name",
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": 2200000,
                    "type": "function",
                    "view": "function debug.setupvalue(f: fun(...any):...unknown, up: integer, value: any)\n  -> name: string"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/debug.lua",
                "finish": 2200025,
                "start": 2200009,
                "type": "setfield"
            }
        ],
        "desc": "\nAssigns the `value` to the upvalue with index `up` of the function.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-debug.setupvalue)",
        "name": "debug.setupvalue",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 2340033,
                            "name": "udata",
                            "start": 2340028,
                            "type": "local",
                            "view": "userdata"
                        },
                        {
                            "finish": 2340040,
                            "name": "value",
                            "start": 2340035,
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "desc": "An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 2340043,
                            "name": "n",
                            "start": 2340042,
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nSets the given `value` as\nthe `n`-th user value associated to the given `udata`.\n`udata` must be a full userdata.\n\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-debug.setuservalue)",
                    "finish": 2340048,
                    "returns": [
                        {
                            "name": "udata",
                            "type": "function.return",
                            "view": "userdata"
                        }
                    ],
                    "start": 2340000,
                    "type": "function",
                    "view": "function debug.setuservalue(udata: userdata, value: any, n?: integer)\n  -> udata: userdata"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/debug.lua",
                "finish": 2340027,
                "start": 2340009,
                "type": "setfield"
            }
        ],
        "desc": "\nSets the given `value` as\nthe `n`-th user value associated to the given `udata`.\n`udata` must be a full userdata.\n\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-debug.setuservalue)",
        "name": "debug.setuservalue",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "Thread is the name that Lua Language Server uses for a coroutine.  A coroutine is a line of execution, with its own stack and its own local variables; but sharing global variables and mostly anything else with other coroutines. Coroutines are collaborative: A program with coroutines is, at any given time, running only one of its coroutines and this running coroutine only suspends its execution when it explicitly requests to be suspended.\n\n[Programming in Lua, 9 -- Coroutines](https://www.lua.org/pil/9.html)\n\n[Tutorialspoint Lua -- Coroutines](https://www.tutorialspoint.com/lua/lua_coroutines.htm)",
                            "finish": 2470031,
                            "name": "thread",
                            "start": 2470025,
                            "type": "local",
                            "view": "thread"
                        },
                        {
                            "finish": 2470040,
                            "name": "message",
                            "start": 2470033,
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "desc": "An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 2470047,
                            "name": "level",
                            "start": 2470042,
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nReturns a string with a traceback of the call stack. The optional message string is appended at the beginning of the traceback.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-debug.traceback)",
                    "finish": 2470052,
                    "returns": [
                        {
                            "name": "message",
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": 2470000,
                    "type": "function",
                    "view": "function debug.traceback(thread: thread, message?: any, level?: integer)\n  -> message: string"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/debug.lua",
                "finish": 2470024,
                "start": 2470009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns a string with a traceback of the call stack. The optional message string is appended at the beginning of the traceback.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-debug.traceback)",
        "name": "debug.traceback",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 2590026,
                            "name": "f",
                            "start": 2590025,
                            "type": "local",
                            "view": "fun(...any):...unknown"
                        },
                        {
                            "desc": "An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 2590029,
                            "name": "n",
                            "start": 2590028,
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "desc": "\nReturns a unique identifier (as a light userdata) for the upvalue numbered `n` from the given function.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-debug.upvalueid)",
                    "finish": 2590034,
                    "returns": [
                        {
                            "name": "id",
                            "type": "function.return",
                            "view": "lightuserdata"
                        }
                    ],
                    "start": 2590000,
                    "type": "function",
                    "view": "function debug.upvalueid(f: fun(...any):...unknown, n: integer)\n  -> id: lightuserdata"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/debug.lua",
                "finish": 2590024,
                "start": 2590009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns a unique identifier (as a light userdata) for the upvalue numbered `n` from the given function.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-debug.upvalueid)",
        "name": "debug.upvalueid",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 2710029,
                            "name": "f1",
                            "start": 2710027,
                            "type": "local",
                            "view": "fun(...any):...unknown"
                        },
                        {
                            "desc": "An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 2710033,
                            "name": "n1",
                            "start": 2710031,
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": 2710037,
                            "name": "f2",
                            "start": 2710035,
                            "type": "local",
                            "view": "fun(...any):...unknown"
                        },
                        {
                            "desc": "An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 2710041,
                            "name": "n2",
                            "start": 2710039,
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "desc": "\nMake the `n1`-th upvalue of the Lua closure `f1` refer to the `n2`-th upvalue of the Lua closure `f2`.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-debug.upvaluejoin)",
                    "finish": 2710046,
                    "start": 2710000,
                    "type": "function",
                    "view": "function debug.upvaluejoin(f1: fun(...any):...unknown, n1: integer, f2: fun(...any):...unknown, n2: integer)"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/debug.lua",
                "finish": 2710026,
                "start": 2710009,
                "type": "setfield"
            }
        ],
        "desc": "\nMake the `n1`-th upvalue of the Lua closure `f1` refer to the `n2`-th upvalue of the Lua closure `f2`.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-debug.upvaluejoin)",
        "name": "debug.upvaluejoin",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "finish": 9920096,
                    "start": 9920032,
                    "type": "doc.type",
                    "types": [
                        {
                            "args": [
                                {
                                    "finish": 9920052,
                                    "name": {
                                        "[1]": "tile",
                                        "finish": 9920040,
                                        "start": 9920036,
                                        "type": "doc.type.arg.name",
                                        "view": "tile"
                                    },
                                    "start": 9920036,
                                    "type": "doc.type.arg",
                                    "view": "tileObject"
                                },
                                {
                                    "finish": 9920073,
                                    "name": {
                                        "[1]": "attacker",
                                        "finish": 9920061,
                                        "start": 9920053,
                                        "type": "doc.type.arg.name",
                                        "view": "attacker"
                                    },
                                    "start": 9920053,
                                    "type": "doc.type.arg",
                                    "view": "unitObject"
                                }
                            ],
                            "finish": 9920096,
                            "returns": [
                                {
                                    "finish": 9920096,
                                    "name": {
                                        "finish": 9920085,
                                        "start": 9920075,
                                        "type": "doc.return.name",
                                        "view": "unknown"
                                    },
                                    "start": 9920086,
                                    "type": "doc.type",
                                    "types": [
                                        {
                                            "finish": 9920096,
                                            "start": 9920086,
                                            "type": "doc.type.name",
                                            "view": "unitObject"
                                        }
                                    ],
                                    "view": "unitObject"
                                }
                            ],
                            "start": 9920032,
                            "type": "doc.type.function",
                            "view": "fun(tile: tileObject, attacker: unitObject):(chosenUnit: unitObject)"
                        }
                    ],
                    "view": "fun(tile: tileObject, attacker: unitObject):(chosenUnit: unitObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 9920096,
                "start": 9920010,
                "type": "doc.alias"
            }
        ],
        "fields": [],
        "name": "defaultChooseDefender",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 3770022,
                "start": 3770010,
                "type": "doc.class"
            }
        ],
        "desc": "A dialog object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a text box that can be displayed to the player and provides properties and methods to customize it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#dialog)",
        "fields": [
            {
                "desc": "Adds a checkbox to the dialog, with label given by `string`. `id` is an integer value that can be used in dialog:getCheckboxState to retrieve the state after calling dialog:show. `initial` is an optional boolean parameter, if set to `true` the checkbox will be checked initially. Can not be used in conjunction with dialog:addOption.\n\n@*param* `initial` โ Default Value is false",
                "extends": {
                    "args": [
                        {
                            "finish": 3870008,
                            "name": "self",
                            "start": 3870008,
                            "type": "self",
                            "view": "dialogObject"
                        },
                        {
                            "desc": "A string is a data type native to Lua which consists of a sequence of characters. These often represent text to be displayed, but are also useful in other contexts. Strings are commonly used as keys in tables, since they make code more readable.\n[Programming in Lua, 2.4 -- Strings](https://www.lua.org/pil/2.4.html)",
                            "finish": 3870040,
                            "name": "string",
                            "start": 3870034,
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "desc": "An id number is a positive integer that corresponds to an object in the game or the rules.txt file. If you know what <em>kind</em> of object the id corresponds to, you can then use the id to get the specific item in question. The maximum value for an id will depend on its corresponding object. For example, the maximum id for a tribe object is 7, but (at least for programming purposes) there is no limit to the id number of a unit.",
                            "finish": 3870044,
                            "name": "id",
                            "start": 3870042,
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "desc": "Default Value is false",
                            "finish": 3870053,
                            "name": "initial",
                            "start": 3870046,
                            "type": "local",
                            "view": "boolean"
                        }
                    ],
                    "desc": "Adds a checkbox to the dialog, with label given by `string`. `id` is an integer value that can be used in dialog:getCheckboxState to retrieve the state after calling dialog:show. `initial` is an optional boolean parameter, if set to `true` the checkbox will be checked initially. Can not be used in conjunction with dialog:addOption.\n\n@*param* `initial` โ Default Value is false",
                    "finish": 3870058,
                    "start": 3870000,
                    "type": "function",
                    "view": "(method) dialogObject:addCheckbox(string: string, id: integer, initial: boolean)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 3870033,
                "name": "addCheckbox",
                "start": 3870009,
                "type": "setmethod"
            },
            {
                "desc": "Adds an image to the dialog.",
                "extends": {
                    "args": [
                        {
                            "finish": 3910008,
                            "name": "self",
                            "start": 3910008,
                            "type": "self",
                            "view": "dialogObject"
                        },
                        {
                            "desc": "A image object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents an image that can be displayed in a dialog object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#dialog)",
                            "finish": 3910036,
                            "name": "image",
                            "start": 3910031,
                            "type": "local",
                            "view": "imageObject"
                        }
                    ],
                    "desc": "Adds an image to the dialog.",
                    "finish": 3910041,
                    "start": 3910000,
                    "type": "function",
                    "view": "(method) dialogObject:addImage(image: imageObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 3910030,
                "name": "addImage",
                "start": 3910009,
                "type": "setmethod"
            },
            {
                "desc": "Adds a selectable option to the dialog, with label given by `string`. `id` is an integer value returned by dialog:show if this option was selected. Can not be used in conjunction with dialog:addCheckbox.",
                "extends": {
                    "args": [
                        {
                            "finish": 3960008,
                            "name": "self",
                            "start": 3960008,
                            "type": "self",
                            "view": "dialogObject"
                        },
                        {
                            "desc": "A string is a data type native to Lua which consists of a sequence of characters. These often represent text to be displayed, but are also useful in other contexts. Strings are commonly used as keys in tables, since they make code more readable.\n[Programming in Lua, 2.4 -- Strings](https://www.lua.org/pil/2.4.html)",
                            "finish": 3960038,
                            "name": "string",
                            "start": 3960032,
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "desc": "An id number is a positive integer that corresponds to an object in the game or the rules.txt file. If you know what <em>kind</em> of object the id corresponds to, you can then use the id to get the specific item in question. The maximum value for an id will depend on its corresponding object. For example, the maximum id for a tribe object is 7, but (at least for programming purposes) there is no limit to the id number of a unit.",
                            "finish": 3960042,
                            "name": "id",
                            "start": 3960040,
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "desc": "Adds a selectable option to the dialog, with label given by `string`. `id` is an integer value returned by dialog:show if this option was selected. Can not be used in conjunction with dialog:addCheckbox.",
                    "finish": 3960047,
                    "start": 3960000,
                    "type": "function",
                    "view": "(method) dialogObject:addOption(string: string, id: integer)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 3960031,
                "name": "addOption",
                "start": 3960009,
                "type": "setmethod"
            },
            {
                "desc": "Adds a static text string to the dialog.",
                "extends": {
                    "args": [
                        {
                            "finish": 4000008,
                            "name": "self",
                            "start": 4000008,
                            "type": "self",
                            "view": "dialogObject"
                        },
                        {
                            "desc": "A string is a data type native to Lua which consists of a sequence of characters. These often represent text to be displayed, but are also useful in other contexts. Strings are commonly used as keys in tables, since they make code more readable.\n[Programming in Lua, 2.4 -- Strings](https://www.lua.org/pil/2.4.html)",
                            "finish": 4000036,
                            "name": "string",
                            "start": 4000030,
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "Adds a static text string to the dialog.",
                    "finish": 4000041,
                    "start": 4000000,
                    "type": "function",
                    "view": "(method) dialogObject:addText(string: string)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 4000029,
                "name": "addText",
                "start": 4000009,
                "type": "setmethod"
            },
            {
                "desc": "Returns the state of the checkbox identified by `id` after dialog:show has been called.",
                "extends": {
                    "args": [
                        {
                            "finish": 4050008,
                            "name": "self",
                            "start": 4050008,
                            "type": "self",
                            "view": "dialogObject"
                        },
                        {
                            "desc": "An id number is a positive integer that corresponds to an object in the game or the rules.txt file. If you know what <em>kind</em> of object the id corresponds to, you can then use the id to get the specific item in question. The maximum value for an id will depend on its corresponding object. For example, the maximum id for a tribe object is 7, but (at least for programming purposes) there is no limit to the id number of a unit.",
                            "finish": 4050041,
                            "name": "id",
                            "start": 4050039,
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "desc": "Returns the state of the checkbox identified by `id` after dialog:show has been called.",
                    "finish": 4050046,
                    "returns": [
                        {
                            "name": "boolean",
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 4050000,
                    "type": "function",
                    "view": "(method) dialogObject:getCheckboxState(id: integer)\n  -> boolean: boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 4050038,
                "name": "getCheckboxState",
                "start": 4050009,
                "type": "setmethod"
            },
            {
                "desc": "(get/set) Returns the height of the dialog. Normally this does not need to be set, since the height is automatically calculated from the height of the items.",
                "extends": {
                    "finish": 3780024,
                    "start": 3780017,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 3780024,
                            "start": 3780017,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 3780024,
                "name": "height",
                "start": 3780010,
                "type": "doc.field"
            },
            {
                "desc": "Renders the dialog on screen. If this is an option dialog, returns the id of the selected option (see dialog:addOption). If this is a checkbox dialog, returns 0 if OK was pressed, -1 if Exit was pressed. Use dialog:getCheckboxState to query the individual checkboxes. This method can only be called once per dialog. It will return an error if invoked a second time.",
                "extends": {
                    "args": [
                        {
                            "finish": 4090008,
                            "name": "self",
                            "start": 4090008,
                            "type": "self",
                            "view": "dialogObject"
                        }
                    ],
                    "desc": "Renders the dialog on screen. If this is an option dialog, returns the id of the selected option (see dialog:addOption). If this is a checkbox dialog, returns 0 if OK was pressed, -1 if Exit was pressed. Use dialog:getCheckboxState to query the individual checkboxes. This method can only be called once per dialog. It will return an error if invoked a second time.",
                    "finish": 4090032,
                    "returns": [
                        {
                            "name": "integer",
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": 4090000,
                    "type": "function",
                    "view": "(method) dialogObject:show()\n  -> integer: integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 4090026,
                "name": "show",
                "start": 4090009,
                "type": "setmethod"
            },
            {
                "desc": "(get/set) Returns the title of the dialog.",
                "extends": {
                    "finish": 3790022,
                    "start": 3790016,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 3790022,
                            "start": 3790016,
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 3790022,
                "name": "title",
                "start": 3790010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set) Returns the width of the dialog.",
                "extends": {
                    "finish": 3800023,
                    "start": 3800016,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 3800023,
                            "start": 3800016,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 3800023,
                "name": "width",
                "start": 3800010,
                "type": "doc.field"
            }
        ],
        "name": "dialogObject",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/discreteEventsRegistrar.lua",
                "finish": 240024,
                "start": 240010,
                "type": "doc.class"
            }
        ],
        "desc": "The Discrete Events Registration Module allows the scenario designer to \nregister code for events in discrete chunks, instead of having to program out\nall the logic for events of a certain type in the same place.  Note, however, that \nthe order of execution of different discrete events is not guaranteed.  If you need\nevents to happen in a specific order, you should either progrgram them all in the same\ndiscrete event, or use either `consolidatedEvents.lua` or the appropriate file in the\n`EventFiles` directory.  To import this module, use the following code:\n```lua\nlocal discreteEvents = require(\"discreteEventsRegistrar\")\n```\n    ",
        "fields": [
            {
                "extends": {
                    "finish": 620041,
                    "start": 620028,
                    "type": "getlocal",
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/discreteEventsRegistrar.lua",
                "finish": 620025,
                "name": "getVersion",
                "start": 620000,
                "type": "setfield"
            },
            {
                "desc": "Registers a function that will be called during civ.scen.onLoad, with which you can link state tables from inside individual modules.  `stateTable` is the table which is added to the saved game, `stateTableKeys` is a record of keys already used in the stateTable, and by adding keys, you can avoid accidental collision. Example:\n```lua\nlocal delayedActionState = \"state not linked\"\nlocal savedActions = \"state not linked\"\nlocal function linkState(tableInStateTable)\n    if type(tableInStateTable) == \"table\" then\n        delayedActionState = tableInStateTable\n    else\n        error(\"linkState: linkState takes a table as an argument.\")\n    end\n    delayedActionState.savedActions = delayedActionState.savedActions or {}\n    savedActions = delayedActionState.savedActions\nend\ndelayedAction.linkState = linkState\ndiscreteEvents.linkStateToModules(function(state,stateTableKeys)\n    local keyName = \"delayedAction\"\n    if stateTableKeys[keyName] then\n        error('\"'..keyName..'\" is used as a key for the state table on at least two occasions.')\n    else\n        stateTableKeys[keyName] = true\n    end\n    -- link the state table to the module\n    state[keyName] = state[keyName] or {}\n    linkState(state[keyName])\nend)\n```\n",
                "extends": {
                    "args": [
                        {
                            "finish": 7780047,
                            "name": "code",
                            "start": 7780043,
                            "type": "local",
                            "view": "fun(stateTable: table, stateTableKeys: table<string, true>)"
                        }
                    ],
                    "desc": "Registers a function that will be called during civ.scen.onLoad, with which you can link state tables from inside individual modules.  `stateTable` is the table which is added to the saved game, `stateTableKeys` is a record of keys already used in the stateTable, and by adding keys, you can avoid accidental collision. Example:\n```lua\nlocal delayedActionState = \"state not linked\"\nlocal savedActions = \"state not linked\"\nlocal function linkState(tableInStateTable)\n    if type(tableInStateTable) == \"table\" then\n        delayedActionState = tableInStateTable\n    else\n        error(\"linkState: linkState takes a table as an argument.\")\n    end\n    delayedActionState.savedActions = delayedActionState.savedActions or {}\n    savedActions = delayedActionState.savedActions\nend\ndelayedAction.linkState = linkState\ndiscreteEvents.linkStateToModules(function(state,stateTableKeys)\n    local keyName = \"delayedAction\"\n    if stateTableKeys[keyName] then\n        error('\"'..keyName..'\" is used as a key for the state table on at least two occasions.')\n    else\n        stateTableKeys[keyName] = true\n    end\n    -- link the state table to the module\n    state[keyName] = state[keyName] or {}\n    linkState(state[keyName])\nend)\n```\n",
                    "finish": 7800003,
                    "start": 7780000,
                    "type": "function",
                    "view": "function discreteEvents.linkStateToModules(code: fun(stateTable: table, stateTableKeys: table<string, true>))"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/discreteEventsRegistrar.lua",
                "finish": 7780042,
                "name": "linkStateToModules",
                "start": 7780009,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 600038,
                    "start": 600028,
                    "type": "getlocal",
                    "view": "function"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/discreteEventsRegistrar.lua",
                "finish": 600025,
                "name": "minVersion",
                "start": 600000,
                "type": "setfield"
            },
            {
                "desc": "Registers a function to be called every time a unit is activated. The callback takes the unit activated as a parameter, and the source of unit activation. `source` is `true` if activated by keyboard or mouse click, `false` if activated by the game itself. `repeatMove` is `true` if it's a repeat activation caused by moving (see civ.scen.compatibility), `false` otherwise.\nAs a Discrete Event, this function can be called multiple times, and all code will be registered to the event.",
                "extends": {
                    "args": [
                        {
                            "finish": 5110045,
                            "name": "code",
                            "start": 5110041,
                            "type": "local",
                            "view": "fun(unit: unitObject, source: boolean, repeatMove: boolean)"
                        }
                    ],
                    "desc": "Registers a function to be called every time a unit is activated. The callback takes the unit activated as a parameter, and the source of unit activation. `source` is `true` if activated by keyboard or mouse click, `false` if activated by the game itself. `repeatMove` is `true` if it's a repeat activation caused by moving (see civ.scen.compatibility), `false` otherwise.\nAs a Discrete Event, this function can be called multiple times, and all code will be registered to the event.",
                    "finish": 5130003,
                    "start": 5110032,
                    "type": "function",
                    "view": "function discreteEvents.onActivateUnit(code: fun(unit: unitObject, source: boolean, repeatMove: boolean))"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/discreteEventsRegistrar.lua",
                "finish": 5110029,
                "name": "onActivateUnit",
                "start": 5110000,
                "type": "setfield"
            },
            {
                "desc": " Use discreteEvents.onTribeTurnBegin instead",
                "extends": {
                    "args": [
                        {
                            "finish": 8450047,
                            "name": "code",
                            "start": 8450043,
                            "type": "local",
                            "view": "fun(turn: integer, tribe: tribeObject)"
                        }
                    ],
                    "desc": " Use discreteEvents.onTribeTurnBegin instead",
                    "finish": 8470003,
                    "start": 8450000,
                    "type": "function",
                    "view": "function discreteEvents.onBeforeProduction(code: fun(turn: integer, tribe: tribeObject))"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/discreteEventsRegistrar.lua",
                "finish": 8450042,
                "name": "onBeforeProduction",
                "start": 8450009,
                "type": "setfield"
            },
            {
                "desc": "Registers a function that is called when a unit is bribed successfully. unit.owner is the new owner at this point, `previousOwner` the old owner.\nAs a Discrete Event, this function can be called multiple times, and all code will be registered to the event.",
                "extends": {
                    "args": [
                        {
                            "finish": 5190040,
                            "name": "code",
                            "start": 5190036,
                            "type": "local",
                            "view": "fun(unit: unitObject, previousOwner: tribeObject)"
                        }
                    ],
                    "desc": "Registers a function that is called when a unit is bribed successfully. unit.owner is the new owner at this point, `previousOwner` the old owner.\nAs a Discrete Event, this function can be called multiple times, and all code will be registered to the event.",
                    "finish": 5210003,
                    "start": 5190000,
                    "type": "function",
                    "view": "function discreteEvents.onBribeUnit(code: fun(unit: unitObject, previousOwner: tribeObject))"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/discreteEventsRegistrar.lua",
                "finish": 5190035,
                "name": "onBribeUnit",
                "start": 5190009,
                "type": "setfield"
            },
            {
                "desc": "Registers a function that is called to determine if `unit` can found a city at the unit's location. `advancedTribe` is `true` when picking up a hut with `unit` triggers an advanced tribe. Return `true` to allow, `false` to disallow.\n\nAs a Discrete Event, this function can be called multiple times, and all code will be registered to the event.\nThis is combined with the consolidated events, the legacy events, and the separate onCanFoundCity.lua file.  If any of these functions return false, the city can't be built.",
                "extends": {
                    "args": [
                        {
                            "finish": 5300043,
                            "name": "code",
                            "start": 5300039,
                            "type": "local",
                            "view": "fun(unit: unitObject, advancedTribe: boolean):boolean"
                        }
                    ],
                    "desc": "Registers a function that is called to determine if `unit` can found a city at the unit's location. `advancedTribe` is `true` when picking up a hut with `unit` triggers an advanced tribe. Return `true` to allow, `false` to disallow.\n\nAs a Discrete Event, this function can be called multiple times, and all code will be registered to the event.\nThis is combined with the consolidated events, the legacy events, and the separate onCanFoundCity.lua file.  If any of these functions return false, the city can't be built.",
                    "finish": 5320003,
                    "start": 5300000,
                    "type": "function",
                    "view": "function discreteEvents.onCanFoundCity(code: fun(unit: unitObject, advancedTribe: boolean):boolean)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/discreteEventsRegistrar.lua",
                "finish": 5300038,
                "name": "onCanFoundCity",
                "start": 5300009,
                "type": "setfield"
            },
            {
                "desc": "Registers a function that is called when a tribe's spaceship reaches its target. Just registering this function causes the game to not end at this point (\"endgame override\").\n\nAs a Discrete Event, this function can be called multiple times, and all code will be registered to the event.",
                "extends": {
                    "args": [
                        {
                            "finish": 5390046,
                            "name": "code",
                            "start": 5390042,
                            "type": "local",
                            "view": "fun(tribe: tribeObject)"
                        }
                    ],
                    "desc": "Registers a function that is called when a tribe's spaceship reaches its target. Just registering this function causes the game to not end at this point (\"endgame override\").\n\nAs a Discrete Event, this function can be called multiple times, and all code will be registered to the event.",
                    "finish": 5410003,
                    "start": 5390000,
                    "type": "function",
                    "view": "function discreteEvents.onCentauriArrival(code: fun(tribe: tribeObject))"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/discreteEventsRegistrar.lua",
                "finish": 5390041,
                "name": "onCentauriArrival",
                "start": 5390009,
                "type": "setfield"
            },
            {
                "desc": "Registers code to be executed during civ.scen.onTurn and civ.scen.onScenarioLoaded.  This way, the correct \"season\" can be chosen when the scenario is loaded, and can be updated for each new turn.\n    \nAs a Discrete Event, this function can be called multiple times, and all code will be registered to the event.",
                "extends": {
                    "args": [
                        {
                            "finish": 7870043,
                            "name": "code",
                            "start": 7870039,
                            "type": "local",
                            "view": "fun()"
                        }
                    ],
                    "desc": "Registers code to be executed during civ.scen.onTurn and civ.scen.onScenarioLoaded.  This way, the correct \"season\" can be chosen when the scenario is loaded, and can be updated for each new turn.\n    \nAs a Discrete Event, this function can be called multiple times, and all code will be registered to the event.",
                    "finish": 7890003,
                    "start": 7870000,
                    "type": "function",
                    "view": "function discreteEvents.onChooseSeason(code: fun())"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/discreteEventsRegistrar.lua",
                "finish": 7870038,
                "name": "onChooseSeason",
                "start": 7870009,
                "type": "setfield"
            },
            {
                "desc": "Registers a function that is called when a city is destroyed.\n\nAs a Discrete Event, this function can be called multiple times, and all code will be registered to the event.",
                "extends": {
                    "args": [
                        {
                            "finish": 5500044,
                            "name": "code",
                            "start": 5500040,
                            "type": "local",
                            "view": "fun(city: cityObject)"
                        }
                    ],
                    "desc": "Registers a function that is called when a city is destroyed.\n\nAs a Discrete Event, this function can be called multiple times, and all code will be registered to the event.",
                    "finish": 5520003,
                    "start": 5500000,
                    "type": "function",
                    "view": "function discreteEvents.onCityDestroyed(code: fun(city: cityObject))"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/discreteEventsRegistrar.lua",
                "finish": 5500039,
                "name": "onCityDestroyed",
                "start": 5500009,
                "type": "setfield"
            },
            {
                "desc": "Registers a function to be called every time a city is founded. The callback takes the city as a parameter, and can optionally return a function (since 0.18) that is called to perform cleanup when the user cancels founding the city.\n\nAs a Discrete Event, this function can be called multiple times, and all code will be registered to the event.  This includes any code returned to cleanup after the user cancels founding the city.",
                "extends": {
                    "args": [
                        {
                            "finish": 5600042,
                            "name": "code",
                            "start": 5600038,
                            "type": "local",
                            "view": "fun(city: cityObject)|fun(city: cityObject):fun()"
                        }
                    ],
                    "desc": "Registers a function to be called every time a city is founded. The callback takes the city as a parameter, and can optionally return a function (since 0.18) that is called to perform cleanup when the user cancels founding the city.\n\nAs a Discrete Event, this function can be called multiple times, and all code will be registered to the event.  This includes any code returned to cleanup after the user cancels founding the city.",
                    "finish": 5620003,
                    "start": 5600000,
                    "type": "function",
                    "view": "function discreteEvents.onCityFounded(code: fun(city: cityObject)|fun(city: cityObject):fun())"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/discreteEventsRegistrar.lua",
                "finish": 5600037,
                "name": "onCityFounded",
                "start": 5600009,
                "type": "setfield"
            },
            {
                "desc": "Registers a function that is called immediately before each city is processed (which happens at the start of a tribe's turn).  (This is achieved through use of civ.scen.onCalculateCityYield.)\n\nAs a Discrete Event, this function can be called multiple times, and all code will be registered to the event.",
                "extends": {
                    "args": [
                        {
                            "finish": 7460044,
                            "name": "code",
                            "start": 7460040,
                            "type": "local",
                            "view": "fun(city: cityObject)"
                        }
                    ],
                    "desc": "Registers a function that is called immediately before each city is processed (which happens at the start of a tribe's turn).  (This is achieved through use of civ.scen.onCalculateCityYield.)\n\nAs a Discrete Event, this function can be called multiple times, and all code will be registered to the event.",
                    "finish": 7480003,
                    "start": 7460000,
                    "type": "function",
                    "view": "function discreteEvents.onCityProcessed(code: fun(city: cityObject))"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/discreteEventsRegistrar.lua",
                "finish": 7460039,
                "name": "onCityProcessed",
                "start": 7460009,
                "type": "setfield"
            },
            {
                "desc": "Registers a function that is called when a tribe's cities have been processed for that turn. See `onTurn` for interaction with other \"turn\" triggers.\n\nAs a Discrete Event, this function can be called multiple times, and all code will be registered to the event.",
                "extends": {
                    "args": [
                        {
                            "finish": 5700053,
                            "name": "code",
                            "start": 5700049,
                            "type": "local",
                            "view": "fun(turn: integer, tribe: tribeObject)"
                        }
                    ],
                    "desc": "Registers a function that is called when a tribe's cities have been processed for that turn. See `onTurn` for interaction with other \"turn\" triggers.\n\nAs a Discrete Event, this function can be called multiple times, and all code will be registered to the event.",
                    "finish": 5720003,
                    "start": 5700000,
                    "type": "function",
                    "view": "function discreteEvents.onCityProcessingComplete(code: fun(turn: integer, tribe: tribeObject))"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/discreteEventsRegistrar.lua",
                "finish": 5700048,
                "name": "onCityProcessingComplete",
                "start": 5700009,
                "type": "setfield"
            },
            {
                "desc": "Registers a function that is called when a city completes its production order. The produced item `prod` is either a unit, improvement or wonder (this can be checked with the civ.is* functions).\n\nAs a Discrete Event, this function can be called multiple times, and all code will be registered to the event.",
                "extends": {
                    "args": [
                        {
                            "finish": 5830045,
                            "name": "code",
                            "start": 5830041,
                            "type": "local",
                            "view": "fun(city: cityObject, prod: improvementObject|unitObject|wonderObject)"
                        }
                    ],
                    "desc": "Registers a function that is called when a city completes its production order. The produced item `prod` is either a unit, improvement or wonder (this can be checked with the civ.is* functions).\n\nAs a Discrete Event, this function can be called multiple times, and all code will be registered to the event.",
                    "finish": 5850003,
                    "start": 5830000,
                    "type": "function",
                    "view": "function discreteEvents.onCityProduction(code: fun(city: cityObject, prod: improvementObject|unitObject|wonderObject))"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/discreteEventsRegistrar.lua",
                "finish": 5830040,
                "name": "onCityProduction",
                "start": 5830009,
                "type": "setfield"
            },
            {
                "desc": "Registers a function that is called when a city is captured. `city` is the city changing hands, at this point city.owner is the new owner already. `defender` is the old owner.\n\nAs a Discrete Event, this function can be called multiple times, and all code will be registered to the event.",
                "extends": {
                    "args": [
                        {
                            "finish": 5930040,
                            "name": "code",
                            "start": 5930036,
                            "type": "local",
                            "view": "fun(city: cityObject, defender: tribeObject)"
                        }
                    ],
                    "desc": "Registers a function that is called when a city is captured. `city` is the city changing hands, at this point city.owner is the new owner already. `defender` is the old owner.\n\nAs a Discrete Event, this function can be called multiple times, and all code will be registered to the event.",
                    "finish": 5950003,
                    "start": 5930000,
                    "type": "function",
                    "view": "function discreteEvents.onCityTaken(code: fun(city: cityObject, defender: tribeObject))"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/discreteEventsRegistrar.lua",
                "finish": 5930035,
                "name": "onCityTaken",
                "start": 5930009,
                "type": "setfield"
            },
            {
                "desc": "Registers code to be executed when a unit enters a tile.  (Implemented using several civ.scen functions.)  `unit` is the unit which entered the tile, `previousTile` is where the unit was before it moved, and `previousDomainSpec` is the value of unit.domainSpec before it moved into the square (useful for units with range).\n\nAs a Discrete Event, this function can be called multiple times, and all code will be registered to the event.",
                "extends": {
                    "args": [
                        {
                            "finish": 7960040,
                            "name": "code",
                            "start": 7960036,
                            "type": "local",
                            "view": "fun(unit: unitObject, previousTile: tileObject, previousDomainSpec: integer)"
                        }
                    ],
                    "desc": "Registers code to be executed when a unit enters a tile.  (Implemented using several civ.scen functions.)  `unit` is the unit which entered the tile, `previousTile` is where the unit was before it moved, and `previousDomainSpec` is the value of unit.domainSpec before it moved into the square (useful for units with range).\n\nAs a Discrete Event, this function can be called multiple times, and all code will be registered to the event.",
                    "finish": 7980003,
                    "start": 7960000,
                    "type": "function",
                    "view": "function discreteEvents.onEnterTile(code: fun(unit: unitObject, previousTile: tileObject, previousDomainSpec: integer))"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/discreteEventsRegistrar.lua",
                "finish": 7960035,
                "name": "onEnterTile",
                "start": 7960009,
                "type": "setfield"
            },
            {
                "desc": " Registers an onEnterTile event before all other onEnterTile events.  It is used for \"transport\" events, so that units can \"drag\" other units into the tile before the regular onEnterTile event.",
                "extends": {
                    "args": [
                        {
                            "finish": 8020048,
                            "name": "code",
                            "start": 8020044,
                            "type": "local",
                            "view": "fun(unit: unitObject, previousTile: tileObject, previousDomainSpec: integer)"
                        }
                    ],
                    "desc": " Registers an onEnterTile event before all other onEnterTile events.  It is used for \"transport\" events, so that units can \"drag\" other units into the tile before the regular onEnterTile event.",
                    "finish": 8040003,
                    "start": 8020000,
                    "type": "function",
                    "view": "function discreteEvents.onEnterTilePriority(code: fun(unit: unitObject, previousTile: tileObject, previousDomainSpec: integer))"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/discreteEventsRegistrar.lua",
                "finish": 8020043,
                "name": "onEnterTilePriority",
                "start": 8020009,
                "type": "setfield"
            },
            {
                "desc": "Registers code to be executed when a unit has been given its last order for the turn.  That is, when a new unit is active, and the previous unit has spent all its movement points (or, at the end of the turn)\n",
                "extends": {
                    "args": [
                        {
                            "finish": 8100046,
                            "name": "code",
                            "start": 8100042,
                            "type": "local",
                            "view": "fun(unit: unitObject)"
                        }
                    ],
                    "desc": "Registers code to be executed when a unit has been given its last order for the turn.  That is, when a new unit is active, and the previous unit has spent all its movement points (or, at the end of the turn)\n",
                    "finish": 8120003,
                    "start": 8100000,
                    "type": "function",
                    "view": "function discreteEvents.onFinalOrderGiven(code: fun(unit: unitObject))"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/discreteEventsRegistrar.lua",
                "finish": 8100041,
                "name": "onFinalOrderGiven",
                "start": 8100009,
                "type": "setfield"
            },
            {
                "desc": "<br>Registers a function that is called when the game ends. `reason` is an integer between 1 and 6:\n<br>1 and 2 - Space race victory. This does not trigger if `onCentauriArrival` has a callback registered. 1 means victory by active player.\n<br>3 - Conquest victory\n<br>4 - Defeat\n<br>5 - Retirement\n<br>6 - Macro ENDGAME action\n<br>Return `true` to end the game, `false` to keep playing.\n--\nAs a Discrete Event, this function can be called multiple times, and all code will be registered to the event.\nThis is combined with the consolidated events, the legacy events, and the separate onGameEnds.lua file. If any of these return false, the game end is prevented.",
                "extends": {
                    "args": [
                        {
                            "finish": 6100039,
                            "name": "code",
                            "start": 6100035,
                            "type": "local",
                            "view": "fun(reason: gameEndReasons):(gameIsOver: boolean)"
                        }
                    ],
                    "desc": "<br>Registers a function that is called when the game ends. `reason` is an integer between 1 and 6:\n<br>1 and 2 - Space race victory. This does not trigger if `onCentauriArrival` has a callback registered. 1 means victory by active player.\n<br>3 - Conquest victory\n<br>4 - Defeat\n<br>5 - Retirement\n<br>6 - Macro ENDGAME action\n<br>Return `true` to end the game, `false` to keep playing.\n--\nAs a Discrete Event, this function can be called multiple times, and all code will be registered to the event.\nThis is combined with the consolidated events, the legacy events, and the separate onGameEnds.lua file. If any of these return false, the game end is prevented.",
                    "finish": 6120003,
                    "start": 6100000,
                    "type": "function",
                    "view": "function discreteEvents.onGameEnds(code: fun(reason: gameEndReasons):(gameIsOver: boolean))"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/discreteEventsRegistrar.lua",
                "finish": 6100034,
                "name": "onGameEnds",
                "start": 6100009,
                "type": "setfield"
            },
            {
                "desc": "Registers a function to be called every time a key is pressed.\n\nAs a Discrete Event, this function can be called multiple times, and all code will be registered to the event.\n\n@*param* `code` โ (keyCode:integer)",
                "extends": {
                    "args": [
                        {
                            "desc": "(keyCode:integer)",
                            "finish": 6200039,
                            "name": "code",
                            "start": 6200035,
                            "type": "local",
                            "view": "function"
                        }
                    ],
                    "desc": "Registers a function to be called every time a key is pressed.\n\nAs a Discrete Event, this function can be called multiple times, and all code will be registered to the event.\n\n@*param* `code` โ (keyCode:integer)",
                    "finish": 6220003,
                    "start": 6200000,
                    "type": "function",
                    "view": "function discreteEvents.onKeyPress(code: function)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/discreteEventsRegistrar.lua",
                "finish": 6200034,
                "name": "onKeyPress",
                "start": 6200009,
                "type": "setfield"
            },
            {
                "desc": "Registers a function that is called when two tribes attempt negotiations. `talker` is the tribe initiating the contact, `listener` the receiver. Return `true` to allow the negotiations to commence, `false` to deny.\n\nAs a Discrete Event, this function can be called multiple times, and all code will be registered to the event.\nThis is combined with the consolidated events, the legacy events, and the separate onNegotiation.lua file.  If any of these return false, then negotiation is prevented.",
                "extends": {
                    "args": [
                        {
                            "finish": 6330042,
                            "name": "code",
                            "start": 6330038,
                            "type": "local",
                            "view": "fun(talker: tribeObject, listener: tribeObject):(canTalk: boolean)"
                        }
                    ],
                    "desc": "Registers a function that is called when two tribes attempt negotiations. `talker` is the tribe initiating the contact, `listener` the receiver. Return `true` to allow the negotiations to commence, `false` to deny.\n\nAs a Discrete Event, this function can be called multiple times, and all code will be registered to the event.\nThis is combined with the consolidated events, the legacy events, and the separate onNegotiation.lua file.  If any of these return false, then negotiation is prevented.",
                    "finish": 6350003,
                    "start": 6330000,
                    "type": "function",
                    "view": "function discreteEvents.onNegotiation(code: fun(talker: tribeObject, listener: tribeObject):(canTalk: boolean))"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/discreteEventsRegistrar.lua",
                "finish": 6330037,
                "name": "onNegotiation",
                "start": 6330009,
                "type": "setfield"
            },
            {
                "desc": "Registers a function that is called when the game is saved.\n\nAs a Discrete Event, this function can be called multiple times, and all code will be registered to the event.  However, you can't add extra data to be saved on the end of the file with this function.",
                "extends": {
                    "args": [
                        {
                            "finish": 6450035,
                            "name": "code",
                            "start": 6450031,
                            "type": "local",
                            "view": "fun()"
                        }
                    ],
                    "desc": "Registers a function that is called when the game is saved.\n\nAs a Discrete Event, this function can be called multiple times, and all code will be registered to the event.  However, you can't add extra data to be saved on the end of the file with this function.",
                    "finish": 6470003,
                    "start": 6450000,
                    "type": "function",
                    "view": "function discreteEvents.onSave(code: fun())"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/discreteEventsRegistrar.lua",
                "finish": 6450030,
                "name": "onSave",
                "start": 6450009,
                "type": "setfield"
            },
            {
                "desc": "Registers a function that is called when the scenario is loaded.  (This is whenever a game is loaded, not just when the scenario is started.)\n\nAs a Discrete Event, this function can be called multiple times, and all code will be registered to the event.",
                "extends": {
                    "args": [
                        {
                            "finish": 6550045,
                            "name": "code",
                            "start": 6550041,
                            "type": "local",
                            "view": "fun()"
                        }
                    ],
                    "desc": "Registers a function that is called when the scenario is loaded.  (This is whenever a game is loaded, not just when the scenario is started.)\n\nAs a Discrete Event, this function can be called multiple times, and all code will be registered to the event.",
                    "finish": 6570003,
                    "start": 6550000,
                    "type": "function",
                    "view": "function discreteEvents.onScenarioLoaded(code: fun())"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/discreteEventsRegistrar.lua",
                "finish": 6550040,
                "name": "onScenarioLoaded",
                "start": 6550009,
                "type": "setfield"
            },
            {
                "desc": "Registers a function that is called when a schism is triggered. This happens when the capital of a AI-controlled tribe with more than four cities is captured, and, if the attacker is human-controlled, it is ranked lower in power than the defender. If the attacker is AI-controlled the best human tribe must be ranked lower than the defender for the schism to trigger.\nIf the schism is allowed, a new tribe will be created that takes over about half the cities of the old tribe. If no new tribe can be created, the schism does not occur.\nReturn `true` to allow the schism to happen, `false` to deny.\n\nAs a Discrete Event, this function can be called multiple times, and all code will be registered to the event.\nThis is combined with the consolidated events, the legacy events, and the separate onSchism.lua file.  If any of these return false, then schism is prevented.",
                "extends": {
                    "args": [
                        {
                            "finish": 6680037,
                            "name": "code",
                            "start": 6680033,
                            "type": "local",
                            "view": "fun(tribe: tribeObject):(allowSchism: boolean)"
                        }
                    ],
                    "desc": "Registers a function that is called when a schism is triggered. This happens when the capital of a AI-controlled tribe with more than four cities is captured, and, if the attacker is human-controlled, it is ranked lower in power than the defender. If the attacker is AI-controlled the best human tribe must be ranked lower than the defender for the schism to trigger.\nIf the schism is allowed, a new tribe will be created that takes over about half the cities of the old tribe. If no new tribe can be created, the schism does not occur.\nReturn `true` to allow the schism to happen, `false` to deny.\n\nAs a Discrete Event, this function can be called multiple times, and all code will be registered to the event.\nThis is combined with the consolidated events, the legacy events, and the separate onSchism.lua file.  If any of these return false, then schism is prevented.",
                    "finish": 6700003,
                    "start": 6680000,
                    "type": "function",
                    "view": "function discreteEvents.onSchism(code: fun(tribe: tribeObject):(allowSchism: boolean))"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/discreteEventsRegistrar.lua",
                "finish": 6680032,
                "name": "onSchism",
                "start": 6680009,
                "type": "setfield"
            },
            {
                "desc": "Registers a function that is called at the start of a tribe's turn. See `onTurn` for interaction with other \"turn\" triggers.\n\nAs a Discrete Event, this function can be called multiple times, and all code will be registered to the event.",
                "extends": {
                    "args": [
                        {
                            "finish": 6790045,
                            "name": "code",
                            "start": 6790041,
                            "type": "local",
                            "view": "fun(turn: integer, tribe: tribeObject)"
                        }
                    ],
                    "desc": "Registers a function that is called at the start of a tribe's turn. See `onTurn` for interaction with other \"turn\" triggers.\n\nAs a Discrete Event, this function can be called multiple times, and all code will be registered to the event.",
                    "finish": 6810003,
                    "start": 6790000,
                    "type": "function",
                    "view": "function discreteEvents.onTribeTurnBegin(code: fun(turn: integer, tribe: tribeObject))"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/discreteEventsRegistrar.lua",
                "finish": 6790040,
                "name": "onTribeTurnBegin",
                "start": 6790009,
                "type": "setfield"
            },
            {
                "desc": "Registers a function that is called at the end of a tribe's turn. See `onTurn` for interaction with other \"turn\" triggers.\n\nAs a Discrete Event, this function can be called multiple times, and all code will be registered to the event.",
                "extends": {
                    "args": [
                        {
                            "finish": 6890043,
                            "name": "code",
                            "start": 6890039,
                            "type": "local",
                            "view": "fun(turn: integer, tribe: tribeObject)"
                        }
                    ],
                    "desc": "Registers a function that is called at the end of a tribe's turn. See `onTurn` for interaction with other \"turn\" triggers.\n\nAs a Discrete Event, this function can be called multiple times, and all code will be registered to the event.",
                    "finish": 6910003,
                    "start": 6890000,
                    "type": "function",
                    "view": "function discreteEvents.onTribeTurnEnd(code: fun(turn: integer, tribe: tribeObject))"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/discreteEventsRegistrar.lua",
                "finish": 6890038,
                "name": "onTribeTurnEnd",
                "start": 6890009,
                "type": "setfield"
            },
            {
                "desc": "Registers a function that is called at the start of a turn. The basic sequence of this and other \"turn\" triggers is as follows:\n<br>`onTurn` fires\n<br>Non-tribe-specific updates take place\n<br>`onTribeTurnBegin` fires for tribe 0.\n<br>Tribe 0 cities are processed.\n<br>`onCityProcessingComplete` fires for tribe 0 (this fires even when a tribe has no cities).\n<br>Tribe 0 units move\n<br>`onTribeTurnEnd` fires for tribe 0.\n<br>All active tribes are processed in order according to the sequence for tribe 0\n<br>`onTribeTurnEnd` fires for tribe 7.\n<br>`onTurn` fires for the next turn\n\nAs a Discrete Event, this function can be called multiple times, and all code will be registered to the event.",
                "extends": {
                    "args": [
                        {
                            "finish": 7090035,
                            "name": "code",
                            "start": 7090031,
                            "type": "local",
                            "view": "fun(turn: integer)"
                        }
                    ],
                    "desc": "Registers a function that is called at the start of a turn. The basic sequence of this and other \"turn\" triggers is as follows:\n<br>`onTurn` fires\n<br>Non-tribe-specific updates take place\n<br>`onTribeTurnBegin` fires for tribe 0.\n<br>Tribe 0 cities are processed.\n<br>`onCityProcessingComplete` fires for tribe 0 (this fires even when a tribe has no cities).\n<br>Tribe 0 units move\n<br>`onTribeTurnEnd` fires for tribe 0.\n<br>All active tribes are processed in order according to the sequence for tribe 0\n<br>`onTribeTurnEnd` fires for tribe 7.\n<br>`onTurn` fires for the next turn\n\nAs a Discrete Event, this function can be called multiple times, and all code will be registered to the event.",
                    "finish": 7110003,
                    "start": 7090000,
                    "type": "function",
                    "view": "function discreteEvents.onTurn(code: fun(turn: integer))"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/discreteEventsRegistrar.lua",
                "finish": 7090030,
                "name": "onTurn",
                "start": 7090009,
                "type": "setfield"
            },
            {
                "desc": "Registers a function that is called whenever a unit is killed, either in standard Civ II combat or by events. `loser` is the unit that is killed, `winner` is the unit responsible for it.  `aggressor` is the unit that initiated the attack, and `victim` is the unit that was attacked.  `loserLocation` is the tile where the unit that lost combat stood (if the loser is the aggressor, loser.location and aggressor.location return a tile off the map).  `winnerVetStatus` and `loserVetStatus` are true if the corresponding unit was a veteran before combat took place.  (winner.veteran is checked after the unit is promoted) \n\nAs a Discrete Event, this function can be called multiple times, and all code will be registered to the event.",
                "extends": {
                    "args": [
                        {
                            "finish": 7280043,
                            "name": "code",
                            "start": 7280039,
                            "type": "local",
                            "view": "fun(loser: unitObject, winner: unitObject, aggressor: unitObject, victim: unitObject, loserLocation: tileObject, winnerVetStatus: boolean, loserVetStatus: boolean)"
                        }
                    ],
                    "desc": "Registers a function that is called whenever a unit is killed, either in standard Civ II combat or by events. `loser` is the unit that is killed, `winner` is the unit responsible for it.  `aggressor` is the unit that initiated the attack, and `victim` is the unit that was attacked.  `loserLocation` is the tile where the unit that lost combat stood (if the loser is the aggressor, loser.location and aggressor.location return a tile off the map).  `winnerVetStatus` and `loserVetStatus` are true if the corresponding unit was a veteran before combat took place.  (winner.veteran is checked after the unit is promoted) \n\nAs a Discrete Event, this function can be called multiple times, and all code will be registered to the event.",
                    "finish": 7300003,
                    "start": 7280000,
                    "type": "function",
                    "view": "function discreteEvents.onUnitDefeated(code: fun(loser: unitObject, winner: unitObject, aggressor: unitObject, victim: unitObject, loserLocation: tileObject, winnerVetStatus: boolean, loserVetStatus: boolean))"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/discreteEventsRegistrar.lua",
                "finish": 7280038,
                "name": "onUnitDefeated",
                "start": 7280009,
                "type": "setfield"
            },
            {
                "desc": "Registers a function that is called when a unit is deleted (either through combat death, or by some other even, but not if the unit is disbanded).  `deletedUnit` is the unit being deleted, while `replacing unit` is the unit replacing it (e.g. from promotion/demotion), or _nil_ if there is no such unit.\n\nAs a Discrete Event, this function can be called multiple times, and all code will be registered to the event.",
                "extends": {
                    "args": [
                        {
                            "finish": 7370042,
                            "name": "code",
                            "start": 7370038,
                            "type": "local",
                            "view": "fun(deletedUnit: unitObject, replacingUnit: unitObject|nil)"
                        }
                    ],
                    "desc": "Registers a function that is called when a unit is deleted (either through combat death, or by some other even, but not if the unit is disbanded).  `deletedUnit` is the unit being deleted, while `replacing unit` is the unit replacing it (e.g. from promotion/demotion), or _nil_ if there is no such unit.\n\nAs a Discrete Event, this function can be called multiple times, and all code will be registered to the event.",
                    "finish": 7390003,
                    "start": 7370000,
                    "type": "function",
                    "view": "function discreteEvents.onUnitDeleted(code: fun(deletedUnit: unitObject, replacingUnit: unitObject|nil))"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/discreteEventsRegistrar.lua",
                "finish": 7370037,
                "name": "onUnitDeleted",
                "start": 7370009,
                "type": "setfield"
            },
            {
                "desc": "Registers a function that is called whenever a unit is killed in standard Civ II combat. `loser` is the unit that is killed, `winner` is the unit responsible for it.  `aggressor` is the unit that initiated the attack, and `victim` is the unit that was attacked.  `loserLocation` is the tile where the unit that lost combat stood (if the loser is the aggressor, loser.location and aggressor.location return a tile off the map).  `winnerVetStatus` and `loserVetStatus` are true if the corresponding unit was a veteran before combat took place.  (winner.veteran is checked after the unit is promoted) \n\nAs a Discrete Event, this function can be called multiple times, and all code will be registered to the event.",
                "extends": {
                    "args": [
                        {
                            "finish": 7190041,
                            "name": "code",
                            "start": 7190037,
                            "type": "local",
                            "view": "fun(loser: unitObject, winner: unitObject, aggressor: unitObject, victim: unitObject, loserLocation: tileObject, winnerVetStatus: boolean, loserVetStatus: boolean)"
                        }
                    ],
                    "desc": "Registers a function that is called whenever a unit is killed in standard Civ II combat. `loser` is the unit that is killed, `winner` is the unit responsible for it.  `aggressor` is the unit that initiated the attack, and `victim` is the unit that was attacked.  `loserLocation` is the tile where the unit that lost combat stood (if the loser is the aggressor, loser.location and aggressor.location return a tile off the map).  `winnerVetStatus` and `loserVetStatus` are true if the corresponding unit was a veteran before combat took place.  (winner.veteran is checked after the unit is promoted) \n\nAs a Discrete Event, this function can be called multiple times, and all code will be registered to the event.",
                    "finish": 7210003,
                    "start": 7190000,
                    "type": "function",
                    "view": "function discreteEvents.onUnitKilled(code: fun(loser: unitObject, winner: unitObject, aggressor: unitObject, victim: unitObject, loserLocation: tileObject, winnerVetStatus: boolean, loserVetStatus: boolean))"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/discreteEventsRegistrar.lua",
                "finish": 7190036,
                "name": "onUnitKilled",
                "start": 7190009,
                "type": "setfield"
            },
            {
                "desc": " state is the state table (after the buffer has been extracted)\n stateTableKeys are keys for the state table that have\n already been used, (this enables errors upon collision of keys) ",
                "extends": {
                    "args": [
                        {
                            "finish": 2710055,
                            "name": "state",
                            "start": 2710050,
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": 2710070,
                            "name": "stateTableKeys",
                            "start": 2710056,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": " state is the state table (after the buffer has been extracted)\n stateTableKeys are keys for the state table that have\n already been used, (this enables errors upon collision of keys) ",
                    "finish": 2750003,
                    "start": 2710000,
                    "type": "function",
                    "view": "function discreteEvents.performLinkStateToModules(state: any, stateTableKeys: any)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/discreteEventsRegistrar.lua",
                "finish": 2710049,
                "name": "performLinkStateToModules",
                "start": 2710009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 980050,
                            "name": "unit",
                            "start": 980046,
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": 980057,
                            "name": "source",
                            "start": 980051,
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": 980061,
                            "name": "rep",
                            "start": 980058,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "finish": 1020003,
                    "start": 980000,
                    "type": "function",
                    "view": "function discreteEvents.performOnActivateUnit(unit: any, source: any, rep: any)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/discreteEventsRegistrar.lua",
                "finish": 980045,
                "name": "performOnActivateUnit",
                "start": 980009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 2230053,
                            "name": "turn",
                            "start": 2230049,
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": 2230059,
                            "name": "tribe",
                            "start": 2230054,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "finish": 2270003,
                    "start": 2230000,
                    "type": "function",
                    "view": "function discreteEvents.performOnAfterProduction(turn: any, tribe: any)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/discreteEventsRegistrar.lua",
                "finish": 2230048,
                "name": "performOnAfterProduction",
                "start": 2230009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 2400054,
                            "name": "turn",
                            "start": 2400050,
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": 2400060,
                            "name": "tribe",
                            "start": 2400055,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "finish": 2440003,
                    "start": 2400000,
                    "type": "function",
                    "view": "function discreteEvents.performOnBeforeProduction(turn: any, tribe: any)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/discreteEventsRegistrar.lua",
                "finish": 2400049,
                "name": "performOnBeforeProduction",
                "start": 2400009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1080047,
                            "name": "unit",
                            "start": 1080043,
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": 1080061,
                            "name": "previousOwner",
                            "start": 1080048,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "finish": 1120003,
                    "start": 1080000,
                    "type": "function",
                    "view": "function discreteEvents.performOnBribeUnit(unit: any, previousOwner: any)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/discreteEventsRegistrar.lua",
                "finish": 1080042,
                "name": "performOnBribeUnit",
                "start": 1080009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 3670050,
                            "name": "unit",
                            "start": 3670046,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "finish": 3790003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "unknown"
                        }
                    ],
                    "start": 3670000,
                    "type": "function",
                    "view": "function discreteEvents.performOnCanFoundCity(unit: any)\n  -> unknown"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/discreteEventsRegistrar.lua",
                "finish": 3670045,
                "name": "performOnCanFoundCity",
                "start": 3670009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 2810054,
                            "name": "tribe",
                            "start": 2810049,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "finish": 2850003,
                    "start": 2810000,
                    "type": "function",
                    "view": "function discreteEvents.performOnCentauriArrival(tribe: any)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/discreteEventsRegistrar.lua",
                "finish": 2810048,
                "name": "performOnCentauriArrival",
                "start": 2810009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [],
                    "finish": 3510003,
                    "start": 3470000,
                    "type": "function",
                    "view": "function discreteEvents.performOnChooseSeason()"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/discreteEventsRegistrar.lua",
                "finish": 3470045,
                "name": "performOnChooseSeason",
                "start": 3470009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1180051,
                            "name": "city",
                            "start": 1180047,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "finish": 1220003,
                    "start": 1180000,
                    "type": "function",
                    "view": "function discreteEvents.performOnCityDestroyed(city: any)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/discreteEventsRegistrar.lua",
                "finish": 1180046,
                "name": "performOnCityDestroyed",
                "start": 1180009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1270049,
                            "name": "city",
                            "start": 1270045,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "finish": 1450003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "function"
                        }
                    ],
                    "start": 1270000,
                    "type": "function",
                    "view": "function discreteEvents.performOnCityFounded(city: any)\n  -> function"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/discreteEventsRegistrar.lua",
                "finish": 1270044,
                "name": "performOnCityFounded",
                "start": 1270009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1490051,
                            "name": "city",
                            "start": 1490047,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "finish": 1530003,
                    "start": 1490000,
                    "type": "function",
                    "view": "function discreteEvents.performOnCityProcessed(city: any)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/discreteEventsRegistrar.lua",
                "finish": 1490046,
                "name": "performOnCityProcessed",
                "start": 1490009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 2320060,
                            "name": "turn",
                            "start": 2320056,
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": 2320066,
                            "name": "tribe",
                            "start": 2320061,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "finish": 2360003,
                    "start": 2320000,
                    "type": "function",
                    "view": "function discreteEvents.performOnCityProcessingComplete(turn: any, tribe: any)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/discreteEventsRegistrar.lua",
                "finish": 2320055,
                "name": "performOnCityProcessingComplete",
                "start": 2320009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1580052,
                            "name": "city",
                            "start": 1580048,
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": 1580057,
                            "name": "item",
                            "start": 1580053,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "finish": 1620003,
                    "start": 1580000,
                    "type": "function",
                    "view": "function discreteEvents.performOnCityProduction(city: any, item: any)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/discreteEventsRegistrar.lua",
                "finish": 1580047,
                "name": "performOnCityProduction",
                "start": 1580009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1680047,
                            "name": "city",
                            "start": 1680043,
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": 1680056,
                            "name": "defender",
                            "start": 1680048,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "finish": 1720003,
                    "start": 1680000,
                    "type": "function",
                    "view": "function discreteEvents.performOnCityTaken(city: any, defender: any)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/discreteEventsRegistrar.lua",
                "finish": 1680042,
                "name": "performOnCityTaken",
                "start": 1680009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 3930047,
                            "name": "unit",
                            "start": 3930043,
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": 3930060,
                            "name": "previousTile",
                            "start": 3930048,
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": 3930079,
                            "name": "previousDomainSpec",
                            "start": 3930061,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "finish": 3970003,
                    "start": 3930000,
                    "type": "function",
                    "view": "function discreteEvents.performOnEnterTile(unit: any, previousTile: any, previousDomainSpec: any)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/discreteEventsRegistrar.lua",
                "finish": 3930042,
                "name": "performOnEnterTile",
                "start": 3930009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 4040055,
                            "name": "unit",
                            "start": 4040051,
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": 4040068,
                            "name": "previousTile",
                            "start": 4040056,
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": 4040087,
                            "name": "previousDomainSpec",
                            "start": 4040069,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "finish": 4080003,
                    "start": 4040000,
                    "type": "function",
                    "view": "function discreteEvents.performOnEnterTilePriority(unit: any, previousTile: any, previousDomainSpec: any)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/discreteEventsRegistrar.lua",
                "finish": 4040050,
                "name": "performOnEnterTilePriority",
                "start": 4040009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 4140053,
                            "name": "unit",
                            "start": 4140049,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "finish": 4180003,
                    "start": 4140000,
                    "type": "function",
                    "view": "function discreteEvents.performOnFinalOrderGiven(unit: any)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/discreteEventsRegistrar.lua",
                "finish": 4140048,
                "name": "performOnFinalOrderGiven",
                "start": 4140009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 3100048,
                            "name": "reason",
                            "start": 3100042,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "finish": 3220003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "unknown"
                        }
                    ],
                    "start": 3100000,
                    "type": "function",
                    "view": "function discreteEvents.performOnGameEnds(reason: any)\n  -> unknown"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/discreteEventsRegistrar.lua",
                "finish": 3100041,
                "name": "performOnGameEnds",
                "start": 3100009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 3570047,
                            "name": "keyId",
                            "start": 3570042,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "finish": 3610003,
                    "start": 3570000,
                    "type": "function",
                    "view": "function discreteEvents.performOnKeyPress(keyId: any)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/discreteEventsRegistrar.lua",
                "finish": 3570041,
                "name": "performOnKeyPress",
                "start": 3570009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 2910051,
                            "name": "talker",
                            "start": 2910045,
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": 2910060,
                            "name": "listener",
                            "start": 2910052,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "finish": 3040003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "unknown"
                        }
                    ],
                    "start": 2910000,
                    "type": "function",
                    "view": "function discreteEvents.performOnNegotiation(talker: any, listener: any)\n  -> unknown"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/discreteEventsRegistrar.lua",
                "finish": 2910044,
                "name": "performOnNegotiation",
                "start": 2910009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [],
                    "finish": 3870003,
                    "start": 3830000,
                    "type": "function",
                    "view": "function discreteEvents.performOnSave()"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/discreteEventsRegistrar.lua",
                "finish": 3830037,
                "name": "performOnSave",
                "start": 3830009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [],
                    "finish": 1810003,
                    "start": 1770000,
                    "type": "function",
                    "view": "function discreteEvents.performOnScenarioLoaded()"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/discreteEventsRegistrar.lua",
                "finish": 1770047,
                "name": "performOnScenarioLoaded",
                "start": 1770009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 3280045,
                            "name": "tribe",
                            "start": 3280040,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "finish": 3410003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "unknown"
                        }
                    ],
                    "start": 3280000,
                    "type": "function",
                    "view": "function discreteEvents.performOnSchism(tribe: any)\n  -> unknown"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/discreteEventsRegistrar.lua",
                "finish": 3280039,
                "name": "performOnSchism",
                "start": 3280009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 2490052,
                            "name": "turn",
                            "start": 2490048,
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": 2490058,
                            "name": "tribe",
                            "start": 2490053,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "finish": 2530003,
                    "start": 2490000,
                    "type": "function",
                    "view": "function discreteEvents.performOnTribeTurnBegin(turn: any, tribe: any)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/discreteEventsRegistrar.lua",
                "finish": 2490047,
                "name": "performOnTribeTurnBegin",
                "start": 2490009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 2580050,
                            "name": "turn",
                            "start": 2580046,
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": 2580056,
                            "name": "tribe",
                            "start": 2580051,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "finish": 2620003,
                    "start": 2580000,
                    "type": "function",
                    "view": "function discreteEvents.performOnTribeTurnEnd(turn: any, tribe: any)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/discreteEventsRegistrar.lua",
                "finish": 2580045,
                "name": "performOnTribeTurnEnd",
                "start": 2580009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1860042,
                            "name": "turn",
                            "start": 1860038,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "finish": 1900003,
                    "start": 1860000,
                    "type": "function",
                    "view": "function discreteEvents.performOnTurn(turn: any)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/discreteEventsRegistrar.lua",
                "finish": 1860037,
                "name": "performOnTurn",
                "start": 1860009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 2040051,
                            "name": "loser",
                            "start": 2040046,
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": 2040058,
                            "name": "winner",
                            "start": 2040052,
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": 2040068,
                            "name": "aggressor",
                            "start": 2040059,
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": 2040075,
                            "name": "victim",
                            "start": 2040069,
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": 2040089,
                            "name": "loserLocation",
                            "start": 2040076,
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": 2040105,
                            "name": "winnerVetStatus",
                            "start": 2040090,
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": 2040120,
                            "name": "loserVetStatus",
                            "start": 2040106,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "finish": 2080003,
                    "start": 2040000,
                    "type": "function",
                    "view": "function discreteEvents.performOnUnitDefeated(loser: any, winner: any, aggressor: any, victim: any, loserLocation: any, winnerVetStatus: any, loserVetStatus: any)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/discreteEventsRegistrar.lua",
                "finish": 2040045,
                "name": "performOnUnitDefeated",
                "start": 2040009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 2140056,
                            "name": "deletedUnit",
                            "start": 2140045,
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": 2140070,
                            "name": "replacingUnit",
                            "start": 2140057,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "finish": 2180003,
                    "start": 2140000,
                    "type": "function",
                    "view": "function discreteEvents.performOnUnitDeleted(deletedUnit: any, replacingUnit: any)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/discreteEventsRegistrar.lua",
                "finish": 2140044,
                "name": "performOnUnitDeleted",
                "start": 2140009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1950049,
                            "name": "loser",
                            "start": 1950044,
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": 1950056,
                            "name": "winner",
                            "start": 1950050,
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": 1950066,
                            "name": "aggressor",
                            "start": 1950057,
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": 1950073,
                            "name": "victim",
                            "start": 1950067,
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": 1950087,
                            "name": "loserLocation",
                            "start": 1950074,
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": 1950103,
                            "name": "winnerVetStatus",
                            "start": 1950088,
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": 1950118,
                            "name": "loserVetStatus",
                            "start": 1950104,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "finish": 1990003,
                    "start": 1950000,
                    "type": "function",
                    "view": "function discreteEvents.performOnUnitKilled(loser: any, winner: any, aggressor: any, victim: any, loserLocation: any, winnerVetStatus: any, loserVetStatus: any)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/discreteEventsRegistrar.lua",
                "finish": 1950043,
                "name": "performOnUnitKilled",
                "start": 1950009,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 610054,
                    "start": 610036,
                    "type": "getlocal",
                    "view": "function"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/discreteEventsRegistrar.lua",
                "finish": 610033,
                "name": "recommendedVersion",
                "start": 610000,
                "type": "setfield"
            }
        ],
        "name": "discreteEvents",
        "type": "type"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A string is a data type native to Lua which consists of a sequence of characters. These often represent text to be displayed, but are also useful in other contexts. Strings are commonly used as keys in tables, since they make code more readable.\n[Programming in Lua, 2.4 -- Strings](https://www.lua.org/pil/2.4.html)",
                            "finish": 480024,
                            "name": "filename",
                            "start": 480016,
                            "type": "local",
                            "view": "string?"
                        }
                    ],
                    "desc": "\nOpens the named file and executes its content as a Lua chunk. When called without arguments, `dofile` executes the content of the standard input (`stdin`). Returns all values returned by the chunk. In case of errors, `dofile` propagates the error to its caller. (That is, `dofile` does not run in protected mode.)\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-dofile)",
                    "finish": 480029,
                    "returns": [
                        {
                            "name": "...",
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": 480000,
                    "type": "function",
                    "view": "function dofile(filename?: string)\n  -> ...any"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/basic.lua",
                "finish": 480015,
                "start": 480009,
                "type": "setglobal"
            }
        ],
        "desc": "\nOpens the named file and executes its content as a Lua chunk. When called without arguments, `dofile` executes the content of the standard input (`stdin`). Returns all values returned by the chunk. In case of errors, `dofile` propagates the error to its caller. (That is, `dofile` does not run in protected mode.)\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-dofile)",
        "name": "dofile",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 600022,
                            "name": "message",
                            "start": 600015,
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "desc": "An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 600029,
                            "name": "level",
                            "start": 600024,
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nTerminates the last protected function called and returns message as the error object.\n\nUsually, `error` adds some information about the error position at the beginning of the message, if the message is a string.\n\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-error)",
                    "finish": 600034,
                    "start": 600000,
                    "type": "function",
                    "view": "function error(message: any, level?: integer)"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/basic.lua",
                "finish": 600014,
                "start": 600009,
                "type": "setglobal"
            }
        ],
        "desc": "\nTerminates the last protected function called and returns message as the error object.\n\nUsually, `error` adds some information about the error position at the beginning of the message, if the message is a string.\n\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-error)",
        "name": "error",
        "type": "variable"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/flag.lua",
                "finish": 410014,
                "start": 410010,
                "type": "doc.class"
            }
        ],
        "desc": " table of flag functions to be returned with the module",
        "fields": [
            {
                "extends": {
                    "finish": 1150020,
                    "start": 1150014,
                    "type": "getlocal",
                    "view": "function"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/flag.lua",
                "finish": 1150011,
                "name": "define",
                "start": 1150000,
                "type": "setfield"
            },
            {
                "desc": " This allows for object.js to be built",
                "extends": {
                    "finish": 870023,
                    "start": 870021,
                    "type": "table",
                    "view": "table"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/flag.lua",
                "finish": 870018,
                "name": "eventsKeyList",
                "start": 870000,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 1300038,
                    "start": 1300023,
                    "type": "getlocal",
                    "view": "function"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/flag.lua",
                "finish": 1300020,
                "name": "initializeFlags",
                "start": 1300000,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 890026,
                    "start": 890017,
                    "type": "getlocal",
                    "view": "function"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/flag.lua",
                "finish": 890014,
                "name": "linkState",
                "start": 890000,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 1690024,
                    "start": 1690016,
                    "type": "getlocal",
                    "view": "function"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/flag.lua",
                "finish": 1690013,
                "name": "setFalse",
                "start": 1690000,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 1560022,
                    "start": 1560015,
                    "type": "getlocal",
                    "view": "function"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/flag.lua",
                "finish": 1560012,
                "name": "setTrue",
                "start": 1560000,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 1820020,
                    "start": 1820014,
                    "type": "getlocal",
                    "view": "function"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/flag.lua",
                "finish": 1820011,
                "name": "toggle",
                "start": 1820000,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 1430018,
                    "start": 1430013,
                    "type": "getlocal",
                    "view": "function"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/flag.lua",
                "finish": 1430010,
                "name": "value",
                "start": 1430000,
                "type": "setfield"
            }
        ],
        "name": "flag",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 10410023,
                "start": 10410009,
                "type": "doc.enum"
            }
        ],
        "desc": "```lua\n{\n    Space Race Victory by Active Player: integer = 1,\n    Space Race Victory by Another Player: integer = 2,\n    Conquest Victory: integer = 3,\n    Defeat: integer = 4,\n    Retirement: integer = 5,\n    Macro ENDGAME action: integer = 6,\n}\n```",
        "fields": [],
        "name": "gameEndReasons",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 10450022,
                "start": 10450002,
                "type": "tableindex"
            }
        ],
        "fields": [],
        "name": "gameEndReasons.Conquest Victory",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 10460012,
                "start": 10460002,
                "type": "tableindex"
            }
        ],
        "fields": [],
        "name": "gameEndReasons.Defeat",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 10480026,
                "start": 10480002,
                "type": "tableindex"
            }
        ],
        "fields": [],
        "name": "gameEndReasons.Macro ENDGAME action",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 10470016,
                "start": 10470002,
                "type": "tableindex"
            }
        ],
        "fields": [],
        "name": "gameEndReasons.Retirement",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 10430041,
                "start": 10430002,
                "type": "tableindex"
            }
        ],
        "fields": [],
        "name": "gameEndReasons.Space Race Victory by Active Player",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 10440042,
                "start": 10440002,
                "type": "tableindex"
            }
        ],
        "fields": [],
        "name": "gameEndReasons.Space Race Victory by Another Player",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 340013,
                "start": 340010,
                "type": "doc.class"
            }
        ],
        "desc": "The General Library offers a variety of tools to make it easier to build events. To access functions from the General Library, you should include the following line at the top of your file:\n```lua\nlocal gen = require(\"generalLibrary\")\n```",
        "fields": [
            {
                "desc": " Deprecated.  This was written when unit:activate() did not run the civ.scen.onActivateUnit event.\n use to activate a unit.  This assumes that the 'source' of the activation is true\n (i.e. human generated).  Use gen.activateWithSource if false is needed (either sometimes or always)",
                "extends": {
                    "args": [
                        {
                            "finish": 37030026,
                            "name": "unit",
                            "start": 37030022,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": " Deprecated.  This was written when unit:activate() did not run the civ.scen.onActivateUnit event.\n use to activate a unit.  This assumes that the 'source' of the activation is true\n (i.e. human generated).  Use gen.activateWithSource if false is needed (either sometimes or always)",
                    "finish": 37060003,
                    "start": 37030000,
                    "type": "function",
                    "view": "function gen.activate(unit: any)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 37030021,
                "name": "activate",
                "start": 37030009,
                "type": "setfield"
            },
            {
                "desc": "This function makes land and sea units obey the range field in the rules.txt (if they are not 0),\nthe same way that air units do.  If `applyToAI` is set to true, the AI will lose units as well, but the AI isn't programmed to respect these limitations.\n<br><br>\nIn the Lua Scenario Template, this function is ready to use in simpleSettings.lua.\nIf you're not using the Template, then this function only works if you've set up the discrete events.\n\n\n@*param* `restoreRangeFn` โ <br>This function governs when a unit's range is restored.  It is checked when the unit enters a tile and also after the unit has been given its last order for the turn (i.e. when the unit has all movement expended and the next unit is activated, or at the end of the turn if it still has movement points e.g. if sleeping).  <br>If true, range is restored, if false range is not restored.<br>By default, range is restored in city squares and on airbases.<br>If you want to clear movement points (like for air units) do it in this function.\n\n@*param* `applyToAI` โ If true, the AI's units are lost if they go beyond their range.",
                "extends": {
                    "args": [
                        {
                            "desc": "<br>This function governs when a unit's range is restored.  It is checked when the unit enters a tile and also after the unit has been given its last order for the turn (i.e. when the unit has all movement expended and the next unit is activated, or at the end of the turn if it still has movement points e.g. if sleeping).  <br>If true, range is restored, if false range is not restored.<br>By default, range is restored in city squares and on airbases.<br>If you want to clear movement points (like for air units) do it in this function.",
                            "finish": 74530054,
                            "name": "restoreRangeFn",
                            "start": 74530040,
                            "type": "local",
                            "view": "(fun(unit: unitObject):boolean|nil)?"
                        },
                        {
                            "desc": "If true, the AI's units are lost if they go beyond their range.",
                            "finish": 74530064,
                            "name": "applyToAI",
                            "start": 74530055,
                            "type": "local",
                            "view": "(boolean|nil)?"
                        }
                    ],
                    "desc": "This function makes land and sea units obey the range field in the rules.txt (if they are not 0),\nthe same way that air units do.  If `applyToAI` is set to true, the AI will lose units as well, but the AI isn't programmed to respect these limitations.\n<br><br>\nIn the Lua Scenario Template, this function is ready to use in simpleSettings.lua.\nIf you're not using the Template, then this function only works if you've set up the discrete events.\n\n\n@*param* `restoreRangeFn` โ <br>This function governs when a unit's range is restored.  It is checked when the unit enters a tile and also after the unit has been given its last order for the turn (i.e. when the unit has all movement expended and the next unit is activated, or at the end of the turn if it still has movement points e.g. if sleeping).  <br>If true, range is restored, if false range is not restored.<br>By default, range is restored in city squares and on airbases.<br>If you want to clear movement points (like for air units) do it in this function.\n\n@*param* `applyToAI` โ If true, the AI's units are lost if they go beyond their range.",
                    "finish": 75350003,
                    "start": 74530000,
                    "type": "function",
                    "view": "function gen.activateRangeForLandAndSea(restoreRangeFn?: fun(unit: unitObject):boolean, applyToAI?: boolean)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 74530039,
                "name": "activateRangeForLandAndSea",
                "start": 74530009,
                "type": "setfield"
            },
            {
                "desc": " Deprecated.  This was written when unit:activate() did not run the civ.scen.onActivateUnit event.\n use to activate a unit and specify the source of the activation",
                "extends": {
                    "args": [
                        {
                            "finish": 37130036,
                            "name": "unit",
                            "start": 37130032,
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": 37130043,
                            "name": "source",
                            "start": 37130037,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": " Deprecated.  This was written when unit:activate() did not run the civ.scen.onActivateUnit event.\n use to activate a unit and specify the source of the activation",
                    "finish": 37160003,
                    "start": 37130000,
                    "type": "function",
                    "view": "function gen.activateWithSource(unit: any, source: any)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 37130031,
                "name": "activateWithSource",
                "start": 37130009,
                "type": "setfield"
            },
            {
                "desc": " Changes the `dataTable` so that values can once again be assigned to keys which currently have a nil value.",
                "extends": {
                    "args": [
                        {
                            "desc": "A dataTable acts as an ordinary table, but, if desired, you can forbid values from being changed, forbid new key-value pairs from being stored, and forbid trying to access keys with a `nil` value.  These features can make debugging easier by causing an error to happen on the line the mistake is made.\n\nThe following functions can be used to control the data table's features:\n\ngen.forbidReplacement(dataTable) --> void\n\ngen.allowReplacement(dataTable) --> void\n\ngen.forbidNewKeys(dataTable) --> void\n\ngen.allowNewKeys(dataTable) --> void\n\ngen.forbidNilValueAccess(dataTable) --> void\n\ngen.allowNilValueAccess(dataTable) --> void\n\ngen.restrictValues(dataTable,isValidValueFn,makeValidValueFn) --> void\n",
                            "finish": 66420035,
                            "name": "dataTable",
                            "start": 66420026,
                            "type": "local",
                            "view": "dataTable"
                        }
                    ],
                    "desc": " Changes the `dataTable` so that values can once again be assigned to keys which currently have a nil value.",
                    "finish": 66480003,
                    "start": 66420000,
                    "type": "function",
                    "view": "function gen.allowNewKeys(dataTable: dataTable)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 66420025,
                "name": "allowNewKeys",
                "start": 66420009,
                "type": "setfield"
            },
            {
                "desc": " Changes the `dataTable` so that an error is not generated if the program tries to access a key which currently has a nil value.",
                "extends": {
                    "args": [
                        {
                            "desc": "A dataTable acts as an ordinary table, but, if desired, you can forbid values from being changed, forbid new key-value pairs from being stored, and forbid trying to access keys with a `nil` value.  These features can make debugging easier by causing an error to happen on the line the mistake is made.\n\nThe following functions can be used to control the data table's features:\n\ngen.forbidReplacement(dataTable) --> void\n\ngen.allowReplacement(dataTable) --> void\n\ngen.forbidNewKeys(dataTable) --> void\n\ngen.allowNewKeys(dataTable) --> void\n\ngen.forbidNilValueAccess(dataTable) --> void\n\ngen.allowNilValueAccess(dataTable) --> void\n\ngen.restrictValues(dataTable,isValidValueFn,makeValidValueFn) --> void\n",
                            "finish": 66660042,
                            "name": "dataTable",
                            "start": 66660033,
                            "type": "local",
                            "view": "dataTable"
                        }
                    ],
                    "desc": " Changes the `dataTable` so that an error is not generated if the program tries to access a key which currently has a nil value.",
                    "finish": 66720003,
                    "start": 66660000,
                    "type": "function",
                    "view": "function gen.allowNilValueAccess(dataTable: dataTable)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 66660032,
                "name": "allowNilValueAccess",
                "start": 66660009,
                "type": "setfield"
            },
            {
                "desc": " Changes the `dataTable` so that non-nil values can be changed.",
                "extends": {
                    "args": [
                        {
                            "desc": "A dataTable acts as an ordinary table, but, if desired, you can forbid values from being changed, forbid new key-value pairs from being stored, and forbid trying to access keys with a `nil` value.  These features can make debugging easier by causing an error to happen on the line the mistake is made.\n\nThe following functions can be used to control the data table's features:\n\ngen.forbidReplacement(dataTable) --> void\n\ngen.allowReplacement(dataTable) --> void\n\ngen.forbidNewKeys(dataTable) --> void\n\ngen.allowNewKeys(dataTable) --> void\n\ngen.forbidNilValueAccess(dataTable) --> void\n\ngen.allowNilValueAccess(dataTable) --> void\n\ngen.restrictValues(dataTable,isValidValueFn,makeValidValueFn) --> void\n",
                            "finish": 66170039,
                            "name": "dataTable",
                            "start": 66170030,
                            "type": "local",
                            "view": "dataTable"
                        }
                    ],
                    "desc": " Changes the `dataTable` so that non-nil values can be changed.",
                    "finish": 66230003,
                    "start": 66170000,
                    "type": "function",
                    "view": "function gen.allowReplacement(dataTable: dataTable)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 66170029,
                "name": "allowReplacement",
                "start": 66170009,
                "type": "setfield"
            },
            {
                "desc": " Part of custom unit selection (In the Lua Scenario Template, this can be activated in simpleSettings.lua -- enableCustomUnitSelection\nIf you're not using the Template, add this code to the onKeyPress event:\n```lua\n    if civ.getActiveUnit() and keyID == 87 then\n        gen.betterUnitManualWait()\n    end\n```",
                "extends": {
                    "args": [],
                    "desc": " Part of custom unit selection (In the Lua Scenario Template, this can be activated in simpleSettings.lua -- enableCustomUnitSelection\nIf you're not using the Template, add this code to the onKeyPress event:\n```lua\n    if civ.getActiveUnit() and keyID == 87 then\n        gen.betterUnitManualWait()\n    end\n```",
                    "finish": 36020003,
                    "start": 35980000,
                    "type": "function",
                    "view": "function gen.betterUnitManualWait()"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 35980033,
                "name": "betterUnitManualWait",
                "start": 35980009,
                "type": "setfield"
            },
            {
                "desc": " creates the binary representation of integer/bitmask,\n including the numOfBits least significant bits\n if numOfBits is nil, it defaults to 32\n\n@*param* `bitmask` โ the bits to print\n\n@*param* `numOfBits` โ the number of bits to show (default 32)",
                "extends": {
                    "args": [
                        {
                            "desc": "the bits to print",
                            "finish": 6900036,
                            "name": "bitmask",
                            "start": 6900029,
                            "type": "local",
                            "view": "bitmask"
                        },
                        {
                            "desc": "the number of bits to show (default 32)",
                            "finish": 6900046,
                            "name": "numOfBits",
                            "start": 6900037,
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "desc": " creates the binary representation of integer/bitmask,\n including the numOfBits least significant bits\n if numOfBits is nil, it defaults to 32\n\n@*param* `bitmask` โ the bits to print\n\n@*param* `numOfBits` โ the number of bits to show (default 32)",
                    "finish": 7060003,
                    "returns": [
                        {
                            "name": "binaryRepresentation",
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": 6900000,
                    "type": "function",
                    "view": "function gen.bitmaskToString(bitmask: bitmask, numOfBits: integer)\n  -> binaryRepresentation: string"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 6900028,
                "name": "bitmaskToString",
                "start": 6900009,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 990021,
                    "start": 990008,
                    "type": "getfield",
                    "view": "table"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 990005,
                "name": "c",
                "start": 990000,
                "type": "setfield"
            },
            {
                "desc": "This function calculates the \"weight\" of the `item`, taking into account the `extraArgument`, and uses the `weightTable`.  Calculating weights can be a simple way to choose between various options (with a return of `false` meaning not to choose this option).\n\nIn practice, you will probably not use this function itself.  There are several functions that use this function to make choices:\n\n    gen.getExtremeWeights\n    gen.getBiggestWeights\n    gen.getSmallestWeights\n\nweightTable has functions as keys, and numbers or false as values\n\n    {[keyFunc(item,extraArgument)->boolean] = number or boolean or string or function(item,extraArgument) -> number|false}\n\n    for each key in the weight table, apply keyFunc to the item and extraArgument\n\n    if keyFunc(item,extraArgument) then\n        if the value is a number, add the number to the weight\n        if the value is a string add item[value] to the weight\n        if the value is a function, add value(item,extraArgument) to the weight\n        if the value is false, return 'false' as the weight\n        if the value is true, do nothing\n    else\n        if the value is a number, do nothing\n        if the value is false, do nothing\n        if the value is a string, do nothing\n        if the value is true, return 'false' as the weight\n\n    That is, false means that keyFunc must not apply to the item\n    while true means that keyFunc must apply to the item\n\n    default weight is 0\n\n\n@*param* `extraArgument` โ Default is nil.\n\n@*return* โ If number, the item has this weight.  False means the item was not given a weight.",
                "extends": {
                    "args": [
                        {
                            "finish": 67980033,
                            "name": "item",
                            "start": 67980029,
                            "type": "local",
                            "view": "<weightItem>"
                        },
                        {
                            "finish": 67980045,
                            "name": "weightTable",
                            "start": 67980034,
                            "type": "local",
                            "view": "table<fun(item: <weightItem>, extraArgument: <extraArg>):boolean, boolean|number|fun(item: <weightItem>, extraArgument: <extraArg>):number|false>"
                        },
                        {
                            "desc": "Default is nil.",
                            "finish": 67980059,
                            "name": "extraArgument",
                            "start": 67980046,
                            "type": "local",
                            "view": "<extraArg>?"
                        }
                    ],
                    "desc": "This function calculates the \"weight\" of the `item`, taking into account the `extraArgument`, and uses the `weightTable`.  Calculating weights can be a simple way to choose between various options (with a return of `false` meaning not to choose this option).\n\nIn practice, you will probably not use this function itself.  There are several functions that use this function to make choices:\n\n    gen.getExtremeWeights\n    gen.getBiggestWeights\n    gen.getSmallestWeights\n\nweightTable has functions as keys, and numbers or false as values\n\n    {[keyFunc(item,extraArgument)->boolean] = number or boolean or string or function(item,extraArgument) -> number|false}\n\n    for each key in the weight table, apply keyFunc to the item and extraArgument\n\n    if keyFunc(item,extraArgument) then\n        if the value is a number, add the number to the weight\n        if the value is a string add item[value] to the weight\n        if the value is a function, add value(item,extraArgument) to the weight\n        if the value is false, return 'false' as the weight\n        if the value is true, do nothing\n    else\n        if the value is a number, do nothing\n        if the value is false, do nothing\n        if the value is a string, do nothing\n        if the value is true, return 'false' as the weight\n\n    That is, false means that keyFunc must not apply to the item\n    while true means that keyFunc must apply to the item\n\n    default weight is 0\n\n\n@*param* `extraArgument` โ Default is nil.\n\n@*return* โ If number, the item has this weight.  False means the item was not given a weight.",
                    "finish": 68250003,
                    "returns": [
                        {
                            "desc": "If number, the item has this weight.  False means the item was not given a weight.",
                            "type": "function.return",
                            "view": "boolean|number"
                        }
                    ],
                    "start": 67980000,
                    "type": "function",
                    "view": "function gen.calculateWeight(item: <weightItem>, weightTable: table<fun(item: <weightItem>, extraArgument: <extraArg>):boolean, boolean|number|fun(item: <weightItem>, extraArgument: <extraArg>):number|false>, extraArgument?: <extraArg>)\n  -> boolean|number"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 67980028,
                "name": "calculateWeight",
                "start": 67980009,
                "type": "setfield"
            },
            {
                "desc": " Charts Airbase on the tribe's map of tile, uncharting any conflicting improvements.",
                "extends": {
                    "args": [
                        {
                            "desc": "A tile object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a map \"square\" in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tile)",
                            "finish": 61620030,
                            "name": "tile",
                            "start": 61620026,
                            "type": "local",
                            "view": "tileObject"
                        },
                        {
                            "desc": "A tribe object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a tribe, which is to say the characteristics of the tribe overall, in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tribe)",
                            "finish": 61620036,
                            "name": "tribe",
                            "start": 61620031,
                            "type": "local",
                            "view": "tribeObject"
                        }
                    ],
                    "desc": " Charts Airbase on the tribe's map of tile, uncharting any conflicting improvements.",
                    "finish": 61620041,
                    "start": 61620000,
                    "type": "function",
                    "view": "function gen.chartAirbase(tile: tileObject, tribe: tribeObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 61620025,
                "name": "chartAirbase",
                "start": 61620009,
                "type": "setfield"
            },
            {
                "desc": " Makes city visible to tribe on the map, setting it to visibleSize if provided.\n If city.sizeForTribe[tribe] == 0 (the default value) after this, it is set to 1\n since a city does not appear if city.sizeForTribe[tribe] == 0\n does not change the visibility of the tile.\n\n@*param* `visibleSize` โ 1 by default.",
                "extends": {
                    "args": [
                        {
                            "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
                            "finish": 59430027,
                            "name": "city",
                            "start": 59430023,
                            "type": "local",
                            "view": "cityObject"
                        },
                        {
                            "desc": "A tribe object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a tribe, which is to say the characteristics of the tribe overall, in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tribe)",
                            "finish": 59430033,
                            "name": "tribe",
                            "start": 59430028,
                            "type": "local",
                            "view": "tribeObject"
                        },
                        {
                            "desc": "1 by default.",
                            "finish": 59430045,
                            "name": "visibleSize",
                            "start": 59430034,
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": " Makes city visible to tribe on the map, setting it to visibleSize if provided.\n If city.sizeForTribe[tribe] == 0 (the default value) after this, it is set to 1\n since a city does not appear if city.sizeForTribe[tribe] == 0\n does not change the visibility of the tile.\n\n@*param* `visibleSize` โ 1 by default.",
                    "finish": 59490003,
                    "start": 59430000,
                    "type": "function",
                    "view": "function gen.chartCity(city: cityObject, tribe: tribeObject, visibleSize?: integer)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 59430022,
                "name": "chartCity",
                "start": 59430009,
                "type": "setfield"
            },
            {
                "desc": " Charts Farmland on the tribe's map of tile, uncharting any conflicting improvements.",
                "extends": {
                    "args": [
                        {
                            "desc": "A tile object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a map \"square\" in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tile)",
                            "finish": 60440031,
                            "name": "tile",
                            "start": 60440027,
                            "type": "local",
                            "view": "tileObject"
                        },
                        {
                            "desc": "A tribe object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a tribe, which is to say the characteristics of the tribe overall, in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tribe)",
                            "finish": 60440037,
                            "name": "tribe",
                            "start": 60440032,
                            "type": "local",
                            "view": "tribeObject"
                        }
                    ],
                    "desc": " Charts Farmland on the tribe's map of tile, uncharting any conflicting improvements.",
                    "finish": 60440042,
                    "start": 60440000,
                    "type": "function",
                    "view": "function gen.chartFarmland(tile: tileObject, tribe: tribeObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 60440026,
                "name": "chartFarmland",
                "start": 60440009,
                "type": "setfield"
            },
            {
                "desc": " Charts Fortress on the tribe's map of tile, uncharting any conflicting improvements.",
                "extends": {
                    "args": [
                        {
                            "desc": "A tile object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a map \"square\" in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tile)",
                            "finish": 61360031,
                            "name": "tile",
                            "start": 61360027,
                            "type": "local",
                            "view": "tileObject"
                        },
                        {
                            "desc": "A tribe object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a tribe, which is to say the characteristics of the tribe overall, in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tribe)",
                            "finish": 61360037,
                            "name": "tribe",
                            "start": 61360032,
                            "type": "local",
                            "view": "tribeObject"
                        }
                    ],
                    "desc": " Charts Fortress on the tribe's map of tile, uncharting any conflicting improvements.",
                    "finish": 61360042,
                    "start": 61360000,
                    "type": "function",
                    "view": "function gen.chartFortress(tile: tileObject, tribe: tribeObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 61360026,
                "name": "chartFortress",
                "start": 61360009,
                "type": "setfield"
            },
            {
                "desc": " Charts Irrigation on the tribe's map of tile, uncharting any conflicting improvements.",
                "extends": {
                    "args": [
                        {
                            "desc": "A tile object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a map \"square\" in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tile)",
                            "finish": 59940033,
                            "name": "tile",
                            "start": 59940029,
                            "type": "local",
                            "view": "tileObject"
                        },
                        {
                            "desc": "A tribe object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a tribe, which is to say the characteristics of the tribe overall, in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tribe)",
                            "finish": 59940039,
                            "name": "tribe",
                            "start": 59940034,
                            "type": "local",
                            "view": "tribeObject"
                        }
                    ],
                    "desc": " Charts Irrigation on the tribe's map of tile, uncharting any conflicting improvements.",
                    "finish": 59940044,
                    "start": 59940000,
                    "type": "function",
                    "view": "function gen.chartIrrigation(tile: tileObject, tribe: tribeObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 59940028,
                "name": "chartIrrigation",
                "start": 59940009,
                "type": "setfield"
            },
            {
                "desc": " Charts Mine on the tribe's map of tile, uncharting any conflicting improvements.",
                "extends": {
                    "args": [
                        {
                            "desc": "A tile object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a map \"square\" in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tile)",
                            "finish": 60190027,
                            "name": "tile",
                            "start": 60190023,
                            "type": "local",
                            "view": "tileObject"
                        },
                        {
                            "desc": "A tribe object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a tribe, which is to say the characteristics of the tribe overall, in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tribe)",
                            "finish": 60190033,
                            "name": "tribe",
                            "start": 60190028,
                            "type": "local",
                            "view": "tribeObject"
                        }
                    ],
                    "desc": " Charts Mine on the tribe's map of tile, uncharting any conflicting improvements.",
                    "finish": 60190038,
                    "start": 60190000,
                    "type": "function",
                    "view": "function gen.chartMine(tile: tileObject, tribe: tribeObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 60190022,
                "name": "chartMine",
                "start": 60190009,
                "type": "setfield"
            },
            {
                "desc": " Charts Pollution on the tribe's map of tile, uncharting any conflicting improvements.",
                "extends": {
                    "args": [
                        {
                            "desc": "A tile object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a map \"square\" in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tile)",
                            "finish": 61870032,
                            "name": "tile",
                            "start": 61870028,
                            "type": "local",
                            "view": "tileObject"
                        },
                        {
                            "desc": "A tribe object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a tribe, which is to say the characteristics of the tribe overall, in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tribe)",
                            "finish": 61870038,
                            "name": "tribe",
                            "start": 61870033,
                            "type": "local",
                            "view": "tribeObject"
                        }
                    ],
                    "desc": " Charts Pollution on the tribe's map of tile, uncharting any conflicting improvements.",
                    "finish": 61870043,
                    "start": 61870000,
                    "type": "function",
                    "view": "function gen.chartPollution(tile: tileObject, tribe: tribeObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 61870027,
                "name": "chartPollution",
                "start": 61870009,
                "type": "setfield"
            },
            {
                "desc": " Charts Railroad on the tribe's map of tile, uncharting any conflicting improvements.",
                "extends": {
                    "args": [
                        {
                            "desc": "A tile object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a map \"square\" in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tile)",
                            "finish": 60970031,
                            "name": "tile",
                            "start": 60970027,
                            "type": "local",
                            "view": "tileObject"
                        },
                        {
                            "desc": "A tribe object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a tribe, which is to say the characteristics of the tribe overall, in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tribe)",
                            "finish": 60970037,
                            "name": "tribe",
                            "start": 60970032,
                            "type": "local",
                            "view": "tribeObject"
                        }
                    ],
                    "desc": " Charts Railroad on the tribe's map of tile, uncharting any conflicting improvements.",
                    "finish": 60970042,
                    "start": 60970000,
                    "type": "function",
                    "view": "function gen.chartRailroad(tile: tileObject, tribe: tribeObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 60970026,
                "name": "chartRailroad",
                "start": 60970009,
                "type": "setfield"
            },
            {
                "desc": " Charts Road on the tribe's map of tile, uncharting any conflicting improvements.",
                "extends": {
                    "args": [
                        {
                            "desc": "A tile object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a map \"square\" in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tile)",
                            "finish": 60710027,
                            "name": "tile",
                            "start": 60710023,
                            "type": "local",
                            "view": "tileObject"
                        },
                        {
                            "desc": "A tribe object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a tribe, which is to say the characteristics of the tribe overall, in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tribe)",
                            "finish": 60710033,
                            "name": "tribe",
                            "start": 60710028,
                            "type": "local",
                            "view": "tribeObject"
                        }
                    ],
                    "desc": " Charts Road on the tribe's map of tile, uncharting any conflicting improvements.",
                    "finish": 60710038,
                    "start": 60710000,
                    "type": "function",
                    "view": "function gen.chartRoad(tile: tileObject, tribe: tribeObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 60710022,
                "name": "chartRoad",
                "start": 60710009,
                "type": "setfield"
            },
            {
                "desc": " Charts Transporter on the tribe's map of tile, uncharting any conflicting improvements.",
                "extends": {
                    "args": [
                        {
                            "desc": "A tile object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a map \"square\" in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tile)",
                            "finish": 62130034,
                            "name": "tile",
                            "start": 62130030,
                            "type": "local",
                            "view": "tileObject"
                        },
                        {
                            "desc": "A tribe object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a tribe, which is to say the characteristics of the tribe overall, in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tribe)",
                            "finish": 62130040,
                            "name": "tribe",
                            "start": 62130035,
                            "type": "local",
                            "view": "tribeObject"
                        }
                    ],
                    "desc": " Charts Transporter on the tribe's map of tile, uncharting any conflicting improvements.",
                    "finish": 62130045,
                    "start": 62130000,
                    "type": "function",
                    "view": "function gen.chartTransporter(tile: tileObject, tribe: tribeObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 62130029,
                "name": "chartTransporter",
                "start": 62130009,
                "type": "setfield"
            },
            {
                "desc": " gen.chartTruthfully(tile,tribe) --> void\n Reveals `tile` to `tribe`, and makes visible the tile improvements that actually exist.",
                "extends": {
                    "args": [
                        {
                            "desc": "A tile object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a map \"square\" in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tile)",
                            "finish": 62280033,
                            "name": "tile",
                            "start": 62280029,
                            "type": "local",
                            "view": "tileObject"
                        },
                        {
                            "desc": "A tribe object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a tribe, which is to say the characteristics of the tribe overall, in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tribe)",
                            "finish": 62280039,
                            "name": "tribe",
                            "start": 62280034,
                            "type": "local",
                            "view": "tribeObject"
                        }
                    ],
                    "desc": " gen.chartTruthfully(tile,tribe) --> void\n Reveals `tile` to `tribe`, and makes visible the tile improvements that actually exist.",
                    "finish": 62340003,
                    "start": 62280000,
                    "type": "function",
                    "view": "function gen.chartTruthfully(tile: tileObject, tribe: tribeObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 62280028,
                "name": "chartTruthfully",
                "start": 62280009,
                "type": "setfield"
            },
            {
                "desc": " Compares the binary representation of an integer with\n a string.  If the string has a 1 in a given place,\n the binary representation of the integer should also\n have a 1.  If the string has a 0 in a given place, the\n binary representation should also have a 0. Any other\n character in the string means the integer can have a\n 0 or a 1.  If the integer representation is longer than\n the string, the string is aligned with the smallest\n part of the integer.\n```lua\ngen.checkBits(0b10101011,\"xx10xwqp\")-->true\ngen.checkBits(0b10101011,\"xx11xwqp\")-->false\ngen.checkBits(0b011110101011,\"xx10xwqp\")-->true\ngen.checkBits(0b011110101011,\"xx10xwqp\")-->true\n```\n note: lua does not actually accept integers specified in binary \n (though it does for hexidecimal)\n\n@*param* `bitmask` โ the number/bitmask to be checked\n\n@*param* `bitString` โ specification of bits that should be checked",
                "extends": {
                    "args": [
                        {
                            "desc": "the number/bitmask to be checked",
                            "finish": 6280030,
                            "name": "bitmask",
                            "start": 6280023,
                            "type": "local",
                            "view": "integer|bitmask"
                        },
                        {
                            "desc": "specification of bits that should be checked",
                            "finish": 6280040,
                            "name": "bitString",
                            "start": 6280031,
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": " Compares the binary representation of an integer with\n a string.  If the string has a 1 in a given place,\n the binary representation of the integer should also\n have a 1.  If the string has a 0 in a given place, the\n binary representation should also have a 0. Any other\n character in the string means the integer can have a\n 0 or a 1.  If the integer representation is longer than\n the string, the string is aligned with the smallest\n part of the integer.\n```lua\ngen.checkBits(0b10101011,\"xx10xwqp\")-->true\ngen.checkBits(0b10101011,\"xx11xwqp\")-->false\ngen.checkBits(0b011110101011,\"xx10xwqp\")-->true\ngen.checkBits(0b011110101011,\"xx10xwqp\")-->true\n```\n note: lua does not actually accept integers specified in binary \n (though it does for hexidecimal)\n\n@*param* `bitmask` โ the number/bitmask to be checked\n\n@*param* `bitString` โ specification of bits that should be checked",
                    "finish": 6420003,
                    "returns": [
                        {
                            "name": "bitsMatch",
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 6280000,
                    "type": "function",
                    "view": "function gen.checkBits(bitmask: integer|bitmask, bitString: string)\n  -> bitsMatch: boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 6280022,
                "name": "checkBits",
                "start": 6280009,
                "type": "setfield"
            },
            {
                "desc": " Value Specification\n  valueSpecification = {\n      [\"nil\"] = true or nil\n          if this key is true, the data can be nil\n      [\"boolean\"] = true, \"true\", \"false\", or nil\n          if this key is true, the data can be a boolean\n          if this key is \"true\", only true is allowed (false is not)\n          if this key is \"false\", only false is allowed (true is not)\n      [\"function\"] = true, string or nil\n          if this key is true or string, the data can be a function\n          the string describes the function e.g. function(unit) --> number\n          (the function is not tested)\n      [\"number\"] = {minVal=numberNil, maxVal = numberNil, integer=trueNil} or true\n          if this key is true, the data can be a number\n          the keys in the table specify minimum and maximum values, and whether\n          the number must be an integer\n          note: math.huge and -math.huge are considered both numbers and integer here\n      [\"string\"] = true or {[validString] = truthy}\n          if true, the data can be any string\n          if table, the data must be one of the keys in the table\n      [\"table\"] = string or true or {[1]=function(table)-->true or string,[2]=string}\n          if string, any table is accepted, and the string describes the kind of table needed\n          if true, any table is accepted, and the description is a table\n          if table, [1] is a function returns that true if the table is accepted,\n          and the problem with the table if it is not\n          [2] is the description of the table required\n      [\"userdata\"] = {[dataTypeName]=isDataTypeFn}\n          this table is a table of each of the allowable data types, with the\n          key being the name, and the function checking if it is that type\n          being the value\n  }",
                "extends": {
                    "args": [
                        {
                            "finish": 77520045,
                            "name": "validDataInfo",
                            "start": 77520032,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": " Value Specification\n  valueSpecification = {\n      [\"nil\"] = true or nil\n          if this key is true, the data can be nil\n      [\"boolean\"] = true, \"true\", \"false\", or nil\n          if this key is true, the data can be a boolean\n          if this key is \"true\", only true is allowed (false is not)\n          if this key is \"false\", only false is allowed (true is not)\n      [\"function\"] = true, string or nil\n          if this key is true or string, the data can be a function\n          the string describes the function e.g. function(unit) --> number\n          (the function is not tested)\n      [\"number\"] = {minVal=numberNil, maxVal = numberNil, integer=trueNil} or true\n          if this key is true, the data can be a number\n          the keys in the table specify minimum and maximum values, and whether\n          the number must be an integer\n          note: math.huge and -math.huge are considered both numbers and integer here\n      [\"string\"] = true or {[validString] = truthy}\n          if true, the data can be any string\n          if table, the data must be one of the keys in the table\n      [\"table\"] = string or true or {[1]=function(table)-->true or string,[2]=string}\n          if string, any table is accepted, and the string describes the kind of table needed\n          if true, any table is accepted, and the description is a table\n          if table, [1] is a function returns that true if the table is accepted,\n          and the problem with the table if it is not\n          [2] is the description of the table required\n      [\"userdata\"] = {[dataTypeName]=isDataTypeFn}\n          this table is a table of each of the allowable data types, with the\n          key being the name, and the function checking if it is that type\n          being the value\n  }",
                    "finish": 77580003,
                    "start": 77520000,
                    "type": "function",
                    "view": "function gen.checkValidDataInfo(validDataInfo: any)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 77520031,
                "name": "checkValidDataInfo",
                "start": 77520009,
                "type": "setfield"
            },
            {
                "desc": "Returns true if the city has enough production to support all existing units and at least one other unit.\nUnits that get free support under fundamentalism are still counted as\n\"supported\", since they still take up a free support \"slot\" if they are\namong the first 8 units supported by the city.",
                "extends": {
                    "args": [
                        {
                            "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
                            "finish": 34460043,
                            "name": "city",
                            "start": 34460039,
                            "type": "local",
                            "view": "cityObject"
                        }
                    ],
                    "desc": "Returns true if the city has enough production to support all existing units and at least one other unit.\nUnits that get free support under fundamentalism are still counted as\n\"supported\", since they still take up a free support \"slot\" if they are\namong the first 8 units supported by the city.",
                    "finish": 34750003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 34460000,
                    "type": "function",
                    "view": "function gen.cityCanSupportAnotherUnit(city: cityObject)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 34460038,
                "name": "cityCanSupportAnotherUnit",
                "start": 34460009,
                "type": "setfield"
            },
            {
                "desc": "  Returns a table of tiles around a center tile, the \n  size of a city 'footprint'.  The indices are listed below\n  and are based on how city.workers determines which tiles\n  are worked.\n\n      #       #       #       #       #\n          #       #       #       #       #\n      #       #       #       #       #\n          #       20      13      #       #\n      #       12      8       9       #\n          19      7       1       14      #\n      #       6       21      2       #\n          18      5       3       15      #\n      #       11      4       10      #\n          #       17      16      #       #\n      #       #       #       #       #\n          #       #       #       #       #\n\n If the center is at the edge of the map, absent tiles have nil values\n\n@*param* `input` โ If table, the table must be tile coordinates.",
                "extends": {
                    "args": [
                        {
                            "desc": "If table, the table must be tile coordinates.",
                            "finish": 43280034,
                            "name": "input",
                            "start": 43280029,
                            "type": "local",
                            "view": "table|cityObject|tileObject"
                        }
                    ],
                    "desc": "  Returns a table of tiles around a center tile, the \n  size of a city 'footprint'.  The indices are listed below\n  and are based on how city.workers determines which tiles\n  are worked.\n\n      #       #       #       #       #\n          #       #       #       #       #\n      #       #       #       #       #\n          #       20      13      #       #\n      #       12      8       9       #\n          19      7       1       14      #\n      #       6       21      2       #\n          18      5       3       15      #\n      #       11      4       10      #\n          #       17      16      #       #\n      #       #       #       #       #\n          #       #       #       #       #\n\n If the center is at the edge of the map, absent tiles have nil values\n\n@*param* `input` โ If table, the table must be tile coordinates.",
                    "finish": 43860003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "table<integer, tileObject>"
                        }
                    ],
                    "start": 43280000,
                    "type": "function",
                    "view": "function gen.cityRadiusTiles(input: table|cityObject|tileObject)\n  -> table<integer, tileObject>"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 43280028,
                "name": "cityRadiusTiles",
                "start": 43280009,
                "type": "setfield"
            },
            {
                "desc": "Clears air protection for tiles adjacent to the unit, as long as those tiles are not owned by the unit's owner.\nIn the Lua Scenario Template, simpleSettings.lua has the following settings:\n```lua\nsimpleSettings.clearAdjacentAirProtectionAI = false\nsimpleSettings.clearAdjacentAirProtectionHuman = false\n```",
                "extends": {
                    "args": [
                        {
                            "desc": "A unit object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit in the game, and provides a means of interacting with it. This should not be confused with the unit type object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unit)",
                            "finish": 41450044,
                            "name": "unit",
                            "start": 41450040,
                            "type": "local",
                            "view": "unitObject"
                        }
                    ],
                    "desc": "Clears air protection for tiles adjacent to the unit, as long as those tiles are not owned by the unit's owner.\nIn the Lua Scenario Template, simpleSettings.lua has the following settings:\n```lua\nsimpleSettings.clearAdjacentAirProtectionAI = false\nsimpleSettings.clearAdjacentAirProtectionHuman = false\n```",
                    "finish": 41520003,
                    "start": 41450000,
                    "type": "function",
                    "view": "function gen.clearAdjacentAirProtection(unit: unitObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 41450039,
                "name": "clearAdjacentAirProtection",
                "start": 41450009,
                "type": "setfield"
            },
            {
                "desc": "Clears standard Civ II Air protection from the tile.  That is, moves air units off the tile if they prevent ground/sea units on the tile from being attacked",
                "extends": {
                    "args": [
                        {
                            "desc": "A tile object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a map \"square\" in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tile)",
                            "finish": 41310036,
                            "name": "tile",
                            "start": 41310032,
                            "type": "local",
                            "view": "tileObject"
                        }
                    ],
                    "desc": "Clears standard Civ II Air protection from the tile.  That is, moves air units off the tile if they prevent ground/sea units on the tile from being attacked",
                    "finish": 41330003,
                    "start": 41310000,
                    "type": "function",
                    "view": "function gen.clearAirProtection(tile: tileObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 41310031,
                "name": "clearAirProtection",
                "start": 41310009,
                "type": "setfield"
            },
            {
                "desc": " The function of this byte in `city.attributes` is currently unknown.  If you discover it, please inform the Scenario League at Civfanatics.",
                "extends": {
                    "args": [
                        {
                            "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
                            "finish": 25160034,
                            "name": "city",
                            "start": 25160030,
                            "type": "local",
                            "view": "cityObject"
                        }
                    ],
                    "desc": " The function of this byte in `city.attributes` is currently unknown.  If you discover it, please inform the Scenario League at Civfanatics.",
                    "finish": 25180003,
                    "start": 25160000,
                    "type": "function",
                    "view": "function gen.clearAttribute10(city: cityObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 25160029,
                "name": "clearAttribute10",
                "start": 25160009,
                "type": "setfield"
            },
            {
                "desc": " The function of this byte in `city.attributes` is currently unknown.  If you discover it, please inform the Scenario League at Civfanatics.",
                "extends": {
                    "args": [
                        {
                            "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
                            "finish": 25410034,
                            "name": "city",
                            "start": 25410030,
                            "type": "local",
                            "view": "cityObject"
                        }
                    ],
                    "desc": " The function of this byte in `city.attributes` is currently unknown.  If you discover it, please inform the Scenario League at Civfanatics.",
                    "finish": 25430003,
                    "start": 25410000,
                    "type": "function",
                    "view": "function gen.clearAttribute11(city: cityObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 25410029,
                "name": "clearAttribute11",
                "start": 25410009,
                "type": "setfield"
            },
            {
                "desc": " The function of this byte in `city.attributes` is currently unknown.  If you discover it, please inform the Scenario League at Civfanatics.",
                "extends": {
                    "args": [
                        {
                            "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
                            "finish": 25880034,
                            "name": "city",
                            "start": 25880030,
                            "type": "local",
                            "view": "cityObject"
                        }
                    ],
                    "desc": " The function of this byte in `city.attributes` is currently unknown.  If you discover it, please inform the Scenario League at Civfanatics.",
                    "finish": 25900003,
                    "start": 25880000,
                    "type": "function",
                    "view": "function gen.clearAttribute13(city: cityObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 25880029,
                "name": "clearAttribute13",
                "start": 25880009,
                "type": "setfield"
            },
            {
                "desc": " The function of this byte in `city.attributes` is currently unknown.  If you discover it, please inform the Scenario League at Civfanatics.",
                "extends": {
                    "args": [
                        {
                            "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
                            "finish": 26130034,
                            "name": "city",
                            "start": 26130030,
                            "type": "local",
                            "view": "cityObject"
                        }
                    ],
                    "desc": " The function of this byte in `city.attributes` is currently unknown.  If you discover it, please inform the Scenario League at Civfanatics.",
                    "finish": 26150003,
                    "start": 26130000,
                    "type": "function",
                    "view": "function gen.clearAttribute14(city: cityObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 26130029,
                "name": "clearAttribute14",
                "start": 26130009,
                "type": "setfield"
            },
            {
                "desc": " The function of this byte in `city.attributes` is currently unknown.  If you discover it, please inform the Scenario League at Civfanatics.",
                "extends": {
                    "args": [
                        {
                            "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
                            "finish": 26380034,
                            "name": "city",
                            "start": 26380030,
                            "type": "local",
                            "view": "cityObject"
                        }
                    ],
                    "desc": " The function of this byte in `city.attributes` is currently unknown.  If you discover it, please inform the Scenario League at Civfanatics.",
                    "finish": 26400003,
                    "start": 26380000,
                    "type": "function",
                    "view": "function gen.clearAttribute15(city: cityObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 26380029,
                "name": "clearAttribute15",
                "start": 26380009,
                "type": "setfield"
            },
            {
                "desc": " The function of this byte in `city.attributes` is currently unknown.  If you discover it, please inform the Scenario League at Civfanatics.",
                "extends": {
                    "args": [
                        {
                            "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
                            "finish": 26630034,
                            "name": "city",
                            "start": 26630030,
                            "type": "local",
                            "view": "cityObject"
                        }
                    ],
                    "desc": " The function of this byte in `city.attributes` is currently unknown.  If you discover it, please inform the Scenario League at Civfanatics.",
                    "finish": 26650003,
                    "start": 26630000,
                    "type": "function",
                    "view": "function gen.clearAttribute16(city: cityObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 26630029,
                "name": "clearAttribute16",
                "start": 26630009,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 26900043,
                    "start": 26900023,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 26900020,
                "name": "clearAttribute17",
                "start": 26900000,
                "type": "setfield"
            },
            {
                "desc": " The function of this byte in `city.attributes` is currently unknown.  If you discover it, please inform the Scenario League at Civfanatics.",
                "extends": {
                    "args": [
                        {
                            "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
                            "finish": 27130034,
                            "name": "city",
                            "start": 27130030,
                            "type": "local",
                            "view": "cityObject"
                        }
                    ],
                    "desc": " The function of this byte in `city.attributes` is currently unknown.  If you discover it, please inform the Scenario League at Civfanatics.",
                    "finish": 27150003,
                    "start": 27130000,
                    "type": "function",
                    "view": "function gen.clearAttribute18(city: cityObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 27130029,
                "name": "clearAttribute18",
                "start": 27130009,
                "type": "setfield"
            },
            {
                "desc": " The function of this byte in `city.attributes` is currently unknown.  If you discover it, please inform the Scenario League at Civfanatics.",
                "extends": {
                    "args": [
                        {
                            "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
                            "finish": 27380034,
                            "name": "city",
                            "start": 27380030,
                            "type": "local",
                            "view": "cityObject"
                        }
                    ],
                    "desc": " The function of this byte in `city.attributes` is currently unknown.  If you discover it, please inform the Scenario League at Civfanatics.",
                    "finish": 27400003,
                    "start": 27380000,
                    "type": "function",
                    "view": "function gen.clearAttribute19(city: cityObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 27380029,
                "name": "clearAttribute19",
                "start": 27380009,
                "type": "setfield"
            },
            {
                "desc": " The function of this byte in `city.attributes` is currently unknown.  If you discover it, please inform the Scenario League at Civfanatics.",
                "extends": {
                    "args": [
                        {
                            "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
                            "finish": 27630034,
                            "name": "city",
                            "start": 27630030,
                            "type": "local",
                            "view": "cityObject"
                        }
                    ],
                    "desc": " The function of this byte in `city.attributes` is currently unknown.  If you discover it, please inform the Scenario League at Civfanatics.",
                    "finish": 27650003,
                    "start": 27630000,
                    "type": "function",
                    "view": "function gen.clearAttribute20(city: cityObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 27630029,
                "name": "clearAttribute20",
                "start": 27630009,
                "type": "setfield"
            },
            {
                "desc": " The function of this byte in `city.attributes` is currently unknown.  If you discover it, please inform the Scenario League at Civfanatics.",
                "extends": {
                    "args": [
                        {
                            "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
                            "finish": 27880034,
                            "name": "city",
                            "start": 27880030,
                            "type": "local",
                            "view": "cityObject"
                        }
                    ],
                    "desc": " The function of this byte in `city.attributes` is currently unknown.  If you discover it, please inform the Scenario League at Civfanatics.",
                    "finish": 27900003,
                    "start": 27880000,
                    "type": "function",
                    "view": "function gen.clearAttribute21(city: cityObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 27880029,
                "name": "clearAttribute21",
                "start": 27880009,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 28370048,
                    "start": 28370023,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 28370020,
                "name": "clearAttribute23",
                "start": 28370000,
                "type": "setfield"
            },
            {
                "desc": " The function of this byte in `city.attributes` is currently unknown.  If you discover it, please inform the Scenario League at Civfanatics.",
                "extends": {
                    "args": [
                        {
                            "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
                            "finish": 28610034,
                            "name": "city",
                            "start": 28610030,
                            "type": "local",
                            "view": "cityObject"
                        }
                    ],
                    "desc": " The function of this byte in `city.attributes` is currently unknown.  If you discover it, please inform the Scenario League at Civfanatics.",
                    "finish": 28630003,
                    "start": 28610000,
                    "type": "function",
                    "view": "function gen.clearAttribute24(city: cityObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 28610029,
                "name": "clearAttribute24",
                "start": 28610009,
                "type": "setfield"
            },
            {
                "desc": " The function of this byte in `city.attributes` is currently unknown.  If you discover it, please inform the Scenario League at Civfanatics.",
                "extends": {
                    "args": [
                        {
                            "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
                            "finish": 29550034,
                            "name": "city",
                            "start": 29550030,
                            "type": "local",
                            "view": "cityObject"
                        }
                    ],
                    "desc": " The function of this byte in `city.attributes` is currently unknown.  If you discover it, please inform the Scenario League at Civfanatics.",
                    "finish": 29570003,
                    "start": 29550000,
                    "type": "function",
                    "view": "function gen.clearAttribute28(city: cityObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 29550029,
                "name": "clearAttribute28",
                "start": 29550009,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 30070047,
                    "start": 30070023,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 30070020,
                "name": "clearAttribute30",
                "start": 30070000,
                "type": "setfield"
            },
            {
                "desc": " The function of this byte in `city.attributes` is currently unknown.  If you discover it, please inform the Scenario League at Civfanatics.",
                "extends": {
                    "args": [
                        {
                            "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
                            "finish": 30300034,
                            "name": "city",
                            "start": 30300030,
                            "type": "local",
                            "view": "cityObject"
                        }
                    ],
                    "desc": " The function of this byte in `city.attributes` is currently unknown.  If you discover it, please inform the Scenario League at Civfanatics.",
                    "finish": 30320003,
                    "start": 30300000,
                    "type": "function",
                    "view": "function gen.clearAttribute31(city: cityObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 30300029,
                "name": "clearAttribute31",
                "start": 30300009,
                "type": "setfield"
            },
            {
                "desc": " The function of this byte in `city.attributes` is currently unknown.  If you discover it, please inform the Scenario League at Civfanatics.",
                "extends": {
                    "args": [
                        {
                            "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
                            "finish": 30550034,
                            "name": "city",
                            "start": 30550030,
                            "type": "local",
                            "view": "cityObject"
                        }
                    ],
                    "desc": " The function of this byte in `city.attributes` is currently unknown.  If you discover it, please inform the Scenario League at Civfanatics.",
                    "finish": 30570003,
                    "start": 30550000,
                    "type": "function",
                    "view": "function gen.clearAttribute32(city: cityObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 30550029,
                "name": "clearAttribute32",
                "start": 30550009,
                "type": "setfield"
            },
            {
                "desc": " The function of this byte in `city.attributes` is currently unknown.  If you discover it, please inform the Scenario League at Civfanatics.",
                "extends": {
                    "args": [
                        {
                            "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
                            "finish": 24190033,
                            "name": "city",
                            "start": 24190029,
                            "type": "local",
                            "view": "cityObject"
                        }
                    ],
                    "desc": " The function of this byte in `city.attributes` is currently unknown.  If you discover it, please inform the Scenario League at Civfanatics.",
                    "finish": 24210003,
                    "start": 24190000,
                    "type": "function",
                    "view": "function gen.clearAttribute6(city: cityObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 24190028,
                "name": "clearAttribute6",
                "start": 24190009,
                "type": "setfield"
            },
            {
                "desc": " The function of this byte in `city.attributes` is currently unknown.  If you discover it, please inform the Scenario League at Civfanatics.",
                "extends": {
                    "args": [
                        {
                            "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
                            "finish": 24440033,
                            "name": "city",
                            "start": 24440029,
                            "type": "local",
                            "view": "cityObject"
                        }
                    ],
                    "desc": " The function of this byte in `city.attributes` is currently unknown.  If you discover it, please inform the Scenario League at Civfanatics.",
                    "finish": 24460003,
                    "start": 24440000,
                    "type": "function",
                    "view": "function gen.clearAttribute7(city: cityObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 24440028,
                "name": "clearAttribute7",
                "start": 24440009,
                "type": "setfield"
            },
            {
                "desc": " The function of this byte in `city.attributes` is currently unknown.  If you discover it, please inform the Scenario League at Civfanatics.",
                "extends": {
                    "args": [
                        {
                            "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
                            "finish": 24910033,
                            "name": "city",
                            "start": 24910029,
                            "type": "local",
                            "view": "cityObject"
                        }
                    ],
                    "desc": " The function of this byte in `city.attributes` is currently unknown.  If you discover it, please inform the Scenario League at Civfanatics.",
                    "finish": 24930003,
                    "start": 24910000,
                    "type": "function",
                    "view": "function gen.clearAttribute9(city: cityObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 24910028,
                "name": "clearAttribute9",
                "start": 24910009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
                            "finish": 23930032,
                            "name": "city",
                            "start": 23930028,
                            "type": "local",
                            "view": "cityObject"
                        }
                    ],
                    "finish": 23950003,
                    "start": 23930000,
                    "type": "function",
                    "view": "function gen.clearAutoBuild(city: cityObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 23930027,
                "name": "clearAutoBuild",
                "start": 23930009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
                            "finish": 24660035,
                            "name": "city",
                            "start": 24660031,
                            "type": "local",
                            "view": "cityObject"
                        }
                    ],
                    "finish": 24680003,
                    "start": 24660000,
                    "type": "function",
                    "view": "function gen.clearBuildCoastal(city: cityObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 24660030,
                "name": "clearBuildCoastal",
                "start": 24660009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
                            "finish": 25630038,
                            "name": "city",
                            "start": 25630034,
                            "type": "local",
                            "view": "cityObject"
                        }
                    ],
                    "finish": 25650003,
                    "start": 25630000,
                    "type": "function",
                    "view": "function gen.clearBuildHydroPlant(city: cityObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 25630033,
                "name": "clearBuildHydroPlant",
                "start": 25630009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
                            "finish": 28100033,
                            "name": "city",
                            "start": 28100029,
                            "type": "local",
                            "view": "cityObject"
                        }
                    ],
                    "finish": 28120003,
                    "start": 28100000,
                    "type": "function",
                    "view": "function gen.clearBuildShips(city: cityObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 28100028,
                "name": "clearBuildShips",
                "start": 28100009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
                            "finish": 28320039,
                            "name": "city",
                            "start": 28320035,
                            "type": "local",
                            "view": "cityObject"
                        }
                    ],
                    "finish": 28340003,
                    "start": 28320000,
                    "type": "function",
                    "view": "function gen.clearCityInvestigated(city: cityObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 28320034,
                "name": "clearCityInvestigated",
                "start": 28320009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
                            "finish": 23050036,
                            "name": "city",
                            "start": 23050032,
                            "type": "local",
                            "view": "cityObject"
                        }
                    ],
                    "finish": 23070003,
                    "start": 23050000,
                    "type": "function",
                    "view": "function gen.clearCivilDisorder(city: cityObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 23050031,
                "name": "clearCivilDisorder",
                "start": 23050009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
                            "finish": 29050040,
                            "name": "city",
                            "start": 29050036,
                            "type": "local",
                            "view": "cityObject"
                        }
                    ],
                    "finish": 29070003,
                    "start": 29050000,
                    "type": "function",
                    "view": "function gen.clearDomesticAutoBuild(city: cityObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 29050035,
                "name": "clearDomesticAutoBuild",
                "start": 29050009,
                "type": "setfield"
            },
            {
                "desc": " Re-indexes all integer keys and values\n in a table, so that there are no gaps.\n Starts at lowestValue (1 by default), and maintains order\n of integer keys\n Non integer keys (including other numbers)\n and integers below lowestValue are left unchanged\n\n@*param* `lowestValue` โ default is 1",
                "extends": {
                    "args": [
                        {
                            "desc": "A table is a data type native to Lua, and links \"keys\" (usually numbers or strings) to \"values\" (any kind of data, including other tables). This is the only data structuring mechanism in Lua, and many of the data types documented here are simply tables with restrictions on their keys or values. If a key has not been assigned a value, the table returns nil as the corresponding value, and assigning nil as a value to a key removes that key from the table.\n[Programming in Lua, 2.5 -- Tables](https://www.lua.org/pil/2.5.html)",
                            "finish": 45360035,
                            "name": "table",
                            "start": 45360030,
                            "type": "local",
                            "view": "table"
                        },
                        {
                            "desc": "default is 1",
                            "finish": 45360047,
                            "name": "lowestValue",
                            "start": 45360036,
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": " Re-indexes all integer keys and values\n in a table, so that there are no gaps.\n Starts at lowestValue (1 by default), and maintains order\n of integer keys\n Non integer keys (including other numbers)\n and integers below lowestValue are left unchanged\n\n@*param* `lowestValue` โ default is 1",
                    "finish": 45540003,
                    "start": 45360000,
                    "type": "function",
                    "view": "function gen.clearGapsInArray(table: table, lowestValue?: integer)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 45360029,
                "name": "clearGapsInArray",
                "start": 45360009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
                            "finish": 23490038,
                            "name": "city",
                            "start": 23490034,
                            "type": "local",
                            "view": "cityObject"
                        }
                    ],
                    "finish": 23510003,
                    "start": 23490000,
                    "type": "function",
                    "view": "function gen.clearImprovementSold(city: cityObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 23490033,
                "name": "clearImprovementSold",
                "start": 23490009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
                            "finish": 29800037,
                            "name": "city",
                            "start": 29800033,
                            "type": "local",
                            "view": "cityObject"
                        }
                    ],
                    "finish": 29820003,
                    "start": 29800000,
                    "type": "function",
                    "view": "function gen.clearMajorObjective(city: cityObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 29800032,
                "name": "clearMajorObjective",
                "start": 29800009,
                "type": "setfield"
            },
            {
                "desc": " this empties the waitingUnits table, so that units\n will appear according to the weight function",
                "extends": {
                    "args": [],
                    "desc": " this empties the waitingUnits table, so that units\n will appear according to the weight function",
                    "finish": 36100003,
                    "start": 36060000,
                    "type": "function",
                    "view": "function gen.clearManualWait()"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 36060028,
                "name": "clearManualWait",
                "start": 36060009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
                            "finish": 28830040,
                            "name": "city",
                            "start": 28830036,
                            "type": "local",
                            "view": "cityObject"
                        }
                    ],
                    "finish": 28850003,
                    "start": 28830000,
                    "type": "function",
                    "view": "function gen.clearMilitaryAutoBuild(city: cityObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 28830035,
                "name": "clearMilitaryAutoBuild",
                "start": 28830009,
                "type": "setfield"
            },
            {
                "desc": " The game sets this flag when a unit moves (even if no movement points are spent).  The Unit won't heal on next turn if this flag is set.",
                "extends": {
                    "args": [
                        {
                            "desc": "A unit object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit in the game, and provides a means of interacting with it. This should not be confused with the unit type object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unit)",
                            "finish": 19460028,
                            "name": "unit",
                            "start": 19460024,
                            "type": "local",
                            "view": "unitObject"
                        }
                    ],
                    "desc": " The game sets this flag when a unit moves (even if no movement points are spent).  The Unit won't heal on next turn if this flag is set.",
                    "finish": 19480003,
                    "start": 19460000,
                    "type": "function",
                    "view": "function gen.clearMoved(unit: unitObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 19460023,
                "name": "clearMoved",
                "start": 19460009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
                            "finish": 29300032,
                            "name": "city",
                            "start": 29300028,
                            "type": "local",
                            "view": "cityObject"
                        }
                    ],
                    "finish": 29320003,
                    "start": 29300000,
                    "type": "function",
                    "view": "function gen.clearObjective(city: cityObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 29300027,
                "name": "clearObjective",
                "start": 29300009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A unit object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit in the game, and provides a means of interacting with it. This should not be confused with the unit type object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unit)",
                            "finish": 19240034,
                            "name": "unit",
                            "start": 19240030,
                            "type": "local",
                            "view": "unitObject"
                        }
                    ],
                    "finish": 19260003,
                    "start": 19240000,
                    "type": "function",
                    "view": "function gen.clearParadropped(unit: unitObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 19240029,
                "name": "clearParadropped",
                "start": 19240009,
                "type": "setfield"
            },
            {
                "desc": " gen.clearPersistentRandom(key) --> void\n Sets the value associated with the key in the\n persistentRandom table to nil.  This could either be for reuse of the key,\n or to prevent the key from staying in the state table indefinitely.",
                "extends": {
                    "args": [
                        {
                            "desc": "A string is a data type native to Lua which consists of a sequence of characters. These often represent text to be displayed, but are also useful in other contexts. Strings are commonly used as keys in tables, since they make code more readable.\n[Programming in Lua, 2.4 -- Strings](https://www.lua.org/pil/2.4.html)",
                            "finish": 55210038,
                            "name": "key",
                            "start": 55210035,
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": " gen.clearPersistentRandom(key) --> void\n Sets the value associated with the key in the\n persistentRandom table to nil.  This could either be for reuse of the key,\n or to prevent the key from staying in the state table indefinitely.",
                    "finish": 55230003,
                    "start": 55210000,
                    "type": "function",
                    "view": "function gen.clearPersistentRandom(key: string)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 55210034,
                "name": "clearPersistentRandom",
                "start": 55210009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
                            "finish": 23710039,
                            "name": "city",
                            "start": 23710035,
                            "type": "local",
                            "view": "cityObject"
                        }
                    ],
                    "finish": 23730003,
                    "start": 23710000,
                    "type": "function",
                    "view": "function gen.clearTechnologyStolen(city: cityObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 23710034,
                "name": "clearTechnologyStolen",
                "start": 23710009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
                            "finish": 26850034,
                            "name": "city",
                            "start": 26850030,
                            "type": "local",
                            "view": "cityObject"
                        }
                    ],
                    "finish": 26870003,
                    "start": 26850000,
                    "type": "function",
                    "view": "function gen.clearUsedAirport(city: cityObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 26850029,
                "name": "clearUsedAirport",
                "start": 26850009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
                            "finish": 30040038,
                            "name": "city",
                            "start": 30040034,
                            "type": "local",
                            "view": "cityObject"
                        }
                    ],
                    "finish": 30060003,
                    "start": 30040000,
                    "type": "function",
                    "view": "function gen.clearUsedTransporter(city: cityObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 30040033,
                "name": "clearUsedTransporter",
                "start": 30040009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A unit object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit in the game, and provides a means of interacting with it. This should not be confused with the unit type object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unit)",
                            "finish": 19040030,
                            "name": "unit",
                            "start": 19040026,
                            "type": "local",
                            "view": "unitObject"
                        }
                    ],
                    "finish": 19070003,
                    "start": 19040000,
                    "type": "function",
                    "view": "function gen.clearWaiting(unit: unitObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 19040025,
                "name": "clearWaiting",
                "start": 19040009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
                            "finish": 23270036,
                            "name": "city",
                            "start": 23270032,
                            "type": "local",
                            "view": "cityObject"
                        }
                    ],
                    "finish": 23290003,
                    "start": 23270000,
                    "type": "function",
                    "view": "function gen.clearWeLoveTheKing(city: cityObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 23270031,
                "name": "clearWeLoveTheKing",
                "start": 23270009,
                "type": "setfield"
            },
            {
                "desc": " Computes the resources harvested by the city from the terrain.\n Includes superhighway/supermarket/railroad bonus, but not factories/power plants.\n\n@*param* `ignoreCustomCosmic` โ If true, do not use the customCosmic city customisation to get production, refer to the current settings of terrain, baseTerrain and roadTrade.  If false or nil, refer to customCosmic module if it is available (otherwise, refer to current settings of terrain, baseTerrain and roadTrade).",
                "extends": {
                    "args": [
                        {
                            "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
                            "finish": 54760039,
                            "name": "city",
                            "start": 54760035,
                            "type": "local",
                            "view": "cityObject"
                        },
                        {
                            "desc": "If true, do not use the customCosmic city customisation to get production, refer to the current settings of terrain, baseTerrain and roadTrade.  If false or nil, refer to customCosmic module if it is available (otherwise, refer to current settings of terrain, baseTerrain and roadTrade).",
                            "finish": 54760058,
                            "name": "ignoreCustomCosmic",
                            "start": 54760040,
                            "type": "local",
                            "view": "boolean?"
                        }
                    ],
                    "desc": " Computes the resources harvested by the city from the terrain.\n Includes superhighway/supermarket/railroad bonus, but not factories/power plants.\n\n@*param* `ignoreCustomCosmic` โ If true, do not use the customCosmic city customisation to get production, refer to the current settings of terrain, baseTerrain and roadTrade.  If false or nil, refer to customCosmic module if it is available (otherwise, refer to current settings of terrain, baseTerrain and roadTrade).",
                    "finish": 54920003,
                    "returns": [
                        {
                            "name": "foodProduction",
                            "type": "function.return",
                            "view": "integer"
                        },
                        {
                            "name": "shieldProduction",
                            "type": "function.return",
                            "view": "integer"
                        },
                        {
                            "name": "tradeProduction",
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": 54760000,
                    "type": "function",
                    "view": "function gen.computeBaseProduction(city: cityObject, ignoreCustomCosmic?: boolean)\n  -> foodProduction: integer\n  2. shieldProduction: integer\n  3. tradeProduction: integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 54760034,
                "name": "computeBaseProduction",
                "start": 54760009,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 980001,
                    "start": 380016,
                    "type": "table",
                    "view": "table"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 380013,
                "name": "constants",
                "start": 380000,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 41890025,
                    "start": 41890016,
                    "type": "getlocal",
                    "view": "function"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 41890013,
                "name": "copyTable",
                "start": 41890000,
                "type": "setfield"
            },
            {
                "desc": " Constructs (and returns) a new table with the same keys as the input, \n as well as the same metatables. (The metatable is not copied, so that\n customData is still recognised as the correct data.)\n Tables within the table are also copied (along with their metatables).\n Note: although this is meant for copying tables, \n the way the function is constructed, any value can be input and\n returned.",
                "extends": {
                    "args": [
                        {
                            "finish": 42000041,
                            "name": "table",
                            "start": 42000036,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": " Constructs (and returns) a new table with the same keys as the input, \n as well as the same metatables. (The metatable is not copied, so that\n customData is still recognised as the correct data.)\n Tables within the table are also copied (along with their metatables).\n Note: although this is meant for copying tables, \n the way the function is constructed, any value can be input and\n returned.",
                    "finish": 42100003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": 42000000,
                    "type": "function",
                    "view": "function gen.copyTableWithMetatable(table: any)\n  -> any"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 42000035,
                "name": "copyTableWithMetatable",
                "start": 42000009,
                "type": "setfield"
            },
            {
                "desc": " Copies the attributes of the `parent` unit to the `child` unit.\n All attributes accessible through lua are copied (except unit type,\n and unit id number)\n  Useful if a unit's type must be changed (by creating a new unit), but everything\n  else should stay the same\n\n@*param* `parent` โ The unit giving the attributes.\n\n@*param* `child` โ The unit receiving the attributes.",
                "extends": {
                    "args": [
                        {
                            "desc": "The unit giving the attributes.",
                            "finish": 47980038,
                            "name": "parent",
                            "start": 47980032,
                            "type": "local",
                            "view": "unitObject"
                        },
                        {
                            "desc": "The unit receiving the attributes.",
                            "finish": 47980044,
                            "name": "child",
                            "start": 47980039,
                            "type": "local",
                            "view": "unitObject"
                        }
                    ],
                    "desc": " Copies the attributes of the `parent` unit to the `child` unit.\n All attributes accessible through lua are copied (except unit type,\n and unit id number)\n  Useful if a unit's type must be changed (by creating a new unit), but everything\n  else should stay the same\n\n@*param* `parent` โ The unit giving the attributes.\n\n@*param* `child` โ The unit receiving the attributes.",
                    "finish": 48130003,
                    "start": 47980000,
                    "type": "function",
                    "view": "function gen.copyUnitAttributes(parent: unitObject, child: unitObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 47980031,
                "name": "copyUnitAttributes",
                "start": 47980009,
                "type": "setfield"
            },
            {
                "desc": " gen.coverTile(tile,tribe) -> void\n covers a tile so it isn't visible to tribe (if it ever was)\n\n@*param* `tile` โ Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                "extends": {
                    "args": [
                        {
                            "desc": "Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                            "finish": 58500027,
                            "name": "tile",
                            "start": 58500023,
                            "type": "local",
                            "view": "table|tileObject"
                        },
                        {
                            "desc": "A tribe object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a tribe, which is to say the characteristics of the tribe overall, in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tribe)",
                            "finish": 58500033,
                            "name": "tribe",
                            "start": 58500028,
                            "type": "local",
                            "view": "tribeObject"
                        }
                    ],
                    "desc": " gen.coverTile(tile,tribe) -> void\n covers a tile so it isn't visible to tribe (if it ever was)\n\n@*param* `tile` โ Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                    "finish": 58540003,
                    "start": 58500000,
                    "type": "function",
                    "view": "function gen.coverTile(tile: table|tileObject, tribe: tribeObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 58500022,
                "name": "coverTile",
                "start": 58500009,
                "type": "setfield"
            },
            {
                "desc": "Returns functions necessary to create a basic custom data type.  Such a data type\nis a table, but uses a metatable to restrict the keys that are allowed to be used,\nand the values that can be assigned to those keys.  This way, errors can be\ngenerated when incorrect key-value pairs are assigned to the data type, rather\nthan when later code receives unexpected values.\n<br>Several parameters are defined with \"valueSpecification\" tables.\nA valueSpecification is a table with the following keys and values:<br><br>[\"nil\"] = true or nil<br>If this key is true, the specified value can be nil.<br><br>[\"boolean\"] = true, \"true\", \"false\", or nil<br>If this key is true (boolean value), the specified value can be a boolean.<br>If this key is \"true\" (string), then the specified value can be true, but not false.<br>If this key is \"false\" (string), then the specified value can be false, but not true.<br>If this key is nil, the specified value can't be a boolean.<br><br>[\"function\"] = true, string, or nil<br>if this key is true or string, the specified value can be a function.<br>If string, the string describes the function, e.g. `function(unit)-->number`.  Value specification checks do not check if the function actually matches the description, only that it is a function.<br>If this key is nil, the specified value can't be a function.<br><br>[\"number\"] = true or nil or {minVal=number/nil, maxVal=number/nil, integer=true/nil}<br>If true, the specified value can be any number.  If nil, the specified value can't be a number.<br>If table, any number must also be larger than the `minVal` (if specified) and smaller than the `maxVal` (if specified).  If the `integer` key is true, the value must also be an integer.<br><br>[\"string\"] = true or {[validString] = truthy} or nil<br>If this key is true, any string is allowed.<br>If it is a table, any string value must be a key in that table, with a truthy (anything other than false/nil) associated value.<br>If nil, the value can't be a string.<br><br>[\"table\"]=string, true, nil, or {[1]=function(table)->true or string, [2]=string}<br>If the key is a string, any table is accepted, and the string describes the kind of table needed.<br>If true, any table is accepted, and a generated description will be 'table'.<br>If the key is a table, the table's value for `1` is a function, which returns true if specified value is an acceptable table, and a string describing the problem if it is not.  The value for `2` is a string describing the required table, for generated descriptions/errors.<br>If nil, the specified value can't be a table.<br><br>[\"userdata\"] = {[dataTypeName]=isDataTypeFn} or nil<br>The keys to this table are strings that describe acceptable userdata, and the values are functions which return true if the specified value matches the type, and false otherwise.<br>E.g.<br>`{[\"unitTypeObject\"] = civ.isUnitType, [\"cityObject\"] = civ.isCity}`<br>Allows unitTypeObjects and cityObjects, but not other kinds of userdata.\n\n\n@*param* `dataName` โ <br>string<br><br> The name of the new data type.\n\n@*param* `specificKeyTable` โ <br>specificKeyTable={[key]=valueSpecification}<br><br>Each `key` is a key that is allowed in the `dataName` data type, and values assigned to the `key` must satisfy the corresponding `valueSpecification`.\n\n@*param* `generalKeyTable` โ <br>generalKeyTable = {[function(possibleKey)-->boolean] = valueSpecification} <br><br> This table allows for keys of a general form to be used in the data type.  For a `possibleKey`, if any `function(possibleKey)` returns true, a value can be assigned to `possibleKey` as long as it satisfies the valueSpecification.\n\n@*param* `defaultValueTable` โ <br>defaultValueTable = {[key]=value}<br><br>When a new `dataName` is created, if `key` is not specified, assign the corresponding `value` to it.\n\n@*param* `fixedKeyTable` โ <br>fixedKeyTable = {[key]=true}<br><br> If `key` is in this table, the new `dataName` can't change the value of the key after it is created.\n\n@*param* `aliasKeyTable` โ <br>aliasKeyTable = {[aliasKey] = key} or<br>fun(aliasKey)->key<br><br>If table, and the aliasKey is a key in the aliasKeyTable, then the associated key is used for indexing or assigning instead.<br>If function, all keys have the function applied to them, and the returned value is used as a key instead.\n\n@*return* โ Creates a new instance of the `dataName` data type, assigning to it all the table key-value pairs in the `table`.<br>Generates an error if any key-value pairs are invalid.\n\n@*return* โ Checks if `item` is an instance of the `dataName` data type, returns true if it is, and false otherwise.\n\n@*return* โ The [metatable](https://www.tutorialspoint.com/lua/lua_metatables.htm) for the `dataName` data type.  This is available in case you want to make more customizations to the data type.",
                "extends": {
                    "args": [
                        {
                            "desc": "<br>string<br><br> The name of the new data type.",
                            "finish": 81210036,
                            "name": "dataName",
                            "start": 81210028,
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "desc": "<br>specificKeyTable={[key]=valueSpecification}<br><br>Each `key` is a key that is allowed in the `dataName` data type, and values assigned to the `key` must satisfy the corresponding `valueSpecification`.",
                            "finish": 81210053,
                            "name": "specificKeyTable",
                            "start": 81210037,
                            "type": "local",
                            "view": "table<any, table>"
                        },
                        {
                            "desc": "<br>generalKeyTable = {[function(possibleKey)-->boolean] = valueSpecification} <br><br> This table allows for keys of a general form to be used in the data type.  For a `possibleKey`, if any `function(possibleKey)` returns true, a value can be assigned to `possibleKey` as long as it satisfies the valueSpecification.",
                            "finish": 81210069,
                            "name": "generalKeyTable",
                            "start": 81210054,
                            "type": "local",
                            "view": "table<fun(possibleKey: any):boolean, table>"
                        },
                        {
                            "desc": "<br>defaultValueTable = {[key]=value}<br><br>When a new `dataName` is created, if `key` is not specified, assign the corresponding `value` to it.",
                            "finish": 81210087,
                            "name": "defaultValueTable",
                            "start": 81210070,
                            "type": "local",
                            "view": "table"
                        },
                        {
                            "desc": "<br>fixedKeyTable = {[key]=true}<br><br> If `key` is in this table, the new `dataName` can't change the value of the key after it is created.",
                            "finish": 81210101,
                            "name": "fixedKeyTable",
                            "start": 81210088,
                            "type": "local",
                            "view": "table<any, true>"
                        },
                        {
                            "desc": "<br>aliasKeyTable = {[aliasKey] = key} or<br>fun(aliasKey)->key<br><br>If table, and the aliasKey is a key in the aliasKeyTable, then the associated key is used for indexing or assigning instead.<br>If function, all keys have the function applied to them, and the returned value is used as a key instead.",
                            "finish": 81210115,
                            "name": "aliasKeyTable",
                            "start": 81210102,
                            "type": "local",
                            "view": "(fun(aliasKey: any):any|table<any, any>|nil)?"
                        }
                    ],
                    "desc": "Returns functions necessary to create a basic custom data type.  Such a data type\nis a table, but uses a metatable to restrict the keys that are allowed to be used,\nand the values that can be assigned to those keys.  This way, errors can be\ngenerated when incorrect key-value pairs are assigned to the data type, rather\nthan when later code receives unexpected values.\n<br>Several parameters are defined with \"valueSpecification\" tables.\nA valueSpecification is a table with the following keys and values:<br><br>[\"nil\"] = true or nil<br>If this key is true, the specified value can be nil.<br><br>[\"boolean\"] = true, \"true\", \"false\", or nil<br>If this key is true (boolean value), the specified value can be a boolean.<br>If this key is \"true\" (string), then the specified value can be true, but not false.<br>If this key is \"false\" (string), then the specified value can be false, but not true.<br>If this key is nil, the specified value can't be a boolean.<br><br>[\"function\"] = true, string, or nil<br>if this key is true or string, the specified value can be a function.<br>If string, the string describes the function, e.g. `function(unit)-->number`.  Value specification checks do not check if the function actually matches the description, only that it is a function.<br>If this key is nil, the specified value can't be a function.<br><br>[\"number\"] = true or nil or {minVal=number/nil, maxVal=number/nil, integer=true/nil}<br>If true, the specified value can be any number.  If nil, the specified value can't be a number.<br>If table, any number must also be larger than the `minVal` (if specified) and smaller than the `maxVal` (if specified).  If the `integer` key is true, the value must also be an integer.<br><br>[\"string\"] = true or {[validString] = truthy} or nil<br>If this key is true, any string is allowed.<br>If it is a table, any string value must be a key in that table, with a truthy (anything other than false/nil) associated value.<br>If nil, the value can't be a string.<br><br>[\"table\"]=string, true, nil, or {[1]=function(table)->true or string, [2]=string}<br>If the key is a string, any table is accepted, and the string describes the kind of table needed.<br>If true, any table is accepted, and a generated description will be 'table'.<br>If the key is a table, the table's value for `1` is a function, which returns true if specified value is an acceptable table, and a string describing the problem if it is not.  The value for `2` is a string describing the required table, for generated descriptions/errors.<br>If nil, the specified value can't be a table.<br><br>[\"userdata\"] = {[dataTypeName]=isDataTypeFn} or nil<br>The keys to this table are strings that describe acceptable userdata, and the values are functions which return true if the specified value matches the type, and false otherwise.<br>E.g.<br>`{[\"unitTypeObject\"] = civ.isUnitType, [\"cityObject\"] = civ.isCity}`<br>Allows unitTypeObjects and cityObjects, but not other kinds of userdata.\n\n\n@*param* `dataName` โ <br>string<br><br> The name of the new data type.\n\n@*param* `specificKeyTable` โ <br>specificKeyTable={[key]=valueSpecification}<br><br>Each `key` is a key that is allowed in the `dataName` data type, and values assigned to the `key` must satisfy the corresponding `valueSpecification`.\n\n@*param* `generalKeyTable` โ <br>generalKeyTable = {[function(possibleKey)-->boolean] = valueSpecification} <br><br> This table allows for keys of a general form to be used in the data type.  For a `possibleKey`, if any `function(possibleKey)` returns true, a value can be assigned to `possibleKey` as long as it satisfies the valueSpecification.\n\n@*param* `defaultValueTable` โ <br>defaultValueTable = {[key]=value}<br><br>When a new `dataName` is created, if `key` is not specified, assign the corresponding `value` to it.\n\n@*param* `fixedKeyTable` โ <br>fixedKeyTable = {[key]=true}<br><br> If `key` is in this table, the new `dataName` can't change the value of the key after it is created.\n\n@*param* `aliasKeyTable` โ <br>aliasKeyTable = {[aliasKey] = key} or<br>fun(aliasKey)->key<br><br>If table, and the aliasKey is a key in the aliasKeyTable, then the associated key is used for indexing or assigning instead.<br>If function, all keys have the function applied to them, and the returned value is used as a key instead.\n\n@*return* โ Creates a new instance of the `dataName` data type, assigning to it all the table key-value pairs in the `table`.<br>Generates an error if any key-value pairs are invalid.\n\n@*return* โ Checks if `item` is an instance of the `dataName` data type, returns true if it is, and false otherwise.\n\n@*return* โ The [metatable](https://www.tutorialspoint.com/lua/lua_metatables.htm) for the `dataName` data type.  This is available in case you want to make more customizations to the data type.",
                    "finish": 82320003,
                    "returns": [
                        {
                            "desc": "Creates a new instance of the `dataName` data type, assigning to it all the table key-value pairs in the `table`.<br>Generates an error if any key-value pairs are invalid.",
                            "type": "function.return",
                            "view": "fun(table: table):<newDataType>"
                        },
                        {
                            "desc": "Checks if `item` is an instance of the `dataName` data type, returns true if it is, and false otherwise.",
                            "type": "function.return",
                            "view": "fun(item: any):boolean"
                        },
                        {
                            "desc": "The [metatable](https://www.tutorialspoint.com/lua/lua_metatables.htm) for the `dataName` data type.  This is available in case you want to make more customizations to the data type.",
                            "type": "function.return",
                            "view": "table"
                        }
                    ],
                    "start": 81210000,
                    "type": "function",
                    "view": "function gen.createDataType(dataName: string, specificKeyTable: table<any, table>, generalKeyTable: table<fun(possibleKey: any):boolean, table>, defaultValueTable: table, fixedKeyTable: table<any, true>, aliasKeyTable?: fun(aliasKey: any):any|table<any, any>)\n  -> fun(table: table):<newDataType>\n  2. fun(item: any):boolean\n  3. table"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 81210027,
                "name": "createDataType",
                "start": 81210009,
                "type": "setfield"
            },
            {
                "desc": "This is a createUnit function, meant to supersede civlua.createUnit.\nReturns a table of units, indexed by integers starting at 1 (unless no units were created.\n\n@*param* `unitType` โ The type of unit to create.\n\n@*param* `tribe` โ The owner of the new unit or units.\n\n@*param* `locations` โ locations is one of the following:<br><br>tileObject<br>{xCoord,yCoord}<br>{xCoord,yCoord,zCoord}<br>{x=xCoord,y=yCoord}<br>{x=xCoord,y=yCoord,z=zCoord}<br>table<integer,above_types>\n\n@*param* `options` โ options is a table with the following keys: <br><br> count : integer|nil <br> The number of units to create.  `nil` means 1.<br><br>randomize : boolean|nil <br> If true, randomize the list of locations.  If false or nil, try to place at the tile with the smallest index in the table first.<br><br>scatter : boolean|nil <br> If true, and if randomize is true, each unit is created on a random tile in the location table.<br><br>inCapital : boolean|nil <br> If true, attempt to place in the capital before other locations.  IN case of multiple capitals, capitals are ranked with smallest city id first.  randomize/scatter applies to list of capitals if this is selected.<br><br>veteran : boolean|number|nil <br> If true, make the created units veteran.  If a fraction between 0 and 1, each unit has this probability of being veteran.  If number 1 or more, this many of the count are made veteran (take floor).  If nil or false, no veterans.<br><br>homeCity : city|true|nil <br> If city, that city is the home city.  If true, the game selects the home city (probably the way a city is chosen if you crate a unit using the cheat menu).  If nil, no home city.<br><br>overrideCanEnter : boolean|nil <br> If true, the units will be placed even if unitType : canEnter(tile) returns false.  False or nil means follow the restriction.  civ.canEnter appears to check if the terrain is impassible, or if the unit can cross impassible.<br><br>overrideDomain : boolean|nil <br> If true, sea units can be created on land outside cities, and land units at sea.  False or nil means units can only be created where they could travel naturally.<br><br>overrideDefender : boolean|nil <br> If true, unit can be placed on tiles with enemy units or cities.  False or nil means the tile must have no enemy city, and no enemy defender.",
                "extends": {
                    "args": [
                        {
                            "desc": "The type of unit to create.",
                            "finish": 51010032,
                            "name": "unitType",
                            "start": 51010024,
                            "type": "local",
                            "view": "unitTypeObject"
                        },
                        {
                            "desc": "The owner of the new unit or units.",
                            "finish": 51010038,
                            "name": "tribe",
                            "start": 51010033,
                            "type": "local",
                            "view": "tribeObject"
                        },
                        {
                            "desc": "locations is one of the following:<br><br>tileObject<br>{xCoord,yCoord}<br>{xCoord,yCoord,zCoord}<br>{x=xCoord,y=yCoord}<br>{x=xCoord,y=yCoord,z=zCoord}<br>table<integer,above_types>",
                            "finish": 51010048,
                            "name": "locations",
                            "start": 51010039,
                            "type": "local",
                            "view": "table|table<integer, table|tileObject>|tileObject"
                        },
                        {
                            "desc": "options is a table with the following keys: <br><br> count : integer|nil <br> The number of units to create.  `nil` means 1.<br><br>randomize : boolean|nil <br> If true, randomize the list of locations.  If false or nil, try to place at the tile with the smallest index in the table first.<br><br>scatter : boolean|nil <br> If true, and if randomize is true, each unit is created on a random tile in the location table.<br><br>inCapital : boolean|nil <br> If true, attempt to place in the capital before other locations.  IN case of multiple capitals, capitals are ranked with smallest city id first.  randomize/scatter applies to list of capitals if this is selected.<br><br>veteran : boolean|number|nil <br> If true, make the created units veteran.  If a fraction between 0 and 1, each unit has this probability of being veteran.  If number 1 or more, this many of the count are made veteran (take floor).  If nil or false, no veterans.<br><br>homeCity : city|true|nil <br> If city, that city is the home city.  If true, the game selects the home city (probably the way a city is chosen if you crate a unit using the cheat menu).  If nil, no home city.<br><br>overrideCanEnter : boolean|nil <br> If true, the units will be placed even if unitType : canEnter(tile) returns false.  False or nil means follow the restriction.  civ.canEnter appears to check if the terrain is impassible, or if the unit can cross impassible.<br><br>overrideDomain : boolean|nil <br> If true, sea units can be created on land outside cities, and land units at sea.  False or nil means units can only be created where they could travel naturally.<br><br>overrideDefender : boolean|nil <br> If true, unit can be placed on tiles with enemy units or cities.  False or nil means the tile must have no enemy city, and no enemy defender.",
                            "finish": 51010056,
                            "name": "options",
                            "start": 51010049,
                            "type": "local",
                            "view": "table"
                        }
                    ],
                    "desc": "This is a createUnit function, meant to supersede civlua.createUnit.\nReturns a table of units, indexed by integers starting at 1 (unless no units were created.\n\n@*param* `unitType` โ The type of unit to create.\n\n@*param* `tribe` โ The owner of the new unit or units.\n\n@*param* `locations` โ locations is one of the following:<br><br>tileObject<br>{xCoord,yCoord}<br>{xCoord,yCoord,zCoord}<br>{x=xCoord,y=yCoord}<br>{x=xCoord,y=yCoord,z=zCoord}<br>table<integer,above_types>\n\n@*param* `options` โ options is a table with the following keys: <br><br> count : integer|nil <br> The number of units to create.  `nil` means 1.<br><br>randomize : boolean|nil <br> If true, randomize the list of locations.  If false or nil, try to place at the tile with the smallest index in the table first.<br><br>scatter : boolean|nil <br> If true, and if randomize is true, each unit is created on a random tile in the location table.<br><br>inCapital : boolean|nil <br> If true, attempt to place in the capital before other locations.  IN case of multiple capitals, capitals are ranked with smallest city id first.  randomize/scatter applies to list of capitals if this is selected.<br><br>veteran : boolean|number|nil <br> If true, make the created units veteran.  If a fraction between 0 and 1, each unit has this probability of being veteran.  If number 1 or more, this many of the count are made veteran (take floor).  If nil or false, no veterans.<br><br>homeCity : city|true|nil <br> If city, that city is the home city.  If true, the game selects the home city (probably the way a city is chosen if you crate a unit using the cheat menu).  If nil, no home city.<br><br>overrideCanEnter : boolean|nil <br> If true, the units will be placed even if unitType : canEnter(tile) returns false.  False or nil means follow the restriction.  civ.canEnter appears to check if the terrain is impassible, or if the unit can cross impassible.<br><br>overrideDomain : boolean|nil <br> If true, sea units can be created on land outside cities, and land units at sea.  False or nil means units can only be created where they could travel naturally.<br><br>overrideDefender : boolean|nil <br> If true, unit can be placed on tiles with enemy units or cities.  False or nil means the tile must have no enemy city, and no enemy defender.",
                    "finish": 52320003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "table"
                        }
                    ],
                    "start": 51010000,
                    "type": "function",
                    "view": "function gen.createUnit(unitType: unitTypeObject, tribe: tribeObject, locations: table|table<integer, table|tileObject>|tileObject, options: table)\n  -> table"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 51010023,
                "name": "createUnit",
                "start": 51010009,
                "type": "setfield"
            },
            {
                "desc": " gen.declareMapFlat()-->void\n tells this module that the map should be considered flat\n for things like distances and adjacent squares\n no longer has practical effect, since above\n functions access world shape directly with TOTPP v16",
                "extends": {
                    "args": [],
                    "desc": " gen.declareMapFlat()-->void\n tells this module that the map should be considered flat\n for things like distances and adjacent squares\n no longer has practical effect, since above\n functions access world shape directly with TOTPP v16",
                    "finish": 9720003,
                    "start": 9700000,
                    "type": "function",
                    "view": "function gen.declareMapFlat()"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 9700027,
                "name": "declareMapFlat",
                "start": 9700009,
                "type": "setfield"
            },
            {
                "desc": " gen.declareMapRound()-->void",
                "extends": {
                    "args": [],
                    "desc": " gen.declareMapRound()-->void",
                    "finish": 9780003,
                    "start": 9760000,
                    "type": "function",
                    "view": "function gen.declareMapRound()"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 9760028,
                "name": "declareMapRound",
                "start": 9760009,
                "type": "setfield"
            },
            {
                "desc": " \"Defeats\" the loser, deletes the loser, and returns a unit if and only if the loser was demoted, otherwise nil is returned.\n Runs the events for unit defeat, death, and deletion.",
                "extends": {
                    "args": [
                        {
                            "desc": "A unit object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit in the game, and provides a means of interacting with it. This should not be confused with the unit type object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unit)",
                            "finish": 48850029,
                            "name": "loser",
                            "start": 48850024,
                            "type": "local",
                            "view": "unitObject"
                        },
                        {
                            "desc": "A unit object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit in the game, and provides a means of interacting with it. This should not be confused with the unit type object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unit)",
                            "finish": 48850036,
                            "name": "winner",
                            "start": 48850030,
                            "type": "local",
                            "view": "unitObject"
                        },
                        {
                            "desc": "A unit object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit in the game, and provides a means of interacting with it. This should not be confused with the unit type object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unit)",
                            "finish": 48850046,
                            "name": "aggressor",
                            "start": 48850037,
                            "type": "local",
                            "view": "unitObject"
                        },
                        {
                            "desc": "A unit object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit in the game, and provides a means of interacting with it. This should not be confused with the unit type object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unit)",
                            "finish": 48850053,
                            "name": "victim",
                            "start": 48850047,
                            "type": "local",
                            "view": "unitObject"
                        },
                        {
                            "desc": "A tile object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a map \"square\" in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tile)",
                            "finish": 48850067,
                            "name": "loserLocation",
                            "start": 48850054,
                            "type": "local",
                            "view": "tileObject"
                        },
                        {
                            "desc": "A boolean is a data type native to Lua with exactly two possible values, <code>true</code> and <code>false</code>. These are often used when evaluating logical statements, but logical statements accept other values as well. All values except <code>false</code> and <code>nil</code> are considered 'truthy', even values such as 0 or the empty string.\n[Programming in Lua, 2.2 -- Booleans](https://www.lua.org/pil/2.2.html)",
                            "finish": 48850083,
                            "name": "winnerVetStatus",
                            "start": 48850068,
                            "type": "local",
                            "view": "boolean"
                        },
                        {
                            "desc": "A boolean is a data type native to Lua with exactly two possible values, <code>true</code> and <code>false</code>. These are often used when evaluating logical statements, but logical statements accept other values as well. All values except <code>false</code> and <code>nil</code> are considered 'truthy', even values such as 0 or the empty string.\n[Programming in Lua, 2.2 -- Booleans](https://www.lua.org/pil/2.2.html)",
                            "finish": 48850098,
                            "name": "loserVetStatus",
                            "start": 48850084,
                            "type": "local",
                            "view": "boolean"
                        }
                    ],
                    "desc": " \"Defeats\" the loser, deletes the loser, and returns a unit if and only if the loser was demoted, otherwise nil is returned.\n Runs the events for unit defeat, death, and deletion.",
                    "finish": 48920003,
                    "returns": [
                        {
                            "name": "survivingDemotedUnit",
                            "type": "function.return",
                            "view": "unitObject|nil"
                        }
                    ],
                    "start": 48850000,
                    "type": "function",
                    "view": "function gen.defeatUnit(loser: unitObject, winner: unitObject, aggressor: unitObject, victim: unitObject, loserLocation: tileObject, winnerVetStatus: boolean, loserVetStatus: boolean)\n  -> survivingDemotedUnit: unitObject|nil"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 48850023,
                "name": "defeatUnit",
                "start": 48850009,
                "type": "setfield"
            },
            {
                "desc": " if tile has farmland, reduce to irrigation\n if tile has irrigation, remove\n does nothing if city present\n\n@*param* `tile` โ Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                "extends": {
                    "args": [
                        {
                            "desc": "Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                            "finish": 13030036,
                            "name": "tile",
                            "start": 13030032,
                            "type": "local",
                            "view": "table|tileObject"
                        }
                    ],
                    "desc": " if tile has farmland, reduce to irrigation\n if tile has irrigation, remove\n does nothing if city present\n\n@*param* `tile` โ Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                    "finish": 13130003,
                    "start": 13030000,
                    "type": "function",
                    "view": "function gen.degradeAgriculture(tile: table|tileObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 13030031,
                "name": "degradeAgriculture",
                "start": 13030009,
                "type": "setfield"
            },
            {
                "desc": " reduces railroad to road, if rail exists\n if no rail but road, removes road\n if no transportation, does nothing\n if city does nothing\n\n@*param* `tile` โ Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                "extends": {
                    "args": [
                        {
                            "desc": "Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                            "finish": 14430039,
                            "name": "tile",
                            "start": 14430035,
                            "type": "local",
                            "view": "table|tileObject"
                        }
                    ],
                    "desc": " reduces railroad to road, if rail exists\n if no rail but road, removes road\n if no transportation, does nothing\n if city does nothing\n\n@*param* `tile` โ Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                    "finish": 14520003,
                    "start": 14430000,
                    "type": "function",
                    "view": "function gen.degradeTransportation(tile: table|tileObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 14430034,
                "name": "degradeTransportation",
                "start": 14430009,
                "type": "setfield"
            },
            {
                "desc": " Deletes the deleted unit.\n I the unit is being 'replaced', the replacing unit must be provided.\n Runs events associated with unit deletion.\n>void",
                "extends": {
                    "args": [
                        {
                            "desc": "A unit object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit in the game, and provides a means of interacting with it. This should not be confused with the unit type object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unit)",
                            "finish": 49140035,
                            "name": "deletedUnit",
                            "start": 49140024,
                            "type": "local",
                            "view": "unitObject"
                        },
                        {
                            "desc": "A unit object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit in the game, and provides a means of interacting with it. This should not be confused with the unit type object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unit)",
                            "finish": 49140051,
                            "name": "replacementUnit",
                            "start": 49140036,
                            "type": "local",
                            "view": "unitObject|nil"
                        }
                    ],
                    "desc": " Deletes the deleted unit.\n I the unit is being 'replaced', the replacing unit must be provided.\n Runs events associated with unit deletion.\n>void",
                    "finish": 49200003,
                    "start": 49140000,
                    "type": "function",
                    "view": "function gen.deleteUnit(deletedUnit: unitObject, replacementUnit: unitObject|nil)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 49140023,
                "name": "deleteUnit",
                "start": 49140009,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 78210055,
                    "start": 78210028,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 78210025,
                "name": "describeAllowableData",
                "start": 78210000,
                "type": "setfield"
            },
            {
                "desc": "  Takes a valueSpecification, and returns a string describing the valid values.\n\n@*param* `valueSpecification` โ A valueSpecification is a table with the following keys and values:<br><br>[\"nil\"] = true or nil<br>If this key is true, the specified value can be nil.<br><br>[\"boolean\"] = true, \"true\", \"false\", or nil<br>If this key is true (boolean value), the specified value can be a boolean.<br>If this key is \"true\" (string), then the specified value can be true, but not false.<br>If this key is \"false\" (string), then the specified value can be false, but not true.<br>If this key is nil, the specified value can't be a boolean.<br><br>[\"function\"] = true, string, or nil<br>if this key is true or string, the specified value can be a function.<br>If string, the string describes the function, e.g. `function(unit)-->number`.  Value specification checks do not check if the function actually matches the description, only that it is a function.<br>If this key is nil, the specified value can't be a function.<br><br>[\"number\"] = true or nil or {minVal=number/nil, maxVal=number/nil, integer=true/nil}<br>If true, the specified value can be any number.  If nil, the specified value can't be a number.<br>If table, any number must also be larger than the `minVal` (if specified) and smaller than the `maxVal` (if specified).  If the `integer` key is true, the value must also be an integer.<br><br>[\"string\"] = true or {[validString] = truthy} or nil<br>If this key is true, any string is allowed.<br>If it is a table, any string value must be a key in that table, with a truthy (anything other than false/nil) associated value.<br>If nil, the value can't be a string.<br><br>[\"table\"]=string, true, nil, or {[1]=function(table)->true or string, [2]=string}<br>If the key is a string, any table is accepted, and the string describes the kind of table needed.<br>If true, any table is accepted, and a generated description will be 'table'.<br>If the key is a table, the table's value for `1` is a function, which returns true if specified value is an acceptable table, and a string describing the problem if it is not.  The value for `2` is a string describing the required table, for generated descriptions/errors.<br>If nil, the specified value can't be a table.<br><br>[\"userdata\"] = {[dataTypeName]=isDataTypeFn} or nil<br>The keys to this table are strings that describe acceptable userdata, and the values are functions which return true if the specified value matches the type, and false otherwise.<br>E.g.<br>`{[\"unitTypeObject\"] = civ.isUnitType, [\"cityObject\"] = civ.isCity}`<br>Allows unitTypeObjects and cityObjects, but not other kinds of userdata.",
                "extends": {
                    "args": [
                        {
                            "desc": "A valueSpecification is a table with the following keys and values:<br><br>[\"nil\"] = true or nil<br>If this key is true, the specified value can be nil.<br><br>[\"boolean\"] = true, \"true\", \"false\", or nil<br>If this key is true (boolean value), the specified value can be a boolean.<br>If this key is \"true\" (string), then the specified value can be true, but not false.<br>If this key is \"false\" (string), then the specified value can be false, but not true.<br>If this key is nil, the specified value can't be a boolean.<br><br>[\"function\"] = true, string, or nil<br>if this key is true or string, the specified value can be a function.<br>If string, the string describes the function, e.g. `function(unit)-->number`.  Value specification checks do not check if the function actually matches the description, only that it is a function.<br>If this key is nil, the specified value can't be a function.<br><br>[\"number\"] = true or nil or {minVal=number/nil, maxVal=number/nil, integer=true/nil}<br>If true, the specified value can be any number.  If nil, the specified value can't be a number.<br>If table, any number must also be larger than the `minVal` (if specified) and smaller than the `maxVal` (if specified).  If the `integer` key is true, the value must also be an integer.<br><br>[\"string\"] = true or {[validString] = truthy} or nil<br>If this key is true, any string is allowed.<br>If it is a table, any string value must be a key in that table, with a truthy (anything other than false/nil) associated value.<br>If nil, the value can't be a string.<br><br>[\"table\"]=string, true, nil, or {[1]=function(table)->true or string, [2]=string}<br>If the key is a string, any table is accepted, and the string describes the kind of table needed.<br>If true, any table is accepted, and a generated description will be 'table'.<br>If the key is a table, the table's value for `1` is a function, which returns true if specified value is an acceptable table, and a string describing the problem if it is not.  The value for `2` is a string describing the required table, for generated descriptions/errors.<br>If nil, the specified value can't be a table.<br><br>[\"userdata\"] = {[dataTypeName]=isDataTypeFn} or nil<br>The keys to this table are strings that describe acceptable userdata, and the values are functions which return true if the specified value matches the type, and false otherwise.<br>E.g.<br>`{[\"unitTypeObject\"] = civ.isUnitType, [\"cityObject\"] = civ.isCity}`<br>Allows unitTypeObjects and cityObjects, but not other kinds of userdata.",
                            "finish": 77650055,
                            "name": "valueSpecification",
                            "start": 77650037,
                            "type": "local",
                            "view": "table"
                        }
                    ],
                    "desc": "  Takes a valueSpecification, and returns a string describing the valid values.\n\n@*param* `valueSpecification` โ A valueSpecification is a table with the following keys and values:<br><br>[\"nil\"] = true or nil<br>If this key is true, the specified value can be nil.<br><br>[\"boolean\"] = true, \"true\", \"false\", or nil<br>If this key is true (boolean value), the specified value can be a boolean.<br>If this key is \"true\" (string), then the specified value can be true, but not false.<br>If this key is \"false\" (string), then the specified value can be false, but not true.<br>If this key is nil, the specified value can't be a boolean.<br><br>[\"function\"] = true, string, or nil<br>if this key is true or string, the specified value can be a function.<br>If string, the string describes the function, e.g. `function(unit)-->number`.  Value specification checks do not check if the function actually matches the description, only that it is a function.<br>If this key is nil, the specified value can't be a function.<br><br>[\"number\"] = true or nil or {minVal=number/nil, maxVal=number/nil, integer=true/nil}<br>If true, the specified value can be any number.  If nil, the specified value can't be a number.<br>If table, any number must also be larger than the `minVal` (if specified) and smaller than the `maxVal` (if specified).  If the `integer` key is true, the value must also be an integer.<br><br>[\"string\"] = true or {[validString] = truthy} or nil<br>If this key is true, any string is allowed.<br>If it is a table, any string value must be a key in that table, with a truthy (anything other than false/nil) associated value.<br>If nil, the value can't be a string.<br><br>[\"table\"]=string, true, nil, or {[1]=function(table)->true or string, [2]=string}<br>If the key is a string, any table is accepted, and the string describes the kind of table needed.<br>If true, any table is accepted, and a generated description will be 'table'.<br>If the key is a table, the table's value for `1` is a function, which returns true if specified value is an acceptable table, and a string describing the problem if it is not.  The value for `2` is a string describing the required table, for generated descriptions/errors.<br>If nil, the specified value can't be a table.<br><br>[\"userdata\"] = {[dataTypeName]=isDataTypeFn} or nil<br>The keys to this table are strings that describe acceptable userdata, and the values are functions which return true if the specified value matches the type, and false otherwise.<br>E.g.<br>`{[\"unitTypeObject\"] = civ.isUnitType, [\"cityObject\"] = civ.isCity}`<br>Allows unitTypeObjects and cityObjects, but not other kinds of userdata.",
                    "finish": 78200003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": 77650000,
                    "type": "function",
                    "view": "function gen.describeAllowableValues(valueSpecification: table)\n  -> string"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 77650036,
                "name": "describeAllowableValues",
                "start": 77650009,
                "type": "setfield"
            },
            {
                "desc": " Takes two objects and a 'vertical distance' (0 if absent)\n and computes the distance between them.  \n zDist is the number of tiles that one unit of z coordinate \"distance\" is equivalent to\n Computes the distance you would get by counting tiles.\n If you want the game's approximation of \"Euclidean\" distance that\n is used in many game mechanics, use gen.gameMechanicDistance\n\n@*param* `itemA` โ Can be:<br><br>tileObject<br><br>unitObject<br><br>cityObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)\n\n@*param* `itemB` โ Can be:<br><br>tileObject<br><br>unitObject<br><br>cityObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)\n\n@*param* `zDist` โ The distance between tiles with same x,y coordinates but differing in z by 1. 0 by default.",
                "extends": {
                    "args": [
                        {
                            "desc": "Can be:<br><br>tileObject<br><br>unitObject<br><br>cityObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                            "finish": 10220027,
                            "name": "itemA",
                            "start": 10220022,
                            "type": "local",
                            "view": "table|cityObject|tileObject|unitObject"
                        },
                        {
                            "desc": "Can be:<br><br>tileObject<br><br>unitObject<br><br>cityObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                            "finish": 10220033,
                            "name": "itemB",
                            "start": 10220028,
                            "type": "local",
                            "view": "table|cityObject|tileObject|unitObject"
                        },
                        {
                            "desc": "The distance between tiles with same x,y coordinates but differing in z by 1. 0 by default.",
                            "finish": 10220039,
                            "name": "zDist",
                            "start": 10220034,
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": " Takes two objects and a 'vertical distance' (0 if absent)\n and computes the distance between them.  \n zDist is the number of tiles that one unit of z coordinate \"distance\" is equivalent to\n Computes the distance you would get by counting tiles.\n If you want the game's approximation of \"Euclidean\" distance that\n is used in many game mechanics, use gen.gameMechanicDistance\n\n@*param* `itemA` โ Can be:<br><br>tileObject<br><br>unitObject<br><br>cityObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)\n\n@*param* `itemB` โ Can be:<br><br>tileObject<br><br>unitObject<br><br>cityObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)\n\n@*param* `zDist` โ The distance between tiles with same x,y coordinates but differing in z by 1. 0 by default.",
                    "finish": 10510003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": 10220000,
                    "type": "function",
                    "view": "function gen.distance(itemA: table|cityObject|tileObject|unitObject, itemB: table|cityObject|tileObject|unitObject, zDist?: integer)\n  -> integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 10220021,
                "name": "distance",
                "start": 10220009,
                "type": "setfield"
            },
            {
                "desc": " Changes a table's metatable, so that an error is \n generated when a key with a nil\n value is accessed from the table.\n Useful for debugging in certain circumstances.\n\n@*param* `tableName` โ the name for the table you want to be used in error displays.",
                "extends": {
                    "args": [
                        {
                            "desc": "A table is a data type native to Lua, and links \"keys\" (usually numbers or strings) to \"values\" (any kind of data, including other tables). This is the only data structuring mechanism in Lua, and many of the data types documented here are simply tables with restrictions on their keys or values. If a key has not been assigned a value, the table returns nil as the corresponding value, and assigning nil as a value to a key removes that key from the table.\n[Programming in Lua, 2.5 -- Tables](https://www.lua.org/pil/2.5.html)",
                            "finish": 42200033,
                            "name": "table",
                            "start": 42200028,
                            "type": "local",
                            "view": "table"
                        },
                        {
                            "desc": "the name for the table you want to be used in error displays.",
                            "finish": 42200043,
                            "name": "tableName",
                            "start": 42200034,
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": " Changes a table's metatable, so that an error is \n generated when a key with a nil\n value is accessed from the table.\n Useful for debugging in certain circumstances.\n\n@*param* `tableName` โ the name for the table you want to be used in error displays.",
                    "finish": 42240003,
                    "start": 42200000,
                    "type": "function",
                    "view": "function gen.errorForNilKey(table: table, tableName: string)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 42200027,
                "name": "errorForNilKey",
                "start": 42200009,
                "type": "setfield"
            },
            {
                "desc": " Changes the `dataTable` so that values can't be assigned to keys which currently have a nil value.",
                "extends": {
                    "args": [
                        {
                            "desc": "A dataTable acts as an ordinary table, but, if desired, you can forbid values from being changed, forbid new key-value pairs from being stored, and forbid trying to access keys with a `nil` value.  These features can make debugging easier by causing an error to happen on the line the mistake is made.\n\nThe following functions can be used to control the data table's features:\n\ngen.forbidReplacement(dataTable) --> void\n\ngen.allowReplacement(dataTable) --> void\n\ngen.forbidNewKeys(dataTable) --> void\n\ngen.allowNewKeys(dataTable) --> void\n\ngen.forbidNilValueAccess(dataTable) --> void\n\ngen.allowNilValueAccess(dataTable) --> void\n\ngen.restrictValues(dataTable,isValidValueFn,makeValidValueFn) --> void\n",
                            "finish": 66300036,
                            "name": "dataTable",
                            "start": 66300027,
                            "type": "local",
                            "view": "dataTable"
                        }
                    ],
                    "desc": " Changes the `dataTable` so that values can't be assigned to keys which currently have a nil value.",
                    "finish": 66360003,
                    "start": 66300000,
                    "type": "function",
                    "view": "function gen.forbidNewKeys(dataTable: dataTable)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 66300026,
                "name": "forbidNewKeys",
                "start": 66300009,
                "type": "setfield"
            },
            {
                "desc": " Changes the `dataTable` so that an error is generated if the program tries to access a key which currently has a nil value.",
                "extends": {
                    "args": [
                        {
                            "desc": "A dataTable acts as an ordinary table, but, if desired, you can forbid values from being changed, forbid new key-value pairs from being stored, and forbid trying to access keys with a `nil` value.  These features can make debugging easier by causing an error to happen on the line the mistake is made.\n\nThe following functions can be used to control the data table's features:\n\ngen.forbidReplacement(dataTable) --> void\n\ngen.allowReplacement(dataTable) --> void\n\ngen.forbidNewKeys(dataTable) --> void\n\ngen.allowNewKeys(dataTable) --> void\n\ngen.forbidNilValueAccess(dataTable) --> void\n\ngen.allowNilValueAccess(dataTable) --> void\n\ngen.restrictValues(dataTable,isValidValueFn,makeValidValueFn) --> void\n",
                            "finish": 66540043,
                            "name": "dataTable",
                            "start": 66540034,
                            "type": "local",
                            "view": "dataTable"
                        }
                    ],
                    "desc": " Changes the `dataTable` so that an error is generated if the program tries to access a key which currently has a nil value.",
                    "finish": 66600003,
                    "start": 66540000,
                    "type": "function",
                    "view": "function gen.forbidNilValueAccess(dataTable: dataTable)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 66540033,
                "name": "forbidNilValueAccess",
                "start": 66540009,
                "type": "setfield"
            },
            {
                "desc": " Changes the `dataTable` so that non-nil values can not be changed.",
                "extends": {
                    "args": [
                        {
                            "desc": "A dataTable acts as an ordinary table, but, if desired, you can forbid values from being changed, forbid new key-value pairs from being stored, and forbid trying to access keys with a `nil` value.  These features can make debugging easier by causing an error to happen on the line the mistake is made.\n\nThe following functions can be used to control the data table's features:\n\ngen.forbidReplacement(dataTable) --> void\n\ngen.allowReplacement(dataTable) --> void\n\ngen.forbidNewKeys(dataTable) --> void\n\ngen.allowNewKeys(dataTable) --> void\n\ngen.forbidNilValueAccess(dataTable) --> void\n\ngen.allowNilValueAccess(dataTable) --> void\n\ngen.restrictValues(dataTable,isValidValueFn,makeValidValueFn) --> void\n",
                            "finish": 66050040,
                            "name": "dataTable",
                            "start": 66050031,
                            "type": "local",
                            "view": "dataTable"
                        }
                    ],
                    "desc": " Changes the `dataTable` so that non-nil values can not be changed.",
                    "finish": 66110003,
                    "start": 66050000,
                    "type": "function",
                    "view": "function gen.forbidReplacement(dataTable: dataTable)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 66050030,
                "name": "forbidReplacement",
                "start": 66050009,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 30880057,
                    "start": 30880034,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 30880031,
                "name": "fullHealthMovementAllowance",
                "start": 30880000,
                "type": "setfield"
            },
            {
                "desc": " gen.gameMechanicDistance(itemOnMap1,itemOnMap2)\n  provides a distance measure that is believed to be used\n  for internal distance calculations (such as caravan payments\n  or city corruption)\n  This distance is scaled to match the \"Communism Palace Distance\",\n  (based on the corruption work by Knighttime)\n  Diagonal movement is \"1\" distance, corner to corner is 1.5 (rounded down)\n\n@*param* `itemA` โ Can be:<br><br>tileObject<br><br>unitObject<br><br>cityObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)\n\n@*param* `itemB` โ Can be:<br><br>tileObject<br><br>unitObject<br><br>cityObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                "extends": {
                    "args": [
                        {
                            "desc": "Can be:<br><br>tileObject<br><br>unitObject<br><br>cityObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                            "finish": 10650039,
                            "name": "itemA",
                            "start": 10650034,
                            "type": "local",
                            "view": "table|cityObject|tileObject|unitObject"
                        },
                        {
                            "desc": "Can be:<br><br>tileObject<br><br>unitObject<br><br>cityObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                            "finish": 10650045,
                            "name": "itemB",
                            "start": 10650040,
                            "type": "local",
                            "view": "table|cityObject|tileObject|unitObject"
                        }
                    ],
                    "desc": " gen.gameMechanicDistance(itemOnMap1,itemOnMap2)\n  provides a distance measure that is believed to be used\n  for internal distance calculations (such as caravan payments\n  or city corruption)\n  This distance is scaled to match the \"Communism Palace Distance\",\n  (based on the corruption work by Knighttime)\n  Diagonal movement is \"1\" distance, corner to corner is 1.5 (rounded down)\n\n@*param* `itemA` โ Can be:<br><br>tileObject<br><br>unitObject<br><br>cityObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)\n\n@*param* `itemB` โ Can be:<br><br>tileObject<br><br>unitObject<br><br>cityObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                    "finish": 10960003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": 10650000,
                    "type": "function",
                    "view": "function gen.gameMechanicDistance(itemA: table|cityObject|tileObject|unitObject, itemB: table|cityObject|tileObject|unitObject)\n  -> integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 10650033,
                "name": "gameMechanicDistance",
                "start": 10650009,
                "type": "setfield"
            },
            {
                "desc": "gen.getActivationFunction()-->function(unit,source)\nprovides the unit activation function linked to the general library",
                "extends": {
                    "args": [],
                    "desc": "gen.getActivationFunction()-->function(unit,source)\nprovides the unit activation function linked to the general library",
                    "finish": 37370003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "fun(unit: unitObject, source: boolean)"
                        }
                    ],
                    "start": 37350000,
                    "type": "function",
                    "view": "function gen.getActivationFunction()\n  -> fun(unit: unitObject, source: boolean)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 37350034,
                "name": "getActivationFunction",
                "start": 37350009,
                "type": "setfield"
            },
            {
                "desc": " Returns a table (indexed by integers) with all adjacent\n tiles to the input tile.  Note: some keys will have nil values\n if the tile is on the edge of the map.\n\n@*param* `tile` โ if table, should be a coordinate pair or triple\n\n@*return* `tileTable` โ table of adjacent tiles",
                "extends": {
                    "args": [
                        {
                            "desc": "if table, should be a coordinate pair or triple",
                            "finish": 39560034,
                            "name": "tile",
                            "start": 39560030,
                            "type": "local",
                            "view": "table|tileObject"
                        }
                    ],
                    "desc": " Returns a table (indexed by integers) with all adjacent\n tiles to the input tile.  Note: some keys will have nil values\n if the tile is on the edge of the map.\n\n@*param* `tile` โ if table, should be a coordinate pair or triple\n\n@*return* `tileTable` โ table of adjacent tiles",
                    "finish": 39790003,
                    "returns": [
                        {
                            "desc": "table of adjacent tiles",
                            "name": "tileTable",
                            "type": "function.return",
                            "view": "table<integer, tileObject>"
                        }
                    ],
                    "start": 39560000,
                    "type": "function",
                    "view": "function gen.getAdjacentTiles(tile: table|tileObject)\n  -> tileTable: table<integer, tileObject>"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 39560029,
                "name": "getAdjacentTiles",
                "start": 39560009,
                "type": "setfield"
            },
            {
                "desc": "Given an baseTerrain id, returns the corresponding baseTerrain object.",
                "extends": {
                    "args": [
                        {
                            "desc": "An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 38480036,
                            "name": "id",
                            "start": 38480034,
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "desc": "Given an baseTerrain id, returns the corresponding baseTerrain object.",
                    "finish": 38660003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "baseTerrainObject|nil"
                        }
                    ],
                    "start": 38480000,
                    "type": "function",
                    "view": "function gen.getBaseTerrainFromID(id: integer)\n  -> baseTerrainObject|nil"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 38480033,
                "name": "getBaseTerrainFromID",
                "start": 38480009,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 38670051,
                    "start": 38670027,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 38670024,
                "name": "getBaseTerrainFromId",
                "start": 38670000,
                "type": "setfield"
            },
            {
                "desc": "Returns an id number for the `baseTerrain` object.  This is different from `baseTerrain.type`, since `baseTerrain.type` is 0-15 for all maps, while this id changes for larger maps.",
                "extends": {
                    "args": [
                        {
                            "desc": "A base terrain object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents the 'basic' terrain characteristics for a terrain type, which is to say those aspects of terrain which do not change for special resources. The 'terrain' object deals with the characteristics that do change for special resources.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#baseterrain)",
                            "finish": 38010041,
                            "name": "baseTerrain",
                            "start": 38010030,
                            "type": "local",
                            "view": "baseTerrainObject"
                        }
                    ],
                    "desc": "Returns an id number for the `baseTerrain` object.  This is different from `baseTerrain.type`, since `baseTerrain.type` is 0-15 for all maps, while this id changes for larger maps.",
                    "finish": 38030003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": 38010000,
                    "type": "function",
                    "view": "function gen.getBaseTerrainID(baseTerrain: baseTerrainObject)\n  -> integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 38010029,
                "name": "getBaseTerrainID",
                "start": 38010009,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 38040043,
                    "start": 38040023,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 38040020,
                "name": "getBaseTerrainId",
                "start": 38040000,
                "type": "setfield"
            },
            {
                "desc": " Returns one of \"N\",\"S\",\"E\",\"W\",\"NW\",\"NE\",\"SW\",\"SE\",\"\" based on the locations\n of the compassPoint and compassCentre.  \"\" is returned if compassPoint and compassCentre are the same tile.<br><br>\n e.g. `gen.getBearing(Madrid,Paris) --> SW`\n      Madrid is South-West of Paris\n      We're finding the location of Madrid relative to Paris, hence\n      Paris is at the compass centre and we're looking for the\n      bearing of the compass point in the direction of Madrid\n      gen.getBearing(Paris,Madrid) --> NE\n      Paris is North-East of Madrid\n compassPoint and compassCentre can be units, cities, or tiles\n <br><br>Inspired by Pablostuka\n\n@*param* `compassPoint` โ Can be:<br><br>tileObject<br><br>unitObject<br><br>cityObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)\n\n@*param* `compassCentre` โ Can be:<br><br>tileObject<br><br>unitObject<br><br>cityObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)\n\n```lua\nbearing:\n    | \"N\"\n    | \"S\"\n    | \"E\"\n    | \"W\"\n    | \"NW\"\n    | \"NE\"\n    | \"SW\"\n    | \"SE\"\n    | \"\"\n```",
                "extends": {
                    "args": [
                        {
                            "desc": "Can be:<br><br>tileObject<br><br>unitObject<br><br>cityObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                            "finish": 76280036,
                            "name": "compassPoint",
                            "start": 76280024,
                            "type": "local",
                            "view": "table|cityObject|tileObject|unitObject"
                        },
                        {
                            "desc": "Can be:<br><br>tileObject<br><br>unitObject<br><br>cityObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                            "finish": 76280050,
                            "name": "compassCentre",
                            "start": 76280037,
                            "type": "local",
                            "view": "table|cityObject|tileObject|unitObject"
                        }
                    ],
                    "desc": " Returns one of \"N\",\"S\",\"E\",\"W\",\"NW\",\"NE\",\"SW\",\"SE\",\"\" based on the locations\n of the compassPoint and compassCentre.  \"\" is returned if compassPoint and compassCentre are the same tile.<br><br>\n e.g. `gen.getBearing(Madrid,Paris) --> SW`\n      Madrid is South-West of Paris\n      We're finding the location of Madrid relative to Paris, hence\n      Paris is at the compass centre and we're looking for the\n      bearing of the compass point in the direction of Madrid\n      gen.getBearing(Paris,Madrid) --> NE\n      Paris is North-East of Madrid\n compassPoint and compassCentre can be units, cities, or tiles\n <br><br>Inspired by Pablostuka\n\n@*param* `compassPoint` โ Can be:<br><br>tileObject<br><br>unitObject<br><br>cityObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)\n\n@*param* `compassCentre` โ Can be:<br><br>tileObject<br><br>unitObject<br><br>cityObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)\n\n```lua\nbearing:\n    | \"N\"\n    | \"S\"\n    | \"E\"\n    | \"W\"\n    | \"NW\"\n    | \"NE\"\n    | \"SW\"\n    | \"SE\"\n    | \"\"\n```",
                    "finish": 76870003,
                    "returns": [
                        {
                            "name": "bearing",
                            "type": "function.return",
                            "view": "\"\"|\"E\"|\"N\"|\"NE\"|\"NW\"...(+4)"
                        }
                    ],
                    "start": 76280000,
                    "type": "function",
                    "view": "function gen.getBearing(compassPoint: table|cityObject|tileObject|unitObject, compassCentre: table|cityObject|tileObject|unitObject)\n  -> bearing: \"\"|\"E\"|\"N\"|\"NE\"|\"NW\"...(+4)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 76280023,
                "name": "getBearing",
                "start": 76280009,
                "type": "setfield"
            },
            {
                "desc": "Finds the `getTopX` number items in `listOrIterator` with the highest weights.  \nIf `getTopX` is nil, the item with the largest weight, and its weight, are returned as two values.  If `getTopX` is not nil, two tables are returned instead, with items 1 being the largest value, and its weight, 2 the second largest value and its weight, and so on.\n\n\n@*param* `listOrIterator` โ <br>If iterator, returns the items for consideration.<br><br>If table, each item is a value in the table, and all the table values are items for consideration.\n\n@*param* `weightTableOrWeightFunction` โ <br>If a table is provided, `gen.calculateWeight(item,weightTable,extraArgument)` is used to calculate the weight.<br><br>If a function is provided, it is used to calculate the weights.\n\n@*param* `getTopX` โ <br> If absent/nil, the item with the largest weight is returned, and the second return value returns its weight. <br><br> If integer, a table (indexed with integers starting at 1) with this many values is returned, with the item having the largest weight being at key 1, the second best item at key 2, and so on.  If there are not `getTopX` valid items, then nil is the value in the table for the relevant keys.  The second return value is a table of the weights of the `getTopX` items.\n\n@*param* `extraArgument` โ <br> This is an extra piece of data for computing the weights.",
                "extends": {
                    "args": [
                        {
                            "desc": "<br>If iterator, returns the items for consideration.<br><br>If table, each item is a value in the table, and all the table values are items for consideration.",
                            "finish": 69360045,
                            "name": "listOrIterator",
                            "start": 69360031,
                            "type": "local",
                            "view": "iterator|table<any, <itemToWeigh>>"
                        },
                        {
                            "desc": "<br>If a table is provided, `gen.calculateWeight(item,weightTable,extraArgument)` is used to calculate the weight.<br><br>If a function is provided, it is used to calculate the weights.",
                            "finish": 69360073,
                            "name": "weightTableOrWeightFunction",
                            "start": 69360046,
                            "type": "local",
                            "view": "table|fun(item: <itemToWeigh>, extraArgument: <extraArg>):number|false"
                        },
                        {
                            "desc": "<br> If absent/nil, the item with the largest weight is returned, and the second return value returns its weight. <br><br> If integer, a table (indexed with integers starting at 1) with this many values is returned, with the item having the largest weight being at key 1, the second best item at key 2, and so on.  If there are not `getTopX` valid items, then nil is the value in the table for the relevant keys.  The second return value is a table of the weights of the `getTopX` items.",
                            "finish": 69360081,
                            "name": "getTopX",
                            "start": 69360074,
                            "type": "local",
                            "view": "integer|nil"
                        },
                        {
                            "desc": "<br> This is an extra piece of data for computing the weights.",
                            "finish": 69360095,
                            "name": "extraArgument",
                            "start": 69360082,
                            "type": "local",
                            "view": "<extraArg>|nil"
                        }
                    ],
                    "desc": "Finds the `getTopX` number items in `listOrIterator` with the highest weights.  \nIf `getTopX` is nil, the item with the largest weight, and its weight, are returned as two values.  If `getTopX` is not nil, two tables are returned instead, with items 1 being the largest value, and its weight, 2 the second largest value and its weight, and so on.\n\n\n@*param* `listOrIterator` โ <br>If iterator, returns the items for consideration.<br><br>If table, each item is a value in the table, and all the table values are items for consideration.\n\n@*param* `weightTableOrWeightFunction` โ <br>If a table is provided, `gen.calculateWeight(item,weightTable,extraArgument)` is used to calculate the weight.<br><br>If a function is provided, it is used to calculate the weights.\n\n@*param* `getTopX` โ <br> If absent/nil, the item with the largest weight is returned, and the second return value returns its weight. <br><br> If integer, a table (indexed with integers starting at 1) with this many values is returned, with the item having the largest weight being at key 1, the second best item at key 2, and so on.  If there are not `getTopX` valid items, then nil is the value in the table for the relevant keys.  The second return value is a table of the weights of the `getTopX` items.\n\n@*param* `extraArgument` โ <br> This is an extra piece of data for computing the weights.",
                    "finish": 69420003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "<itemToWeigh>|table<integer, <itemToWeigh>>"
                        },
                        {
                            "type": "function.return",
                            "view": "number|table<integer, number>"
                        }
                    ],
                    "start": 69360000,
                    "type": "function",
                    "view": "function gen.getBiggestWeights(listOrIterator: iterator|table<any, <itemToWeigh>>, weightTableOrWeightFunction: table|fun(item: <itemToWeigh>, extraArgument: <extraArg>):number|false, getTopX: integer|nil, extraArgument: <extraArg>|nil)\n  -> <itemToWeigh>|table<integer, <itemToWeigh>>\n  2. number|table<integer, number>"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 69360030,
                "name": "getBiggestWeights",
                "start": 69360009,
                "type": "setfield"
            },
            {
                "desc": " The ephemeralTable is a table for shared data.\n Since it is not saved, it doesn't have to be serializeable,\n so you don't have to worry about making keys and\n values text or numbers.\n However, the information will not be preserved after a save and load.",
                "extends": {
                    "args": [],
                    "desc": " The ephemeralTable is a table for shared data.\n Since it is not saved, it doesn't have to be serializeable,\n so you don't have to worry about making keys and\n values text or numbers.\n However, the information will not be preserved after a save and load.",
                    "finish": 46250003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "table"
                        }
                    ],
                    "start": 46230000,
                    "type": "function",
                    "view": "function gen.getEphemeralTable()\n  -> table"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 46230030,
                "name": "getEphemeralTable",
                "start": 46230009,
                "type": "setfield"
            },
            {
                "desc": "This function is wrapped to construct `gen.getBiggestWeight` and `gen.getSmallestWeight`.  You probably want to use one of them.\n\nlistOrIterator\n    if iterator, returns the items for consideration\n    if table, each item is a value in the table, and the table consists only of those values\nweightTableOrWeightFunction\n    if weightTable, use gen.calculateWeight(item,weightTable,extraArgument) as the weight function\n    a weightFunction(item,extraArgument) must return either a number or false.  When false is returned,\n    the item is not considered at all\ngetTopX\n    if absent, the item with the largest weight is returned, or nil if no valid item is found\n    if integer, a table with that number of items is returned, with index 1 associated with the\n    item of the largest weight, 2 the next highest weight and so on.  If there are fewer valid\n    items, the corresponding values are nil\nchangeOrder function\n    if changeOrder(weight1,weight2) is true,\n    weight2 should be before weight1\n    changeOrder(nil,weight2) should always be true\nfunctionName string\n    name of the function being created (since this is designed to be wrapped by another function), for error purposes.\n\n\n@*return* โ best item, or table of the best items, starting at 1 with the best item.\n\n@*return* โ Weight of best item, or table of weights of the best items, starting at 1 with the best weight",
                "extends": {
                    "args": [
                        {
                            "desc": "An iterator is a construct that enables a program to traverse the elements of a collection or container. Each time the iterator is called, a different element of the collection is provided. In practice, an iterator is usually used as part of a generic for loop:\n```lua \nfor unit in civ.iterateUnits() do\n  civ.deleteUnit(unit)\nend\n```\n[Tutorialspoint: Lua -- Iterators](https://www.tutorialspoint.com/lua/lua_iterators.htm)",
                            "finish": 68860045,
                            "name": "listOrIterator",
                            "start": 68860031,
                            "type": "local",
                            "view": "table|iterator"
                        },
                        {
                            "desc": "A table is a data type native to Lua, and links \"keys\" (usually numbers or strings) to \"values\" (any kind of data, including other tables). This is the only data structuring mechanism in Lua, and many of the data types documented here are simply tables with restrictions on their keys or values. If a key has not been assigned a value, the table returns nil as the corresponding value, and assigning nil as a value to a key removes that key from the table.\n[Programming in Lua, 2.5 -- Tables](https://www.lua.org/pil/2.5.html)",
                            "finish": 68860073,
                            "name": "weightTableOrWeightFunction",
                            "start": 68860046,
                            "type": "local",
                            "view": "table|fun(item: <itemToWeigh>, extraArgument: <extraArg>):number|false"
                        },
                        {
                            "desc": "The 'nil' data type has a single value nil, and tends to represent the absence of a value. Nil is a data type which is native to Lua, and is considered 'falsy' in logical statements. Unassigned keys in a table return nil as their value.\n[Programming in Lua, 2.1 -- Nil](https://www.lua.org/pil/2.1.html)\n[Tutorialspoint Lua -- Data Types](https://www.tutorialspoint.com/lua/lua_data_types.htm)",
                            "finish": 68860081,
                            "name": "getTopX",
                            "start": 68860074,
                            "type": "local",
                            "view": "integer|nil"
                        },
                        {
                            "finish": 68860093,
                            "name": "changeOrder",
                            "start": 68860082,
                            "type": "local",
                            "view": "fun(weight1: number|false|nil, weight2: number|false):boolean"
                        },
                        {
                            "desc": "A string is a data type native to Lua which consists of a sequence of characters. These often represent text to be displayed, but are also useful in other contexts. Strings are commonly used as keys in tables, since they make code more readable.\n[Programming in Lua, 2.4 -- Strings](https://www.lua.org/pil/2.4.html)",
                            "finish": 68860106,
                            "name": "functionName",
                            "start": 68860094,
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": 68860120,
                            "name": "extraArgument",
                            "start": 68860107,
                            "type": "local",
                            "view": "<extraArg>"
                        }
                    ],
                    "desc": "This function is wrapped to construct `gen.getBiggestWeight` and `gen.getSmallestWeight`.  You probably want to use one of them.\n\nlistOrIterator\n    if iterator, returns the items for consideration\n    if table, each item is a value in the table, and the table consists only of those values\nweightTableOrWeightFunction\n    if weightTable, use gen.calculateWeight(item,weightTable,extraArgument) as the weight function\n    a weightFunction(item,extraArgument) must return either a number or false.  When false is returned,\n    the item is not considered at all\ngetTopX\n    if absent, the item with the largest weight is returned, or nil if no valid item is found\n    if integer, a table with that number of items is returned, with index 1 associated with the\n    item of the largest weight, 2 the next highest weight and so on.  If there are fewer valid\n    items, the corresponding values are nil\nchangeOrder function\n    if changeOrder(weight1,weight2) is true,\n    weight2 should be before weight1\n    changeOrder(nil,weight2) should always be true\nfunctionName string\n    name of the function being created (since this is designed to be wrapped by another function), for error purposes.\n\n\n@*return* โ best item, or table of the best items, starting at 1 with the best item.\n\n@*return* โ Weight of best item, or table of weights of the best items, starting at 1 with the best weight",
                    "finish": 69190003,
                    "returns": [
                        {
                            "desc": "best item, or table of the best items, starting at 1 with the best item.",
                            "type": "function.return",
                            "view": "<itemToWeigh>|table<integer, <itemToWeigh>>"
                        },
                        {
                            "desc": "Weight of best item, or table of weights of the best items, starting at 1 with the best weight",
                            "type": "function.return",
                            "view": "number|table<integer, number>"
                        }
                    ],
                    "start": 68860000,
                    "type": "function",
                    "view": "function gen.getExtremeWeights(listOrIterator: table|iterator, weightTableOrWeightFunction: table|fun(item: <itemToWeigh>, extraArgument: <extraArg>):number|false, getTopX: integer|nil, changeOrder: fun(weight1: number|false|nil, weight2: number|false):boolean, functionName: string, extraArgument: <extraArg>)\n  -> <itemToWeigh>|table<integer, <itemToWeigh>>\n  2. number|table<integer, number>"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 68860030,
                "name": "getExtremeWeights",
                "start": 68860009,
                "type": "setfield"
            },
            {
                "desc": "Finds the number of a map transporter relationship \n (or a table of all relationships, if `all` is true) which allows\n transporter travel between `map1` and `map2`, with the first\n relationship in @MAP_TRANSPORT_RELATIONSHIPS being represented\n by 1.  If `map1` and `map2` are the same map, return `true`, even\n if there is a relationship for that.  If there is no transport\n relationship between the two maps, false is returned.\n\n@*param* `all` โ If true, return a table of all eligible relationship numbers (unless maps are the same, or there are none).\n\n@*param* `functionName` โ If present, passes along a functionName to be displayed in case of error (particularly if changeRules.lua module is not found)",
                "extends": {
                    "args": [
                        {
                            "desc": "An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 86300043,
                            "name": "map1",
                            "start": 86300039,
                            "type": "local",
                            "view": "integer|mapObject"
                        },
                        {
                            "desc": "An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 86300048,
                            "name": "map2",
                            "start": 86300044,
                            "type": "local",
                            "view": "integer|mapObject"
                        },
                        {
                            "desc": "If true, return a table of all eligible relationship numbers (unless maps are the same, or there are none).",
                            "finish": 86300052,
                            "name": "all",
                            "start": 86300049,
                            "type": "local",
                            "view": "boolean?"
                        },
                        {
                            "desc": "If present, passes along a functionName to be displayed in case of error (particularly if changeRules.lua module is not found)",
                            "finish": 86300065,
                            "name": "functionName",
                            "start": 86300053,
                            "type": "local",
                            "view": "string?"
                        }
                    ],
                    "desc": "Finds the number of a map transporter relationship \n (or a table of all relationships, if `all` is true) which allows\n transporter travel between `map1` and `map2`, with the first\n relationship in @MAP_TRANSPORT_RELATIONSHIPS being represented\n by 1.  If `map1` and `map2` are the same map, return `true`, even\n if there is a relationship for that.  If there is no transport\n relationship between the two maps, false is returned.\n\n@*param* `all` โ If true, return a table of all eligible relationship numbers (unless maps are the same, or there are none).\n\n@*param* `functionName` โ If present, passes along a functionName to be displayed in case of error (particularly if changeRules.lua module is not found)",
                    "finish": 86480003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean|integer|table"
                        }
                    ],
                    "start": 86300000,
                    "type": "function",
                    "view": "function gen.getMapTransportFlagNumber(map1: integer|mapObject, map2: integer|mapObject, all?: boolean, functionName?: string)\n  -> boolean|integer|table"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 86300038,
                "name": "getMapTransportFlagNumber",
                "start": 86300009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 38110040,
                            "name": "map",
                            "start": 38110037,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "finish": 38400003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "unknown"
                        }
                    ],
                    "start": 38110000,
                    "type": "function",
                    "view": "function gen.getNumberOfTerrainTypes(map: any)\n  -> unknown"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 38110036,
                "name": "getNumberOfTerrainTypes",
                "start": 38110009,
                "type": "setfield"
            },
            {
                "desc": " gen.getPersistentRandomTable() --> table\n Returns the persistentRandom table.",
                "extends": {
                    "args": [],
                    "desc": " gen.getPersistentRandomTable() --> table\n Returns the persistentRandom table.",
                    "finish": 55310003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "table<string, number>"
                        }
                    ],
                    "start": 55280000,
                    "type": "function",
                    "view": "function gen.getPersistentRandomTable()\n  -> table<string, number>"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 55280037,
                "name": "getPersistentRandomTable",
                "start": 55280009,
                "type": "setfield"
            },
            {
                "desc": "Returns a random square near tile, on the same map, that is either empty or only has units/city of the same tribe.  Returns nil if there is no such tile.\n`centerTile` is the tile that you want to find other tiles near to (on same map).\n`distance` is the number of squares away that you can search.\n`allowedTiles` is either a table of integers such that a tile is acceptable if\n`possibleTile.baseTerrain.type` appears as a value in the table\nor a function `allowedTiles(possibleTile)-->bool`\nthat returns true if the tile is allowed, and false if not.\nIf `nil` is entered, all terrain is allowed.\n`tribe` the tribe that is searching for open tiles.",
                "extends": {
                    "args": [
                        {
                            "desc": "A tileAnalog is either a tileObject or a table with\none of the following forms: {[1]=x,[2]=y,[3]=z}, {[1]=x,[2]=y}\n(and assumes z=0), {x=x,y=y,z=z}, or {x=x, y=y} (and assumes z=0).\nThe x,y,z values (but not keys) correspond to tile coordinates.\n",
                            "finish": 50760055,
                            "name": "centerTile",
                            "start": 50760045,
                            "type": "local",
                            "view": "table|tileObject"
                        },
                        {
                            "desc": "An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 50760064,
                            "name": "distance",
                            "start": 50760056,
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": 50760077,
                            "name": "allowedTiles",
                            "start": 50760065,
                            "type": "local",
                            "view": "fun(tile: tileObject):boolean|table<integer, integer>"
                        },
                        {
                            "desc": "A tribe object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a tribe, which is to say the characteristics of the tribe overall, in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tribe)",
                            "finish": 50760083,
                            "name": "tribe",
                            "start": 50760078,
                            "type": "local",
                            "view": "tribeObject"
                        }
                    ],
                    "desc": "Returns a random square near tile, on the same map, that is either empty or only has units/city of the same tribe.  Returns nil if there is no such tile.\n`centerTile` is the tile that you want to find other tiles near to (on same map).\n`distance` is the number of squares away that you can search.\n`allowedTiles` is either a table of integers such that a tile is acceptable if\n`possibleTile.baseTerrain.type` appears as a value in the table\nor a function `allowedTiles(possibleTile)-->bool`\nthat returns true if the tile is allowed, and false if not.\nIf `nil` is entered, all terrain is allowed.\n`tribe` the tribe that is searching for open tiles.",
                    "finish": 50840003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "tileObject|nil"
                        }
                    ],
                    "start": 50760000,
                    "type": "function",
                    "view": "function gen.getRandomNearbyOpenTileForTribe(centerTile: table|tileObject, distance: integer, allowedTiles: fun(tile: tileObject):boolean|table<integer, integer>, tribe: tribeObject)\n  -> tileObject|nil"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 50760044,
                "name": "getRandomNearbyOpenTileForTribe",
                "start": 50760009,
                "type": "setfield"
            },
            {
                "desc": "Returns a random unoccupied square near tile, on the same map.  Returns nil if there is no such tile.\n`centerTile` is the tile that you want to find other tiles near to (on same map).\n`distance` is the number of squares away that you can search.\n`allowedTiles` is either a table of integers such that a tile is acceptable if\n`possibleTile.baseTerrain.type` appears as a value in the table\nor a function `allowedTiles(possibleTile)-->bool`\nthat returns true if the tile is allowed, and false if not.\nIf `nil` is entered, all terrain is allowed.",
                "extends": {
                    "args": [
                        {
                            "desc": "A tileAnalog is either a tileObject or a table with\none of the following forms: {[1]=x,[2]=y,[3]=z}, {[1]=x,[2]=y}\n(and assumes z=0), {x=x,y=y,z=z}, or {x=x, y=y} (and assumes z=0).\nThe x,y,z values (but not keys) correspond to tile coordinates.\n",
                            "finish": 50050053,
                            "name": "centerTile",
                            "start": 50050043,
                            "type": "local",
                            "view": "table|tileObject"
                        },
                        {
                            "desc": "An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 50050062,
                            "name": "distance",
                            "start": 50050054,
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": 50050075,
                            "name": "allowedTiles",
                            "start": 50050063,
                            "type": "local",
                            "view": "fun(tile: tileObject):boolean|table<integer, integer>"
                        }
                    ],
                    "desc": "Returns a random unoccupied square near tile, on the same map.  Returns nil if there is no such tile.\n`centerTile` is the tile that you want to find other tiles near to (on same map).\n`distance` is the number of squares away that you can search.\n`allowedTiles` is either a table of integers such that a tile is acceptable if\n`possibleTile.baseTerrain.type` appears as a value in the table\nor a function `allowedTiles(possibleTile)-->bool`\nthat returns true if the tile is allowed, and false if not.\nIf `nil` is entered, all terrain is allowed.",
                    "finish": 50130003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "tileObject|nil"
                        }
                    ],
                    "start": 50050000,
                    "type": "function",
                    "view": "function gen.getRandomNearbyUnoccupiedTile(centerTile: table|tileObject, distance: integer, allowedTiles: fun(tile: tileObject):boolean|table<integer, integer>)\n  -> tileObject|nil"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 50050042,
                "name": "getRandomNearbyUnoccupiedTile",
                "start": 50050009,
                "type": "setfield"
            },
            {
                "desc": "Generates a random tile within the polygon defined\nby the table of coordinates (same as used by gen.inPolygon\nand generated by the Polygon Script found in CTRL+SHIFT+F4).\nMap is the map of the tile generated (0 by default).\nThis code is probabalistic, so after maxAttempts, the first\npolygon coordinate is returned, and a text box displayed.\nThe console prints the polygon that caused the issue.\n\n  Inspired by Pablostuka\n\n@*param* `polygonTable` โ a table of coordinate pairs\n\n@*param* `map` โ The map for the random tile (default 0)\n\n@*param* `maxAttempts` โ the number of attempts to find an eligible square (default 100)",
                "extends": {
                    "args": [
                        {
                            "desc": "a table of coordinate pairs",
                            "finish": 34070048,
                            "name": "polygonTable",
                            "start": 34070036,
                            "type": "local",
                            "view": "table"
                        },
                        {
                            "desc": "The map for the random tile (default 0)",
                            "finish": 34070052,
                            "name": "map",
                            "start": 34070049,
                            "type": "local",
                            "view": "integer?"
                        },
                        {
                            "desc": "the number of attempts to find an eligible square (default 100)",
                            "finish": 34070064,
                            "name": "maxAttempts",
                            "start": 34070053,
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "Generates a random tile within the polygon defined\nby the table of coordinates (same as used by gen.inPolygon\nand generated by the Polygon Script found in CTRL+SHIFT+F4).\nMap is the map of the tile generated (0 by default).\nThis code is probabalistic, so after maxAttempts, the first\npolygon coordinate is returned, and a text box displayed.\nThe console prints the polygon that caused the issue.\n\n  Inspired by Pablostuka\n\n@*param* `polygonTable` โ a table of coordinate pairs\n\n@*param* `map` โ The map for the random tile (default 0)\n\n@*param* `maxAttempts` โ the number of attempts to find an eligible square (default 100)",
                    "finish": 34340003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "tileObject"
                        }
                    ],
                    "start": 34070000,
                    "type": "function",
                    "view": "function gen.getRandomTileInPolygon(polygonTable: table, map?: integer, maxAttempts?: integer)\n  -> tileObject"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 34070035,
                "name": "getRandomTileInPolygon",
                "start": 34070009,
                "type": "setfield"
            },
            {
                "desc": "Returns the scenario's main directory.",
                "extends": {
                    "args": [],
                    "desc": "Returns the scenario's main directory.",
                    "finish": 67130003,
                    "returns": [
                        {
                            "name": "scenarioMainDirectory",
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": 67070000,
                    "type": "function",
                    "view": "function gen.getScenarioDirectory()\n  -> scenarioMainDirectory: string"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 67070033,
                "name": "getScenarioDirectory",
                "start": 67070009,
                "type": "setfield"
            },
            {
                "desc": "Finds the `getTopX` number items in `listOrIterator` with the smallest weights.  \nIf `getTopX` is nil, the item with the smallest weight, and its weight, are returned as two values.  If `getTopX` is not nil, two tables are returned instead, with items 1 being the item with the smallest weight, and its weight, 2 the second largest value and its weight, and so on.\n\n\n@*param* `listOrIterator` โ <br>If iterator, returns the items for consideration.<br><br>If table, each item is a value in the table, and all the table values are items for consideration.\n\n@*param* `weightTableOrWeightFunction` โ <br>If a table is provided, `gen.calculateWeight(item,weightTable,extraArgument)` is used to calculate the weight.<br><br>If a function is provided, it is used to calculate the weights.\n\n@*param* `getTopX` โ <br> If absent/nil, the item with the smallest weight is returned, and the second return value returns its weight. <br><br> If integer, a table (indexed with integers starting at 1) with this many values is returned, with the item having the smallest weight being at key 1, the second best item at key 2, and so on.  If there are not `getTopX` valid items, then nil is the value in the table for the relevant keys.  The second return value is a table of the weights of the `getTopX` items.\n\n@*param* `extraArgument` โ <br> This is an extra piece of data for computing the weights.",
                "extends": {
                    "args": [
                        {
                            "desc": "<br>If iterator, returns the items for consideration.<br><br>If table, each item is a value in the table, and all the table values are items for consideration.",
                            "finish": 69590046,
                            "name": "listOrIterator",
                            "start": 69590032,
                            "type": "local",
                            "view": "iterator|table<any, <itemToWeigh>>"
                        },
                        {
                            "desc": "<br>If a table is provided, `gen.calculateWeight(item,weightTable,extraArgument)` is used to calculate the weight.<br><br>If a function is provided, it is used to calculate the weights.",
                            "finish": 69590074,
                            "name": "weightTableOrWeightFunction",
                            "start": 69590047,
                            "type": "local",
                            "view": "table|fun(item: <itemToWeigh>, extraArgument: <extraArg>):number|false"
                        },
                        {
                            "desc": "<br> If absent/nil, the item with the smallest weight is returned, and the second return value returns its weight. <br><br> If integer, a table (indexed with integers starting at 1) with this many values is returned, with the item having the smallest weight being at key 1, the second best item at key 2, and so on.  If there are not `getTopX` valid items, then nil is the value in the table for the relevant keys.  The second return value is a table of the weights of the `getTopX` items.",
                            "finish": 69590082,
                            "name": "getTopX",
                            "start": 69590075,
                            "type": "local",
                            "view": "integer|nil"
                        },
                        {
                            "desc": "<br> This is an extra piece of data for computing the weights.",
                            "finish": 69590096,
                            "name": "extraArgument",
                            "start": 69590083,
                            "type": "local",
                            "view": "<extraArg>|nil"
                        }
                    ],
                    "desc": "Finds the `getTopX` number items in `listOrIterator` with the smallest weights.  \nIf `getTopX` is nil, the item with the smallest weight, and its weight, are returned as two values.  If `getTopX` is not nil, two tables are returned instead, with items 1 being the item with the smallest weight, and its weight, 2 the second largest value and its weight, and so on.\n\n\n@*param* `listOrIterator` โ <br>If iterator, returns the items for consideration.<br><br>If table, each item is a value in the table, and all the table values are items for consideration.\n\n@*param* `weightTableOrWeightFunction` โ <br>If a table is provided, `gen.calculateWeight(item,weightTable,extraArgument)` is used to calculate the weight.<br><br>If a function is provided, it is used to calculate the weights.\n\n@*param* `getTopX` โ <br> If absent/nil, the item with the smallest weight is returned, and the second return value returns its weight. <br><br> If integer, a table (indexed with integers starting at 1) with this many values is returned, with the item having the smallest weight being at key 1, the second best item at key 2, and so on.  If there are not `getTopX` valid items, then nil is the value in the table for the relevant keys.  The second return value is a table of the weights of the `getTopX` items.\n\n@*param* `extraArgument` โ <br> This is an extra piece of data for computing the weights.",
                    "finish": 69650003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "<itemToWeigh>|table<integer, <itemToWeigh>>"
                        },
                        {
                            "type": "function.return",
                            "view": "number|table<integer, number>"
                        }
                    ],
                    "start": 69590000,
                    "type": "function",
                    "view": "function gen.getSmallestWeights(listOrIterator: iterator|table<any, <itemToWeigh>>, weightTableOrWeightFunction: table|fun(item: <itemToWeigh>, extraArgument: <extraArg>):number|false, getTopX: integer|nil, extraArgument: <extraArg>|nil)\n  -> <itemToWeigh>|table<integer, <itemToWeigh>>\n  2. number|table<integer, number>"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 69590031,
                "name": "getSmallestWeights",
                "start": 69590009,
                "type": "setfield"
            },
            {
                "desc": " Returns the state table submitted to `gen.linkState`.\n If you're writing a module intended for use by others,\n it is recommended that you use a linkState system with a \n sub table, so that table keys don't accidentally conflict",
                "extends": {
                    "args": [],
                    "desc": " Returns the state table submitted to `gen.linkState`.\n If you're writing a module intended for use by others,\n it is recommended that you use a linkState system with a \n sub table, so that table keys don't accidentally conflict",
                    "finish": 46560003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string|number|table<string|number, string|number|table>"
                        }
                    ],
                    "start": 46540000,
                    "type": "function",
                    "view": "function gen.getState()\n  -> string|number|table<string|number, string|number|table>"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 46540021,
                "name": "getState",
                "start": 46540009,
                "type": "setfield"
            },
            {
                "desc": "Returns a terrainObject from the corresponding id number created by gen.getTerrainID.",
                "extends": {
                    "args": [
                        {
                            "desc": "An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 38810032,
                            "name": "id",
                            "start": 38810030,
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "desc": "Returns a terrainObject from the corresponding id number created by gen.getTerrainID.",
                    "finish": 39070003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "terrainObject|nil"
                        }
                    ],
                    "start": 38810000,
                    "type": "function",
                    "view": "function gen.getTerrainFromID(id: integer)\n  -> terrainObject|nil"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 38810029,
                "name": "getTerrainFromID",
                "start": 38810009,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 39080043,
                    "start": 39080023,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 39080020,
                "name": "getTerrainFromId",
                "start": 39080000,
                "type": "setfield"
            },
            {
                "desc": "Returns an id number for the `terrain` object.  This is different from `terrain.type`, since `terrain.type` is 0-15, based on the underlying baseTerrain type.  This id number is different for each terrain type on each map.",
                "extends": {
                    "args": [
                        {
                            "desc": "A terrain object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents the terrain characteristics which change for special resources. The 'base terrain' object deals with the characteristics that do not change for special resources.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#terrain)",
                            "finish": 38730033,
                            "name": "terrain",
                            "start": 38730026,
                            "type": "local",
                            "view": "terrainObject"
                        }
                    ],
                    "desc": "Returns an id number for the `terrain` object.  This is different from `terrain.type`, since `terrain.type` is 0-15, based on the underlying baseTerrain type.  This id number is different for each terrain type on each map.",
                    "finish": 38750003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": 38730000,
                    "type": "function",
                    "view": "function gen.getTerrainID(terrain: terrainObject)\n  -> integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 38730025,
                "name": "getTerrainID",
                "start": 38730009,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 38760035,
                    "start": 38760019,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 38760016,
                "name": "getTerrainId",
                "start": 38760000,
                "type": "setfield"
            },
            {
                "desc": " Takes an integer generated by `gen.getTileID`, and returns the corresponding tile (or nil, if the key doesn't correspond to a real tile).",
                "extends": {
                    "args": [
                        {
                            "desc": "An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 37810033,
                            "name": "tileID",
                            "start": 37810027,
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "desc": " Takes an integer generated by `gen.getTileID`, and returns the corresponding tile (or nil, if the key doesn't correspond to a real tile).",
                    "finish": 37930003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "tileObject|nil"
                        }
                    ],
                    "start": 37810000,
                    "type": "function",
                    "view": "function gen.getTileFromID(tileID: integer)\n  -> tileObject|nil"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 37810026,
                "name": "getTileFromID",
                "start": 37810009,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 37940037,
                    "start": 37940020,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 37940017,
                "name": "getTileFromId",
                "start": 37940000,
                "type": "setfield"
            },
            {
                "desc": " Returns a single-value numeric key that uniquely identifies a tile on any map.\nby Knighttime, modified by Prof. Garfield ",
                "extends": {
                    "args": [
                        {
                            "desc": "An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 37520031,
                            "name": "tileORX",
                            "start": 37520024,
                            "type": "local",
                            "view": "integer|table|tileObject"
                        },
                        {
                            "desc": "An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 37520033,
                            "name": "y",
                            "start": 37520032,
                            "type": "local",
                            "view": "(integer|nil)?"
                        },
                        {
                            "desc": "An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 37520035,
                            "name": "z",
                            "start": 37520034,
                            "type": "local",
                            "view": "(integer|nil)?"
                        }
                    ],
                    "desc": " Returns a single-value numeric key that uniquely identifies a tile on any map.\nby Knighttime, modified by Prof. Garfield ",
                    "finish": 37710003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "nil"
                        }
                    ],
                    "start": 37520000,
                    "type": "function",
                    "view": "function gen.getTileID(tileORX: integer|table|tileObject, y?: integer, z?: integer)\n  -> nil"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 37520022,
                "name": "getTileID",
                "start": 37520009,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 37720029,
                    "start": 37720016,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 37720013,
                "name": "getTileId",
                "start": 37720000,
                "type": "setfield"
            },
            {
                "desc": " gen.getTileProduction(tile,city) --> integer (food), integer(shields), integer(trade)\n Returns the tile production values, presuming that the city\n given is the one working the tile.\n That is to say, returns the values that would be seen on the tile in the city window.\n Doesn't check if that city is actually working the tile.\n\n@*param* `ignoreCustomCosmic` โ If true, do not use the customCosmic city customisation to get production, refer to the current settings of terrain, baseTerrain and roadTrade.  If false or nil, refer to customCosmic module if it is available (otherwise, refer to current settings of terrain, baseTerrain and roadTrade).",
                "extends": {
                    "args": [
                        {
                            "desc": "A tileAnalog is either a tileObject or a table with\none of the following forms: {[1]=x,[2]=y,[3]=z}, {[1]=x,[2]=y}\n(and assumes z=0), {x=x,y=y,z=z}, or {x=x, y=y} (and assumes z=0).\nThe x,y,z values (but not keys) correspond to tile coordinates.\n",
                            "finish": 52450035,
                            "name": "tile",
                            "start": 52450031,
                            "type": "local",
                            "view": "table|tileObject"
                        },
                        {
                            "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
                            "finish": 52450040,
                            "name": "city",
                            "start": 52450036,
                            "type": "local",
                            "view": "cityObject"
                        },
                        {
                            "desc": "If true, do not use the customCosmic city customisation to get production, refer to the current settings of terrain, baseTerrain and roadTrade.  If false or nil, refer to customCosmic module if it is available (otherwise, refer to current settings of terrain, baseTerrain and roadTrade).",
                            "finish": 52450059,
                            "name": "ignoreCustomCosmic",
                            "start": 52450041,
                            "type": "local",
                            "view": "boolean?"
                        }
                    ],
                    "desc": " gen.getTileProduction(tile,city) --> integer (food), integer(shields), integer(trade)\n Returns the tile production values, presuming that the city\n given is the one working the tile.\n That is to say, returns the values that would be seen on the tile in the city window.\n Doesn't check if that city is actually working the tile.\n\n@*param* `ignoreCustomCosmic` โ If true, do not use the customCosmic city customisation to get production, refer to the current settings of terrain, baseTerrain and roadTrade.  If false or nil, refer to customCosmic module if it is available (otherwise, refer to current settings of terrain, baseTerrain and roadTrade).",
                    "finish": 54640003,
                    "returns": [
                        {
                            "name": "foodProduction",
                            "type": "function.return",
                            "view": "integer"
                        },
                        {
                            "name": "shieldProduction",
                            "type": "function.return",
                            "view": "integer"
                        },
                        {
                            "name": "tradeProduction",
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": 52450000,
                    "type": "function",
                    "view": "function gen.getTileProduction(tile: table|tileObject, city: cityObject, ignoreCustomCosmic?: boolean)\n  -> foodProduction: integer\n  2. shieldProduction: integer\n  3. tradeProduction: integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 52450030,
                "name": "getTileProduction",
                "start": 52450009,
                "type": "setfield"
            },
            {
                "desc": "Produces a table of nearby tiles to centre.  \nLower index means closer tile (or, same distance),\nnot counting z axis if multiple maps are used.\nKeys start at 1, no missing indices (if a tile doesn't exist, there\nwon't be an empty entry, the next tile will use that entry).\n\ncentre = a tile or table of coordinates \n    central til around which we will find tiles\n\nradius = integer\n    is the distance (in tiles, not coordinates) from the centre to the furthest\n    tiles desired\n\nminRadius = integer\n    is the distance in tiles from the centre for the nearest tile to be\n    included (e.g. if you don't want centre itself, set minRadius to 1, if you\n    want a ring only, set minRadius to radius)\n\nmaps = nil or integer in 0-3 or table of integers\n    if nil, only get tiles from the map that centre is on\n    if integer, only get tiles from that map\n    if table of integers, tiles from all maps listed\n    e.g. {1,3} means get tiles from maps 1 and 3\n\n@*param* `centre` โ if table, must be a table of coordinates.\n\n@*param* `radius` โ The number of tiles out you want to get.\n\n@*param* `minRadius` โ 0 by default\n\n@*param* `maps` โ if table, values are the maps to get the tiles from.  Same map as `centre` by default.",
                "extends": {
                    "args": [
                        {
                            "desc": "if table, must be a table of coordinates.",
                            "finish": 44210036,
                            "name": "centre",
                            "start": 44210030,
                            "type": "local",
                            "view": "table|tileObject"
                        },
                        {
                            "desc": "The number of tiles out you want to get.",
                            "finish": 44210043,
                            "name": "radius",
                            "start": 44210037,
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "desc": "0 by default",
                            "finish": 44210053,
                            "name": "minRadius",
                            "start": 44210044,
                            "type": "local",
                            "view": "integer?"
                        },
                        {
                            "desc": "if table, values are the maps to get the tiles from.  Same map as `centre` by default.",
                            "finish": 44210058,
                            "name": "maps",
                            "start": 44210054,
                            "type": "local",
                            "view": "(integer|table)?"
                        }
                    ],
                    "desc": "Produces a table of nearby tiles to centre.  \nLower index means closer tile (or, same distance),\nnot counting z axis if multiple maps are used.\nKeys start at 1, no missing indices (if a tile doesn't exist, there\nwon't be an empty entry, the next tile will use that entry).\n\ncentre = a tile or table of coordinates \n    central til around which we will find tiles\n\nradius = integer\n    is the distance (in tiles, not coordinates) from the centre to the furthest\n    tiles desired\n\nminRadius = integer\n    is the distance in tiles from the centre for the nearest tile to be\n    included (e.g. if you don't want centre itself, set minRadius to 1, if you\n    want a ring only, set minRadius to radius)\n\nmaps = nil or integer in 0-3 or table of integers\n    if nil, only get tiles from the map that centre is on\n    if integer, only get tiles from that map\n    if table of integers, tiles from all maps listed\n    e.g. {1,3} means get tiles from maps 1 and 3\n\n@*param* `centre` โ if table, must be a table of coordinates.\n\n@*param* `radius` โ The number of tiles out you want to get.\n\n@*param* `minRadius` โ 0 by default\n\n@*param* `maps` โ if table, values are the maps to get the tiles from.  Same map as `centre` by default.",
                    "finish": 45240003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "table<integer, tileObject>"
                        }
                    ],
                    "start": 44210000,
                    "type": "function",
                    "view": "function gen.getTilesInRadius(centre: table|tileObject, radius: integer, minRadius?: integer, maps?: integer|table)\n  -> table<integer, tileObject>"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 44210029,
                "name": "getTilesInRadius",
                "start": 44210009,
                "type": "setfield"
            },
            {
                "desc": "Allows the `unitType` to be on `map`",
                "extends": {
                    "args": [
                        {
                            "desc": "A unit type object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit type entry in the rules.txt, and provides a means of interacting with it. This should not be confused with the unit object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unittype)",
                            "finish": 88890038,
                            "name": "unitType",
                            "start": 88890030,
                            "type": "local",
                            "view": "unitTypeObject"
                        },
                        {
                            "desc": "An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 88890042,
                            "name": "map",
                            "start": 88890039,
                            "type": "local",
                            "view": "integer|mapObject"
                        }
                    ],
                    "desc": "Allows the `unitType` to be on `map`",
                    "finish": 88940003,
                    "start": 88890000,
                    "type": "function",
                    "view": "function gen.giveAllowedOnMap(unitType: unitTypeObject, map: integer|mapObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 88890029,
                "name": "giveAllowedOnMap",
                "start": 88890009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A unit type object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit type entry in the rules.txt, and provides a means of interacting with it. This should not be confused with the unit object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unittype)",
                            "finish": 21650032,
                            "name": "unitType",
                            "start": 21650024,
                            "type": "local",
                            "view": "unitTypeObject"
                        }
                    ],
                    "finish": 21670003,
                    "start": 21650000,
                    "type": "function",
                    "view": "function gen.giveAlpine(unitType: unitTypeObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 21650023,
                "name": "giveAlpine",
                "start": 21650009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A unit type object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit type entry in the rules.txt, and provides a means of interacting with it. This should not be confused with the unit object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unittype)",
                            "finish": 20090036,
                            "name": "unitType",
                            "start": 20090028,
                            "type": "local",
                            "view": "unitTypeObject"
                        }
                    ],
                    "finish": 20110003,
                    "start": 20090000,
                    "type": "function",
                    "view": "function gen.giveAmphibious(unitType: unitTypeObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 20090027,
                "name": "giveAmphibious",
                "start": 20090009,
                "type": "setfield"
            },
            {
                "desc": " backwards compatibility typo",
                "extends": {
                    "finish": 20120038,
                    "start": 20120020,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 20120017,
                "name": "giveAmpibious",
                "start": 20120000,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A unit type object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit type entry in the rules.txt, and provides a means of interacting with it. This should not be confused with the unit object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unittype)",
                            "finish": 20540035,
                            "name": "unitType",
                            "start": 20540027,
                            "type": "local",
                            "view": "unitTypeObject"
                        }
                    ],
                    "finish": 20560003,
                    "start": 20540000,
                    "type": "function",
                    "view": "function gen.giveAttackAir(unitType: unitTypeObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 20540026,
                "name": "giveAttackAir",
                "start": 20540009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A unit type object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit type entry in the rules.txt, and provides a means of interacting with it. This should not be confused with the unit object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unittype)",
                            "finish": 63540048,
                            "name": "unitType",
                            "start": 63540040,
                            "type": "local",
                            "view": "unitTypeObject"
                        }
                    ],
                    "finish": 63540053,
                    "start": 63540000,
                    "type": "function",
                    "view": "function gen.giveBarbarianWillNotExpire(unitType: unitTypeObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 63540039,
                "name": "giveBarbarianWillNotExpire",
                "start": 63540009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A unit type object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit type entry in the rules.txt, and provides a means of interacting with it. This should not be confused with the unit object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unittype)",
                            "finish": 22530041,
                            "name": "unitType",
                            "start": 22530033,
                            "type": "local",
                            "view": "unitTypeObject"
                        }
                    ],
                    "finish": 22550003,
                    "start": 22530000,
                    "type": "function",
                    "view": "function gen.giveBonusAgainstAir(unitType: unitTypeObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 22530032,
                "name": "giveBonusAgainstAir",
                "start": 22530009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A unit type object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit type entry in the rules.txt, and provides a means of interacting with it. This should not be confused with the unit object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unittype)",
                            "finish": 21870043,
                            "name": "unitType",
                            "start": 21870035,
                            "type": "local",
                            "view": "unitTypeObject"
                        }
                    ],
                    "finish": 21890003,
                    "start": 21870000,
                    "type": "function",
                    "view": "function gen.giveBonusAgainstHorse(unitType: unitTypeObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 21870034,
                "name": "giveBonusAgainstHorse",
                "start": 21870009,
                "type": "setfield"
            },
            {
                "desc": "Changes the `unitType`'s buildTransport field so that the\n unit can build teleporters between `map1` and `map2`.\n (If there are multiple map relationships\n between `map1` and `map2`, there is no guarantee which one will\n be enabled, and, in fact, one may be enabled even if another one\n already grants the relationship.  If such details are important,\n write a function manually.)\n If the maps are the same, or there is no possible transportation\n between them, an error is thrown, unless `suppressFailureError`\n is `true`, in which case the buildTransport field is unchanged.\n\n@*param* `suppressFailureError` โ if true, invalid map combinations do nothing instead of causing an error.",
                "extends": {
                    "args": [
                        {
                            "desc": "A unit type object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit type entry in the rules.txt, and provides a means of interacting with it. This should not be confused with the unit object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unittype)",
                            "finish": 87660051,
                            "name": "unitType",
                            "start": 87660043,
                            "type": "local",
                            "view": "unitTypeObject"
                        },
                        {
                            "desc": "An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 87660056,
                            "name": "map1",
                            "start": 87660052,
                            "type": "local",
                            "view": "integer|mapObject"
                        },
                        {
                            "desc": "An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 87660061,
                            "name": "map2",
                            "start": 87660057,
                            "type": "local",
                            "view": "integer|mapObject"
                        },
                        {
                            "desc": "if true, invalid map combinations do nothing instead of causing an error.",
                            "finish": 87660082,
                            "name": "suppressFailureError",
                            "start": 87660062,
                            "type": "local",
                            "view": "boolean?"
                        }
                    ],
                    "desc": "Changes the `unitType`'s buildTransport field so that the\n unit can build teleporters between `map1` and `map2`.\n (If there are multiple map relationships\n between `map1` and `map2`, there is no guarantee which one will\n be enabled, and, in fact, one may be enabled even if another one\n already grants the relationship.  If such details are important,\n write a function manually.)\n If the maps are the same, or there is no possible transportation\n between them, an error is thrown, unless `suppressFailureError`\n is `true`, in which case the buildTransport field is unchanged.\n\n@*param* `suppressFailureError` โ if true, invalid map combinations do nothing instead of causing an error.",
                    "finish": 87690003,
                    "start": 87660000,
                    "type": "function",
                    "view": "function gen.giveBuildTransportBetweenMaps(unitType: unitTypeObject, map1: integer|mapObject, map2: integer|mapObject, suppressFailureError?: boolean)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 87660042,
                "name": "giveBuildTransportBetweenMaps",
                "start": 87660009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A unit type object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit type entry in the rules.txt, and provides a means of interacting with it. This should not be confused with the unit object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unittype)",
                            "finish": 63350051,
                            "name": "unitType",
                            "start": 63350043,
                            "type": "local",
                            "view": "unitTypeObject"
                        }
                    ],
                    "finish": 63350056,
                    "start": 63350000,
                    "type": "function",
                    "view": "function gen.giveCanCrossImpassableTerrain(unitType: unitTypeObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 63350042,
                "name": "giveCanCrossImpassableTerrain",
                "start": 63350009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A unit type object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit type entry in the rules.txt, and provides a means of interacting with it. This should not be confused with the unit object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unittype)",
                            "finish": 64570040,
                            "name": "unitType",
                            "start": 64570032,
                            "type": "local",
                            "view": "unitTypeObject"
                        }
                    ],
                    "finish": 64570045,
                    "start": 64570000,
                    "type": "function",
                    "view": "function gen.giveCanFoundCities(unitType: unitTypeObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 64570031,
                "name": "giveCanFoundCities",
                "start": 64570009,
                "type": "setfield"
            },
            {
                "desc": "@*param* `ignoreError` โ Default is false\n\n Bestows the ability to improve tiles to units with settler role.\n Units without settler role produce an error, unless ignoreError\n is set to true.",
                "extends": {
                    "args": [
                        {
                            "desc": "A unit type object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit type entry in the rules.txt, and provides a means of interacting with it. This should not be confused with the unit object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unittype)",
                            "finish": 64820043,
                            "name": "unitType",
                            "start": 64820035,
                            "type": "local",
                            "view": "unitTypeObject"
                        },
                        {
                            "desc": "Default is false",
                            "finish": 64820055,
                            "name": "ignoreError",
                            "start": 64820044,
                            "type": "local",
                            "view": "boolean?"
                        }
                    ],
                    "desc": "@*param* `ignoreError` โ Default is false\n\n Bestows the ability to improve tiles to units with settler role.\n Units without settler role produce an error, unless ignoreError\n is set to true.",
                    "finish": 64890003,
                    "start": 64820026,
                    "type": "function",
                    "view": "function gen.giveCanImproveTiles(unitType: unitTypeObject, ignoreError?: boolean)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 64820023,
                "name": "giveCanImproveTiles",
                "start": 64820000,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A unit type object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit type entry in the rules.txt, and provides a means of interacting with it. This should not be confused with the unit object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unittype)",
                            "finish": 63160047,
                            "name": "unitType",
                            "start": 63160039,
                            "type": "local",
                            "view": "unitTypeObject"
                        }
                    ],
                    "finish": 63160052,
                    "start": 63160000,
                    "type": "function",
                    "view": "function gen.giveCannotBuyOffBarbarian(unitType: unitTypeObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 63160038,
                "name": "giveCannotBuyOffBarbarian",
                "start": 63160009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A unit type object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit type entry in the rules.txt, and provides a means of interacting with it. This should not be confused with the unit object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unittype)",
                            "finish": 21210034,
                            "name": "unitType",
                            "start": 21210026,
                            "type": "local",
                            "view": "unitTypeObject"
                        }
                    ],
                    "finish": 21230003,
                    "start": 21210000,
                    "type": "function",
                    "view": "function gen.giveCarryAir(unitType: unitTypeObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 21210025,
                "name": "giveCarryAir",
                "start": 21210009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A unit type object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit type entry in the rules.txt, and provides a means of interacting with it. This should not be confused with the unit object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unittype)",
                            "finish": 20760033,
                            "name": "unitType",
                            "start": 20760025,
                            "type": "local",
                            "view": "unitTypeObject"
                        }
                    ],
                    "finish": 20780003,
                    "start": 20760000,
                    "type": "function",
                    "view": "function gen.giveCoastal(unitType: unitTypeObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 20760024,
                "name": "giveCoastal",
                "start": 20760009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A unit type object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit type entry in the rules.txt, and provides a means of interacting with it. This should not be confused with the unit object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unittype)",
                            "finish": 22310049,
                            "name": "unitType",
                            "start": 22310041,
                            "type": "local",
                            "view": "unitTypeObject"
                        }
                    ],
                    "finish": 22330003,
                    "start": 22310000,
                    "type": "function",
                    "view": "function gen.giveDestroyedAfterAttacking(unitType: unitTypeObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 22310040,
                "name": "giveDestroyedAfterAttacking",
                "start": 22310009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A unit type object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit type entry in the rules.txt, and provides a means of interacting with it. This should not be confused with the unit object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unittype)",
                            "finish": 22090056,
                            "name": "unitType",
                            "start": 22090048,
                            "type": "local",
                            "view": "unitTypeObject"
                        }
                    ],
                    "finish": 22110003,
                    "start": 22090000,
                    "type": "function",
                    "view": "function gen.giveFreeSupportUnderFundamentalism(unitType: unitTypeObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 22090047,
                "name": "giveFreeSupportUnderFundamentalism",
                "start": 22090009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A unit type object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit type entry in the rules.txt, and provides a means of interacting with it. This should not be confused with the unit object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unittype)",
                            "finish": 20980037,
                            "name": "unitType",
                            "start": 20980029,
                            "type": "local",
                            "view": "unitTypeObject"
                        }
                    ],
                    "finish": 21000003,
                    "start": 20980000,
                    "type": "function",
                    "view": "function gen.giveIgnoreWalls(unitType: unitTypeObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 20980028,
                "name": "giveIgnoreWalls",
                "start": 20980009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A unit type object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit type entry in the rules.txt, and provides a means of interacting with it. This should not be confused with the unit object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unittype)",
                            "finish": 19870035,
                            "name": "unitType",
                            "start": 19870027,
                            "type": "local",
                            "view": "unitTypeObject"
                        }
                    ],
                    "finish": 19890003,
                    "start": 19870000,
                    "type": "function",
                    "view": "function gen.giveIgnoreZOC(unitType: unitTypeObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 19870026,
                "name": "giveIgnoreZOC",
                "start": 19870009,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 21010041,
                    "start": 21010022,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 21010019,
                "name": "giveIngoreWalls",
                "start": 21010000,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A unit type object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit type entry in the rules.txt, and provides a means of interacting with it. This should not be confused with the unit object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unittype)",
                            "finish": 62590046,
                            "name": "unitType",
                            "start": 62590038,
                            "type": "local",
                            "view": "unitTypeObject"
                        }
                    ],
                    "finish": 62590051,
                    "start": 62590000,
                    "type": "function",
                    "view": "function gen.giveInvisibleUntilAttack(unitType: unitTypeObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 62590037,
                "name": "giveInvisibleUntilAttack",
                "start": 62590009,
                "type": "setfield"
            },
            {
                "desc": "Changes the `unitType`'s nativeTransport field so that the\n unit can teleport between `map1` and `map2`.\n (If there are multiple map relationships\n between `map1` and `map2`, there is no guarantee which one will\n be enabled, and, in fact, one may be enabled even if another one\n already grants the relationship.  If such details are important,\n write a function manually.)\n If the maps are the same, or there is no possible transportation\n between them, an error is thrown, unless `suppressFailureError`\n is `true`, in which case the nativeTransport field is unchanged.\n\n@*param* `suppressFailureError` โ if true, invalid map combinations do nothing instead of causing an error.",
                "extends": {
                    "args": [
                        {
                            "desc": "A unit type object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit type entry in the rules.txt, and provides a means of interacting with it. This should not be confused with the unit object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unittype)",
                            "finish": 87460052,
                            "name": "unitType",
                            "start": 87460044,
                            "type": "local",
                            "view": "unitTypeObject"
                        },
                        {
                            "desc": "An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 87460057,
                            "name": "map1",
                            "start": 87460053,
                            "type": "local",
                            "view": "integer|mapObject"
                        },
                        {
                            "desc": "An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 87460062,
                            "name": "map2",
                            "start": 87460058,
                            "type": "local",
                            "view": "integer|mapObject"
                        },
                        {
                            "desc": "if true, invalid map combinations do nothing instead of causing an error.",
                            "finish": 87460083,
                            "name": "suppressFailureError",
                            "start": 87460063,
                            "type": "local",
                            "view": "boolean?"
                        }
                    ],
                    "desc": "Changes the `unitType`'s nativeTransport field so that the\n unit can teleport between `map1` and `map2`.\n (If there are multiple map relationships\n between `map1` and `map2`, there is no guarantee which one will\n be enabled, and, in fact, one may be enabled even if another one\n already grants the relationship.  If such details are important,\n write a function manually.)\n If the maps are the same, or there is no possible transportation\n between them, an error is thrown, unless `suppressFailureError`\n is `true`, in which case the nativeTransport field is unchanged.\n\n@*param* `suppressFailureError` โ if true, invalid map combinations do nothing instead of causing an error.",
                    "finish": 87490003,
                    "start": 87460000,
                    "type": "function",
                    "view": "function gen.giveNativeTransportBetweenMaps(unitType: unitTypeObject, map1: integer|mapObject, map2: integer|mapObject, suppressFailureError?: boolean)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 87460043,
                "name": "giveNativeTransportBetweenMaps",
                "start": 87460009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A unit type object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit type entry in the rules.txt, and provides a means of interacting with it. This should not be confused with the unit object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unittype)",
                            "finish": 62780040,
                            "name": "unitType",
                            "start": 62780032,
                            "type": "local",
                            "view": "unitTypeObject"
                        }
                    ],
                    "finish": 62780045,
                    "start": 62780000,
                    "type": "function",
                    "view": "function gen.giveNonDisbandable(unitType: unitTypeObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 62780031,
                "name": "giveNonDisbandable",
                "start": 62780009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A unit type object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit type entry in the rules.txt, and provides a means of interacting with it. This should not be confused with the unit object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unittype)",
                            "finish": 63740037,
                            "name": "unitType",
                            "start": 63740029,
                            "type": "local",
                            "view": "unitTypeObject"
                        }
                    ],
                    "finish": 63740042,
                    "start": 63740000,
                    "type": "function",
                    "view": "function gen.giveOverrideSPR(unitType: unitTypeObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 63740028,
                "name": "giveOverrideSPR",
                "start": 63740009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A unit type object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit type entry in the rules.txt, and provides a means of interacting with it. This should not be confused with the unit object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unittype)",
                            "finish": 21430034,
                            "name": "unitType",
                            "start": 21430026,
                            "type": "local",
                            "view": "unitTypeObject"
                        }
                    ],
                    "finish": 21450003,
                    "start": 21430000,
                    "type": "function",
                    "view": "function gen.giveParadrop(unitType: unitTypeObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 21430025,
                "name": "giveParadrop",
                "start": 21430009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A unit type object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit type entry in the rules.txt, and provides a means of interacting with it. This should not be confused with the unit object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unittype)",
                            "finish": 64180051,
                            "name": "unitType",
                            "start": 64180043,
                            "type": "local",
                            "view": "unitTypeObject"
                        }
                    ],
                    "finish": 64180056,
                    "start": 64180000,
                    "type": "function",
                    "view": "function gen.giveReducePopulationWhenBuilt(unitType: unitTypeObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 64180042,
                "name": "giveReducePopulationWhenBuilt",
                "start": 64180009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A unit type object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit type entry in the rules.txt, and provides a means of interacting with it. This should not be confused with the unit object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unittype)",
                            "finish": 64370045,
                            "name": "unitType",
                            "start": 64370037,
                            "type": "local",
                            "view": "unitTypeObject"
                        }
                    ],
                    "finish": 64370050,
                    "start": 64370000,
                    "type": "function",
                    "view": "function gen.giveRequiresFoodSupport(unitType: unitTypeObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 64370036,
                "name": "giveRequiresFoodSupport",
                "start": 64370009,
                "type": "setfield"
            },
            {
                "desc": "Gives the `baseTerrain` +1 trade production from a road.",
                "extends": {
                    "args": [
                        {
                            "desc": "A base terrain object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents the 'basic' terrain characteristics for a terrain type, which is to say those aspects of terrain which do not change for special resources. The 'terrain' object deals with the characteristics that do change for special resources.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#baseterrain)",
                            "finish": 85740043,
                            "name": "baseTerrain",
                            "start": 85740032,
                            "type": "local",
                            "view": "baseTerrainObject"
                        }
                    ],
                    "desc": "Gives the `baseTerrain` +1 trade production from a road.",
                    "finish": 85770003,
                    "start": 85740000,
                    "type": "function",
                    "view": "function gen.giveRoadTradeBonus(baseTerrain: baseTerrainObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 85740031,
                "name": "giveRoadTradeBonus",
                "start": 85740009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A unit type object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit type entry in the rules.txt, and provides a means of interacting with it. This should not be confused with the unit object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unittype)",
                            "finish": 19620038,
                            "name": "unitType",
                            "start": 19620030,
                            "type": "local",
                            "view": "unitTypeObject"
                        }
                    ],
                    "finish": 19640003,
                    "start": 19620000,
                    "type": "function",
                    "view": "function gen.giveSeeTwoSpaces(unitType: unitTypeObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 19620029,
                "name": "giveSeeTwoSpaces",
                "start": 19620009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A unit type object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit type entry in the rules.txt, and provides a means of interacting with it. This should not be confused with the unit object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unittype)",
                            "finish": 22750040,
                            "name": "unitType",
                            "start": 22750032,
                            "type": "local",
                            "view": "unitTypeObject"
                        }
                    ],
                    "finish": 22770003,
                    "start": 22750000,
                    "type": "function",
                    "view": "function gen.giveSpotSubmarines(unitType: unitTypeObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 22750031,
                "name": "giveSpotSubmarines",
                "start": 22750009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A unit type object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit type entry in the rules.txt, and provides a means of interacting with it. This should not be confused with the unit object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unittype)",
                            "finish": 20320035,
                            "name": "unitType",
                            "start": 20320027,
                            "type": "local",
                            "view": "unitTypeObject"
                        }
                    ],
                    "finish": 20340003,
                    "start": 20320000,
                    "type": "function",
                    "view": "function gen.giveSubmarine(unitType: unitTypeObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 20320026,
                "name": "giveSubmarine",
                "start": 20320009,
                "type": "setfield"
            },
            {
                "desc": "Takes the `transportBitmask` for nativeTransport, buildTransport, useTransport,\n and changes an appropriate bit to 1 so that transport exists\n between the maps.  (If there are multiple map relationships\n between `map1` and `map2`, there is no guarantee which one will\n be enabled, and, in fact, one may be enabled even if another one\n already grants the relationship.  If such details are important,\n write a function manually.)\n Returns the new bitmask.\n If the maps are the same, or there is no possible transportation\n between them, an error is thrown, unless `suppressFailureError`\n is `true`, in which case the original bitmask is returned.\n\n@*param* `suppressFailureError` โ set to true so that invalid map pairs do nothing instead of causing errors.",
                "extends": {
                    "args": [
                        {
                            "desc": "An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 87200042,
                            "name": "map1",
                            "start": 87200038,
                            "type": "local",
                            "view": "integer|mapObject"
                        },
                        {
                            "desc": "An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 87200047,
                            "name": "map2",
                            "start": 87200043,
                            "type": "local",
                            "view": "integer|mapObject"
                        },
                        {
                            "desc": "<p>A bitmask is an integer that is not meant to be interpreted as a number, but rather as a sequence of 1's and 0's (the binary representation of the number), with each 1 or 0 representing whether a condition is true or false. Bitmasks often have functions written to facilitate their manipulation. If none are available, Lua provides bitwise operators.</p><p>Typically, the leftmost bit (the bit representing the largest value) is interpreted as negative. Hence, the bitmask integer is not guaranteed to be positive.</p>\n[Lua 5.3 Reference Manual 3.4.2 -- Bitwise Operators](https://www.lua.org/manual/5.3/manual.html#3.4.2)\n[Twos complement: Negative numbers in binary (Youtube Video)](https://www.youtube.com/watch?v=4qH4unVtJkE)",
                            "finish": 87200064,
                            "name": "transportBitmask",
                            "start": 87200048,
                            "type": "local",
                            "view": "bitmask"
                        },
                        {
                            "desc": "set to true so that invalid map pairs do nothing instead of causing errors.",
                            "finish": 87200086,
                            "name": "suppressFailureError",
                            "start": 87200066,
                            "type": "local",
                            "view": "boolean?"
                        },
                        {
                            "desc": "A string is a data type native to Lua which consists of a sequence of characters. These often represent text to be displayed, but are also useful in other contexts. Strings are commonly used as keys in tables, since they make code more readable.\n[Programming in Lua, 2.4 -- Strings](https://www.lua.org/pil/2.4.html)",
                            "finish": 87200100,
                            "name": "functionName",
                            "start": 87200088,
                            "type": "local",
                            "view": "string?"
                        }
                    ],
                    "desc": "Takes the `transportBitmask` for nativeTransport, buildTransport, useTransport,\n and changes an appropriate bit to 1 so that transport exists\n between the maps.  (If there are multiple map relationships\n between `map1` and `map2`, there is no guarantee which one will\n be enabled, and, in fact, one may be enabled even if another one\n already grants the relationship.  If such details are important,\n write a function manually.)\n Returns the new bitmask.\n If the maps are the same, or there is no possible transportation\n between them, an error is thrown, unless `suppressFailureError`\n is `true`, in which case the original bitmask is returned.\n\n@*param* `suppressFailureError` โ set to true so that invalid map pairs do nothing instead of causing errors.",
                    "finish": 87300003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "bitmask"
                        }
                    ],
                    "start": 87200000,
                    "type": "function",
                    "view": "function gen.giveTransportBetweenMaps(map1: integer|mapObject, map2: integer|mapObject, transportBitmask: bitmask, suppressFailureError?: boolean, functionName?: string)\n  -> bitmask"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 87200037,
                "name": "giveTransportBetweenMaps",
                "start": 87200009,
                "type": "setfield"
            },
            {
                "desc": "Changes the `unitType`'s useTransport field so that the\n unit can use teleporters between `map1` and `map2`.\n (If there are multiple map relationships\n between `map1` and `map2`, there is no guarantee which one will\n be enabled, and, in fact, one may be enabled even if another one\n already grants the relationship.  If such details are important,\n write a function manually.)\n If the maps are the same, or there is no possible transportation\n between them, an error is thrown, unless `suppressFailureError`\n is `true`, in which case the useTransport field is unchanged.\n\n@*param* `suppressFailureError` โ if true, invalid map combinations do nothing instead of causing an error.",
                "extends": {
                    "args": [
                        {
                            "desc": "A unit type object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit type entry in the rules.txt, and provides a means of interacting with it. This should not be confused with the unit object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unittype)",
                            "finish": 87850049,
                            "name": "unitType",
                            "start": 87850041,
                            "type": "local",
                            "view": "unitTypeObject"
                        },
                        {
                            "desc": "An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 87850054,
                            "name": "map1",
                            "start": 87850050,
                            "type": "local",
                            "view": "integer|mapObject"
                        },
                        {
                            "desc": "An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 87850059,
                            "name": "map2",
                            "start": 87850055,
                            "type": "local",
                            "view": "integer|mapObject"
                        },
                        {
                            "desc": "if true, invalid map combinations do nothing instead of causing an error.",
                            "finish": 87850080,
                            "name": "suppressFailureError",
                            "start": 87850060,
                            "type": "local",
                            "view": "boolean?"
                        }
                    ],
                    "desc": "Changes the `unitType`'s useTransport field so that the\n unit can use teleporters between `map1` and `map2`.\n (If there are multiple map relationships\n between `map1` and `map2`, there is no guarantee which one will\n be enabled, and, in fact, one may be enabled even if another one\n already grants the relationship.  If such details are important,\n write a function manually.)\n If the maps are the same, or there is no possible transportation\n between them, an error is thrown, unless `suppressFailureError`\n is `true`, in which case the useTransport field is unchanged.\n\n@*param* `suppressFailureError` โ if true, invalid map combinations do nothing instead of causing an error.",
                    "finish": 87880003,
                    "start": 87850000,
                    "type": "function",
                    "view": "function gen.giveUseTransportBetweenMaps(unitType: unitTypeObject, map1: integer|mapObject, map2: integer|mapObject, suppressFailureError?: boolean)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 87850040,
                "name": "giveUseTransportBetweenMaps",
                "start": 87850009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A unit type object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit type entry in the rules.txt, and provides a means of interacting with it. This should not be confused with the unit object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unittype)",
                            "finish": 62970056,
                            "name": "unitType",
                            "start": 62970048,
                            "type": "local",
                            "view": "unitTypeObject"
                        }
                    ],
                    "finish": 62970061,
                    "start": 62970000,
                    "type": "function",
                    "view": "function gen.giveZeroRangeAirUnitDamageOverride(unitType: unitTypeObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 62970047,
                "name": "giveZeroRangeAirUnitDamageOverride",
                "start": 62970009,
                "type": "setfield"
            },
            {
                "desc": " returns true if tile has irrigation or farmland\n\n@*param* `tile` โ Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                "extends": {
                    "args": [
                        {
                            "desc": "Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                            "finish": 12730032,
                            "name": "tile",
                            "start": 12730028,
                            "type": "local",
                            "view": "table|tileObject"
                        }
                    ],
                    "desc": " returns true if tile has irrigation or farmland\n\n@*param* `tile` โ Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                    "finish": 12760003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 12730000,
                    "type": "function",
                    "view": "function gen.hasAgriculture(tile: table|tileObject)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 12730027,
                "name": "hasAgriculture",
                "start": 12730009,
                "type": "setfield"
            },
            {
                "desc": "@*param* `tile` โ Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                "extends": {
                    "args": [
                        {
                            "desc": "Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                            "finish": 15270028,
                            "name": "tile",
                            "start": 15270024,
                            "type": "local",
                            "view": "table|tileObject"
                        }
                    ],
                    "desc": "@*param* `tile` โ Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                    "finish": 15300003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 15270000,
                    "type": "function",
                    "view": "function gen.hasAirbase(tile: table|tileObject)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 15270023,
                "name": "hasAirbase",
                "start": 15270009,
                "type": "setfield"
            },
            {
                "desc": "@*param* `tile` โ Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                "extends": {
                    "args": [
                        {
                            "desc": "Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                            "finish": 12350029,
                            "name": "tile",
                            "start": 12350025,
                            "type": "local",
                            "view": "table|tileObject"
                        }
                    ],
                    "desc": "@*param* `tile` โ Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                    "finish": 12380003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 12350000,
                    "type": "function",
                    "view": "function gen.hasFarmland(tile: table|tileObject)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 12350024,
                "name": "hasFarmland",
                "start": 12350009,
                "type": "setfield"
            },
            {
                "desc": "@*param* `tile` โ Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                "extends": {
                    "args": [
                        {
                            "desc": "Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                            "finish": 14740029,
                            "name": "tile",
                            "start": 14740025,
                            "type": "local",
                            "view": "table|tileObject"
                        }
                    ],
                    "desc": "@*param* `tile` โ Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                    "finish": 14790003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 14740000,
                    "type": "function",
                    "view": "function gen.hasFortress(tile: table|tileObject)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 14740024,
                "name": "hasFortress",
                "start": 14740009,
                "type": "setfield"
            },
            {
                "desc": " returns true if tile has irrigation but no farm\n returns false otherwise\n\n@*param* `tile` โ Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                "extends": {
                    "args": [
                        {
                            "desc": "Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                            "finish": 11060031,
                            "name": "tile",
                            "start": 11060027,
                            "type": "local",
                            "view": "table|tileObject"
                        }
                    ],
                    "desc": " returns true if tile has irrigation but no farm\n returns false otherwise\n\n@*param* `tile` โ Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                    "finish": 11110003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 11060000,
                    "type": "function",
                    "view": "function gen.hasIrrigation(tile: table|tileObject)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 11060026,
                "name": "hasIrrigation",
                "start": 11060009,
                "type": "setfield"
            },
            {
                "desc": " Returns true if `tile` has a marker of `markerType` for `tribe`.\n\n@*param* `markerType` โ Valid marker options are \"irrigation\", \"mine\", \"farmland\", \"road\", \"railroad\", \"fortress\", \"airbase\", \"pollution\", \"transporter\".",
                "extends": {
                    "args": [
                        {
                            "desc": "A tile object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a map \"square\" in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tile)",
                            "finish": 72590027,
                            "name": "tile",
                            "start": 72590023,
                            "type": "local",
                            "view": "tileObject"
                        },
                        {
                            "desc": "A tribe object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a tribe, which is to say the characteristics of the tribe overall, in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tribe)",
                            "finish": 72590033,
                            "name": "tribe",
                            "start": 72590028,
                            "type": "local",
                            "view": "tribeObject"
                        },
                        {
                            "desc": "Valid marker options are \"irrigation\", \"mine\", \"farmland\", \"road\", \"railroad\", \"fortress\", \"airbase\", \"pollution\", \"transporter\".",
                            "finish": 72590044,
                            "name": "markerType",
                            "start": 72590034,
                            "type": "local",
                            "view": "markerOptions"
                        }
                    ],
                    "desc": " Returns true if `tile` has a marker of `markerType` for `tribe`.\n\n@*param* `markerType` โ Valid marker options are \"irrigation\", \"mine\", \"farmland\", \"road\", \"railroad\", \"fortress\", \"airbase\", \"pollution\", \"transporter\".",
                    "finish": 72670003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 72590000,
                    "type": "function",
                    "view": "function gen.hasMarker(tile: tileObject, tribe: tribeObject, markerType: markerOptions)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 72590022,
                "name": "hasMarker",
                "start": 72590009,
                "type": "setfield"
            },
            {
                "desc": "@*param* `tile` โ Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                "extends": {
                    "args": [
                        {
                            "desc": "Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                            "finish": 11530025,
                            "name": "tile",
                            "start": 11530021,
                            "type": "local",
                            "view": "table|tileObject"
                        }
                    ],
                    "desc": "@*param* `tile` โ Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                    "finish": 11580003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 11530000,
                    "type": "function",
                    "view": "function gen.hasMine(tile: table|tileObject)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 11530020,
                "name": "hasMine",
                "start": 11530009,
                "type": "setfield"
            },
            {
                "desc": "@*param* `tile` โ Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                "extends": {
                    "args": [
                        {
                            "desc": "Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                            "finish": 15800030,
                            "name": "tile",
                            "start": 15800026,
                            "type": "local",
                            "view": "table|tileObject"
                        }
                    ],
                    "desc": "@*param* `tile` โ Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                    "finish": 15840003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 15800000,
                    "type": "function",
                    "view": "function gen.hasPollution(tile: table|tileObject)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 15800025,
                "name": "hasPollution",
                "start": 15800009,
                "type": "setfield"
            },
            {
                "desc": " returns true if a tile has a railroad (and road)\n\n@*param* `tile` โ Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                "extends": {
                    "args": [
                        {
                            "desc": "Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                            "finish": 13730029,
                            "name": "tile",
                            "start": 13730025,
                            "type": "local",
                            "view": "table|tileObject"
                        }
                    ],
                    "desc": " returns true if a tile has a railroad (and road)\n\n@*param* `tile` โ Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                    "finish": 13770003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 13730000,
                    "type": "function",
                    "view": "function gen.hasRailroad(tile: table|tileObject)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 13730024,
                "name": "hasRailroad",
                "start": 13730009,
                "type": "setfield"
            },
            {
                "desc": " returns true if tile has a road\n\n@*param* `tile` โ Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                "extends": {
                    "args": [
                        {
                            "desc": "Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                            "finish": 13350025,
                            "name": "tile",
                            "start": 13350021,
                            "type": "local",
                            "view": "table|tileObject"
                        }
                    ],
                    "desc": " returns true if tile has a road\n\n@*param* `tile` โ Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                    "finish": 13380003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 13350000,
                    "type": "function",
                    "view": "function gen.hasRoad(tile: table|tileObject)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 13350020,
                "name": "hasRoad",
                "start": 13350009,
                "type": "setfield"
            },
            {
                "desc": " returns true if tile has road or rail \n (but not if city, unless an event has placed a road)\n\n@*param* `tile` โ Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                "extends": {
                    "args": [
                        {
                            "desc": "Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                            "finish": 14120035,
                            "name": "tile",
                            "start": 14120031,
                            "type": "local",
                            "view": "table|tileObject"
                        }
                    ],
                    "desc": " returns true if tile has road or rail \n (but not if city, unless an event has placed a road)\n\n@*param* `tile` โ Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                    "finish": 14150003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 14120000,
                    "type": "function",
                    "view": "function gen.hasTransportation(tile: table|tileObject)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 14120030,
                "name": "hasTransportation",
                "start": 14120009,
                "type": "setfield"
            },
            {
                "desc": "@*param* `tile` โ Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                "extends": {
                    "args": [
                        {
                            "desc": "Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                            "finish": 16340032,
                            "name": "tile",
                            "start": 16340028,
                            "type": "local",
                            "view": "table|tileObject"
                        }
                    ],
                    "desc": "@*param* `tile` โ Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                    "finish": 16370003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 16340000,
                    "type": "function",
                    "view": "function gen.hasTransporter(tile: table|tileObject)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 16340027,
                "name": "hasTransporter",
                "start": 16340009,
                "type": "setfield"
            },
            {
                "desc": " gen.hideAllMarkers(tribeOrNil,markerTypeOrNil)\n Hides all markers of the given type for that tribe.\n If tribe not specified, hides all markers of given type for\n all tribes.\n If markerType not specified, hides markers of all types.\ncomment\n\n@*param* `markerTypeOrNil` โ Valid marker options are \"irrigation\", \"mine\", \"farmland\", \"road\", \"railroad\", \"fortress\", \"airbase\", \"pollution\", \"transporter\".",
                "extends": {
                    "args": [
                        {
                            "desc": "A tribe object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a tribe, which is to say the characteristics of the tribe overall, in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tribe)",
                            "finish": 73310038,
                            "name": "tribeOrNil",
                            "start": 73310028,
                            "type": "local",
                            "view": "tribeObject|nil"
                        },
                        {
                            "desc": "Valid marker options are \"irrigation\", \"mine\", \"farmland\", \"road\", \"railroad\", \"fortress\", \"airbase\", \"pollution\", \"transporter\".",
                            "finish": 73310054,
                            "name": "markerTypeOrNil",
                            "start": 73310039,
                            "type": "local",
                            "view": "markerOptions|nil"
                        }
                    ],
                    "desc": " gen.hideAllMarkers(tribeOrNil,markerTypeOrNil)\n Hides all markers of the given type for that tribe.\n If tribe not specified, hides all markers of given type for\n all tribes.\n If markerType not specified, hides markers of all types.\ncomment\n\n@*param* `markerTypeOrNil` โ Valid marker options are \"irrigation\", \"mine\", \"farmland\", \"road\", \"railroad\", \"fortress\", \"airbase\", \"pollution\", \"transporter\".",
                    "finish": 73520003,
                    "start": 73310000,
                    "type": "function",
                    "view": "function gen.hideAllMarkers(tribeOrNil: tribeObject|nil, markerTypeOrNil: markerOptions|nil)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 73310027,
                "name": "hideAllMarkers",
                "start": 73310009,
                "type": "setfield"
            },
            {
                "desc": " Hides all markers on a given tile for the given tribe.",
                "extends": {
                    "args": [
                        {
                            "desc": "A tile object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a map \"square\" in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tile)",
                            "finish": 73160038,
                            "name": "tile",
                            "start": 73160034,
                            "type": "local",
                            "view": "tileObject"
                        },
                        {
                            "desc": "A tribe object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a tribe, which is to say the characteristics of the tribe overall, in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tribe)",
                            "finish": 73160044,
                            "name": "tribe",
                            "start": 73160039,
                            "type": "local",
                            "view": "tribeObject"
                        }
                    ],
                    "desc": " Hides all markers on a given tile for the given tribe.",
                    "finish": 73200003,
                    "start": 73160000,
                    "type": "function",
                    "view": "function gen.hideAllMarkersOnTile(tile: tileObject, tribe: tribeObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 73160033,
                "name": "hideAllMarkersOnTile",
                "start": 73160009,
                "type": "setfield"
            },
            {
                "desc": " Uncharts the `markerType` marker for the `tribe`, but does not remove the marker.\n Does nothing if the tribe doesn't have that marker\n or if the marker is already hidden.\n\n@*param* `markerType` โ Valid marker options are \"irrigation\", \"mine\", \"farmland\", \"road\", \"railroad\", \"fortress\", \"airbase\", \"pollution\", \"transporter\".",
                "extends": {
                    "args": [
                        {
                            "desc": "A tile object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a map \"square\" in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tile)",
                            "finish": 72910028,
                            "name": "tile",
                            "start": 72910024,
                            "type": "local",
                            "view": "tileObject"
                        },
                        {
                            "desc": "A tribe object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a tribe, which is to say the characteristics of the tribe overall, in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tribe)",
                            "finish": 72910034,
                            "name": "tribe",
                            "start": 72910029,
                            "type": "local",
                            "view": "tribeObject"
                        },
                        {
                            "desc": "Valid marker options are \"irrigation\", \"mine\", \"farmland\", \"road\", \"railroad\", \"fortress\", \"airbase\", \"pollution\", \"transporter\".",
                            "finish": 72910045,
                            "name": "markerType",
                            "start": 72910035,
                            "type": "local",
                            "view": "markerOptions"
                        }
                    ],
                    "desc": " Uncharts the `markerType` marker for the `tribe`, but does not remove the marker.\n Does nothing if the tribe doesn't have that marker\n or if the marker is already hidden.\n\n@*param* `markerType` โ Valid marker options are \"irrigation\", \"mine\", \"farmland\", \"road\", \"railroad\", \"fortress\", \"airbase\", \"pollution\", \"transporter\".",
                    "finish": 73090003,
                    "start": 72910000,
                    "type": "function",
                    "view": "function gen.hideMarker(tile: tileObject, tribe: tribeObject, markerType: markerOptions)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 72910023,
                "name": "hideMarker",
                "start": 72910009,
                "type": "setfield"
            },
            {
                "desc": " If a unit is provided, hides the unit and all other units on the tile from tribe\n If a tile is provided, hides all units on the tile (if any are present)\n\n@*param* `unitOrTile` โ Can be:<br><br>tileObject<br><br>unitObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                "extends": {
                    "args": [
                        {
                            "desc": "Can be:<br><br>tileObject<br><br>unitObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                            "finish": 59090037,
                            "name": "unitOrTile",
                            "start": 59090027,
                            "type": "local",
                            "view": "table|tileObject|unitObject"
                        },
                        {
                            "desc": "A tribe object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a tribe, which is to say the characteristics of the tribe overall, in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tribe)",
                            "finish": 59090043,
                            "name": "tribe",
                            "start": 59090038,
                            "type": "local",
                            "view": "tribeObject"
                        }
                    ],
                    "desc": " If a unit is provided, hides the unit and all other units on the tile from tribe\n If a tile is provided, hides all units on the tile (if any are present)\n\n@*param* `unitOrTile` โ Can be:<br><br>tileObject<br><br>unitObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                    "finish": 59190003,
                    "start": 59090000,
                    "type": "function",
                    "view": "function gen.hideUnitStack(unitOrTile: table|tileObject|unitObject, tribe: tribeObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 59090026,
                "name": "hideUnitStack",
                "start": 59090009,
                "type": "setfield"
            },
            {
                "desc": "  Finds the nearest city (of the same tribe) that can support another\n  unit, and sets the unit's home city to that city.\n  If there is no suitable city, the unit's home city isn't changed.\n <br> Note: This counts the number of squares between the unit and the city, and ignores map differences.  This is not suitable for all applications (e.g. if maps are not \"stacked\", or if you're trying to re-create an existing game mechanic).",
                "extends": {
                    "args": [
                        {
                            "desc": "A unit object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit in the game, and provides a means of interacting with it. This should not be confused with the unit type object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unit)",
                            "finish": 35430035,
                            "name": "unit",
                            "start": 35430031,
                            "type": "local",
                            "view": "unitObject"
                        }
                    ],
                    "desc": "  Finds the nearest city (of the same tribe) that can support another\n  unit, and sets the unit's home city to that city.\n  If there is no suitable city, the unit's home city isn't changed.\n <br> Note: This counts the number of squares between the unit and the city, and ignores map differences.  This is not suitable for all applications (e.g. if maps are not \"stacked\", or if you're trying to re-create an existing game mechanic).",
                    "finish": 35590003,
                    "start": 35430000,
                    "type": "function",
                    "view": "function gen.homeToNearestCity(unit: unitObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 35430030,
                "name": "homeToNearestCity",
                "start": 35430009,
                "type": "setfield"
            },
            {
                "desc": " if tile has no irrigation, place irrigation (even if mining present)\n if tile has irrigation, place farmland\n if city do nothing\n\n@*param* `tile` โ Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                "extends": {
                    "args": [
                        {
                            "desc": "Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                            "finish": 12840036,
                            "name": "tile",
                            "start": 12840032,
                            "type": "local",
                            "view": "table|tileObject"
                        }
                    ],
                    "desc": " if tile has no irrigation, place irrigation (even if mining present)\n if tile has irrigation, place farmland\n if city do nothing\n\n@*param* `tile` โ Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                    "finish": 12950003,
                    "start": 12840000,
                    "type": "function",
                    "view": "function gen.improveAgriculture(tile: table|tileObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 12840031,
                "name": "improveAgriculture",
                "start": 12840009,
                "type": "setfield"
            },
            {
                "desc": " The table of coordinates defines the corners of the\n polygon.  Returns true if the tile is within the\n polygon defined by the table of coordinates, and\n false otherwise.  Checking that the map is correct\n must be done separately\n The entry: `tableOfCoordinates.doesNotCrossThisX`\n sets an x coordinate that the polygon does not\n cross.  If absent, 0 is used,\n meaning the polygon shouldn't cross the \"date line\".\n<br> Press CTRL+SHIFT+F4 and select the 'Start the Polygon Script' option to generate polygons.\n\n@*param* `tile` โ The tile to check\n\n@*param* `tableOfCoordinates` โ Table of {[1]=xCoord, [2]=yCoord} without gaps in the integer keys.",
                "extends": {
                    "args": [
                        {
                            "desc": "The tile to check",
                            "finish": 32060027,
                            "name": "tile",
                            "start": 32060023,
                            "type": "local",
                            "view": "tileObject"
                        },
                        {
                            "desc": "Table of {[1]=xCoord, [2]=yCoord} without gaps in the integer keys.",
                            "finish": 32060046,
                            "name": "tableOfCoordinates",
                            "start": 32060028,
                            "type": "local",
                            "view": "table"
                        }
                    ],
                    "desc": " The table of coordinates defines the corners of the\n polygon.  Returns true if the tile is within the\n polygon defined by the table of coordinates, and\n false otherwise.  Checking that the map is correct\n must be done separately\n The entry: `tableOfCoordinates.doesNotCrossThisX`\n sets an x coordinate that the polygon does not\n cross.  If absent, 0 is used,\n meaning the polygon shouldn't cross the \"date line\".\n<br> Press CTRL+SHIFT+F4 and select the 'Start the Polygon Script' option to generate polygons.\n\n@*param* `tile` โ The tile to check\n\n@*param* `tableOfCoordinates` โ Table of {[1]=xCoord, [2]=yCoord} without gaps in the integer keys.",
                    "finish": 33880003,
                    "returns": [
                        {
                            "name": "tileIsInPolygon",
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 32060000,
                    "type": "function",
                    "view": "function gen.inPolygon(tile: tileObject, tableOfCoordinates: table)\n  -> tileIsInPolygon: boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 32060022,
                "name": "inPolygon",
                "start": 32060009,
                "type": "setfield"
            },
            {
                "desc": " Returns `true` if the `object` is a value in the `table`, `false` otherwise\ncomment",
                "extends": {
                    "args": [
                        {
                            "finish": 41610027,
                            "name": "object",
                            "start": 41610021,
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "desc": "A table is a data type native to Lua, and links \"keys\" (usually numbers or strings) to \"values\" (any kind of data, including other tables). This is the only data structuring mechanism in Lua, and many of the data types documented here are simply tables with restrictions on their keys or values. If a key has not been assigned a value, the table returns nil as the corresponding value, and assigning nil as a value to a key removes that key from the table.\n[Programming in Lua, 2.5 -- Tables](https://www.lua.org/pil/2.5.html)",
                            "finish": 41610033,
                            "name": "table",
                            "start": 41610028,
                            "type": "local",
                            "view": "table"
                        }
                    ],
                    "desc": " Returns `true` if the `object` is a value in the `table`, `false` otherwise\ncomment",
                    "finish": 41680003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 41610000,
                    "type": "function",
                    "view": "function gen.inTable(object: any, table: table)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 41610020,
                "name": "inTable",
                "start": 41610009,
                "type": "setfield"
            },
            {
                "desc": " Returns true if tribe sees Airbase on the tile, and false otherwise.\n Does not consider if tile is revealed to the tribe.",
                "extends": {
                    "args": [
                        {
                            "desc": "A tile object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a map \"square\" in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tile)",
                            "finish": 61550034,
                            "name": "tile",
                            "start": 61550030,
                            "type": "local",
                            "view": "tileObject"
                        },
                        {
                            "desc": "A tribe object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a tribe, which is to say the characteristics of the tribe overall, in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tribe)",
                            "finish": 61550040,
                            "name": "tribe",
                            "start": 61550035,
                            "type": "local",
                            "view": "tribeObject"
                        }
                    ],
                    "desc": " Returns true if tribe sees Airbase on the tile, and false otherwise.\n Does not consider if tile is revealed to the tribe.",
                    "finish": 61550045,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 61550000,
                    "type": "function",
                    "view": "function gen.isAirbaseCharted(tile: tileObject, tribe: tribeObject)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 61550029,
                "name": "isAirbaseCharted",
                "start": 61550009,
                "type": "setfield"
            },
            {
                "desc": "Returns true if the `unitType` is allowed on `map`, and false otherwise.",
                "extends": {
                    "args": [
                        {
                            "desc": "A unit type object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit type entry in the rules.txt, and provides a means of interacting with it. This should not be confused with the unit object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unittype)",
                            "finish": 88760036,
                            "name": "unitType",
                            "start": 88760028,
                            "type": "local",
                            "view": "unitTypeObject"
                        },
                        {
                            "desc": "An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 88760040,
                            "name": "map",
                            "start": 88760037,
                            "type": "local",
                            "view": "integer|mapObject"
                        }
                    ],
                    "desc": "Returns true if the `unitType` is allowed on `map`, and false otherwise.",
                    "finish": 88810003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 88760000,
                    "type": "function",
                    "view": "function gen.isAllowedOnMap(unitType: unitTypeObject, map: integer|mapObject)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 88760027,
                "name": "isAllowedOnMap",
                "start": 88760009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A unit type object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit type entry in the rules.txt, and provides a means of interacting with it. This should not be confused with the unit object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unittype)",
                            "finish": 21580030,
                            "name": "unitType",
                            "start": 21580022,
                            "type": "local",
                            "view": "unitTypeObject"
                        }
                    ],
                    "finish": 21600003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 21580000,
                    "type": "function",
                    "view": "function gen.isAlpine(unitType: unitTypeObject)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 21580021,
                "name": "isAlpine",
                "start": 21580009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A unit type object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit type entry in the rules.txt, and provides a means of interacting with it. This should not be confused with the unit object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unittype)",
                            "finish": 20020034,
                            "name": "unitType",
                            "start": 20020026,
                            "type": "local",
                            "view": "unitTypeObject"
                        }
                    ],
                    "finish": 20040003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 20020000,
                    "type": "function",
                    "view": "function gen.isAmphibious(unitType: unitTypeObject)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 20020025,
                "name": "isAmphibious",
                "start": 20020009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A unit type object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit type entry in the rules.txt, and provides a means of interacting with it. This should not be confused with the unit object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unittype)",
                            "finish": 20470033,
                            "name": "unitType",
                            "start": 20470025,
                            "type": "local",
                            "view": "unitTypeObject"
                        }
                    ],
                    "finish": 20490003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 20470000,
                    "type": "function",
                    "view": "function gen.isAttackAir(unitType: unitTypeObject)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 20470024,
                "name": "isAttackAir",
                "start": 20470009,
                "type": "setfield"
            },
            {
                "desc": " The function of this byte in `city.attributes` is currently unknown.  If you discover it, please inform the Scenario League at Civfanatics.",
                "extends": {
                    "args": [
                        {
                            "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
                            "finish": 25000031,
                            "name": "city",
                            "start": 25000027,
                            "type": "local",
                            "view": "cityObject"
                        }
                    ],
                    "desc": " The function of this byte in `city.attributes` is currently unknown.  If you discover it, please inform the Scenario League at Civfanatics.",
                    "finish": 25020003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 25000000,
                    "type": "function",
                    "view": "function gen.isAttribute10(city: cityObject)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 25000026,
                "name": "isAttribute10",
                "start": 25000009,
                "type": "setfield"
            },
            {
                "desc": " The function of this byte in `city.attributes` is currently unknown.  If you discover it, please inform the Scenario League at Civfanatics.",
                "extends": {
                    "args": [
                        {
                            "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
                            "finish": 25250031,
                            "name": "city",
                            "start": 25250027,
                            "type": "local",
                            "view": "cityObject"
                        }
                    ],
                    "desc": " The function of this byte in `city.attributes` is currently unknown.  If you discover it, please inform the Scenario League at Civfanatics.",
                    "finish": 25270003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 25250000,
                    "type": "function",
                    "view": "function gen.isAttribute11(city: cityObject)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 25250026,
                "name": "isAttribute11",
                "start": 25250009,
                "type": "setfield"
            },
            {
                "desc": " The function of this byte in `city.attributes` is currently unknown.  If you discover it, please inform the Scenario League at Civfanatics.",
                "extends": {
                    "args": [
                        {
                            "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
                            "finish": 25720031,
                            "name": "city",
                            "start": 25720027,
                            "type": "local",
                            "view": "cityObject"
                        }
                    ],
                    "desc": " The function of this byte in `city.attributes` is currently unknown.  If you discover it, please inform the Scenario League at Civfanatics.",
                    "finish": 25740003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 25720000,
                    "type": "function",
                    "view": "function gen.isAttribute13(city: cityObject)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 25720026,
                "name": "isAttribute13",
                "start": 25720009,
                "type": "setfield"
            },
            {
                "desc": " The function of this byte in `city.attributes` is currently unknown.  If you discover it, please inform the Scenario League at Civfanatics.",
                "extends": {
                    "args": [
                        {
                            "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
                            "finish": 25970031,
                            "name": "city",
                            "start": 25970027,
                            "type": "local",
                            "view": "cityObject"
                        }
                    ],
                    "desc": " The function of this byte in `city.attributes` is currently unknown.  If you discover it, please inform the Scenario League at Civfanatics.",
                    "finish": 25990003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 25970000,
                    "type": "function",
                    "view": "function gen.isAttribute14(city: cityObject)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 25970026,
                "name": "isAttribute14",
                "start": 25970009,
                "type": "setfield"
            },
            {
                "desc": " The function of this byte in `city.attributes` is currently unknown.  If you discover it, please inform the Scenario League at Civfanatics.",
                "extends": {
                    "args": [
                        {
                            "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
                            "finish": 26220031,
                            "name": "city",
                            "start": 26220027,
                            "type": "local",
                            "view": "cityObject"
                        }
                    ],
                    "desc": " The function of this byte in `city.attributes` is currently unknown.  If you discover it, please inform the Scenario League at Civfanatics.",
                    "finish": 26240003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 26220000,
                    "type": "function",
                    "view": "function gen.isAttribute15(city: cityObject)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 26220026,
                "name": "isAttribute15",
                "start": 26220009,
                "type": "setfield"
            },
            {
                "desc": " The function of this byte in `city.attributes` is currently unknown.  If you discover it, please inform the Scenario League at Civfanatics.",
                "extends": {
                    "args": [
                        {
                            "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
                            "finish": 26470031,
                            "name": "city",
                            "start": 26470027,
                            "type": "local",
                            "view": "cityObject"
                        }
                    ],
                    "desc": " The function of this byte in `city.attributes` is currently unknown.  If you discover it, please inform the Scenario League at Civfanatics.",
                    "finish": 26490003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 26470000,
                    "type": "function",
                    "view": "function gen.isAttribute16(city: cityObject)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 26470026,
                "name": "isAttribute16",
                "start": 26470009,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 26880037,
                    "start": 26880020,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 26880017,
                "name": "isAttribute17",
                "start": 26880000,
                "type": "setfield"
            },
            {
                "desc": " The function of this byte in `city.attributes` is currently unknown.  If you discover it, please inform the Scenario League at Civfanatics.",
                "extends": {
                    "args": [
                        {
                            "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
                            "finish": 26970031,
                            "name": "city",
                            "start": 26970027,
                            "type": "local",
                            "view": "cityObject"
                        }
                    ],
                    "desc": " The function of this byte in `city.attributes` is currently unknown.  If you discover it, please inform the Scenario League at Civfanatics.",
                    "finish": 26990003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 26970000,
                    "type": "function",
                    "view": "function gen.isAttribute18(city: cityObject)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 26970026,
                "name": "isAttribute18",
                "start": 26970009,
                "type": "setfield"
            },
            {
                "desc": " The function of this byte in `city.attributes` is currently unknown.  If you discover it, please inform the Scenario League at Civfanatics.",
                "extends": {
                    "args": [
                        {
                            "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
                            "finish": 27220031,
                            "name": "city",
                            "start": 27220027,
                            "type": "local",
                            "view": "cityObject"
                        }
                    ],
                    "desc": " The function of this byte in `city.attributes` is currently unknown.  If you discover it, please inform the Scenario League at Civfanatics.",
                    "finish": 27240003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 27220000,
                    "type": "function",
                    "view": "function gen.isAttribute19(city: cityObject)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 27220026,
                "name": "isAttribute19",
                "start": 27220009,
                "type": "setfield"
            },
            {
                "desc": " The function of this byte in `city.attributes` is currently unknown.  If you discover it, please inform the Scenario League at Civfanatics.",
                "extends": {
                    "args": [
                        {
                            "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
                            "finish": 27470031,
                            "name": "city",
                            "start": 27470027,
                            "type": "local",
                            "view": "cityObject"
                        }
                    ],
                    "desc": " The function of this byte in `city.attributes` is currently unknown.  If you discover it, please inform the Scenario League at Civfanatics.",
                    "finish": 27490003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 27470000,
                    "type": "function",
                    "view": "function gen.isAttribute20(city: cityObject)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 27470026,
                "name": "isAttribute20",
                "start": 27470009,
                "type": "setfield"
            },
            {
                "desc": " The function of this byte in `city.attributes` is currently unknown.  If you discover it, please inform the Scenario League at Civfanatics.",
                "extends": {
                    "args": [
                        {
                            "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
                            "finish": 27720031,
                            "name": "city",
                            "start": 27720027,
                            "type": "local",
                            "view": "cityObject"
                        }
                    ],
                    "desc": " The function of this byte in `city.attributes` is currently unknown.  If you discover it, please inform the Scenario League at Civfanatics.",
                    "finish": 27740003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 27720000,
                    "type": "function",
                    "view": "function gen.isAttribute21(city: cityObject)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 27720026,
                "name": "isAttribute21",
                "start": 27720009,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 28350042,
                    "start": 28350020,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 28350017,
                "name": "isAttribute23",
                "start": 28350000,
                "type": "setfield"
            },
            {
                "desc": " The function of this byte in `city.attributes` is currently unknown.  If you discover it, please inform the Scenario League at Civfanatics.",
                "extends": {
                    "args": [
                        {
                            "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
                            "finish": 28440031,
                            "name": "city",
                            "start": 28440027,
                            "type": "local",
                            "view": "cityObject"
                        }
                    ],
                    "desc": " The function of this byte in `city.attributes` is currently unknown.  If you discover it, please inform the Scenario League at Civfanatics.",
                    "finish": 28460003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 28440000,
                    "type": "function",
                    "view": "function gen.isAttribute24(city: cityObject)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 28440026,
                "name": "isAttribute24",
                "start": 28440009,
                "type": "setfield"
            },
            {
                "desc": " The function of this byte in `city.attributes` is currently unknown.  If you discover it, please inform the Scenario League at Civfanatics.",
                "extends": {
                    "args": [
                        {
                            "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
                            "finish": 29390031,
                            "name": "city",
                            "start": 29390027,
                            "type": "local",
                            "view": "cityObject"
                        }
                    ],
                    "desc": " The function of this byte in `city.attributes` is currently unknown.  If you discover it, please inform the Scenario League at Civfanatics.",
                    "finish": 29410003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 29390000,
                    "type": "function",
                    "view": "function gen.isAttribute28(city: cityObject)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 29390026,
                "name": "isAttribute28",
                "start": 29390009,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 29910041,
                    "start": 29910020,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 29910017,
                "name": "isAttribute30",
                "start": 29910000,
                "type": "setfield"
            },
            {
                "desc": " The function of this byte in `city.attributes` is currently unknown.  If you discover it, please inform the Scenario League at Civfanatics.",
                "extends": {
                    "args": [
                        {
                            "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
                            "finish": 30140031,
                            "name": "city",
                            "start": 30140027,
                            "type": "local",
                            "view": "cityObject"
                        }
                    ],
                    "desc": " The function of this byte in `city.attributes` is currently unknown.  If you discover it, please inform the Scenario League at Civfanatics.",
                    "finish": 30160003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 30140000,
                    "type": "function",
                    "view": "function gen.isAttribute31(city: cityObject)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 30140026,
                "name": "isAttribute31",
                "start": 30140009,
                "type": "setfield"
            },
            {
                "desc": " The function of this byte in `city.attributes` is currently unknown.  If you discover it, please inform the Scenario League at Civfanatics.",
                "extends": {
                    "args": [
                        {
                            "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
                            "finish": 30390031,
                            "name": "city",
                            "start": 30390027,
                            "type": "local",
                            "view": "cityObject"
                        }
                    ],
                    "desc": " The function of this byte in `city.attributes` is currently unknown.  If you discover it, please inform the Scenario League at Civfanatics.",
                    "finish": 30410003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 30390000,
                    "type": "function",
                    "view": "function gen.isAttribute32(city: cityObject)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 30390026,
                "name": "isAttribute32",
                "start": 30390009,
                "type": "setfield"
            },
            {
                "desc": " The function of this byte in `city.attributes` is currently unknown.  If you discover it, please inform the Scenario League at Civfanatics.",
                "extends": {
                    "args": [
                        {
                            "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
                            "finish": 24030030,
                            "name": "city",
                            "start": 24030026,
                            "type": "local",
                            "view": "cityObject"
                        }
                    ],
                    "desc": " The function of this byte in `city.attributes` is currently unknown.  If you discover it, please inform the Scenario League at Civfanatics.",
                    "finish": 24050003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 24030000,
                    "type": "function",
                    "view": "function gen.isAttribute6(city: cityObject)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 24030025,
                "name": "isAttribute6",
                "start": 24030009,
                "type": "setfield"
            },
            {
                "desc": " The function of this byte in `city.attributes` is currently unknown.  If you discover it, please inform the Scenario League at Civfanatics.",
                "extends": {
                    "args": [
                        {
                            "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
                            "finish": 24280030,
                            "name": "city",
                            "start": 24280026,
                            "type": "local",
                            "view": "cityObject"
                        }
                    ],
                    "desc": " The function of this byte in `city.attributes` is currently unknown.  If you discover it, please inform the Scenario League at Civfanatics.",
                    "finish": 24300003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 24280000,
                    "type": "function",
                    "view": "function gen.isAttribute7(city: cityObject)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 24280025,
                "name": "isAttribute7",
                "start": 24280009,
                "type": "setfield"
            },
            {
                "desc": " The function of this byte in `city.attributes` is currently unknown.  If you discover it, please inform the Scenario League at Civfanatics.",
                "extends": {
                    "args": [
                        {
                            "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
                            "finish": 24750030,
                            "name": "city",
                            "start": 24750026,
                            "type": "local",
                            "view": "cityObject"
                        }
                    ],
                    "desc": " The function of this byte in `city.attributes` is currently unknown.  If you discover it, please inform the Scenario League at Civfanatics.",
                    "finish": 24770003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 24750000,
                    "type": "function",
                    "view": "function gen.isAttribute9(city: cityObject)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 24750025,
                "name": "isAttribute9",
                "start": 24750009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
                            "finish": 23790029,
                            "name": "city",
                            "start": 23790025,
                            "type": "local",
                            "view": "cityObject"
                        }
                    ],
                    "finish": 23810003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 23790000,
                    "type": "function",
                    "view": "function gen.isAutoBuild(city: cityObject)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 23790024,
                "name": "isAutoBuild",
                "start": 23790009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A unit type object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit type entry in the rules.txt, and provides a means of interacting with it. This should not be confused with the unit object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unittype)",
                            "finish": 63490046,
                            "name": "unitType",
                            "start": 63490038,
                            "type": "local",
                            "view": "unitTypeObject"
                        }
                    ],
                    "finish": 63490051,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 63490000,
                    "type": "function",
                    "view": "function gen.isBarbarianWillNotExpire(unitType: unitTypeObject)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 63490037,
                "name": "isBarbarianWillNotExpire",
                "start": 63490009,
                "type": "setfield"
            },
            {
                "desc": " tells if bitNumber bit of integer is 0 \n (1st bit is the bit for the ones position)\n```lua\ngen.isBit0(0b00000010,2) -->false\ngen.isBit0(0b11111110,1) -->true\n```\n note: lua does not actually accept integers specified in binary (though it does accept hexidecimal)",
                "extends": {
                    "args": [
                        {
                            "desc": "An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 7420027,
                            "name": "bitmask",
                            "start": 7420020,
                            "type": "local",
                            "view": "integer|bitmask"
                        },
                        {
                            "desc": "An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 7420037,
                            "name": "bitNumber",
                            "start": 7420028,
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "desc": " tells if bitNumber bit of integer is 0 \n (1st bit is the bit for the ones position)\n```lua\ngen.isBit0(0b00000010,2) -->false\ngen.isBit0(0b11111110,1) -->true\n```\n note: lua does not actually accept integers specified in binary (though it does accept hexidecimal)",
                    "finish": 7440003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 7420000,
                    "type": "function",
                    "view": "function gen.isBit0(bitmask: integer|bitmask, bitNumber: integer)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 7420019,
                "name": "isBit0",
                "start": 7420009,
                "type": "setfield"
            },
            {
                "desc": " tells if bitNumber bit of integer/bitmask is 1 \n (1st bit is the bit for the ones position)\n```lua\ngen.isBit1(0b00000010,2) -->true\ngen.isBit1(0b11111110,1) -->false\n```\n note: lua does not actually accept integers specified in binary (though it does accept hexidecimal)\n\n@*param* `bitmask` โ bitmask",
                "extends": {
                    "args": [
                        {
                            "desc": "bitmask",
                            "finish": 7230027,
                            "name": "bitmask",
                            "start": 7230020,
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "desc": "An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 7230037,
                            "name": "bitNumber",
                            "start": 7230028,
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "desc": " tells if bitNumber bit of integer/bitmask is 1 \n (1st bit is the bit for the ones position)\n```lua\ngen.isBit1(0b00000010,2) -->true\ngen.isBit1(0b11111110,1) -->false\n```\n note: lua does not actually accept integers specified in binary (though it does accept hexidecimal)\n\n@*param* `bitmask` โ bitmask",
                    "finish": 7250003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 7230000,
                    "type": "function",
                    "view": "function gen.isBit1(bitmask: integer, bitNumber: integer)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 7230019,
                "name": "isBit1",
                "start": 7230009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A unit type object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit type entry in the rules.txt, and provides a means of interacting with it. This should not be confused with the unit object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unittype)",
                            "finish": 22460039,
                            "name": "unitType",
                            "start": 22460031,
                            "type": "local",
                            "view": "unitTypeObject"
                        }
                    ],
                    "finish": 22480003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 22460000,
                    "type": "function",
                    "view": "function gen.isBonusAgainstAir(unitType: unitTypeObject)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 22460030,
                "name": "isBonusAgainstAir",
                "start": 22460009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A unit type object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit type entry in the rules.txt, and provides a means of interacting with it. This should not be confused with the unit object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unittype)",
                            "finish": 21800041,
                            "name": "unitType",
                            "start": 21800033,
                            "type": "local",
                            "view": "unitTypeObject"
                        }
                    ],
                    "finish": 21820003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 21800000,
                    "type": "function",
                    "view": "function gen.isBonusAgainstHorse(unitType: unitTypeObject)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 21800032,
                "name": "isBonusAgainstHorse",
                "start": 21800009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
                            "finish": 24520032,
                            "name": "city",
                            "start": 24520028,
                            "type": "local",
                            "view": "cityObject"
                        }
                    ],
                    "finish": 24540003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 24520000,
                    "type": "function",
                    "view": "function gen.isBuildCoastal(city: cityObject)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 24520027,
                "name": "isBuildCoastal",
                "start": 24520009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
                            "finish": 25490035,
                            "name": "city",
                            "start": 25490031,
                            "type": "local",
                            "view": "cityObject"
                        }
                    ],
                    "finish": 25510003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 25490000,
                    "type": "function",
                    "view": "function gen.isBuildHydroPlant(city: cityObject)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 25490030,
                "name": "isBuildHydroPlant",
                "start": 25490009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
                            "finish": 27960030,
                            "name": "city",
                            "start": 27960026,
                            "type": "local",
                            "view": "cityObject"
                        }
                    ],
                    "finish": 27980003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 27960000,
                    "type": "function",
                    "view": "function gen.isBuildShips(city: cityObject)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 27960025,
                "name": "isBuildShips",
                "start": 27960009,
                "type": "setfield"
            },
            {
                "desc": "Returns true if `unitType` can build transporters between `map1` and `map2`, and false otherwise.\nAlways returns true if `map1` and `map2` are the same.",
                "extends": {
                    "args": [
                        {
                            "desc": "A unit type object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit type entry in the rules.txt, and provides a means of interacting with it. This should not be confused with the unit object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unittype)",
                            "finish": 86890049,
                            "name": "unitType",
                            "start": 86890041,
                            "type": "local",
                            "view": "unitTypeObject"
                        },
                        {
                            "desc": "A map object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents the overall properties of one of the four possible maps in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#map)",
                            "finish": 86890054,
                            "name": "map1",
                            "start": 86890050,
                            "type": "local",
                            "view": "integer|mapObject"
                        },
                        {
                            "desc": "A map object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents the overall properties of one of the four possible maps in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#map)",
                            "finish": 86890059,
                            "name": "map2",
                            "start": 86890055,
                            "type": "local",
                            "view": "integer|mapObject"
                        }
                    ],
                    "desc": "Returns true if `unitType` can build transporters between `map1` and `map2`, and false otherwise.\nAlways returns true if `map1` and `map2` are the same.",
                    "finish": 86910003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 86890000,
                    "type": "function",
                    "view": "function gen.isBuildTransportBetweenMaps(unitType: unitTypeObject, map1: integer|mapObject, map2: integer|mapObject)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 86890040,
                "name": "isBuildTransportBetweenMaps",
                "start": 86890009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A unit object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit in the game, and provides a means of interacting with it. This should not be confused with the unit type object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unit)",
                            "finish": 18150035,
                            "name": "unit",
                            "start": 18150031,
                            "type": "local",
                            "view": "unitObject"
                        }
                    ],
                    "finish": 18170003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 18150000,
                    "type": "function",
                    "view": "function gen.isBuildingAirbase(unit: unitObject)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 18150030,
                "name": "isBuildingAirbase",
                "start": 18150009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A unit object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit in the game, and provides a means of interacting with it. This should not be confused with the unit type object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unit)",
                            "finish": 17240036,
                            "name": "unit",
                            "start": 17240032,
                            "type": "local",
                            "view": "unitObject"
                        }
                    ],
                    "finish": 17260003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 17240000,
                    "type": "function",
                    "view": "function gen.isBuildingFortress(unit: unitObject)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 17240031,
                "name": "isBuildingFortress",
                "start": 17240009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A unit object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit in the game, and provides a means of interacting with it. This should not be confused with the unit type object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unit)",
                            "finish": 17400032,
                            "name": "unit",
                            "start": 17400028,
                            "type": "local",
                            "view": "unitObject"
                        }
                    ],
                    "finish": 17420003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 17400000,
                    "type": "function",
                    "view": "function gen.isBuildingRoad(unit: unitObject)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 17400027,
                "name": "isBuildingRoad",
                "start": 17400009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A unit object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit in the game, and provides a means of interacting with it. This should not be confused with the unit type object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unit)",
                            "finish": 18300039,
                            "name": "unit",
                            "start": 18300035,
                            "type": "local",
                            "view": "unitObject"
                        }
                    ],
                    "finish": 18320003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 18300000,
                    "type": "function",
                    "view": "function gen.isBuildingTransporter(unit: unitObject)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 18300034,
                "name": "isBuildingTransporter",
                "start": 18300009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A unit type object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit type entry in the rules.txt, and provides a means of interacting with it. This should not be confused with the unit object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unittype)",
                            "finish": 63300049,
                            "name": "unitType",
                            "start": 63300041,
                            "type": "local",
                            "view": "unitTypeObject"
                        }
                    ],
                    "finish": 63300054,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 63300000,
                    "type": "function",
                    "view": "function gen.isCanCrossImpassableTerrain(unitType: unitTypeObject)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 63300040,
                "name": "isCanCrossImpassableTerrain",
                "start": 63300009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A unit type object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit type entry in the rules.txt, and provides a means of interacting with it. This should not be confused with the unit object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unittype)",
                            "finish": 64520038,
                            "name": "unitType",
                            "start": 64520030,
                            "type": "local",
                            "view": "unitTypeObject"
                        }
                    ],
                    "finish": 64520043,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 64520000,
                    "type": "function",
                    "view": "function gen.isCanFoundCities(unitType: unitTypeObject)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 64520029,
                "name": "isCanFoundCities",
                "start": 64520009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A unit type object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit type entry in the rules.txt, and provides a means of interacting with it. This should not be confused with the unit object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unittype)",
                            "finish": 64710041,
                            "name": "unitType",
                            "start": 64710033,
                            "type": "local",
                            "view": "unitTypeObject"
                        }
                    ],
                    "finish": 64730003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 64710024,
                    "type": "function",
                    "view": "function gen.isCanImproveTiles(unitType: unitTypeObject)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 64710021,
                "name": "isCanImproveTiles",
                "start": 64710000,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A unit type object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit type entry in the rules.txt, and provides a means of interacting with it. This should not be confused with the unit object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unittype)",
                            "finish": 63110045,
                            "name": "unitType",
                            "start": 63110037,
                            "type": "local",
                            "view": "unitTypeObject"
                        }
                    ],
                    "finish": 63110050,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 63110000,
                    "type": "function",
                    "view": "function gen.isCannotBuyOffBarbarian(unitType: unitTypeObject)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 63110036,
                "name": "isCannotBuyOffBarbarian",
                "start": 63110009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A unit type object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit type entry in the rules.txt, and provides a means of interacting with it. This should not be confused with the unit object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unittype)",
                            "finish": 21140033,
                            "name": "unitType",
                            "start": 21140025,
                            "type": "local",
                            "view": "unitTypeObject"
                        }
                    ],
                    "finish": 21160003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 21140001,
                    "type": "function",
                    "view": "function gen.isCarryAir(unitType: unitTypeObject)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 21140024,
                "name": "isCarryAir",
                "start": 21140010,
                "type": "setfield"
            },
            {
                "desc": " Returns true if city is \"knownTo\" tribe (that is,\n will appear on the map if the tile is visible), false otherwise.",
                "extends": {
                    "args": [
                        {
                            "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
                            "finish": 59290031,
                            "name": "city",
                            "start": 59290027,
                            "type": "local",
                            "view": "cityObject"
                        },
                        {
                            "desc": "A tribe object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a tribe, which is to say the characteristics of the tribe overall, in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tribe)",
                            "finish": 59290037,
                            "name": "tribe",
                            "start": 59290032,
                            "type": "local",
                            "view": "tribeObject"
                        }
                    ],
                    "desc": " Returns true if city is \"knownTo\" tribe (that is,\n will appear on the map if the tile is visible), false otherwise.",
                    "finish": 59310003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 59290000,
                    "type": "function",
                    "view": "function gen.isCityCharted(city: cityObject, tribe: tribeObject)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 59290026,
                "name": "isCityCharted",
                "start": 59290009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
                            "finish": 28180036,
                            "name": "city",
                            "start": 28180032,
                            "type": "local",
                            "view": "cityObject"
                        }
                    ],
                    "finish": 28200003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 28180000,
                    "type": "function",
                    "view": "function gen.isCityInvestigated(city: cityObject)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 28180031,
                "name": "isCityInvestigated",
                "start": 28180009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
                            "finish": 22910033,
                            "name": "city",
                            "start": 22910029,
                            "type": "local",
                            "view": "cityObject"
                        }
                    ],
                    "finish": 22930003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 22910000,
                    "type": "function",
                    "view": "function gen.isCivilDisorder(city: cityObject)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 22910028,
                "name": "isCivilDisorder",
                "start": 22910009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A unit object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit in the game, and provides a means of interacting with it. This should not be confused with the unit type object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unit)",
                            "finish": 18010037,
                            "name": "unit",
                            "start": 18010033,
                            "type": "local",
                            "view": "unitObject"
                        }
                    ],
                    "finish": 18030003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 18010000,
                    "type": "function",
                    "view": "function gen.isCleaningPollution(unit: unitObject)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 18010032,
                "name": "isCleaningPollution",
                "start": 18010009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A unit type object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit type entry in the rules.txt, and provides a means of interacting with it. This should not be confused with the unit object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unittype)",
                            "finish": 20690031,
                            "name": "unitType",
                            "start": 20690023,
                            "type": "local",
                            "view": "unitTypeObject"
                        }
                    ],
                    "finish": 20710003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 20690000,
                    "type": "function",
                    "view": "function gen.isCoastal(unitType: unitTypeObject)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 20690022,
                "name": "isCoastal",
                "start": 20690009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A unit type object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit type entry in the rules.txt, and provides a means of interacting with it. This should not be confused with the unit object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unittype)",
                            "finish": 22240047,
                            "name": "unitType",
                            "start": 22240039,
                            "type": "local",
                            "view": "unitTypeObject"
                        }
                    ],
                    "finish": 22260003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 22240000,
                    "type": "function",
                    "view": "function gen.isDestroyedAfterAttacking(unitType: unitTypeObject)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 22240038,
                "name": "isDestroyedAfterAttacking",
                "start": 22240009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
                            "finish": 28910037,
                            "name": "city",
                            "start": 28910033,
                            "type": "local",
                            "view": "cityObject"
                        }
                    ],
                    "finish": 28930003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 28910000,
                    "type": "function",
                    "view": "function gen.isDomesticAutoBuild(city: cityObject)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 28910032,
                "name": "isDomesticAutoBuild",
                "start": 28910009,
                "type": "setfield"
            },
            {
                "desc": "Returns true if the table has no entries, and false otherwise.\n(I got this idea from stackoverflow, https://stackoverflow.com/questions/1252539/most-efficient-way-to-determine-if-a-lua-table-is-empty-contains-no-entries )\ncomment",
                "extends": {
                    "args": [
                        {
                            "desc": "A table is a data type native to Lua, and links \"keys\" (usually numbers or strings) to \"values\" (any kind of data, including other tables). This is the only data structuring mechanism in Lua, and many of the data types documented here are simply tables with restrictions on their keys or values. If a key has not been assigned a value, the table returns nil as the corresponding value, and assigning nil as a value to a key removes that key from the table.\n[Programming in Lua, 2.5 -- Tables](https://www.lua.org/pil/2.5.html)",
                            "finish": 50220026,
                            "name": "table",
                            "start": 50220021,
                            "type": "local",
                            "view": "table"
                        }
                    ],
                    "desc": "Returns true if the table has no entries, and false otherwise.\n(I got this idea from stackoverflow, https://stackoverflow.com/questions/1252539/most-efficient-way-to-determine-if-a-lua-table-is-empty-contains-no-entries )\ncomment",
                    "finish": 50240003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 50220000,
                    "type": "function",
                    "view": "function gen.isEmpty(table: table)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 50220020,
                "name": "isEmpty",
                "start": 50220009,
                "type": "setfield"
            },
            {
                "desc": " Returns true if tribe sees Farmland on the tile, and false otherwise.\n Does not consider if tile is revealed to the tribe.",
                "extends": {
                    "args": [
                        {
                            "desc": "A tile object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a map \"square\" in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tile)",
                            "finish": 60380035,
                            "name": "tile",
                            "start": 60380031,
                            "type": "local",
                            "view": "tileObject"
                        },
                        {
                            "desc": "A tribe object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a tribe, which is to say the characteristics of the tribe overall, in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tribe)",
                            "finish": 60380041,
                            "name": "tribe",
                            "start": 60380036,
                            "type": "local",
                            "view": "tribeObject"
                        }
                    ],
                    "desc": " Returns true if tribe sees Farmland on the tile, and false otherwise.\n Does not consider if tile is revealed to the tribe.",
                    "finish": 60380046,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 60380000,
                    "type": "function",
                    "view": "function gen.isFarmlandCharted(tile: tileObject, tribe: tribeObject)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 60380030,
                "name": "isFarmlandCharted",
                "start": 60380009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A unit object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit in the game, and provides a means of interacting with it. This should not be confused with the unit type object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unit)",
                            "finish": 16940029,
                            "name": "unit",
                            "start": 16940025,
                            "type": "local",
                            "view": "unitObject"
                        }
                    ],
                    "finish": 16960003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 16940000,
                    "type": "function",
                    "view": "function gen.isFortified(unit: unitObject)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 16940024,
                "name": "isFortified",
                "start": 16940009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A unit object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit in the game, and provides a means of interacting with it. This should not be confused with the unit type object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unit)",
                            "finish": 16790030,
                            "name": "unit",
                            "start": 16790026,
                            "type": "local",
                            "view": "unitObject"
                        }
                    ],
                    "finish": 16810003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 16790000,
                    "type": "function",
                    "view": "function gen.isFortifying(unit: unitObject)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 16790025,
                "name": "isFortifying",
                "start": 16790009,
                "type": "setfield"
            },
            {
                "desc": " Returns true if tribe sees Fortress on the tile, and false otherwise.\n Does not consider if tile is revealed to the tribe.",
                "extends": {
                    "args": [
                        {
                            "desc": "A tile object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a map \"square\" in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tile)",
                            "finish": 61290035,
                            "name": "tile",
                            "start": 61290031,
                            "type": "local",
                            "view": "tileObject"
                        },
                        {
                            "desc": "A tribe object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a tribe, which is to say the characteristics of the tribe overall, in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tribe)",
                            "finish": 61290041,
                            "name": "tribe",
                            "start": 61290036,
                            "type": "local",
                            "view": "tribeObject"
                        }
                    ],
                    "desc": " Returns true if tribe sees Fortress on the tile, and false otherwise.\n Does not consider if tile is revealed to the tribe.",
                    "finish": 61290046,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 61290000,
                    "type": "function",
                    "view": "function gen.isFortressCharted(tile: tileObject, tribe: tribeObject)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 61290030,
                "name": "isFortressCharted",
                "start": 61290009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A unit type object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit type entry in the rules.txt, and provides a means of interacting with it. This should not be confused with the unit object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unittype)",
                            "finish": 22020054,
                            "name": "unitType",
                            "start": 22020046,
                            "type": "local",
                            "view": "unitTypeObject"
                        }
                    ],
                    "finish": 22040003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 22020000,
                    "type": "function",
                    "view": "function gen.isFreeSupportUnderFundamentalism(unitType: unitTypeObject)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 22020045,
                "name": "isFreeSupportUnderFundamentalism",
                "start": 22020009,
                "type": "setfield"
            },
            {
                "desc": " Returns true if the unit has a goto order, and false otherwise.",
                "extends": {
                    "args": [
                        {
                            "desc": "A unit object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit in the game, and provides a means of interacting with it. This should not be confused with the unit type object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unit)",
                            "finish": 18460027,
                            "name": "unit",
                            "start": 18460023,
                            "type": "local",
                            "view": "unitObject"
                        }
                    ],
                    "desc": " Returns true if the unit has a goto order, and false otherwise.",
                    "finish": 18480003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 18460000,
                    "type": "function",
                    "view": "function gen.isGoingTo(unit: unitObject)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 18460022,
                "name": "isGoingTo",
                "start": 18460009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A unit type object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit type entry in the rules.txt, and provides a means of interacting with it. This should not be confused with the unit object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unittype)",
                            "finish": 20910035,
                            "name": "unitType",
                            "start": 20910027,
                            "type": "local",
                            "view": "unitTypeObject"
                        }
                    ],
                    "finish": 20930003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 20910000,
                    "type": "function",
                    "view": "function gen.isIgnoreWalls(unitType: unitTypeObject)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 20910026,
                "name": "isIgnoreWalls",
                "start": 20910009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A unit type object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit type entry in the rules.txt, and provides a means of interacting with it. This should not be confused with the unit object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unittype)",
                            "finish": 19800033,
                            "name": "unitType",
                            "start": 19800025,
                            "type": "local",
                            "view": "unitTypeObject"
                        }
                    ],
                    "finish": 19820003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 19800000,
                    "type": "function",
                    "view": "function gen.isIgnoreZOC(unitType: unitTypeObject)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 19800024,
                "name": "isIgnoreZOC",
                "start": 19800009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
                            "finish": 23350035,
                            "name": "city",
                            "start": 23350031,
                            "type": "local",
                            "view": "cityObject"
                        }
                    ],
                    "finish": 23370003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 23350000,
                    "type": "function",
                    "view": "function gen.isImprovementSold(city: cityObject)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 23350030,
                "name": "isImprovementSold",
                "start": 23350009,
                "type": "setfield"
            },
            {
                "desc": " Returns true if the item is an integer, and false otherwise.",
                "extends": {
                    "args": [
                        {
                            "finish": 84910027,
                            "name": "item",
                            "start": 84910023,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": " Returns true if the item is an integer, and false otherwise.",
                    "finish": 84930003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 84910000,
                    "type": "function",
                    "view": "function gen.isInteger(item: any)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 84910022,
                "name": "isInteger",
                "start": 84910009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A unit type object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit type entry in the rules.txt, and provides a means of interacting with it. This should not be confused with the unit object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unittype)",
                            "finish": 62540044,
                            "name": "unitType",
                            "start": 62540036,
                            "type": "local",
                            "view": "unitTypeObject"
                        }
                    ],
                    "finish": 62540049,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 62540000,
                    "type": "function",
                    "view": "function gen.isInvisibleUntilAttack(unitType: unitTypeObject)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 62540035,
                "name": "isInvisibleUntilAttack",
                "start": 62540009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A unit object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit in the game, and provides a means of interacting with it. This should not be confused with the unit type object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unit)",
                            "finish": 17560030,
                            "name": "unit",
                            "start": 17560026,
                            "type": "local",
                            "view": "unitObject"
                        }
                    ],
                    "finish": 17580003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 17560000,
                    "type": "function",
                    "view": "function gen.isIrrigating(unit: unitObject)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 17560025,
                "name": "isIrrigating",
                "start": 17560009,
                "type": "setfield"
            },
            {
                "desc": " Returns true if tribe sees Irrigation on the tile, and false otherwise.\n Does not consider if tile is revealed to the tribe.",
                "extends": {
                    "args": [
                        {
                            "desc": "A tile object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a map \"square\" in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tile)",
                            "finish": 59880037,
                            "name": "tile",
                            "start": 59880033,
                            "type": "local",
                            "view": "tileObject"
                        },
                        {
                            "desc": "A tribe object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a tribe, which is to say the characteristics of the tribe overall, in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tribe)",
                            "finish": 59880043,
                            "name": "tribe",
                            "start": 59880038,
                            "type": "local",
                            "view": "tribeObject"
                        }
                    ],
                    "desc": " Returns true if tribe sees Irrigation on the tile, and false otherwise.\n Does not consider if tile is revealed to the tribe.",
                    "finish": 59880048,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 59880000,
                    "type": "function",
                    "view": "function gen.isIrrigationCharted(tile: tileObject, tribe: tribeObject)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 59880032,
                "name": "isIrrigationCharted",
                "start": 59880009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
                            "finish": 29630034,
                            "name": "city",
                            "start": 29630030,
                            "type": "local",
                            "view": "cityObject"
                        }
                    ],
                    "finish": 29650003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 29630000,
                    "type": "function",
                    "view": "function gen.isMajorObjective(city: cityObject)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 29630029,
                "name": "isMajorObjective",
                "start": 29630009,
                "type": "setfield"
            },
            {
                "desc": " gen.isMapFlat()-->boolean\nReturns true if the game map is flat, and false if it is round.",
                "extends": {
                    "args": [],
                    "desc": " gen.isMapFlat()-->boolean\nReturns true if the game map is flat, and false if it is round.",
                    "finish": 9550003,
                    "returns": [
                        {
                            "name": "mapIsFlat",
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 9530000,
                    "type": "function",
                    "view": "function gen.isMapFlat()\n  -> mapIsFlat: boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 9530022,
                "name": "isMapFlat",
                "start": 9530009,
                "type": "setfield"
            },
            {
                "desc": " gen.isMapRound()-->boolean\nReturns true if the game map is round, and false if it is flat.",
                "extends": {
                    "args": [],
                    "desc": " gen.isMapRound()-->boolean\nReturns true if the game map is round, and false if it is flat.",
                    "finish": 9620003,
                    "returns": [
                        {
                            "name": "mapIsRound",
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 9600000,
                    "type": "function",
                    "view": "function gen.isMapRound()\n  -> mapIsRound: boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 9600023,
                "name": "isMapRound",
                "start": 9600009,
                "type": "setfield"
            },
            {
                "desc": " Returns true if the `tile` has the `markerType` and the `markerType` is charted, false otherwise.\n\n@*param* `markerType` โ Valid marker options are \"irrigation\", \"mine\", \"farmland\", \"road\", \"railroad\", \"fortress\", \"airbase\", \"pollution\", \"transporter\".",
                "extends": {
                    "args": [
                        {
                            "desc": "A tile object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a map \"square\" in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tile)",
                            "finish": 72750033,
                            "name": "tile",
                            "start": 72750029,
                            "type": "local",
                            "view": "tileObject"
                        },
                        {
                            "desc": "A tribe object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a tribe, which is to say the characteristics of the tribe overall, in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tribe)",
                            "finish": 72750039,
                            "name": "tribe",
                            "start": 72750034,
                            "type": "local",
                            "view": "tribeObject"
                        },
                        {
                            "desc": "Valid marker options are \"irrigation\", \"mine\", \"farmland\", \"road\", \"railroad\", \"fortress\", \"airbase\", \"pollution\", \"transporter\".",
                            "finish": 72750050,
                            "name": "markerType",
                            "start": 72750040,
                            "type": "local",
                            "view": "markerOptions"
                        }
                    ],
                    "desc": " Returns true if the `tile` has the `markerType` and the `markerType` is charted, false otherwise.\n\n@*param* `markerType` โ Valid marker options are \"irrigation\", \"mine\", \"farmland\", \"road\", \"railroad\", \"fortress\", \"airbase\", \"pollution\", \"transporter\".",
                    "finish": 72810003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "false"
                        }
                    ],
                    "start": 72750000,
                    "type": "function",
                    "view": "function gen.isMarkerVisible(tile: tileObject, tribe: tribeObject, markerType: markerOptions)\n  -> false"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 72750028,
                "name": "isMarkerVisible",
                "start": 72750009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
                            "finish": 28690037,
                            "name": "city",
                            "start": 28690033,
                            "type": "local",
                            "view": "cityObject"
                        }
                    ],
                    "finish": 28710003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 28690000,
                    "type": "function",
                    "view": "function gen.isMilitaryAutoBuild(city: cityObject)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 28690032,
                "name": "isMilitaryAutoBuild",
                "start": 28690009,
                "type": "setfield"
            },
            {
                "desc": " Returns true if tribe sees Mine on the tile, and false otherwise.\n Does not consider if tile is revealed to the tribe.",
                "extends": {
                    "args": [
                        {
                            "desc": "A tile object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a map \"square\" in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tile)",
                            "finish": 60120031,
                            "name": "tile",
                            "start": 60120027,
                            "type": "local",
                            "view": "tileObject"
                        },
                        {
                            "desc": "A tribe object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a tribe, which is to say the characteristics of the tribe overall, in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tribe)",
                            "finish": 60120037,
                            "name": "tribe",
                            "start": 60120032,
                            "type": "local",
                            "view": "tribeObject"
                        }
                    ],
                    "desc": " Returns true if tribe sees Mine on the tile, and false otherwise.\n Does not consider if tile is revealed to the tribe.",
                    "finish": 60120042,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 60120000,
                    "type": "function",
                    "view": "function gen.isMineCharted(tile: tileObject, tribe: tribeObject)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 60120026,
                "name": "isMineCharted",
                "start": 60120009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A unit object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit in the game, and provides a means of interacting with it. This should not be confused with the unit type object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unit)",
                            "finish": 17710026,
                            "name": "unit",
                            "start": 17710022,
                            "type": "local",
                            "view": "unitObject"
                        }
                    ],
                    "finish": 17730003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 17710000,
                    "type": "function",
                    "view": "function gen.isMining(unit: unitObject)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 17710021,
                "name": "isMining",
                "start": 17710009,
                "type": "setfield"
            },
            {
                "desc": " The game sets this flag when a unit moves (even if no movement points are spent).  The Unit won't heal on next turn if this flag is set.",
                "extends": {
                    "args": [
                        {
                            "desc": "A unit object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit in the game, and provides a means of interacting with it. This should not be confused with the unit type object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unit)",
                            "finish": 19320025,
                            "name": "unit",
                            "start": 19320021,
                            "type": "local",
                            "view": "unitObject"
                        }
                    ],
                    "desc": " The game sets this flag when a unit moves (even if no movement points are spent).  The Unit won't heal on next turn if this flag is set.",
                    "finish": 19340003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 19320000,
                    "type": "function",
                    "view": "function gen.isMoved(unit: unitObject)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 19320020,
                "name": "isMoved",
                "start": 19320009,
                "type": "setfield"
            },
            {
                "desc": "Returns true if `unitType` can natively teleport between `map1` and `map2`, and false otherwise.\nAlways returns true if `map1` and `map2` are the same.",
                "extends": {
                    "args": [
                        {
                            "desc": "A unit type object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit type entry in the rules.txt, and provides a means of interacting with it. This should not be confused with the unit object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unittype)",
                            "finish": 86790050,
                            "name": "unitType",
                            "start": 86790042,
                            "type": "local",
                            "view": "unitTypeObject"
                        },
                        {
                            "desc": "A map object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents the overall properties of one of the four possible maps in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#map)",
                            "finish": 86790055,
                            "name": "map1",
                            "start": 86790051,
                            "type": "local",
                            "view": "integer|mapObject"
                        },
                        {
                            "desc": "A map object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents the overall properties of one of the four possible maps in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#map)",
                            "finish": 86790060,
                            "name": "map2",
                            "start": 86790056,
                            "type": "local",
                            "view": "integer|mapObject"
                        }
                    ],
                    "desc": "Returns true if `unitType` can natively teleport between `map1` and `map2`, and false otherwise.\nAlways returns true if `map1` and `map2` are the same.",
                    "finish": 86810003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 86790000,
                    "type": "function",
                    "view": "function gen.isNativeTransportBetweenMaps(unitType: unitTypeObject, map1: integer|mapObject, map2: integer|mapObject)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 86790041,
                "name": "isNativeTransportBetweenMaps",
                "start": 86790009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A unit object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit in the game, and provides a means of interacting with it. This should not be confused with the unit type object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unit)",
                            "finish": 18760027,
                            "name": "unit",
                            "start": 18760023,
                            "type": "local",
                            "view": "unitObject"
                        }
                    ],
                    "finish": 18780003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 18760000,
                    "type": "function",
                    "view": "function gen.isNoOrder(unit: unitObject)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 18760022,
                "name": "isNoOrder",
                "start": 18760009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A unit type object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit type entry in the rules.txt, and provides a means of interacting with it. This should not be confused with the unit object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unittype)",
                            "finish": 62730038,
                            "name": "unitType",
                            "start": 62730030,
                            "type": "local",
                            "view": "unitTypeObject"
                        }
                    ],
                    "finish": 62730043,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 62730000,
                    "type": "function",
                    "view": "function gen.isNonDisbandable(unitType: unitTypeObject)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 62730029,
                "name": "isNonDisbandable",
                "start": 62730009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
                            "finish": 29130029,
                            "name": "city",
                            "start": 29130025,
                            "type": "local",
                            "view": "cityObject"
                        }
                    ],
                    "finish": 29150003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 29130000,
                    "type": "function",
                    "view": "function gen.isObjective(city: cityObject)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 29130024,
                "name": "isObjective",
                "start": 29130009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A unit type object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit type entry in the rules.txt, and provides a means of interacting with it. This should not be confused with the unit object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unittype)",
                            "finish": 63690035,
                            "name": "unitType",
                            "start": 63690027,
                            "type": "local",
                            "view": "unitTypeObject"
                        }
                    ],
                    "finish": 63690040,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 63690000,
                    "type": "function",
                    "view": "function gen.isOverrideSPR(unitType: unitTypeObject)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 63690026,
                "name": "isOverrideSPR",
                "start": 63690009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A unit type object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit type entry in the rules.txt, and provides a means of interacting with it. This should not be confused with the unit object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unittype)",
                            "finish": 21360032,
                            "name": "unitType",
                            "start": 21360024,
                            "type": "local",
                            "view": "unitTypeObject"
                        }
                    ],
                    "finish": 21380003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 21360000,
                    "type": "function",
                    "view": "function gen.isParadrop(unitType: unitTypeObject)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 21360023,
                "name": "isParadrop",
                "start": 21360009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A unit object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit in the game, and provides a means of interacting with it. This should not be confused with the unit type object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unit)",
                            "finish": 19120031,
                            "name": "unit",
                            "start": 19120027,
                            "type": "local",
                            "view": "unitObject"
                        }
                    ],
                    "finish": 19140003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 19120000,
                    "type": "function",
                    "view": "function gen.isParadropped(unit: unitObject)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 19120026,
                "name": "isParadropped",
                "start": 19120009,
                "type": "setfield"
            },
            {
                "desc": " gen.isPollutionCharted(tile,tribe) --> bool\n Returns true if tribe sees Pollution on the tile, and false otherwise.\n Does not consider if tile is revealed to the tribe.",
                "extends": {
                    "args": [
                        {
                            "desc": "A tile object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a map \"square\" in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tile)",
                            "finish": 61800036,
                            "name": "tile",
                            "start": 61800032,
                            "type": "local",
                            "view": "tileObject"
                        },
                        {
                            "desc": "A tribe object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a tribe, which is to say the characteristics of the tribe overall, in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tribe)",
                            "finish": 61800042,
                            "name": "tribe",
                            "start": 61800037,
                            "type": "local",
                            "view": "tribeObject"
                        }
                    ],
                    "desc": " gen.isPollutionCharted(tile,tribe) --> bool\n Returns true if tribe sees Pollution on the tile, and false otherwise.\n Does not consider if tile is revealed to the tribe.",
                    "finish": 61800047,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 61800000,
                    "type": "function",
                    "view": "function gen.isPollutionCharted(tile: tileObject, tribe: tribeObject)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 61800031,
                "name": "isPollutionCharted",
                "start": 61800009,
                "type": "setfield"
            },
            {
                "desc": " Returns true if tribe sees Railroad on the tile, and false otherwise.\n Does not consider if tile is revealed to the tribe.",
                "extends": {
                    "args": [
                        {
                            "desc": "A tile object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a map \"square\" in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tile)",
                            "finish": 60900035,
                            "name": "tile",
                            "start": 60900031,
                            "type": "local",
                            "view": "tileObject"
                        },
                        {
                            "desc": "A tribe object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a tribe, which is to say the characteristics of the tribe overall, in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tribe)",
                            "finish": 60900041,
                            "name": "tribe",
                            "start": 60900036,
                            "type": "local",
                            "view": "tribeObject"
                        }
                    ],
                    "desc": " Returns true if tribe sees Railroad on the tile, and false otherwise.\n Does not consider if tile is revealed to the tribe.",
                    "finish": 60900046,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 60900000,
                    "type": "function",
                    "view": "function gen.isRailroadCharted(tile: tileObject, tribe: tribeObject)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 60900030,
                "name": "isRailroadCharted",
                "start": 60900009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A unit type object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit type entry in the rules.txt, and provides a means of interacting with it. This should not be confused with the unit object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unittype)",
                            "finish": 64130049,
                            "name": "unitType",
                            "start": 64130041,
                            "type": "local",
                            "view": "unitTypeObject"
                        }
                    ],
                    "finish": 64130054,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 64130000,
                    "type": "function",
                    "view": "function gen.isReducePopulationWhenBuilt(unitType: unitTypeObject)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 64130040,
                "name": "isReducePopulationWhenBuilt",
                "start": 64130009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A unit type object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit type entry in the rules.txt, and provides a means of interacting with it. This should not be confused with the unit object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unittype)",
                            "finish": 64320043,
                            "name": "unitType",
                            "start": 64320035,
                            "type": "local",
                            "view": "unitTypeObject"
                        }
                    ],
                    "finish": 64320048,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 64320000,
                    "type": "function",
                    "view": "function gen.isRequiresFoodSupport(unitType: unitTypeObject)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 64320034,
                "name": "isRequiresFoodSupport",
                "start": 64320009,
                "type": "setfield"
            },
            {
                "desc": " Returns true if tribe sees Road on the tile, and false otherwise.\n Does not consider if tile is revealed to the tribe.",
                "extends": {
                    "args": [
                        {
                            "desc": "A tile object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a map \"square\" in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tile)",
                            "finish": 60640031,
                            "name": "tile",
                            "start": 60640027,
                            "type": "local",
                            "view": "tileObject"
                        },
                        {
                            "desc": "A tribe object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a tribe, which is to say the characteristics of the tribe overall, in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tribe)",
                            "finish": 60640037,
                            "name": "tribe",
                            "start": 60640032,
                            "type": "local",
                            "view": "tribeObject"
                        }
                    ],
                    "desc": " Returns true if tribe sees Road on the tile, and false otherwise.\n Does not consider if tile is revealed to the tribe.",
                    "finish": 60640042,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 60640000,
                    "type": "function",
                    "view": "function gen.isRoadCharted(tile: tileObject, tribe: tribeObject)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 60640026,
                "name": "isRoadCharted",
                "start": 60640009,
                "type": "setfield"
            },
            {
                "desc": "Checks if the `baseTerrain` gets +1 trade production from a road.",
                "extends": {
                    "args": [
                        {
                            "desc": "A base terrain object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents the 'basic' terrain characteristics for a terrain type, which is to say those aspects of terrain which do not change for special resources. The 'terrain' object deals with the characteristics that do change for special resources.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#baseterrain)",
                            "finish": 85680041,
                            "name": "baseTerrain",
                            "start": 85680030,
                            "type": "local",
                            "view": "baseTerrainObject"
                        }
                    ],
                    "desc": "Checks if the `baseTerrain` gets +1 trade production from a road.",
                    "finish": 85700003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 85680000,
                    "type": "function",
                    "view": "function gen.isRoadTradeBonus(baseTerrain: baseTerrainObject)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 85680029,
                "name": "isRoadTradeBonus",
                "start": 85680009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A unit type object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit type entry in the rules.txt, and provides a means of interacting with it. This should not be confused with the unit object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unittype)",
                            "finish": 19550036,
                            "name": "unitType",
                            "start": 19550028,
                            "type": "local",
                            "view": "unitTypeObject"
                        }
                    ],
                    "finish": 19570003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 19550000,
                    "type": "function",
                    "view": "function gen.isSeeTwoSpaces(unitType: unitTypeObject)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 19550027,
                "name": "isSeeTwoSpaces",
                "start": 19550009,
                "type": "setfield"
            },
            {
                "desc": " Returns true if there is exactly one human player, false otherwise.",
                "extends": {
                    "args": [],
                    "desc": " Returns true if there is exactly one human player, false otherwise.",
                    "finish": 47620003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 47520000,
                    "type": "function",
                    "view": "function gen.isSinglePlayerGame()\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 47520031,
                "name": "isSinglePlayerGame",
                "start": 47520009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A unit object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit in the game, and provides a means of interacting with it. This should not be confused with the unit type object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unit)",
                            "finish": 17090028,
                            "name": "unit",
                            "start": 17090024,
                            "type": "local",
                            "view": "unitObject"
                        }
                    ],
                    "finish": 17110003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 17090000,
                    "type": "function",
                    "view": "function gen.isSleeping(unit: unitObject)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 17090023,
                "name": "isSleeping",
                "start": 17090009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A unit type object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit type entry in the rules.txt, and provides a means of interacting with it. This should not be confused with the unit object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unittype)",
                            "finish": 22680038,
                            "name": "unitType",
                            "start": 22680030,
                            "type": "local",
                            "view": "unitTypeObject"
                        }
                    ],
                    "finish": 22700003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 22680000,
                    "type": "function",
                    "view": "function gen.isSpotSubmarines(unitType: unitTypeObject)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 22680029,
                "name": "isSpotSubmarines",
                "start": 22680009,
                "type": "setfield"
            },
            {
                "desc": "Returns `true` if the item is a stack (created by gen.newStack/newEmptyStack)\nand `false` otherwise.",
                "extends": {
                    "args": [
                        {
                            "finish": 84820025,
                            "name": "item",
                            "start": 84820021,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "Returns `true` if the item is a stack (created by gen.newStack/newEmptyStack)\nand `false` otherwise.",
                    "finish": 84840003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 84820000,
                    "type": "function",
                    "view": "function gen.isStack(item: any)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 84820020,
                "name": "isStack",
                "start": 84820009,
                "type": "setfield"
            },
            {
                "desc": " Determines if an item is \"state savable\" , which is to say that\n it can be added to the state table (the table containing the data that persists\n after saving and loading) in its current state.\n  An item is \"state savable\" if it is either\n  <br>nil\n  <br>a number\n  <br>a string\n  <br>a boolean, or\n  <br>a table with keys that are numbers or strings\n    and with values that are also state savable\n  Note: table can't have a metatable\ncomment",
                "extends": {
                    "args": [
                        {
                            "finish": 67310032,
                            "name": "item",
                            "start": 67310028,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": " Determines if an item is \"state savable\" , which is to say that\n it can be added to the state table (the table containing the data that persists\n after saving and loading) in its current state.\n  An item is \"state savable\" if it is either\n  <br>nil\n  <br>a number\n  <br>a string\n  <br>a boolean, or\n  <br>a table with keys that are numbers or strings\n    and with values that are also state savable\n  Note: table can't have a metatable\ncomment",
                    "finish": 67560003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 67310000,
                    "type": "function",
                    "view": "function gen.isStateSavable(item: any)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 67310027,
                "name": "isStateSavable",
                "start": 67310009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A unit type object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit type entry in the rules.txt, and provides a means of interacting with it. This should not be confused with the unit object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unittype)",
                            "finish": 20250033,
                            "name": "unitType",
                            "start": 20250025,
                            "type": "local",
                            "view": "unitTypeObject"
                        }
                    ],
                    "finish": 20270003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 20250000,
                    "type": "function",
                    "view": "function gen.isSubmarine(unitType: unitTypeObject)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 20250024,
                "name": "isSubmarine",
                "start": 20250009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
                            "finish": 23570036,
                            "name": "city",
                            "start": 23570032,
                            "type": "local",
                            "view": "cityObject"
                        }
                    ],
                    "finish": 23590003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 23570000,
                    "type": "function",
                    "view": "function gen.isTechnologyStolen(city: cityObject)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 23570031,
                "name": "isTechnologyStolen",
                "start": 23570009,
                "type": "setfield"
            },
            {
                "desc": " Returns true if `tile` is revealed to `tribe`, false otherwise.\n\n@*param* `tile` โ Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                "extends": {
                    "args": [
                        {
                            "desc": "Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                            "finish": 58310032,
                            "name": "tile",
                            "start": 58310028,
                            "type": "local",
                            "view": "table|tileObject"
                        },
                        {
                            "desc": "A tribe object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a tribe, which is to say the characteristics of the tribe overall, in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tribe)",
                            "finish": 58310038,
                            "name": "tribe",
                            "start": 58310033,
                            "type": "local",
                            "view": "tribeObject"
                        }
                    ],
                    "desc": " Returns true if `tile` is revealed to `tribe`, false otherwise.\n\n@*param* `tile` โ Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                    "finish": 58340003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 58310000,
                    "type": "function",
                    "view": "function gen.isTileRevealed(tile: table|tileObject, tribe: tribeObject)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 58310027,
                "name": "isTileRevealed",
                "start": 58310009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A unit object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit in the game, and provides a means of interacting with it. This should not be confused with the unit type object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unit)",
                            "finish": 17860039,
                            "name": "unit",
                            "start": 17860035,
                            "type": "local",
                            "view": "unitObject"
                        }
                    ],
                    "finish": 17880003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 17860000,
                    "type": "function",
                    "view": "function gen.isTransformingTerrain(unit: unitObject)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 17860034,
                "name": "isTransformingTerrain",
                "start": 17860009,
                "type": "setfield"
            },
            {
                "desc": "Returns true if the supplied bitmask indicates that transportation\n can take place between `map1` and `map2` (or if they are the same map),\n and false otherwise.\n\n@*param* `functionName` โ Carries through the function name for the error if changeRules.lua is not available.",
                "extends": {
                    "args": [
                        {
                            "desc": "A map object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents the overall properties of one of the four possible maps in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#map)",
                            "finish": 86580040,
                            "name": "map1",
                            "start": 86580036,
                            "type": "local",
                            "view": "integer|mapObject"
                        },
                        {
                            "desc": "A map object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents the overall properties of one of the four possible maps in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#map)",
                            "finish": 86580045,
                            "name": "map2",
                            "start": 86580041,
                            "type": "local",
                            "view": "integer|mapObject"
                        },
                        {
                            "desc": "<p>A bitmask is an integer that is not meant to be interpreted as a number, but rather as a sequence of 1's and 0's (the binary representation of the number), with each 1 or 0 representing whether a condition is true or false. Bitmasks often have functions written to facilitate their manipulation. If none are available, Lua provides bitwise operators.</p><p>Typically, the leftmost bit (the bit representing the largest value) is interpreted as negative. Hence, the bitmask integer is not guaranteed to be positive.</p>\n[Lua 5.3 Reference Manual 3.4.2 -- Bitwise Operators](https://www.lua.org/manual/5.3/manual.html#3.4.2)\n[Twos complement: Negative numbers in binary (Youtube Video)](https://www.youtube.com/watch?v=4qH4unVtJkE)",
                            "finish": 86580062,
                            "name": "transportBitmask",
                            "start": 86580046,
                            "type": "local",
                            "view": "bitmask"
                        },
                        {
                            "desc": "Carries through the function name for the error if changeRules.lua is not available.",
                            "finish": 86580075,
                            "name": "functionName",
                            "start": 86580063,
                            "type": "local",
                            "view": "string?"
                        }
                    ],
                    "desc": "Returns true if the supplied bitmask indicates that transportation\n can take place between `map1` and `map2` (or if they are the same map),\n and false otherwise.\n\n@*param* `functionName` โ Carries through the function name for the error if changeRules.lua is not available.",
                    "finish": 86710003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 86580000,
                    "type": "function",
                    "view": "function gen.isTransportBetweenMaps(map1: integer|mapObject, map2: integer|mapObject, transportBitmask: bitmask, functionName?: string)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 86580035,
                "name": "isTransportBetweenMaps",
                "start": 86580009,
                "type": "setfield"
            },
            {
                "desc": " Returns true if tribe sees Transporter on the tile, and false otherwise.\n Does not consider if tile is revealed to the tribe.",
                "extends": {
                    "args": [
                        {
                            "desc": "A tile object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a map \"square\" in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tile)",
                            "finish": 62060038,
                            "name": "tile",
                            "start": 62060034,
                            "type": "local",
                            "view": "tileObject"
                        },
                        {
                            "desc": "A tribe object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a tribe, which is to say the characteristics of the tribe overall, in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tribe)",
                            "finish": 62060044,
                            "name": "tribe",
                            "start": 62060039,
                            "type": "local",
                            "view": "tribeObject"
                        }
                    ],
                    "desc": " Returns true if tribe sees Transporter on the tile, and false otherwise.\n Does not consider if tile is revealed to the tribe.",
                    "finish": 62060049,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 62060000,
                    "type": "function",
                    "view": "function gen.isTransporterCharted(tile: tileObject, tribe: tribeObject)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 62060033,
                "name": "isTransporterCharted",
                "start": 62060009,
                "type": "setfield"
            },
            {
                "desc": " If a unit is provided, returns true if that unit is visible to tribe, and false if not.\n Note: a tribe's own units are visible to it (even though unit.visibility doesn't show this).\n If a tile is provided, returns true if there are units on the tile and the tribe can see them,\n false if units are on the tile and the tribe can't see them, and\n returns emptyTileReturnValue (default nil) if there are no units on the tile.\n\n@*param* `emptyTileReturnValue` โ Default value is nil.",
                "extends": {
                    "args": [
                        {
                            "desc": "A tile object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a map \"square\" in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tile)",
                            "finish": 58690042,
                            "name": "unitOrTile",
                            "start": 58690032,
                            "type": "local",
                            "view": "tileObject|unitObject"
                        },
                        {
                            "desc": "A tribe object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a tribe, which is to say the characteristics of the tribe overall, in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tribe)",
                            "finish": 58690048,
                            "name": "tribe",
                            "start": 58690043,
                            "type": "local",
                            "view": "tribeObject"
                        },
                        {
                            "desc": "Default value is nil.",
                            "finish": 58690069,
                            "name": "emptyTileReturnValue",
                            "start": 58690049,
                            "type": "local",
                            "view": "<emptyTileReturnValue>"
                        }
                    ],
                    "desc": " If a unit is provided, returns true if that unit is visible to tribe, and false if not.\n Note: a tribe's own units are visible to it (even though unit.visibility doesn't show this).\n If a tile is provided, returns true if there are units on the tile and the tribe can see them,\n false if units are on the tile and the tribe can't see them, and\n returns emptyTileReturnValue (default nil) if there are no units on the tile.\n\n@*param* `emptyTileReturnValue` โ Default value is nil.",
                    "finish": 58810003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean|<emptyTileReturnValue>"
                        }
                    ],
                    "start": 58690000,
                    "type": "function",
                    "view": "function gen.isUnitStackVisible(unitOrTile: tileObject|unitObject, tribe: tribeObject, emptyTileReturnValue: <emptyTileReturnValue>)\n  -> boolean|<emptyTileReturnValue>"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 58690031,
                "name": "isUnitStackVisible",
                "start": 58690009,
                "type": "setfield"
            },
            {
                "desc": "Returns true if `unitType` can build transporters between `map1` and `map2`, and false otherwise.\nAlways returns true if `map1` and `map2` are the same.",
                "extends": {
                    "args": [
                        {
                            "desc": "A unit type object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit type entry in the rules.txt, and provides a means of interacting with it. This should not be confused with the unit object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unittype)",
                            "finish": 86990047,
                            "name": "unitType",
                            "start": 86990039,
                            "type": "local",
                            "view": "unitTypeObject"
                        },
                        {
                            "desc": "A map object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents the overall properties of one of the four possible maps in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#map)",
                            "finish": 86990052,
                            "name": "map1",
                            "start": 86990048,
                            "type": "local",
                            "view": "integer|mapObject"
                        },
                        {
                            "desc": "A map object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents the overall properties of one of the four possible maps in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#map)",
                            "finish": 86990057,
                            "name": "map2",
                            "start": 86990053,
                            "type": "local",
                            "view": "integer|mapObject"
                        }
                    ],
                    "desc": "Returns true if `unitType` can build transporters between `map1` and `map2`, and false otherwise.\nAlways returns true if `map1` and `map2` are the same.",
                    "finish": 87010003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 86990000,
                    "type": "function",
                    "view": "function gen.isUseTransportBetweenMaps(unitType: unitTypeObject, map1: integer|mapObject, map2: integer|mapObject)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 86990038,
                "name": "isUseTransportBetweenMaps",
                "start": 86990009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
                            "finish": 26710031,
                            "name": "city",
                            "start": 26710027,
                            "type": "local",
                            "view": "cityObject"
                        }
                    ],
                    "finish": 26730003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 26710000,
                    "type": "function",
                    "view": "function gen.isUsedAirport(city: cityObject)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 26710026,
                "name": "isUsedAirport",
                "start": 26710009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
                            "finish": 29880035,
                            "name": "city",
                            "start": 29880031,
                            "type": "local",
                            "view": "cityObject"
                        }
                    ],
                    "finish": 29900003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 29880000,
                    "type": "function",
                    "view": "function gen.isUsedTransporter(city: cityObject)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 29880030,
                "name": "isUsedTransporter",
                "start": 29880009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A unit object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit in the game, and provides a means of interacting with it. This should not be confused with the unit type object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unit)",
                            "finish": 18910027,
                            "name": "unit",
                            "start": 18910023,
                            "type": "local",
                            "view": "unitObject"
                        }
                    ],
                    "finish": 18930003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 18910000,
                    "type": "function",
                    "view": "function gen.isWaiting(unit: unitObject)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 18910022,
                "name": "isWaiting",
                "start": 18910009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
                            "finish": 23130033,
                            "name": "city",
                            "start": 23130029,
                            "type": "local",
                            "view": "cityObject"
                        }
                    ],
                    "finish": 23150003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 23130000,
                    "type": "function",
                    "view": "function gen.isWeLoveTheKing(city: cityObject)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 23130028,
                "name": "isWeLoveTheKing",
                "start": 23130009,
                "type": "setfield"
            },
            {
                "desc": " Returns true if the `wonder` is owned by the `tribe` and is not expired, and false otherwise.\n Integers corresponding to wonder/tribe ids can be used as arguments instead.\n revisions by Knighttime, 2021-11-12\n\n@*param* `wonder` โ the wonder (or id of wonder) in question\n\n@*param* `tribe` โ the tribe (or id of tribe) in question",
                "extends": {
                    "args": [
                        {
                            "desc": "the wonder (or id of wonder) in question",
                            "finish": 8550042,
                            "name": "wonder",
                            "start": 8550036,
                            "type": "local",
                            "view": "integer|wonderObject"
                        },
                        {
                            "desc": "the tribe (or id of tribe) in question",
                            "finish": 8550048,
                            "name": "tribe",
                            "start": 8550043,
                            "type": "local",
                            "view": "integer|tribeObject"
                        }
                    ],
                    "desc": " Returns true if the `wonder` is owned by the `tribe` and is not expired, and false otherwise.\n Integers corresponding to wonder/tribe ids can be used as arguments instead.\n revisions by Knighttime, 2021-11-12\n\n@*param* `wonder` โ the wonder (or id of wonder) in question\n\n@*param* `tribe` โ the tribe (or id of tribe) in question",
                    "finish": 8860003,
                    "returns": [
                        {
                            "name": "wonderIsActive",
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 8550000,
                    "type": "function",
                    "view": "function gen.isWonderActiveForTribe(wonder: integer|wonderObject, tribe: integer|tribeObject)\n  -> wonderIsActive: boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 8550035,
                "name": "isWonderActiveForTribe",
                "start": 8550009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A unit type object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit type entry in the rules.txt, and provides a means of interacting with it. This should not be confused with the unit object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unittype)",
                            "finish": 62920054,
                            "name": "unitType",
                            "start": 62920046,
                            "type": "local",
                            "view": "unitTypeObject"
                        }
                    ],
                    "finish": 62920059,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 62920000,
                    "type": "function",
                    "view": "function gen.isZeroRangeAirUnitDamageOverride(unitType: unitTypeObject)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 62920045,
                "name": "isZeroRangeAirUnitDamageOverride",
                "start": 62920009,
                "type": "setfield"
            },
            {
                "desc": "Returns an iterator for all baseTerrain objects (for maps that are\nin the game).",
                "extends": {
                    "args": [],
                    "desc": "Returns an iterator for all baseTerrain objects (for maps that are\nin the game).",
                    "finish": 85410003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "iterator"
                        }
                    ],
                    "start": 85310000,
                    "type": "function",
                    "view": "function gen.iterateBaseTerrain()\n  -> iterator"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 85310031,
                "name": "iterateBaseTerrain",
                "start": 85310009,
                "type": "setfield"
            },
            {
                "desc": "Returns an iterator for all improvement objects.",
                "extends": {
                    "args": [],
                    "desc": "Returns an iterator for all improvement objects.",
                    "finish": 85150003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "iterator"
                        }
                    ],
                    "start": 85080000,
                    "type": "function",
                    "view": "function gen.iterateImprovements()\n  -> iterator"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 85080032,
                "name": "iterateImprovements",
                "start": 85080009,
                "type": "setfield"
            },
            {
                "desc": "Returns an iterator for all terrain objects (for maps that\nare in the game).",
                "extends": {
                    "args": [],
                    "desc": "Returns an iterator for all terrain objects (for maps that\nare in the game).",
                    "finish": 85640003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "iterator"
                        }
                    ],
                    "start": 85460000,
                    "type": "function",
                    "view": "function gen.iterateTerrain()\n  -> iterator"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 85460027,
                "name": "iterateTerrain",
                "start": 85460009,
                "type": "setfield"
            },
            {
                "desc": "Returns an iterator for all unitType objects.",
                "extends": {
                    "args": [],
                    "desc": "Returns an iterator for all unitType objects.",
                    "finish": 85040003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "iterator"
                        }
                    ],
                    "start": 84970000,
                    "type": "function",
                    "view": "function gen.iterateUnitTypes()\n  -> iterator"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 84970029,
                "name": "iterateUnitTypes",
                "start": 84970009,
                "type": "setfield"
            },
            {
                "desc": "Returns an iterator for all wonder objects.",
                "extends": {
                    "args": [],
                    "desc": "Returns an iterator for all wonder objects.",
                    "finish": 85260003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "iterator"
                        }
                    ],
                    "start": 85190000,
                    "type": "function",
                    "view": "function gen.iterateWonders()\n  -> iterator"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 85190027,
                "name": "iterateWonders",
                "start": 85190009,
                "type": "setfield"
            },
            {
                "desc": " If justOnce has never been executed for this key before, then\n the limited function will execute.  Otherwise, it won't.\n (Wrapper for gen.limitedExecutions with maxTimes being 1.)\n Example: Show a message once for a certain trigger\n```lua\ngen.justOnce(\"Rebel Attack\", function()\n    text.simple(\"The Rebels have attacked Union troops.  We're now in a shooting war!\",\"Secretary of Defense\")\nend)\n```",
                "extends": {
                    "args": [
                        {
                            "finish": 47440025,
                            "name": "key",
                            "start": 47440022,
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": 47440041,
                            "name": "limitedFunction",
                            "start": 47440026,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": " If justOnce has never been executed for this key before, then\n the limited function will execute.  Otherwise, it won't.\n (Wrapper for gen.limitedExecutions with maxTimes being 1.)\n Example: Show a message once for a certain trigger\n```lua\ngen.justOnce(\"Rebel Attack\", function()\n    text.simple(\"The Rebels have attacked Union troops.  We're now in a shooting war!\",\"Secretary of Defense\")\nend)\n```",
                    "finish": 47460003,
                    "start": 47440000,
                    "type": "function",
                    "view": "function gen.justOnce(key: any, limitedFunction: any)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 47440021,
                "name": "justOnce",
                "start": 47440009,
                "type": "setfield"
            },
            {
                "desc": " \"Kills\" the dying unit, running events for 'death', 'death outside combat', and 'deletion'.",
                "extends": {
                    "args": [
                        {
                            "desc": "A unit object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit in the game, and provides a means of interacting with it. This should not be confused with the unit type object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unit)",
                            "finish": 48980031,
                            "name": "dyingUnit",
                            "start": 48980022,
                            "type": "local",
                            "view": "unitObject"
                        }
                    ],
                    "desc": " \"Kills\" the dying unit, running events for 'death', 'death outside combat', and 'deletion'.",
                    "finish": 49050003,
                    "start": 48980000,
                    "type": "function",
                    "view": "function gen.killUnit(dyingUnit: unitObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 48980021,
                "name": "killUnit",
                "start": 48980009,
                "type": "setfield"
            },
            {
                "desc": " If the value at key is less than maxTimes, limitedFunction will execute,\n and the value at key will increment by 1.\n Otherwise, don't execute limitedFunction.\n Note: limitedFunction()-->void\n \n Example: Volunteers will be created in a capital up to 3 times for a certain trigger.\n```lua\ngen.limitedExecutions(\"Tribe 1 Volunteers\",3, function()\n    text.simple(\"Young men flock to Washington to fight the South.\")\n    gen.createUnit(gen.original.uRiflemen, object.pUnion, object.lWashington, {})\nend)\n```\n\n@*param* `key` โ The key for this limited execution\n\n@*param* `maxTimes` โ The number of times the limited function will be executed\n\n@*param* `limitedFunction` โ The function to execute a maximum number of times.",
                "extends": {
                    "args": [
                        {
                            "desc": "The key for this limited execution",
                            "finish": 47250034,
                            "name": "key",
                            "start": 47250031,
                            "type": "local",
                            "view": "string|integer"
                        },
                        {
                            "desc": "The number of times the limited function will be executed",
                            "finish": 47250043,
                            "name": "maxTimes",
                            "start": 47250035,
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "desc": "The function to execute a maximum number of times.",
                            "finish": 47250059,
                            "name": "limitedFunction",
                            "start": 47250044,
                            "type": "local",
                            "view": "fun()"
                        }
                    ],
                    "desc": " If the value at key is less than maxTimes, limitedFunction will execute,\n and the value at key will increment by 1.\n Otherwise, don't execute limitedFunction.\n Note: limitedFunction()-->void\n \n Example: Volunteers will be created in a capital up to 3 times for a certain trigger.\n```lua\ngen.limitedExecutions(\"Tribe 1 Volunteers\",3, function()\n    text.simple(\"Young men flock to Washington to fight the South.\")\n    gen.createUnit(gen.original.uRiflemen, object.pUnion, object.lWashington, {})\nend)\n```\n\n@*param* `key` โ The key for this limited execution\n\n@*param* `maxTimes` โ The number of times the limited function will be executed\n\n@*param* `limitedFunction` โ The function to execute a maximum number of times.",
                    "finish": 47310003,
                    "start": 47250000,
                    "type": "function",
                    "view": "function gen.limitedExecutions(key: string|integer, maxTimes: integer, limitedFunction: fun())"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 47250030,
                "name": "limitedExecutions",
                "start": 47250009,
                "type": "setfield"
            },
            {
                "desc": "#gen.linkActivationFunction(function(unit,source)-->void)-->void\n If you are using the Lua Scenario Template, there is no need to worry about this function.\n use to specify the code that should be run when a unit is\n activated by gen.activate or gen.activateWtihSource",
                "extends": {
                    "args": [
                        {
                            "finish": 37230048,
                            "name": "activationFn",
                            "start": 37230036,
                            "type": "local",
                            "view": "fun(unit: unitObject, source: boolean)"
                        }
                    ],
                    "desc": "#gen.linkActivationFunction(function(unit,source)-->void)-->void\n If you are using the Lua Scenario Template, there is no need to worry about this function.\n use to specify the code that should be run when a unit is\n activated by gen.activate or gen.activateWtihSource",
                    "finish": 37290003,
                    "start": 37230000,
                    "type": "function",
                    "view": "function gen.linkActivationFunction(activationFn: fun(unit: unitObject, source: boolean))"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 37230035,
                "name": "linkActivationFunction",
                "start": 37230009,
                "type": "setfield"
            },
            {
                "desc": " Links a sub table of the state table for the purposes of\n providing a table for functions in the General Library\n this is distinct from getState, which provides a \n 'visible' state table to the end user",
                "extends": {
                    "args": [
                        {
                            "desc": "A state savable table can be saved in the 'state' table, which is to say, the table where data is saved to the saved game file. A state savable table is a table where the keys are integers and strings, and the values are integers, strings, and other state savable tables.",
                            "finish": 46680047,
                            "name": "stateTable",
                            "start": 46680037,
                            "type": "local",
                            "view": "string|number|table<string|number, string|number|table>"
                        }
                    ],
                    "desc": " Links a sub table of the state table for the purposes of\n providing a table for functions in the General Library\n this is distinct from getState, which provides a \n 'visible' state table to the end user",
                    "finish": 46770003,
                    "start": 46680000,
                    "type": "function",
                    "view": "function gen.linkGeneralLibraryState(stateTable: string|number|table<string|number, string|number|table>)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 46680036,
                "name": "linkGeneralLibraryState",
                "start": 46680009,
                "type": "setfield"
            },
            {
                "desc": " Links the state table to the General Library\n provides access to the state table so that\n gen.getState() can provide it.",
                "extends": {
                    "args": [
                        {
                            "desc": "A state savable table can be saved in the 'state' table, which is to say, the table where data is saved to the saved game file. A state savable table is a table where the keys are integers and strings, and the values are integers, strings, and other state savable tables.",
                            "finish": 46390033,
                            "name": "stateTable",
                            "start": 46390023,
                            "type": "local",
                            "view": "string|number|table<string|number, string|number|table>"
                        }
                    ],
                    "desc": " Links the state table to the General Library\n provides access to the state table so that\n gen.getState() can provide it.",
                    "finish": 46450003,
                    "start": 46390000,
                    "type": "function",
                    "view": "function gen.linkState(stateTable: string|number|table<string|number, string|number|table>)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 46390022,
                "name": "linkState",
                "start": 46390009,
                "type": "setfield"
            },
            {
                "desc": " Checks the marker table for any marker data that can be removed\n and remove it.",
                "extends": {
                    "args": [],
                    "desc": " Checks the marker table for any marker data that can be removed\n and remove it.",
                    "finish": 71220003,
                    "start": 71140000,
                    "type": "function",
                    "view": "function gen.maintainTileMarkerTable()"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 71140036,
                "name": "maintainTileMarkerTable",
                "start": 71140009,
                "type": "setfield"
            },
            {
                "desc": " gen.makeAllowedTerrainFunction(allowedTilesTable) --> function(tile)-->bool\nConverts a table of integer values into a function that returns\ntrue if tile.baseTerrain.type is a value in the table, and false otherwise.\nIf nil is entered, all terrain is allowed.",
                "extends": {
                    "args": [
                        {
                            "desc": "The 'nil' data type has a single value nil, and tends to represent the absence of a value. Nil is a data type which is native to Lua, and is considered 'falsy' in logical statements. Unassigned keys in a table return nil as their value.\n[Programming in Lua, 2.1 -- Nil](https://www.lua.org/pil/2.1.html)\n[Tutorialspoint Lua -- Data Types](https://www.tutorialspoint.com/lua/lua_data_types.htm)",
                            "finish": 49450056,
                            "name": "allowedTilesList",
                            "start": 49450040,
                            "type": "local",
                            "view": "table<integer, integer>|nil"
                        }
                    ],
                    "desc": " gen.makeAllowedTerrainFunction(allowedTilesTable) --> function(tile)-->bool\nConverts a table of integer values into a function that returns\ntrue if tile.baseTerrain.type is a value in the table, and false otherwise.\nIf nil is entered, all terrain is allowed.",
                    "finish": 49570003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "fun(tile: tileObject):boolean"
                        }
                    ],
                    "start": 49450000,
                    "type": "function",
                    "view": "function gen.makeAllowedTerrainFunction(allowedTilesList: table<integer, integer>|nil)\n  -> fun(tile: tileObject):boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 49450039,
                "name": "makeAllowedTerrainFunction",
                "start": 49450009,
                "type": "setfield"
            },
            {
                "desc": " All integer values in the table are re-indexed so that they \n start at 1 and proceed without gaps.\n All other keys are ignored.",
                "extends": {
                    "args": [
                        {
                            "desc": "A table is a data type native to Lua, and links \"keys\" (usually numbers or strings) to \"values\" (any kind of data, including other tables). This is the only data structuring mechanism in Lua, and many of the data types documented here are simply tables with restrictions on their keys or values. If a key has not been assigned a value, the table returns nil as the corresponding value, and assigning nil as a value to a key removes that key from the table.\n[Programming in Lua, 2.5 -- Tables](https://www.lua.org/pil/2.5.html)",
                            "finish": 45600034,
                            "name": "table",
                            "start": 45600029,
                            "type": "local",
                            "view": "table"
                        }
                    ],
                    "desc": " All integer values in the table are re-indexed so that they \n start at 1 and proceed without gaps.\n All other keys are ignored.",
                    "finish": 45860003,
                    "start": 45600000,
                    "type": "function",
                    "view": "function gen.makeArrayOneToN(table: table)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 45600028,
                "name": "makeArrayOneToN",
                "start": 45600009,
                "type": "setfield"
            },
            {
                "desc": "#gen.clearAirProtection(tile)-->void\n A basic function to move air units protecting stacks\n from a tile.  See `gen.clearAirProtection` and `gen.clearAdjacentAirProtection`\n for functions to actually use.",
                "extends": {
                    "args": [],
                    "desc": "#gen.clearAirProtection(tile)-->void\n A basic function to move air units protecting stacks\n from a tile.  See `gen.clearAirProtection` and `gen.clearAdjacentAirProtection`\n for functions to actually use.",
                    "finish": 41260003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "function"
                        }
                    ],
                    "start": 40760000,
                    "type": "function",
                    "view": "function gen.makeClearAirProtection()\n  -> function"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 40760035,
                "name": "makeClearAirProtection",
                "start": 40760009,
                "type": "setfield"
            },
            {
                "desc": "  Makes a 'dataTable', which functions as a table, but with the ability to disable\n  overwriting values for existing keys,\n  adding new keys, and\n  requesting nil values (values for keys that don't exist).\n  (This functionality is achieved with a metatable.)\n  The `tableName` is a name for the table when an error is generated.\n\n@*param* `inputTable` โ The table to be made into a data table.  The table actually transformed, but it is also returned, if that is convenient.  Default is an empty table.\n\n@*param* `tableName` โ Default is 'unnamed data table'",
                "extends": {
                    "args": [
                        {
                            "desc": "The table to be made into a data table.  The table actually transformed, but it is also returned, if that is convenient.  Default is an empty table.",
                            "finish": 65410037,
                            "name": "inputTable",
                            "start": 65410027,
                            "type": "local",
                            "view": "table?"
                        },
                        {
                            "desc": "Default is 'unnamed data table'",
                            "finish": 65410047,
                            "name": "tableName",
                            "start": 65410038,
                            "type": "local",
                            "view": "string?"
                        }
                    ],
                    "desc": "  Makes a 'dataTable', which functions as a table, but with the ability to disable\n  overwriting values for existing keys,\n  adding new keys, and\n  requesting nil values (values for keys that don't exist).\n  (This functionality is achieved with a metatable.)\n  The `tableName` is a name for the table when an error is generated.\n\n@*param* `inputTable` โ The table to be made into a data table.  The table actually transformed, but it is also returned, if that is convenient.  Default is an empty table.\n\n@*param* `tableName` โ Default is 'unnamed data table'",
                    "finish": 65990003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "dataTable"
                        }
                    ],
                    "start": 65410000,
                    "type": "function",
                    "view": "function gen.makeDataTable(inputTable?: table, tableName?: string)\n  -> dataTable"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 65410026,
                "name": "makeDataTable",
                "start": 65410009,
                "type": "setfield"
            },
            {
                "desc": " A threshold table is a table where if a numerical key is indexed, and that\n numerical key doesn't correspond to an index, the value of the largest\n numerical index less than the key is used.\n If there is no numerical index smaller than the key, false is returned.\n (nil is returned for non-numerical keys not in table)\n Use an index -math.huge to provide values for arbitrarily small numerical keys.\n Example:\n```lua \nmyTable = gen.makeThresholdTable({[-1]=-1,[0]=0,[1]=1,})\nmyTable[-2] --> false\nmyTable[-1] --> -1\nmyTable[-0.6] --> -1\nmyTable[3.5]-->1\nmyTable[\"three\"] --> nil\nmyTable[0.5]-->0\n```\n makes an input a threshold table or creates an empty thresholdTable\n Also returns the table value",
                "extends": {
                    "args": [
                        {
                            "desc": "A table is a data type native to Lua, and links \"keys\" (usually numbers or strings) to \"values\" (any kind of data, including other tables). This is the only data structuring mechanism in Lua, and many of the data types documented here are simply tables with restrictions on their keys or values. If a key has not been assigned a value, the table returns nil as the corresponding value, and assigning nil as a value to a key removes that key from the table.\n[Programming in Lua, 2.5 -- Tables](https://www.lua.org/pil/2.5.html)",
                            "finish": 8410042,
                            "name": "inputTable",
                            "start": 8410032,
                            "type": "local",
                            "view": "table|nil"
                        }
                    ],
                    "desc": " A threshold table is a table where if a numerical key is indexed, and that\n numerical key doesn't correspond to an index, the value of the largest\n numerical index less than the key is used.\n If there is no numerical index smaller than the key, false is returned.\n (nil is returned for non-numerical keys not in table)\n Use an index -math.huge to provide values for arbitrarily small numerical keys.\n Example:\n```lua \nmyTable = gen.makeThresholdTable({[-1]=-1,[0]=0,[1]=1,})\nmyTable[-2] --> false\nmyTable[-1] --> -1\nmyTable[-0.6] --> -1\nmyTable[3.5]-->1\nmyTable[\"three\"] --> nil\nmyTable[0.5]-->0\n```\n makes an input a threshold table or creates an empty thresholdTable\n Also returns the table value",
                    "finish": 8440003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "thresholdTable"
                        }
                    ],
                    "start": 8410000,
                    "type": "function",
                    "view": "function gen.makeThresholdTable(inputTable: table|nil)\n  -> thresholdTable"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 8410031,
                "name": "makeThresholdTable",
                "start": 8410009,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 69830033,
                    "start": 69830020,
                    "type": "getlocal",
                    "view": "table"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 69830017,
                "name": "markerOptions",
                "start": 69830000,
                "type": "setfield"
            },
            {
                "desc": " Returns movement allowance for a unit after taking damage\n into account.\n Returns \"atomic\" movement points (that is, the movement recorded by `unit.moveSpent`, or \"regular\" movement points * `totpp.movementMultipliers.aggregate`",
                "extends": {
                    "args": [
                        {
                            "desc": "A unit object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit in the game, and provides a means of interacting with it. This should not be confused with the unit type object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unit)",
                            "finish": 30990026,
                            "name": "unit",
                            "start": 30990022,
                            "type": "local",
                            "view": "unitObject"
                        }
                    ],
                    "desc": " Returns movement allowance for a unit after taking damage\n into account.\n Returns \"atomic\" movement points (that is, the movement recorded by `unit.moveSpent`, or \"regular\" movement points * `totpp.movementMultipliers.aggregate`",
                    "finish": 31320003,
                    "returns": [
                        {
                            "name": "atomicMovementPoints",
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": 30990000,
                    "type": "function",
                    "view": "function gen.maxMoves(unit: unitObject)\n  -> atomicMovementPoints: integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 30990021,
                "name": "maxMoves",
                "start": 30990009,
                "type": "setfield"
            },
            {
                "desc": "  Accepts an arbitrary number of tables as\n  arguments and returns a table with all\n  the values from all the tables.\n  Table keys are lost, and replaced by\n  integers starting at 1.\n  Duplicate values will appear multiple times.",
                "extends": {
                    "args": [
                        {
                            "desc": "A table is a data type native to Lua, and links \"keys\" (usually numbers or strings) to \"values\" (any kind of data, including other tables). This is the only data structuring mechanism in Lua, and many of the data types documented here are simply tables with restrictions on their keys or values. If a key has not been assigned a value, the table returns nil as the corresponding value, and assigning nil as a value to a key removes that key from the table.\n[Programming in Lua, 2.5 -- Tables](https://www.lua.org/pil/2.5.html)",
                            "finish": 55440033,
                            "start": 55440030,
                            "type": "...",
                            "view": "table"
                        }
                    ],
                    "desc": "  Accepts an arbitrary number of tables as\n  arguments and returns a table with all\n  the values from all the tables.\n  Table keys are lost, and replaced by\n  integers starting at 1.\n  Duplicate values will appear multiple times.",
                    "finish": 55550003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "table"
                        }
                    ],
                    "start": 55440000,
                    "type": "function",
                    "view": "function gen.mergeTableValues(...table)\n  -> table"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 55440029,
                "name": "mergeTableValues",
                "start": 55440009,
                "type": "setfield"
            },
            {
                "desc": " Checks that the events.lua file is up to date, so all of the module's tie ins to the rest of the code base work properly.",
                "extends": {
                    "args": [
                        {
                            "desc": "A number is a data type native to Lua, which allows numerical computations to be performed. Fundamentally, Lua does not have separate data types for integers and numbers with a component after the decimal point, so any integer is also a number.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 79910043,
                            "name": "minVersion",
                            "start": 79910033,
                            "type": "local",
                            "view": "number"
                        },
                        {
                            "desc": "A number is a data type native to Lua, which allows numerical computations to be performed. Fundamentally, Lua does not have separate data types for integers and numbers with a component after the decimal point, so any integer is also a number.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 79910050,
                            "name": "regNum",
                            "start": 79910044,
                            "type": "local",
                            "view": "number"
                        },
                        {
                            "desc": "A string is a data type native to Lua which consists of a sequence of characters. These often represent text to be displayed, but are also useful in other contexts. Strings are commonly used as keys in tables, since they make code more readable.\n[Programming in Lua, 2.4 -- Strings](https://www.lua.org/pil/2.4.html)",
                            "finish": 79910059,
                            "name": "fileName",
                            "start": 79910051,
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": " Checks that the events.lua file is up to date, so all of the module's tie ins to the rest of the code base work properly.",
                    "finish": 80100003,
                    "start": 79910000,
                    "type": "function",
                    "view": "function gen.minEventsLuaVersion(minVersion: number, regNum: number, fileName: string)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 79910032,
                "name": "minEventsLuaVersion",
                "start": 79910009,
                "type": "setfield"
            },
            {
                "desc": " Returns gen.maxMoves-unit.moveSpent\n bug fixed by Knighttime",
                "extends": {
                    "args": [
                        {
                            "desc": "A unit object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit in the game, and provides a means of interacting with it. This should not be confused with the unit type object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unit)",
                            "finish": 31410031,
                            "name": "unit",
                            "start": 31410027,
                            "type": "local",
                            "view": "unitObject"
                        }
                    ],
                    "desc": " Returns gen.maxMoves-unit.moveSpent\n bug fixed by Knighttime",
                    "finish": 31470003,
                    "returns": [
                        {
                            "name": "atomicMovementPoints",
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": 31410000,
                    "type": "function",
                    "view": "function gen.moveRemaining(unit: unitObject)\n  -> atomicMovementPoints: integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 31410026,
                "name": "moveRemaining",
                "start": 31410009,
                "type": "setfield"
            },
            {
                "desc": " Moves the unit to an adjacent tile, choosing the tile based on  \n `destRankFn(unit,tile)--> integer or false`.\n Lower values mean preferred tiles, false means unit can't move to tile.\n Default is prefer empty squares before squares with units on them.\n Returns the tile the unit is moved to, or false if the unit can't be moved.\n\n@*param* `destRankFn` โ If the unit can be placed on the tile, return an integer (lower being more preferred).  If it can't, return false.\n\n@*return* `destination` โ The tile the unit was moved to, or false if it could not be moved.\n\n```lua\n-- A tile object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a map \"square\" in the game, and provides a means of interacting with it.\n-- [Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tile)\ndestination:\n    | false\n```",
                "extends": {
                    "args": [
                        {
                            "desc": "A unit object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit in the game, and provides a means of interacting with it. This should not be confused with the unit type object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unit)",
                            "finish": 39920034,
                            "name": "unit",
                            "start": 39920030,
                            "type": "local",
                            "view": "unitObject"
                        },
                        {
                            "desc": "If the unit can be placed on the tile, return an integer (lower being more preferred).  If it can't, return false.",
                            "finish": 39920045,
                            "name": "destRankFn",
                            "start": 39920035,
                            "type": "local",
                            "view": "(fun(unit: unitObject, tile: tileObject):integer|false)?"
                        }
                    ],
                    "desc": " Moves the unit to an adjacent tile, choosing the tile based on  \n `destRankFn(unit,tile)--> integer or false`.\n Lower values mean preferred tiles, false means unit can't move to tile.\n Default is prefer empty squares before squares with units on them.\n Returns the tile the unit is moved to, or false if the unit can't be moved.\n\n@*param* `destRankFn` โ If the unit can be placed on the tile, return an integer (lower being more preferred).  If it can't, return false.\n\n@*return* `destination` โ The tile the unit was moved to, or false if it could not be moved.\n\n```lua\n-- A tile object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a map \"square\" in the game, and provides a means of interacting with it.\n-- [Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tile)\ndestination:\n    | false\n```",
                    "finish": 40200003,
                    "returns": [
                        {
                            "desc": "The tile the unit was moved to, or false if it could not be moved.",
                            "name": "destination",
                            "type": "function.return",
                            "view": "tileObject|false"
                        }
                    ],
                    "start": 39920000,
                    "type": "function",
                    "view": "function gen.moveUnitAdjacent(unit: unitObject, destRankFn?: fun(unit: unitObject, tile: tileObject):integer|false)\n  -> destination: tileObject|false"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 39920029,
                "name": "moveUnitAdjacent",
                "start": 39920009,
                "type": "setfield"
            },
            {
                "desc": "  gen.nearbyOpenTilesForTribe(centerTile,distance,allowedTiles,tribe)\nReturns a table of nearby tiles, on the same map, that are either unoccupied or only has units/city of the `tribe`\nIndices start at 1 without gaps, but tiles are in no particular order.\n`centerTile` is the tile that you want to find other tiles near to (on same map).\n`distance` is the number of squares away that you can search.\n`allowedTiles` is either a table of integers such that a tile is acceptable if\n`possibleTile.baseTerrain.type` appears as a value in the table\nor a function `allowedTiles(possibleTile)-->bool`\nthat returns true if the tile is allowed, and false if not.\nIf `nil` is entered, all terrain is allowed.\n`tribe` the tribe that is searching for open tiles.",
                "extends": {
                    "args": [
                        {
                            "desc": "A tileAnalog is either a tileObject or a table with\none of the following forms: {[1]=x,[2]=y,[3]=z}, {[1]=x,[2]=y}\n(and assumes z=0), {x=x,y=y,z=z}, or {x=x, y=y} (and assumes z=0).\nThe x,y,z values (but not keys) correspond to tile coordinates.\n",
                            "finish": 50420047,
                            "name": "centerTile",
                            "start": 50420037,
                            "type": "local",
                            "view": "table|tileObject"
                        },
                        {
                            "desc": "An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 50420056,
                            "name": "distance",
                            "start": 50420048,
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": 50420069,
                            "name": "allowedTiles",
                            "start": 50420057,
                            "type": "local",
                            "view": "fun(tile: tileObject):boolean|table<integer, integer>"
                        },
                        {
                            "desc": "A tribe object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a tribe, which is to say the characteristics of the tribe overall, in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tribe)",
                            "finish": 50420075,
                            "name": "tribe",
                            "start": 50420070,
                            "type": "local",
                            "view": "tribeObject"
                        }
                    ],
                    "desc": "  gen.nearbyOpenTilesForTribe(centerTile,distance,allowedTiles,tribe)\nReturns a table of nearby tiles, on the same map, that are either unoccupied or only has units/city of the `tribe`\nIndices start at 1 without gaps, but tiles are in no particular order.\n`centerTile` is the tile that you want to find other tiles near to (on same map).\n`distance` is the number of squares away that you can search.\n`allowedTiles` is either a table of integers such that a tile is acceptable if\n`possibleTile.baseTerrain.type` appears as a value in the table\nor a function `allowedTiles(possibleTile)-->bool`\nthat returns true if the tile is allowed, and false if not.\nIf `nil` is entered, all terrain is allowed.\n`tribe` the tribe that is searching for open tiles.",
                    "finish": 50580003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "table<integer, tileObject>"
                        }
                    ],
                    "start": 50420000,
                    "type": "function",
                    "view": "function gen.nearbyOpenTilesForTribe(centerTile: table|tileObject, distance: integer, allowedTiles: fun(tile: tileObject):boolean|table<integer, integer>, tribe: tribeObject)\n  -> table<integer, tileObject>"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 50420036,
                "name": "nearbyOpenTilesForTribe",
                "start": 50420009,
                "type": "setfield"
            },
            {
                "desc": " gen.nearbyUnits(center,radius,maps={0,1,2,3}) --> iterator providing units\nprovides an iterator over all the units within radius\ntiles of the center tile\nmaps = nil or integer in 0-3 or table of integers\n    if integer, only get units from tiles from that map\n    if table of integers, units from all maps listed\n    e.g. {1,3} means get units from maps 1 and 3\n    if nil, get units from all maps (this choice is for backwards compatibility)\n\n\n@*param* `center` โ If table, must be a table of coordinates.\n\n@*param* `radius` โ How far away from the center you wish to get units.\n\n@*param* `maps` โ If integer, get units from that map. If table, values are the maps to get the tiles from.  Get from all maps by default (for backwards compatibility).",
                "extends": {
                    "args": [
                        {
                            "desc": "If table, must be a table of coordinates.",
                            "finish": 48290031,
                            "name": "center",
                            "start": 48290025,
                            "type": "local",
                            "view": "table|tileObject"
                        },
                        {
                            "desc": "How far away from the center you wish to get units.",
                            "finish": 48290038,
                            "name": "radius",
                            "start": 48290032,
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "desc": "If integer, get units from that map. If table, values are the maps to get the tiles from.  Get from all maps by default (for backwards compatibility).",
                            "finish": 48290043,
                            "name": "maps",
                            "start": 48290039,
                            "type": "local",
                            "view": "(integer|table)?"
                        }
                    ],
                    "desc": " gen.nearbyUnits(center,radius,maps={0,1,2,3}) --> iterator providing units\nprovides an iterator over all the units within radius\ntiles of the center tile\nmaps = nil or integer in 0-3 or table of integers\n    if integer, only get units from tiles from that map\n    if table of integers, units from all maps listed\n    e.g. {1,3} means get units from maps 1 and 3\n    if nil, get units from all maps (this choice is for backwards compatibility)\n\n\n@*param* `center` โ If table, must be a table of coordinates.\n\n@*param* `radius` โ How far away from the center you wish to get units.\n\n@*param* `maps` โ If integer, get units from that map. If table, values are the maps to get the tiles from.  Get from all maps by default (for backwards compatibility).",
                    "finish": 48390003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "iterator"
                        }
                    ],
                    "start": 48290000,
                    "type": "function",
                    "view": "function gen.nearbyUnits(center: table|tileObject, radius: integer, maps?: integer|table)\n  -> iterator"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 48290024,
                "name": "nearbyUnits",
                "start": 48290009,
                "type": "setfield"
            },
            {
                "desc": "Returns the table of nearby unoccupied tiles.\nIndices start at 1 without gaps, but tiles are in no particular order.\n`centerTile` is the tile that you want to find other tiles near to (on same map).\n`distance` is the number of squares away that you can search.\n`allowedTiles` is either a table of integers such that a tile is acceptable if\n`possibleTile.baseTerrain.type` appears as a value in the table\nor a function `allowedTiles(possibleTile)-->bool`\nthat returns true if the tile is allowed, and false if not.\nIf `nil` is entered, all terrain is allowed.",
                "extends": {
                    "args": [
                        {
                            "desc": "A tileAnalog is either a tileObject or a table with\none of the following forms: {[1]=x,[2]=y,[3]=z}, {[1]=x,[2]=y}\n(and assumes z=0), {x=x,y=y,z=z}, or {x=x, y=y} (and assumes z=0).\nThe x,y,z values (but not keys) correspond to tile coordinates.\n",
                            "finish": 49750045,
                            "name": "centerTile",
                            "start": 49750035,
                            "type": "local",
                            "view": "table|tileObject"
                        },
                        {
                            "desc": "An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 49750054,
                            "name": "distance",
                            "start": 49750046,
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": 49750067,
                            "name": "allowedTiles",
                            "start": 49750055,
                            "type": "local",
                            "view": "fun(tile: tileObject):boolean|table<integer, integer>"
                        }
                    ],
                    "desc": "Returns the table of nearby unoccupied tiles.\nIndices start at 1 without gaps, but tiles are in no particular order.\n`centerTile` is the tile that you want to find other tiles near to (on same map).\n`distance` is the number of squares away that you can search.\n`allowedTiles` is either a table of integers such that a tile is acceptable if\n`possibleTile.baseTerrain.type` appears as a value in the table\nor a function `allowedTiles(possibleTile)-->bool`\nthat returns true if the tile is allowed, and false if not.\nIf `nil` is entered, all terrain is allowed.",
                    "finish": 49890003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "table<integer, tileObject>"
                        }
                    ],
                    "start": 49750000,
                    "type": "function",
                    "view": "function gen.nearbyUnoccupiedTiles(centerTile: table|tileObject, distance: integer, allowedTiles: fun(tile: tileObject):boolean|table<integer, integer>)\n  -> table<integer, tileObject>"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 49750034,
                "name": "nearbyUnoccupiedTiles",
                "start": 49750009,
                "type": "setfield"
            },
            {
                "desc": " Creates a stack with no values.",
                "extends": {
                    "args": [],
                    "desc": " Creates a stack with no values.",
                    "finish": 84430003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "stack"
                        }
                    ],
                    "start": 84390000,
                    "type": "function",
                    "view": "function gen.newEmptyStack()\n  -> stack"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 84390026,
                "name": "newEmptyStack",
                "start": 84390009,
                "type": "setfield"
            },
            {
                "desc": "generates a new stack, with integer\nvalues in the table pushed onto the stack\nstarting from the smallest integer value\n(smallest value will be at the bottom of the stack).\nAll other keys (including non-integer keys) and values are ignored.\n\n@*param* `table` โ Default is an empty table.",
                "extends": {
                    "args": [
                        {
                            "desc": "Default is an empty table.",
                            "finish": 84540027,
                            "name": "table",
                            "start": 84540022,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "generates a new stack, with integer\nvalues in the table pushed onto the stack\nstarting from the smallest integer value\n(smallest value will be at the bottom of the stack).\nAll other keys (including non-integer keys) and values are ignored.\n\n@*param* `table` โ Default is an empty table.",
                    "finish": 84740003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "stack"
                        }
                    ],
                    "start": 84540000,
                    "type": "function",
                    "view": "function gen.newStack(table?: any)\n  -> stack"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 84540021,
                "name": "newStack",
                "start": 84540009,
                "type": "setfield"
            },
            {
                "desc": " gen.noGlobal()\n after gen.noGlobal is run, errors will be generated when trying to create a new\n global variable, or when accessing a global variable that doesn't already exist\n if you want to have a 'console' table to access certain functions from the console,\n you should declare it (but you don't have to fill it) before running this function\n In the Lua Scenario Template, this is run near the top of events.lua",
                "extends": {
                    "args": [],
                    "desc": " gen.noGlobal()\n after gen.noGlobal is run, errors will be generated when trying to create a new\n global variable, or when accessing a global variable that doesn't already exist\n if you want to have a 'console' table to access certain functions from the console,\n you should declare it (but you don't have to fill it) before running this function\n In the Lua Scenario Template, this is run near the top of events.lua",
                    "finish": 42880003,
                    "start": 42470000,
                    "type": "function",
                    "view": "function gen.noGlobal()"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 42470021,
                "name": "noGlobal",
                "start": 42470009,
                "type": "setfield"
            },
            {
                "desc": " Changes a table's metatable, so that an error is \n generated when assigning a value to a key \n which doesn't already exist in that table.\n Useful for debugging in certain circumstances.\n\n@*param* `tableName` โ the name for the table you want to be used in error displays.",
                "extends": {
                    "args": [
                        {
                            "desc": "A table is a data type native to Lua, and links \"keys\" (usually numbers or strings) to \"values\" (any kind of data, including other tables). This is the only data structuring mechanism in Lua, and many of the data types documented here are simply tables with restrictions on their keys or values. If a key has not been assigned a value, the table returns nil as the corresponding value, and assigning nil as a value to a key removes that key from the table.\n[Programming in Lua, 2.5 -- Tables](https://www.lua.org/pil/2.5.html)",
                            "finish": 42340027,
                            "name": "table",
                            "start": 42340022,
                            "type": "local",
                            "view": "table"
                        },
                        {
                            "desc": "the name for the table you want to be used in error displays.",
                            "finish": 42340037,
                            "name": "tableName",
                            "start": 42340028,
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": " Changes a table's metatable, so that an error is \n generated when assigning a value to a key \n which doesn't already exist in that table.\n Useful for debugging in certain circumstances.\n\n@*param* `tableName` โ the name for the table you want to be used in error displays.",
                    "finish": 42390003,
                    "start": 42340000,
                    "type": "function",
                    "view": "function gen.noNewKey(table: table, tableName: string)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 42340021,
                "name": "noNewKey",
                "start": 42340009,
                "type": "setfield"
            },
            {
                "desc": " Not yet documented below here",
                "extends": {
                    "finish": 55600017,
                    "start": 55600015,
                    "type": "table",
                    "view": "table"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 55600012,
                "name": "original",
                "start": 55600000,
                "type": "setfield"
            },
            {
                "desc": " Shows the 'out of range' message for `unit`.\n The message is registered by `gen.setOutOfRangeMessage`.",
                "extends": {
                    "args": [
                        {
                            "desc": "A unit object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit in the game, and provides a means of interacting with it. This should not be confused with the unit type object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unit)",
                            "finish": 74320035,
                            "name": "unit",
                            "start": 74320031,
                            "type": "local",
                            "view": "unitObject"
                        }
                    ],
                    "desc": " Shows the 'out of range' message for `unit`.\n The message is registered by `gen.setOutOfRangeMessage`.",
                    "finish": 74340003,
                    "start": 74320000,
                    "type": "function",
                    "view": "function gen.outOfRangeMessage(unit: unitObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 74320030,
                "name": "outOfRangeMessage",
                "start": 74320009,
                "type": "setfield"
            },
            {
                "desc": " gen.persistentRandom(key) --> number between 0 and 1\n Checks the persistentRandom table (within the state table)\n for a value associated with key. If it exits, the value is\n returned.  If it does not exist, a random number between\n 0 and 1 is generated, stored in the table under the key,\n and also returned.<br>\n\n Example of use: WWII scenario with seasons\n You may want to have some games where the 1941 spring starts\n in April, and other games where it starts in May.  When\n determining whether to load winter or summer terrain stats during\n 1941, you would use gen.persistentRandom(\"EarlySpring1941\") < 0.5\n as part of the season check in April, and load summer if the value is less than 0.5\n and winter otherwise.  This way, each when each player starts their\n game that month, they will all either get winter or summer terrain.\n\n@*param* `key` โ Key for the persistent random value.\n\n@*return* โ number between 0 and 1",
                "extends": {
                    "args": [
                        {
                            "desc": "Key for the persistent random value.",
                            "finish": 55110033,
                            "name": "key",
                            "start": 55110030,
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": " gen.persistentRandom(key) --> number between 0 and 1\n Checks the persistentRandom table (within the state table)\n for a value associated with key. If it exits, the value is\n returned.  If it does not exist, a random number between\n 0 and 1 is generated, stored in the table under the key,\n and also returned.<br>\n\n Example of use: WWII scenario with seasons\n You may want to have some games where the 1941 spring starts\n in April, and other games where it starts in May.  When\n determining whether to load winter or summer terrain stats during\n 1941, you would use gen.persistentRandom(\"EarlySpring1941\") < 0.5\n as part of the season check in April, and load summer if the value is less than 0.5\n and winter otherwise.  This way, each when each player starts their\n game that month, they will all either get winter or summer terrain.\n\n@*param* `key` โ Key for the persistent random value.\n\n@*return* โ number between 0 and 1",
                    "finish": 55140003,
                    "returns": [
                        {
                            "desc": "number between 0 and 1",
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": 55110000,
                    "type": "function",
                    "view": "function gen.persistentRandom(key: string)\n  -> number"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 55110029,
                "name": "persistentRandom",
                "start": 55110009,
                "type": "setfield"
            },
            {
                "desc": " places an airbase on a tile as long as there is not already\n pollution, fortress, or transporter on the tile\n does nothing if city present\n\n@*param* `tile` โ Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                "extends": {
                    "args": [
                        {
                            "desc": "Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                            "finish": 15380030,
                            "name": "tile",
                            "start": 15380026,
                            "type": "local",
                            "view": "table|tileObject"
                        }
                    ],
                    "desc": " places an airbase on a tile as long as there is not already\n pollution, fortress, or transporter on the tile\n does nothing if city present\n\n@*param* `tile` โ Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                    "finish": 15460003,
                    "start": 15380000,
                    "type": "function",
                    "view": "function gen.placeAirbase(tile: table|tileObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 15380025,
                "name": "placeAirbase",
                "start": 15380009,
                "type": "setfield"
            },
            {
                "desc": " places airbase, removing fortress/transporter/pollution if necessary\n if city on tile, nothing happens\n\n@*param* `tile` โ Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                "extends": {
                    "args": [
                        {
                            "desc": "Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                            "finish": 15530035,
                            "name": "tile",
                            "start": 15530031,
                            "type": "local",
                            "view": "table|tileObject"
                        }
                    ],
                    "desc": " places airbase, removing fortress/transporter/pollution if necessary\n if city on tile, nothing happens\n\n@*param* `tile` โ Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                    "finish": 15600003,
                    "start": 15530000,
                    "type": "function",
                    "view": "function gen.placeAirbaseForce(tile: table|tileObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 15530030,
                "name": "placeAirbaseForce",
                "start": 15530009,
                "type": "setfield"
            },
            {
                "desc": " places farmland on a tile (removing mining)\n does nothing if a city is present\n\n@*param* `tile` โ Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                "extends": {
                    "args": [
                        {
                            "desc": "Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                            "finish": 12450031,
                            "name": "tile",
                            "start": 12450027,
                            "type": "local",
                            "view": "table|tileObject"
                        }
                    ],
                    "desc": " places farmland on a tile (removing mining)\n does nothing if a city is present\n\n@*param* `tile` โ Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                    "finish": 12520003,
                    "start": 12450000,
                    "type": "function",
                    "view": "function gen.placeFarmland(tile: table|tileObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 12450026,
                "name": "placeFarmland",
                "start": 12450009,
                "type": "setfield"
            },
            {
                "desc": " places a fortress on a square, unless\n there is already a city, transporter, or airbase on the tile\n\n@*param* `tile` โ Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                "extends": {
                    "args": [
                        {
                            "desc": "Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                            "finish": 14860031,
                            "name": "tile",
                            "start": 14860027,
                            "type": "local",
                            "view": "table|tileObject"
                        }
                    ],
                    "desc": " places a fortress on a square, unless\n there is already a city, transporter, or airbase on the tile\n\n@*param* `tile` โ Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                    "finish": 14930003,
                    "start": 14860000,
                    "type": "function",
                    "view": "function gen.placeFortress(tile: table|tileObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 14860026,
                "name": "placeFortress",
                "start": 14860009,
                "type": "setfield"
            },
            {
                "desc": " places fortress (replacing airbase/transporter if necessary)\n If city on tile, nothing happens\n\n@*param* `tile` โ Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                "extends": {
                    "args": [
                        {
                            "desc": "Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                            "finish": 15000036,
                            "name": "tile",
                            "start": 15000032,
                            "type": "local",
                            "view": "table|tileObject"
                        }
                    ],
                    "desc": " places fortress (replacing airbase/transporter if necessary)\n If city on tile, nothing happens\n\n@*param* `tile` โ Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                    "finish": 15080003,
                    "start": 15000000,
                    "type": "function",
                    "view": "function gen.placeFortressForce(tile: table|tileObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 15000031,
                "name": "placeFortressForce",
                "start": 15000009,
                "type": "setfield"
            },
            {
                "desc": " places irrigation on the tile provided\n removes mines and farmland if present\n does nothing if tile has a city\n\n@*param* `tile` โ Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                "extends": {
                    "args": [
                        {
                            "desc": "Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                            "finish": 11190033,
                            "name": "tile",
                            "start": 11190029,
                            "type": "local",
                            "view": "table|tileObject"
                        }
                    ],
                    "desc": " places irrigation on the tile provided\n removes mines and farmland if present\n does nothing if tile has a city\n\n@*param* `tile` โ Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                    "finish": 11300003,
                    "start": 11190000,
                    "type": "function",
                    "view": "function gen.placeIrrigation(tile: table|tileObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 11190028,
                "name": "placeIrrigation",
                "start": 11190009,
                "type": "setfield"
            },
            {
                "desc": "Places a \"marker\" on `tile` for `tribe`.\n\nPlacing a marker on a tile changes the visible improvements for that tile, so that the tribe can now see the `markerOption` (\"irrigation\", \"pollution\", etc.-- see below for the full list) on the tile.  However, information about the marker is stored in the state table (along with the originally visible improvements), so that the marker can be displayed again if it stops being visible.\n\n\n@*param* `tile` โ The tile on which a \"marker\" will be placed.\n\n@*param* `tribe` โ The tribe for whom the \"marker\" is visible.\n\n@*param* `markerOption` โ Valid marker options are \"irrigation\", \"mine\", \"farmland\", \"road\", \"railroad\", \"fortress\", \"airbase\", \"pollution\", \"transporter\".",
                "extends": {
                    "args": [
                        {
                            "desc": "The tile on which a \"marker\" will be placed.",
                            "finish": 70550029,
                            "name": "tile",
                            "start": 70550025,
                            "type": "local",
                            "view": "tileObject"
                        },
                        {
                            "desc": "The tribe for whom the \"marker\" is visible.",
                            "finish": 70550035,
                            "name": "tribe",
                            "start": 70550030,
                            "type": "local",
                            "view": "tribeObject"
                        },
                        {
                            "desc": "Valid marker options are \"irrigation\", \"mine\", \"farmland\", \"road\", \"railroad\", \"fortress\", \"airbase\", \"pollution\", \"transporter\".",
                            "finish": 70550048,
                            "name": "markerOption",
                            "start": 70550036,
                            "type": "local",
                            "view": "markerOptions"
                        }
                    ],
                    "desc": "Places a \"marker\" on `tile` for `tribe`.\n\nPlacing a marker on a tile changes the visible improvements for that tile, so that the tribe can now see the `markerOption` (\"irrigation\", \"pollution\", etc.-- see below for the full list) on the tile.  However, information about the marker is stored in the state table (along with the originally visible improvements), so that the marker can be displayed again if it stops being visible.\n\n\n@*param* `tile` โ The tile on which a \"marker\" will be placed.\n\n@*param* `tribe` โ The tribe for whom the \"marker\" is visible.\n\n@*param* `markerOption` โ Valid marker options are \"irrigation\", \"mine\", \"farmland\", \"road\", \"railroad\", \"fortress\", \"airbase\", \"pollution\", \"transporter\".",
                    "finish": 70690003,
                    "start": 70550000,
                    "type": "function",
                    "view": "function gen.placeMarker(tile: tileObject, tribe: tribeObject, markerOption: markerOptions)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 70550024,
                "name": "placeMarker",
                "start": 70550009,
                "type": "setfield"
            },
            {
                "desc": " places mines on the tile provided\n removes irrigation and farmland if present\n does nothing if tile has city\n\n@*param* `tile` โ Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                "extends": {
                    "args": [
                        {
                            "desc": "Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                            "finish": 11660027,
                            "name": "tile",
                            "start": 11660023,
                            "type": "local",
                            "view": "table|tileObject"
                        }
                    ],
                    "desc": " places mines on the tile provided\n removes irrigation and farmland if present\n does nothing if tile has city\n\n@*param* `tile` โ Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                    "finish": 11770003,
                    "start": 11660000,
                    "type": "function",
                    "view": "function gen.placeMine(tile: table|tileObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 11660022,
                "name": "placeMine",
                "start": 11660009,
                "type": "setfield"
            },
            {
                "desc": " places mine on a tile, even if a city is present\n removes irrigation and farmland if present\n\n@*param* `tile` โ Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                "extends": {
                    "args": [
                        {
                            "desc": "Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                            "finish": 11840036,
                            "name": "tile",
                            "start": 11840032,
                            "type": "local",
                            "view": "table|tileObject"
                        }
                    ],
                    "desc": " places mine on a tile, even if a city is present\n removes irrigation and farmland if present\n\n@*param* `tile` โ Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                    "finish": 11920003,
                    "start": 11840000,
                    "type": "function",
                    "view": "function gen.placeMineUnderCity(tile: table|tileObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 11840031,
                "name": "placeMineUnderCity",
                "start": 11840009,
                "type": "setfield"
            },
            {
                "desc": " places pollution, unless the tile has a city, airbase\n or transporter already on the tile\n\n@*param* `tile` โ Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                "extends": {
                    "args": [
                        {
                            "desc": "Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                            "finish": 15910032,
                            "name": "tile",
                            "start": 15910028,
                            "type": "local",
                            "view": "table|tileObject"
                        }
                    ],
                    "desc": " places pollution, unless the tile has a city, airbase\n or transporter already on the tile\n\n@*param* `tile` โ Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                    "finish": 15980003,
                    "start": 15910000,
                    "type": "function",
                    "view": "function gen.placePollution(tile: table|tileObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 15910027,
                "name": "placePollution",
                "start": 15910009,
                "type": "setfield"
            },
            {
                "desc": " places pollution, unless the tile has a city, \n transporters and airbases are removed\n\n@*param* `tile` โ Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                "extends": {
                    "args": [
                        {
                            "desc": "Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                            "finish": 16050037,
                            "name": "tile",
                            "start": 16050033,
                            "type": "local",
                            "view": "table|tileObject"
                        }
                    ],
                    "desc": " places pollution, unless the tile has a city, \n transporters and airbases are removed\n\n@*param* `tile` โ Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                    "finish": 16170003,
                    "start": 16050000,
                    "type": "function",
                    "view": "function gen.placePollutionForce(tile: table|tileObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 16050032,
                "name": "placePollutionForce",
                "start": 16050009,
                "type": "setfield"
            },
            {
                "desc": " places a railroad (and road) on a tile\n does nothing if city is present\n\n@*param* `tile` โ Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                "extends": {
                    "args": [
                        {
                            "desc": "Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                            "finish": 13840031,
                            "name": "tile",
                            "start": 13840027,
                            "type": "local",
                            "view": "table|tileObject"
                        }
                    ],
                    "desc": " places a railroad (and road) on a tile\n does nothing if city is present\n\n@*param* `tile` โ Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                    "finish": 13910003,
                    "start": 13840000,
                    "type": "function",
                    "view": "function gen.placeRailroad(tile: table|tileObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 13840026,
                "name": "placeRailroad",
                "start": 13840009,
                "type": "setfield"
            },
            {
                "desc": " places a road on the tile\n does nothing if city present\n\n@*param* `tile` โ Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                "extends": {
                    "args": [
                        {
                            "desc": "Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                            "finish": 13450027,
                            "name": "tile",
                            "start": 13450023,
                            "type": "local",
                            "view": "table|tileObject"
                        }
                    ],
                    "desc": " places a road on the tile\n does nothing if city present\n\n@*param* `tile` โ Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                    "finish": 13520003,
                    "start": 13450000,
                    "type": "function",
                    "view": "function gen.placeRoad(tile: table|tileObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 13450022,
                "name": "placeRoad",
                "start": 13450009,
                "type": "setfield"
            },
            {
                "desc": " Placing transporters doesn't work.\n This function simply produces an error.\n (This function exists mainly to show this functionality wasn't overlooked.)",
                "extends": {
                    "args": [
                        {
                            "finish": 16430034,
                            "name": "tile",
                            "start": 16430030,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": " Placing transporters doesn't work.\n This function simply produces an error.\n (This function exists mainly to show this functionality wasn't overlooked.)",
                    "finish": 16450003,
                    "start": 16430000,
                    "type": "function",
                    "view": "function gen.placeTransporter(tile: any)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 16430029,
                "name": "placeTransporter",
                "start": 16430009,
                "type": "setfield"
            },
            {
                "desc": " Plays music from `fileName`, found in the folder set by\n gen.setMusicDirectory (in Lua Scenario Template, this is <MainScenarioDirectory>\\Sound).\n\n gen.playMusic stops any currently playing game music in order\n to play music, and the music won't play if the \"music\" is disabled in the menu.  This is different from playing a sound with civ.playSound, which doesn't stop any existing music.",
                "extends": {
                    "args": [
                        {
                            "finish": 45960031,
                            "name": "fileName",
                            "start": 45960023,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": " Plays music from `fileName`, found in the folder set by\n gen.setMusicDirectory (in Lua Scenario Template, this is <MainScenarioDirectory>\\Sound).\n\n gen.playMusic stops any currently playing game music in order\n to play music, and the music won't play if the \"music\" is disabled in the menu.  This is different from playing a sound with civ.playSound, which doesn't stop any existing music.",
                    "finish": 45980003,
                    "start": 45960000,
                    "type": "function",
                    "view": "function gen.playMusic(fileName: any)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 45960022,
                "name": "playMusic",
                "start": 45960009,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 7070035,
                    "start": 7070016,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 7070013,
                "name": "printBits",
                "start": 7070000,
                "type": "setfield"
            },
            {
                "desc": "This function is used to register the authoritativeDefaultRules\ntable from changeRules.lua to be used in the General Library.\nAll functions in the General Library will function appropriately\neven if the authoritativeDefaultRules are never registered.",
                "extends": {
                    "args": [
                        {
                            "desc": "A table is a data type native to Lua, and links \"keys\" (usually numbers or strings) to \"values\" (any kind of data, including other tables). This is the only data structuring mechanism in Lua, and many of the data types documented here are simply tables with restrictions on their keys or values. If a key has not been assigned a value, the table returns nil as the corresponding value, and assigning nil as a value to a key removes that key from the table.\n[Programming in Lua, 2.5 -- Tables](https://www.lua.org/pil/2.5.html)",
                            "finish": 5880055,
                            "name": "aDRTable",
                            "start": 5880047,
                            "type": "local",
                            "view": "table"
                        }
                    ],
                    "desc": "This function is used to register the authoritativeDefaultRules\ntable from changeRules.lua to be used in the General Library.\nAll functions in the General Library will function appropriately\neven if the authoritativeDefaultRules are never registered.",
                    "finish": 5900003,
                    "start": 5880000,
                    "type": "function",
                    "view": "function gen.registerAuthoritativeDefaultRules(aDRTable: table)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 5880046,
                "name": "registerAuthoritativeDefaultRules",
                "start": 5880009,
                "type": "setfield"
            },
            {
                "desc": "This function is used to register the customCosmic functions,\nso that some generalLibrary functions can use the information\nregistered by the customCosmic module.\n\n@*param* `cc` โ The table for the customCosmic module.",
                "extends": {
                    "args": [
                        {
                            "desc": "The table for the customCosmic module.",
                            "finish": 5990036,
                            "name": "cc",
                            "start": 5990034,
                            "type": "local",
                            "view": "table"
                        }
                    ],
                    "desc": "This function is used to register the customCosmic functions,\nso that some generalLibrary functions can use the information\nregistered by the customCosmic module.\n\n@*param* `cc` โ The table for the customCosmic module.",
                    "finish": 6010003,
                    "start": 5990000,
                    "type": "function",
                    "view": "function gen.registerCustomCosmic(cc: table)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 5990033,
                "name": "registerCustomCosmic",
                "start": 5990009,
                "type": "setfield"
            },
            {
                "desc": " In the Lua Scenario Template, this is called in events.lua, so you do not need to worry about it.\n  Registers version information for the events.lua file.<br>\n  versionNumber is the events.lua verison number<br>\n  fileMod is a boolean that should be true if events.lua has been modified by the scenario designer<br>\n  regressionNumber is incremented if events.lua has functionality removed<br>",
                "extends": {
                    "args": [
                        {
                            "desc": "A number is a data type native to Lua, which allows numerical computations to be performed. Fundamentally, Lua does not have separate data types for integers and numbers with a component after the decimal point, so any integer is also a number.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 79810042,
                            "name": "vNum",
                            "start": 79810038,
                            "type": "local",
                            "view": "number"
                        },
                        {
                            "desc": "A boolean is a data type native to Lua with exactly two possible values, <code>true</code> and <code>false</code>. These are often used when evaluating logical statements, but logical statements accept other values as well. All values except <code>false</code> and <code>nil</code> are considered 'truthy', even values such as 0 or the empty string.\n[Programming in Lua, 2.2 -- Booleans](https://www.lua.org/pil/2.2.html)",
                            "finish": 79810050,
                            "name": "fileMod",
                            "start": 79810043,
                            "type": "local",
                            "view": "boolean"
                        },
                        {
                            "desc": "A number is a data type native to Lua, which allows numerical computations to be performed. Fundamentally, Lua does not have separate data types for integers and numbers with a component after the decimal point, so any integer is also a number.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 79810067,
                            "name": "regressionNumber",
                            "start": 79810051,
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": " In the Lua Scenario Template, this is called in events.lua, so you do not need to worry about it.\n  Registers version information for the events.lua file.<br>\n  versionNumber is the events.lua verison number<br>\n  fileMod is a boolean that should be true if events.lua has been modified by the scenario designer<br>\n  regressionNumber is incremented if events.lua has functionality removed<br>",
                    "finish": 79850003,
                    "start": 79810000,
                    "type": "function",
                    "view": "function gen.registerEventsLuaVersion(vNum: number, fileMod: boolean, regressionNumber: number)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 79810037,
                "name": "registerEventsLuaVersion",
                "start": 79810009,
                "type": "setfield"
            },
            {
                "desc": " Re-homes units in a captured city to other cities owned by\n the same tribe, so that they are not disbanded.\n <br>If you are using the Lua Scenario Template, you can enable this feature in simpleSettings.lua. ",
                "extends": {
                    "args": [
                        {
                            "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
                            "finish": 34840043,
                            "name": "city",
                            "start": 34840039,
                            "type": "local",
                            "view": "cityObject"
                        },
                        {
                            "desc": "A tribe object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a tribe, which is to say the characteristics of the tribe overall, in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tribe)",
                            "finish": 34840052,
                            "name": "defender",
                            "start": 34840044,
                            "type": "local",
                            "view": "tribeObject"
                        }
                    ],
                    "desc": " Re-homes units in a captured city to other cities owned by\n the same tribe, so that they are not disbanded.\n <br>If you are using the Lua Scenario Template, you can enable this feature in simpleSettings.lua. ",
                    "finish": 35340003,
                    "start": 34840000,
                    "type": "function",
                    "view": "function gen.rehomeUnitsInCapturedCity(city: cityObject, defender: tribeObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 34840038,
                "name": "rehomeUnitsInCapturedCity",
                "start": 34840009,
                "type": "setfield"
            },
            {
                "desc": " remove farmland and irrigation if present\n do nothing to mining\n do nothing if city present\n\n@*param* `tile` โ Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                "extends": {
                    "args": [
                        {
                            "desc": "Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                            "finish": 13210035,
                            "name": "tile",
                            "start": 13210031,
                            "type": "local",
                            "view": "table|tileObject"
                        }
                    ],
                    "desc": " remove farmland and irrigation if present\n do nothing to mining\n do nothing if city present\n\n@*param* `tile` โ Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                    "finish": 13270003,
                    "start": 13210000,
                    "type": "function",
                    "view": "function gen.removeAgriculture(tile: table|tileObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 13210030,
                "name": "removeAgriculture",
                "start": 13210009,
                "type": "setfield"
            },
            {
                "desc": " removes airbase, if one is on tile\n (so that something else doesn't get removed)\n nothing happens if tile is a city\n\n@*param* `tile` โ Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                "extends": {
                    "args": [
                        {
                            "desc": "Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                            "finish": 15680031,
                            "name": "tile",
                            "start": 15680027,
                            "type": "local",
                            "view": "table|tileObject"
                        }
                    ],
                    "desc": " removes airbase, if one is on tile\n (so that something else doesn't get removed)\n nothing happens if tile is a city\n\n@*param* `tile` โ Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                    "finish": 15740003,
                    "start": 15680000,
                    "type": "function",
                    "view": "function gen.removeAirbase(tile: table|tileObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 15680026,
                "name": "removeAirbase",
                "start": 15680009,
                "type": "setfield"
            },
            {
                "desc": " Removes all markers of `markerType` for tribe.\n If tribe not specified, removes all markerType markers for all tribes.\n If markerType not specified, removes all markers for tribe.\n If neither specified, removes all markers for all tribes.\n\n@*param* `markerType` โ Valid marker options are \"irrigation\", \"mine\", \"farmland\", \"road\", \"railroad\", \"fortress\", \"airbase\", \"pollution\", \"transporter\".",
                "extends": {
                    "args": [
                        {
                            "desc": "A tribe object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a tribe, which is to say the characteristics of the tribe overall, in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tribe)",
                            "finish": 71530035,
                            "name": "tribe",
                            "start": 71530030,
                            "type": "local",
                            "view": "tribeObject|nil"
                        },
                        {
                            "desc": "Valid marker options are \"irrigation\", \"mine\", \"farmland\", \"road\", \"railroad\", \"fortress\", \"airbase\", \"pollution\", \"transporter\".",
                            "finish": 71530046,
                            "name": "markerType",
                            "start": 71530036,
                            "type": "local",
                            "view": "markerOptions|nil"
                        }
                    ],
                    "desc": " Removes all markers of `markerType` for tribe.\n If tribe not specified, removes all markerType markers for all tribes.\n If markerType not specified, removes all markers for tribe.\n If neither specified, removes all markers for all tribes.\n\n@*param* `markerType` โ Valid marker options are \"irrigation\", \"mine\", \"farmland\", \"road\", \"railroad\", \"fortress\", \"airbase\", \"pollution\", \"transporter\".",
                    "finish": 71800003,
                    "start": 71530000,
                    "type": "function",
                    "view": "function gen.removeAllMarkers(tribe: tribeObject|nil, markerType: markerOptions|nil)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 71530029,
                "name": "removeAllMarkers",
                "start": 71530009,
                "type": "setfield"
            },
            {
                "desc": "Forbids the `unitType` to be on `map`",
                "extends": {
                    "args": [
                        {
                            "desc": "A unit type object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit type entry in the rules.txt, and provides a means of interacting with it. This should not be confused with the unit object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unittype)",
                            "finish": 89020040,
                            "name": "unitType",
                            "start": 89020032,
                            "type": "local",
                            "view": "unitTypeObject"
                        },
                        {
                            "desc": "An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 89020044,
                            "name": "map",
                            "start": 89020041,
                            "type": "local",
                            "view": "integer|mapObject"
                        }
                    ],
                    "desc": "Forbids the `unitType` to be on `map`",
                    "finish": 89070003,
                    "start": 89020000,
                    "type": "function",
                    "view": "function gen.removeAllowedOnMap(unitType: unitTypeObject, map: integer|mapObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 89020031,
                "name": "removeAllowedOnMap",
                "start": 89020009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A unit type object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit type entry in the rules.txt, and provides a means of interacting with it. This should not be confused with the unit object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unittype)",
                            "finish": 21720034,
                            "name": "unitType",
                            "start": 21720026,
                            "type": "local",
                            "view": "unitTypeObject"
                        }
                    ],
                    "finish": 21740003,
                    "start": 21720000,
                    "type": "function",
                    "view": "function gen.removeAlpine(unitType: unitTypeObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 21720025,
                "name": "removeAlpine",
                "start": 21720009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A unit type object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit type entry in the rules.txt, and provides a means of interacting with it. This should not be confused with the unit object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unittype)",
                            "finish": 20170038,
                            "name": "unitType",
                            "start": 20170030,
                            "type": "local",
                            "view": "unitTypeObject"
                        }
                    ],
                    "finish": 20190003,
                    "start": 20170000,
                    "type": "function",
                    "view": "function gen.removeAmphibious(unitType: unitTypeObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 20170029,
                "name": "removeAmphibious",
                "start": 20170009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A unit type object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit type entry in the rules.txt, and provides a means of interacting with it. This should not be confused with the unit object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unittype)",
                            "finish": 20610037,
                            "name": "unitType",
                            "start": 20610029,
                            "type": "local",
                            "view": "unitTypeObject"
                        }
                    ],
                    "finish": 20630003,
                    "start": 20610000,
                    "type": "function",
                    "view": "function gen.removeAttackAir(unitType: unitTypeObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 20610028,
                "name": "removeAttackAir",
                "start": 20610009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A unit type object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit type entry in the rules.txt, and provides a means of interacting with it. This should not be confused with the unit object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unittype)",
                            "finish": 63590050,
                            "name": "unitType",
                            "start": 63590042,
                            "type": "local",
                            "view": "unitTypeObject"
                        }
                    ],
                    "finish": 63590055,
                    "start": 63590000,
                    "type": "function",
                    "view": "function gen.removeBarbarianWillNotExpire(unitType: unitTypeObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 63590041,
                "name": "removeBarbarianWillNotExpire",
                "start": 63590009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A unit type object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit type entry in the rules.txt, and provides a means of interacting with it. This should not be confused with the unit object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unittype)",
                            "finish": 22600043,
                            "name": "unitType",
                            "start": 22600035,
                            "type": "local",
                            "view": "unitTypeObject"
                        }
                    ],
                    "finish": 22620003,
                    "start": 22600000,
                    "type": "function",
                    "view": "function gen.removeBonusAgainstAir(unitType: unitTypeObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 22600034,
                "name": "removeBonusAgainstAir",
                "start": 22600009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A unit type object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit type entry in the rules.txt, and provides a means of interacting with it. This should not be confused with the unit object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unittype)",
                            "finish": 21940045,
                            "name": "unitType",
                            "start": 21940037,
                            "type": "local",
                            "view": "unitTypeObject"
                        }
                    ],
                    "finish": 21960003,
                    "start": 21940000,
                    "type": "function",
                    "view": "function gen.removeBonusAgainstHorse(unitType: unitTypeObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 21940036,
                "name": "removeBonusAgainstHorse",
                "start": 21940009,
                "type": "setfield"
            },
            {
                "desc": "Changes the `unitType`'s buildTransport field so that the\n unit can't build teleporters between `map1` and `map2`.\n (If there are multiple map relationships\n between `map1` and `map2`, all will be set to 0.)\n If the maps are the same, or there is no possible transportation\n between them, an error is thrown, unless `suppressFailureError`\n is `true`, in which case the buildTransport field is unchanged.\n\n@*param* `suppressFailureError` โ if true, invalid map combinations do nothing instead of causing an error.",
                "extends": {
                    "args": [
                        {
                            "desc": "A unit type object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit type entry in the rules.txt, and provides a means of interacting with it. This should not be confused with the unit object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unittype)",
                            "finish": 88470053,
                            "name": "unitType",
                            "start": 88470045,
                            "type": "local",
                            "view": "unitTypeObject"
                        },
                        {
                            "desc": "An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 88470058,
                            "name": "map1",
                            "start": 88470054,
                            "type": "local",
                            "view": "integer|mapObject"
                        },
                        {
                            "desc": "An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 88470063,
                            "name": "map2",
                            "start": 88470059,
                            "type": "local",
                            "view": "integer|mapObject"
                        },
                        {
                            "desc": "if true, invalid map combinations do nothing instead of causing an error.",
                            "finish": 88470084,
                            "name": "suppressFailureError",
                            "start": 88470064,
                            "type": "local",
                            "view": "boolean?"
                        }
                    ],
                    "desc": "Changes the `unitType`'s buildTransport field so that the\n unit can't build teleporters between `map1` and `map2`.\n (If there are multiple map relationships\n between `map1` and `map2`, all will be set to 0.)\n If the maps are the same, or there is no possible transportation\n between them, an error is thrown, unless `suppressFailureError`\n is `true`, in which case the buildTransport field is unchanged.\n\n@*param* `suppressFailureError` โ if true, invalid map combinations do nothing instead of causing an error.",
                    "finish": 88500003,
                    "start": 88470000,
                    "type": "function",
                    "view": "function gen.removeBuildTransportBetweenMaps(unitType: unitTypeObject, map1: integer|mapObject, map2: integer|mapObject, suppressFailureError?: boolean)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 88470044,
                "name": "removeBuildTransportBetweenMaps",
                "start": 88470009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A unit type object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit type entry in the rules.txt, and provides a means of interacting with it. This should not be confused with the unit object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unittype)",
                            "finish": 63400053,
                            "name": "unitType",
                            "start": 63400045,
                            "type": "local",
                            "view": "unitTypeObject"
                        }
                    ],
                    "finish": 63400058,
                    "start": 63400000,
                    "type": "function",
                    "view": "function gen.removeCanCrossImpassableTerrain(unitType: unitTypeObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 63400044,
                "name": "removeCanCrossImpassableTerrain",
                "start": 63400009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A unit type object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit type entry in the rules.txt, and provides a means of interacting with it. This should not be confused with the unit object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unittype)",
                            "finish": 64620042,
                            "name": "unitType",
                            "start": 64620034,
                            "type": "local",
                            "view": "unitTypeObject"
                        }
                    ],
                    "finish": 64620047,
                    "start": 64620000,
                    "type": "function",
                    "view": "function gen.removeCanFoundCities(unitType: unitTypeObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 64620033,
                "name": "removeCanFoundCities",
                "start": 64620009,
                "type": "setfield"
            },
            {
                "desc": "@*param* `ignoreError` โ Default is false\n\n Removes the ability to improve tiles from units with settler role.\n Units without settler role produce an error, unless ignoreError\n is set to true.",
                "extends": {
                    "args": [
                        {
                            "desc": "A unit type object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit type entry in the rules.txt, and provides a means of interacting with it. This should not be confused with the unit object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unittype)",
                            "finish": 64990045,
                            "name": "unitType",
                            "start": 64990037,
                            "type": "local",
                            "view": "unitTypeObject"
                        },
                        {
                            "desc": "Default is false",
                            "finish": 64990057,
                            "name": "ignoreError",
                            "start": 64990046,
                            "type": "local",
                            "view": "boolean?"
                        }
                    ],
                    "desc": "@*param* `ignoreError` โ Default is false\n\n Removes the ability to improve tiles from units with settler role.\n Units without settler role produce an error, unless ignoreError\n is set to true.",
                    "finish": 65060003,
                    "start": 64990028,
                    "type": "function",
                    "view": "function gen.removeCanImproveTiles(unitType: unitTypeObject, ignoreError?: boolean)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 64990025,
                "name": "removeCanImproveTiles",
                "start": 64990000,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A unit type object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit type entry in the rules.txt, and provides a means of interacting with it. This should not be confused with the unit object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unittype)",
                            "finish": 63210049,
                            "name": "unitType",
                            "start": 63210041,
                            "type": "local",
                            "view": "unitTypeObject"
                        }
                    ],
                    "finish": 63210054,
                    "start": 63210000,
                    "type": "function",
                    "view": "function gen.removeCannotBuyOffBarbarian(unitType: unitTypeObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 63210040,
                "name": "removeCannotBuyOffBarbarian",
                "start": 63210009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A unit type object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit type entry in the rules.txt, and provides a means of interacting with it. This should not be confused with the unit object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unittype)",
                            "finish": 21280036,
                            "name": "unitType",
                            "start": 21280028,
                            "type": "local",
                            "view": "unitTypeObject"
                        }
                    ],
                    "finish": 21300003,
                    "start": 21280000,
                    "type": "function",
                    "view": "function gen.removeCarryAir(unitType: unitTypeObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 21280027,
                "name": "removeCarryAir",
                "start": 21280009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A unit type object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit type entry in the rules.txt, and provides a means of interacting with it. This should not be confused with the unit object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unittype)",
                            "finish": 20830035,
                            "name": "unitType",
                            "start": 20830027,
                            "type": "local",
                            "view": "unitTypeObject"
                        }
                    ],
                    "finish": 20850003,
                    "start": 20830000,
                    "type": "function",
                    "view": "function gen.removeCoastal(unitType: unitTypeObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 20830026,
                "name": "removeCoastal",
                "start": 20830009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A unit type object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit type entry in the rules.txt, and provides a means of interacting with it. This should not be confused with the unit object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unittype)",
                            "finish": 22380051,
                            "name": "unitType",
                            "start": 22380043,
                            "type": "local",
                            "view": "unitTypeObject"
                        }
                    ],
                    "finish": 22400003,
                    "start": 22380000,
                    "type": "function",
                    "view": "function gen.removeDestroyedAfterAttacking(unitType: unitTypeObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 22380042,
                "name": "removeDestroyedAfterAttacking",
                "start": 22380009,
                "type": "setfield"
            },
            {
                "desc": " removes farmland if present\n does nothing to irrigation or mining\n does nothing if city present\n\n@*param* `tile` โ Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                "extends": {
                    "args": [
                        {
                            "desc": "Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                            "finish": 12600032,
                            "name": "tile",
                            "start": 12600028,
                            "type": "local",
                            "view": "table|tileObject"
                        }
                    ],
                    "desc": " removes farmland if present\n does nothing to irrigation or mining\n does nothing if city present\n\n@*param* `tile` โ Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                    "finish": 12660003,
                    "start": 12600000,
                    "type": "function",
                    "view": "function gen.removeFarmland(tile: table|tileObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 12600027,
                "name": "removeFarmland",
                "start": 12600009,
                "type": "setfield"
            },
            {
                "desc": " Checks that a fortress is in place (so as not to change\n other terrain improvements), and if so, removes the fortress\n\n@*param* `tile` โ Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                "extends": {
                    "args": [
                        {
                            "desc": "Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                            "finish": 15150032,
                            "name": "tile",
                            "start": 15150028,
                            "type": "local",
                            "view": "table|tileObject"
                        }
                    ],
                    "desc": " Checks that a fortress is in place (so as not to change\n other terrain improvements), and if so, removes the fortress\n\n@*param* `tile` โ Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                    "finish": 15210003,
                    "start": 15150000,
                    "type": "function",
                    "view": "function gen.removeFortress(tile: table|tileObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 15150027,
                "name": "removeFortress",
                "start": 15150009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A unit type object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit type entry in the rules.txt, and provides a means of interacting with it. This should not be confused with the unit object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unittype)",
                            "finish": 22160058,
                            "name": "unitType",
                            "start": 22160050,
                            "type": "local",
                            "view": "unitTypeObject"
                        }
                    ],
                    "finish": 22180003,
                    "start": 22160000,
                    "type": "function",
                    "view": "function gen.removeFreeSupportUnderFundamentalism(unitType: unitTypeObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 22160049,
                "name": "removeFreeSupportUnderFundamentalism",
                "start": 22160009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A unit type object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit type entry in the rules.txt, and provides a means of interacting with it. This should not be confused with the unit object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unittype)",
                            "finish": 21060039,
                            "name": "unitType",
                            "start": 21060031,
                            "type": "local",
                            "view": "unitTypeObject"
                        }
                    ],
                    "finish": 21080003,
                    "start": 21060000,
                    "type": "function",
                    "view": "function gen.removeIgnoreWalls(unitType: unitTypeObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 21060030,
                "name": "removeIgnoreWalls",
                "start": 21060009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A unit type object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit type entry in the rules.txt, and provides a means of interacting with it. This should not be confused with the unit object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unittype)",
                            "finish": 19940037,
                            "name": "unitType",
                            "start": 19940029,
                            "type": "local",
                            "view": "unitTypeObject"
                        }
                    ],
                    "finish": 19960003,
                    "start": 19940000,
                    "type": "function",
                    "view": "function gen.removeIgnoreZOC(unitType: unitTypeObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 19940028,
                "name": "removeIgnoreZOC",
                "start": 19940009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A unit type object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit type entry in the rules.txt, and provides a means of interacting with it. This should not be confused with the unit object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unittype)",
                            "finish": 62640048,
                            "name": "unitType",
                            "start": 62640040,
                            "type": "local",
                            "view": "unitTypeObject"
                        }
                    ],
                    "finish": 62640053,
                    "start": 62640000,
                    "type": "function",
                    "view": "function gen.removeInvisibleUntilAttack(unitType: unitTypeObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 62640039,
                "name": "removeInvisibleUntilAttack",
                "start": 62640009,
                "type": "setfield"
            },
            {
                "desc": " If tile has irrigation but no farmland, removes the irrigation\n Does nothing to farmland\n Does nothing if tile has a city\n\n@*param* `tile` โ Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                "extends": {
                    "args": [
                        {
                            "desc": "Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                            "finish": 11380034,
                            "name": "tile",
                            "start": 11380030,
                            "type": "local",
                            "view": "table|tileObject"
                        }
                    ],
                    "desc": " If tile has irrigation but no farmland, removes the irrigation\n Does nothing to farmland\n Does nothing if tile has a city\n\n@*param* `tile` โ Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                    "finish": 11470003,
                    "start": 11380000,
                    "type": "function",
                    "view": "function gen.removeIrrigation(tile: table|tileObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 11380029,
                "name": "removeIrrigation",
                "start": 11380009,
                "type": "setfield"
            },
            {
                "desc": " Removes the `markerOption` marker for `tribe` from `tile`, if it exist.\n\n@*param* `tile` โ The tile on which a \"marker\" will be removed.\n\n@*param* `tribe` โ The tribe for whom the \"marker\" is no longer visible.\n\n@*param* `markerOption` โ Valid marker options are \"irrigation\", \"mine\", \"farmland\", \"road\", \"railroad\", \"fortress\", \"airbase\", \"pollution\", \"transporter\".",
                "extends": {
                    "args": [
                        {
                            "desc": "The tile on which a \"marker\" will be removed.",
                            "finish": 70780030,
                            "name": "tile",
                            "start": 70780026,
                            "type": "local",
                            "view": "tileObject"
                        },
                        {
                            "desc": "The tribe for whom the \"marker\" is no longer visible.",
                            "finish": 70780036,
                            "name": "tribe",
                            "start": 70780031,
                            "type": "local",
                            "view": "tribeObject"
                        },
                        {
                            "desc": "Valid marker options are \"irrigation\", \"mine\", \"farmland\", \"road\", \"railroad\", \"fortress\", \"airbase\", \"pollution\", \"transporter\".",
                            "finish": 70780049,
                            "name": "markerOption",
                            "start": 70780037,
                            "type": "local",
                            "view": "markerOptions"
                        }
                    ],
                    "desc": " Removes the `markerOption` marker for `tribe` from `tile`, if it exist.\n\n@*param* `tile` โ The tile on which a \"marker\" will be removed.\n\n@*param* `tribe` โ The tribe for whom the \"marker\" is no longer visible.\n\n@*param* `markerOption` โ Valid marker options are \"irrigation\", \"mine\", \"farmland\", \"road\", \"railroad\", \"fortress\", \"airbase\", \"pollution\", \"transporter\".",
                    "finish": 71080003,
                    "start": 70780000,
                    "type": "function",
                    "view": "function gen.removeMarker(tile: tileObject, tribe: tribeObject, markerOption: markerOptions)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 70780025,
                "name": "removeMarker",
                "start": 70780009,
                "type": "setfield"
            },
            {
                "desc": "Removes all markers on tile for the tribe, if tribe is omitted, removes markers for all tribes.\n\n@*param* `tile` โ The tile for which all markers will be removed.\n\n@*param* `tribe` โ The tribe for which the markers will be removed.  If nil, markers for all tribes are removed.",
                "extends": {
                    "args": [
                        {
                            "desc": "The tile for which all markers will be removed.",
                            "finish": 71310039,
                            "name": "tile",
                            "start": 71310035,
                            "type": "local",
                            "view": "tileObject"
                        },
                        {
                            "desc": "The tribe for which the markers will be removed.  If nil, markers for all tribes are removed.",
                            "finish": 71310045,
                            "name": "tribe",
                            "start": 71310040,
                            "type": "local",
                            "view": "tribeObject?"
                        }
                    ],
                    "desc": "Removes all markers on tile for the tribe, if tribe is omitted, removes markers for all tribes.\n\n@*param* `tile` โ The tile for which all markers will be removed.\n\n@*param* `tribe` โ The tribe for which the markers will be removed.  If nil, markers for all tribes are removed.",
                    "finish": 71430003,
                    "start": 71310000,
                    "type": "function",
                    "view": "function gen.removeMarkersFromTile(tile: tileObject, tribe?: tribeObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 71310034,
                "name": "removeMarkersFromTile",
                "start": 71310009,
                "type": "setfield"
            },
            {
                "desc": " if tile has mining but no farmland, removes mines\n does nothing to farmland\n does nothing if tile has a city\n\n@*param* `tile` โ Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                "extends": {
                    "args": [
                        {
                            "desc": "Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                            "finish": 12000028,
                            "name": "tile",
                            "start": 12000024,
                            "type": "local",
                            "view": "table|tileObject"
                        }
                    ],
                    "desc": " if tile has mining but no farmland, removes mines\n does nothing to farmland\n does nothing if tile has a city\n\n@*param* `tile` โ Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                    "finish": 12100003,
                    "start": 12000000,
                    "type": "function",
                    "view": "function gen.removeMine(tile: table|tileObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 12000023,
                "name": "removeMine",
                "start": 12000009,
                "type": "setfield"
            },
            {
                "desc": " if tile has mining but no farmland, removes mines\n does nothing to farmland\n\n@*param* `tile` โ Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                "extends": {
                    "args": [
                        {
                            "desc": "Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                            "finish": 12170037,
                            "name": "tile",
                            "start": 12170033,
                            "type": "local",
                            "view": "table|tileObject"
                        }
                    ],
                    "desc": " if tile has mining but no farmland, removes mines\n does nothing to farmland\n\n@*param* `tile` โ Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                    "finish": 12300003,
                    "start": 12170000,
                    "type": "function",
                    "view": "function gen.removeMineUnderCity(tile: table|tileObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 12170032,
                "name": "removeMineUnderCity",
                "start": 12170009,
                "type": "setfield"
            },
            {
                "desc": "Changes the `unitType`'s nativeTransport field so that the\n unit can't teleport between `map1` and `map2`.\n (If there are multiple map relationships\n between `map1` and `map2`, all will be removed.)\n If the maps are the same, or there is no possible transportation\n between them, an error is thrown, unless `suppressFailureError`\n is `true`, in which case the nativeTransport field is unchanged.\n\n@*param* `suppressFailureError` โ if true, invalid map combinations do nothing instead of causing an error.",
                "extends": {
                    "args": [
                        {
                            "desc": "A unit type object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit type entry in the rules.txt, and provides a means of interacting with it. This should not be confused with the unit object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unittype)",
                            "finish": 88300054,
                            "name": "unitType",
                            "start": 88300046,
                            "type": "local",
                            "view": "unitTypeObject"
                        },
                        {
                            "desc": "An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 88300059,
                            "name": "map1",
                            "start": 88300055,
                            "type": "local",
                            "view": "integer|mapObject"
                        },
                        {
                            "desc": "An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 88300064,
                            "name": "map2",
                            "start": 88300060,
                            "type": "local",
                            "view": "integer|mapObject"
                        },
                        {
                            "desc": "if true, invalid map combinations do nothing instead of causing an error.",
                            "finish": 88300085,
                            "name": "suppressFailureError",
                            "start": 88300065,
                            "type": "local",
                            "view": "boolean?"
                        }
                    ],
                    "desc": "Changes the `unitType`'s nativeTransport field so that the\n unit can't teleport between `map1` and `map2`.\n (If there are multiple map relationships\n between `map1` and `map2`, all will be removed.)\n If the maps are the same, or there is no possible transportation\n between them, an error is thrown, unless `suppressFailureError`\n is `true`, in which case the nativeTransport field is unchanged.\n\n@*param* `suppressFailureError` โ if true, invalid map combinations do nothing instead of causing an error.",
                    "finish": 88330003,
                    "start": 88300000,
                    "type": "function",
                    "view": "function gen.removeNativeTransportBetweenMaps(unitType: unitTypeObject, map1: integer|mapObject, map2: integer|mapObject, suppressFailureError?: boolean)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 88300045,
                "name": "removeNativeTransportBetweenMaps",
                "start": 88300009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A unit type object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit type entry in the rules.txt, and provides a means of interacting with it. This should not be confused with the unit object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unittype)",
                            "finish": 62830042,
                            "name": "unitType",
                            "start": 62830034,
                            "type": "local",
                            "view": "unitTypeObject"
                        }
                    ],
                    "finish": 62830047,
                    "start": 62830000,
                    "type": "function",
                    "view": "function gen.removeNonDisbandable(unitType: unitTypeObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 62830033,
                "name": "removeNonDisbandable",
                "start": 62830009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A unit type object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit type entry in the rules.txt, and provides a means of interacting with it. This should not be confused with the unit object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unittype)",
                            "finish": 63790039,
                            "name": "unitType",
                            "start": 63790031,
                            "type": "local",
                            "view": "unitTypeObject"
                        }
                    ],
                    "finish": 63790044,
                    "start": 63790000,
                    "type": "function",
                    "view": "function gen.removeOverrideSPR(unitType: unitTypeObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 63790030,
                "name": "removeOverrideSPR",
                "start": 63790009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A unit type object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit type entry in the rules.txt, and provides a means of interacting with it. This should not be confused with the unit object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unittype)",
                            "finish": 21500036,
                            "name": "unitType",
                            "start": 21500028,
                            "type": "local",
                            "view": "unitTypeObject"
                        }
                    ],
                    "finish": 21520003,
                    "start": 21500000,
                    "type": "function",
                    "view": "function gen.removeParadrop(unitType: unitTypeObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 21500027,
                "name": "removeParadrop",
                "start": 21500009,
                "type": "setfield"
            },
            {
                "desc": " checks if tile has pollution, and if so, removes it\n\n@*param* `tile` โ Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                "extends": {
                    "args": [
                        {
                            "desc": "Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                            "finish": 16220033,
                            "name": "tile",
                            "start": 16220029,
                            "type": "local",
                            "view": "table|tileObject"
                        }
                    ],
                    "desc": " checks if tile has pollution, and if so, removes it\n\n@*param* `tile` โ Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                    "finish": 16280003,
                    "start": 16220000,
                    "type": "function",
                    "view": "function gen.removePollution(tile: table|tileObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 16220028,
                "name": "removePollution",
                "start": 16220009,
                "type": "setfield"
            },
            {
                "desc": " removes railroad from a tile if it exits,\n leaving road intact (if there is already road there)\n does nothing if a city is present\n\n@*param* `tile` โ Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                "extends": {
                    "args": [
                        {
                            "desc": "Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                            "finish": 13990032,
                            "name": "tile",
                            "start": 13990028,
                            "type": "local",
                            "view": "table|tileObject"
                        }
                    ],
                    "desc": " removes railroad from a tile if it exits,\n leaving road intact (if there is already road there)\n does nothing if a city is present\n\n@*param* `tile` โ Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                    "finish": 14050003,
                    "start": 13990000,
                    "type": "function",
                    "view": "function gen.removeRailroad(tile: table|tileObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 13990027,
                "name": "removeRailroad",
                "start": 13990009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A unit type object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit type entry in the rules.txt, and provides a means of interacting with it. This should not be confused with the unit object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unittype)",
                            "finish": 64230053,
                            "name": "unitType",
                            "start": 64230045,
                            "type": "local",
                            "view": "unitTypeObject"
                        }
                    ],
                    "finish": 64230058,
                    "start": 64230000,
                    "type": "function",
                    "view": "function gen.removeReducePopulationWhenBuilt(unitType: unitTypeObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 64230044,
                "name": "removeReducePopulationWhenBuilt",
                "start": 64230009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A unit type object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit type entry in the rules.txt, and provides a means of interacting with it. This should not be confused with the unit object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unittype)",
                            "finish": 64420047,
                            "name": "unitType",
                            "start": 64420039,
                            "type": "local",
                            "view": "unitTypeObject"
                        }
                    ],
                    "finish": 64420052,
                    "start": 64420000,
                    "type": "function",
                    "view": "function gen.removeRequiresFoodSupport(unitType: unitTypeObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 64420038,
                "name": "removeRequiresFoodSupport",
                "start": 64420009,
                "type": "setfield"
            },
            {
                "desc": " removes a road if there is a road but no rail\n doesn't touch rail or cities\n\n@*param* `tile` โ Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                "extends": {
                    "args": [
                        {
                            "desc": "Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                            "finish": 13590028,
                            "name": "tile",
                            "start": 13590024,
                            "type": "local",
                            "view": "table|tileObject"
                        }
                    ],
                    "desc": " removes a road if there is a road but no rail\n doesn't touch rail or cities\n\n@*param* `tile` โ Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                    "finish": 13660003,
                    "start": 13590000,
                    "type": "function",
                    "view": "function gen.removeRoad(tile: table|tileObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 13590023,
                "name": "removeRoad",
                "start": 13590009,
                "type": "setfield"
            },
            {
                "desc": "Removes the +1 trade production from a road for `baseTerrain`.",
                "extends": {
                    "args": [
                        {
                            "desc": "A base terrain object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents the 'basic' terrain characteristics for a terrain type, which is to say those aspects of terrain which do not change for special resources. The 'terrain' object deals with the characteristics that do change for special resources.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#baseterrain)",
                            "finish": 85810045,
                            "name": "baseTerrain",
                            "start": 85810034,
                            "type": "local",
                            "view": "baseTerrainObject"
                        }
                    ],
                    "desc": "Removes the +1 trade production from a road for `baseTerrain`.",
                    "finish": 85840003,
                    "start": 85810000,
                    "type": "function",
                    "view": "function gen.removeRoadTradeBonus(baseTerrain: baseTerrainObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 85810033,
                "name": "removeRoadTradeBonus",
                "start": 85810009,
                "type": "setfield"
            },
            {
                "desc": " Note: The typo is preserved, on the off chance that\n someone used it",
                "extends": {
                    "finish": 19740047,
                    "start": 19740025,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 19740022,
                "name": "removeSeeTowSpaces",
                "start": 19740000,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A unit type object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit type entry in the rules.txt, and provides a means of interacting with it. This should not be confused with the unit object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unittype)",
                            "finish": 19690040,
                            "name": "unitType",
                            "start": 19690032,
                            "type": "local",
                            "view": "unitTypeObject"
                        }
                    ],
                    "finish": 19710003,
                    "start": 19690000,
                    "type": "function",
                    "view": "function gen.removeSeeTwoSpaces(unitType: unitTypeObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 19690031,
                "name": "removeSeeTwoSpaces",
                "start": 19690009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A unit type object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit type entry in the rules.txt, and provides a means of interacting with it. This should not be confused with the unit object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unittype)",
                            "finish": 22820042,
                            "name": "unitType",
                            "start": 22820034,
                            "type": "local",
                            "view": "unitTypeObject"
                        }
                    ],
                    "finish": 22840003,
                    "start": 22820000,
                    "type": "function",
                    "view": "function gen.removeSpotSubmarines(unitType: unitTypeObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 22820033,
                "name": "removeSpotSubmarines",
                "start": 22820009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A unit type object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit type entry in the rules.txt, and provides a means of interacting with it. This should not be confused with the unit object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unittype)",
                            "finish": 20390037,
                            "name": "unitType",
                            "start": 20390029,
                            "type": "local",
                            "view": "unitTypeObject"
                        }
                    ],
                    "finish": 20410003,
                    "start": 20390000,
                    "type": "function",
                    "view": "function gen.removeSubmarine(unitType: unitTypeObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 20390028,
                "name": "removeSubmarine",
                "start": 20390009,
                "type": "setfield"
            },
            {
                "desc": "Takes the `transportBitmask` for nativeTransport, buildTransport, useTransport,\n and changes all appropriate bit to 0 so that transport no longer exists\n between the maps.  \n Returns the new bitmask.\n If the maps are the same, or there is no possible transportation\n between them, an error is thrown, unless `suppressFailureError`\n is `true`, in which case the original bitmask is returned.\n\n@*param* `suppressFailureError` โ set to true so that invalid map pairs do nothing instead of causing errors.",
                "extends": {
                    "args": [
                        {
                            "desc": "An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 88030044,
                            "name": "map1",
                            "start": 88030040,
                            "type": "local",
                            "view": "integer|mapObject"
                        },
                        {
                            "desc": "An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 88030049,
                            "name": "map2",
                            "start": 88030045,
                            "type": "local",
                            "view": "integer|mapObject"
                        },
                        {
                            "desc": "<p>A bitmask is an integer that is not meant to be interpreted as a number, but rather as a sequence of 1's and 0's (the binary representation of the number), with each 1 or 0 representing whether a condition is true or false. Bitmasks often have functions written to facilitate their manipulation. If none are available, Lua provides bitwise operators.</p><p>Typically, the leftmost bit (the bit representing the largest value) is interpreted as negative. Hence, the bitmask integer is not guaranteed to be positive.</p>\n[Lua 5.3 Reference Manual 3.4.2 -- Bitwise Operators](https://www.lua.org/manual/5.3/manual.html#3.4.2)\n[Twos complement: Negative numbers in binary (Youtube Video)](https://www.youtube.com/watch?v=4qH4unVtJkE)",
                            "finish": 88030066,
                            "name": "transportBitmask",
                            "start": 88030050,
                            "type": "local",
                            "view": "bitmask"
                        },
                        {
                            "desc": "set to true so that invalid map pairs do nothing instead of causing errors.",
                            "finish": 88030088,
                            "name": "suppressFailureError",
                            "start": 88030068,
                            "type": "local",
                            "view": "boolean?"
                        },
                        {
                            "desc": "A string is a data type native to Lua which consists of a sequence of characters. These often represent text to be displayed, but are also useful in other contexts. Strings are commonly used as keys in tables, since they make code more readable.\n[Programming in Lua, 2.4 -- Strings](https://www.lua.org/pil/2.4.html)",
                            "finish": 88030102,
                            "name": "functionName",
                            "start": 88030090,
                            "type": "local",
                            "view": "string?"
                        }
                    ],
                    "desc": "Takes the `transportBitmask` for nativeTransport, buildTransport, useTransport,\n and changes all appropriate bit to 0 so that transport no longer exists\n between the maps.  \n Returns the new bitmask.\n If the maps are the same, or there is no possible transportation\n between them, an error is thrown, unless `suppressFailureError`\n is `true`, in which case the original bitmask is returned.\n\n@*param* `suppressFailureError` โ set to true so that invalid map pairs do nothing instead of causing errors.",
                    "finish": 88170003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "bitmask"
                        }
                    ],
                    "start": 88030000,
                    "type": "function",
                    "view": "function gen.removeTransportBetweenMaps(map1: integer|mapObject, map2: integer|mapObject, transportBitmask: bitmask, suppressFailureError?: boolean, functionName?: string)\n  -> bitmask"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 88030039,
                "name": "removeTransportBetweenMaps",
                "start": 88030009,
                "type": "setfield"
            },
            {
                "desc": " removes road and rail, if it exists\n does nothing if city present\n\n@*param* `tile` โ Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                "extends": {
                    "args": [
                        {
                            "desc": "Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                            "finish": 14600038,
                            "name": "tile",
                            "start": 14600034,
                            "type": "local",
                            "view": "table|tileObject"
                        }
                    ],
                    "desc": " removes road and rail, if it exists\n does nothing if city present\n\n@*param* `tile` โ Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                    "finish": 14680003,
                    "start": 14600000,
                    "type": "function",
                    "view": "function gen.removeTransportation(tile: table|tileObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 14600033,
                "name": "removeTransportation",
                "start": 14600009,
                "type": "setfield"
            },
            {
                "desc": "@*param* `tile` โ Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                "extends": {
                    "args": [
                        {
                            "desc": "Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                            "finish": 16510035,
                            "name": "tile",
                            "start": 16510031,
                            "type": "local",
                            "view": "table|tileObject"
                        }
                    ],
                    "desc": "@*param* `tile` โ Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                    "finish": 16580003,
                    "start": 16510000,
                    "type": "function",
                    "view": "function gen.removeTransporter(tile: table|tileObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 16510030,
                "name": "removeTransporter",
                "start": 16510009,
                "type": "setfield"
            },
            {
                "desc": "Changes the `unitType`'s useTransport field so that the\n unit can't use teleporters between `map1` and `map2`.\n (If there are multiple map relationships\n between `map1` and `map2`, all will be set to 0)\n If the maps are the same, or there is no possible transportation\n between them, an error is thrown, unless `suppressFailureError`\n is `true`, in which case the useTransport field is unchanged.\n\n@*param* `suppressFailureError` โ if true, invalid map combinations do nothing instead of causing an error.",
                "extends": {
                    "args": [
                        {
                            "desc": "A unit type object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit type entry in the rules.txt, and provides a means of interacting with it. This should not be confused with the unit object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unittype)",
                            "finish": 88630051,
                            "name": "unitType",
                            "start": 88630043,
                            "type": "local",
                            "view": "unitTypeObject"
                        },
                        {
                            "desc": "An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 88630056,
                            "name": "map1",
                            "start": 88630052,
                            "type": "local",
                            "view": "integer|mapObject"
                        },
                        {
                            "desc": "An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 88630061,
                            "name": "map2",
                            "start": 88630057,
                            "type": "local",
                            "view": "integer|mapObject"
                        },
                        {
                            "desc": "if true, invalid map combinations do nothing instead of causing an error.",
                            "finish": 88630082,
                            "name": "suppressFailureError",
                            "start": 88630062,
                            "type": "local",
                            "view": "boolean?"
                        }
                    ],
                    "desc": "Changes the `unitType`'s useTransport field so that the\n unit can't use teleporters between `map1` and `map2`.\n (If there are multiple map relationships\n between `map1` and `map2`, all will be set to 0)\n If the maps are the same, or there is no possible transportation\n between them, an error is thrown, unless `suppressFailureError`\n is `true`, in which case the useTransport field is unchanged.\n\n@*param* `suppressFailureError` โ if true, invalid map combinations do nothing instead of causing an error.",
                    "finish": 88660003,
                    "start": 88630000,
                    "type": "function",
                    "view": "function gen.removeUseTransportBetweenMaps(unitType: unitTypeObject, map1: integer|mapObject, map2: integer|mapObject, suppressFailureError?: boolean)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 88630042,
                "name": "removeUseTransportBetweenMaps",
                "start": 88630009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A unit type object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit type entry in the rules.txt, and provides a means of interacting with it. This should not be confused with the unit object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unittype)",
                            "finish": 63020058,
                            "name": "unitType",
                            "start": 63020050,
                            "type": "local",
                            "view": "unitTypeObject"
                        }
                    ],
                    "finish": 63020063,
                    "start": 63020000,
                    "type": "function",
                    "view": "function gen.removeZeroRangeAirUnitDamageOverride(unitType: unitTypeObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 63020049,
                "name": "removeZeroRangeAirUnitDamageOverride",
                "start": 63020009,
                "type": "setfield"
            },
            {
                "desc": " Creates a unit to replace the old unit, \n copies the old unit's attributes, and\n deletes the old unit (applying the deletion function).\n Returns the newly created unit.\ncomment",
                "extends": {
                    "args": [
                        {
                            "desc": "A unit object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit in the game, and provides a means of interacting with it. This should not be confused with the unit type object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unit)",
                            "finish": 49320032,
                            "name": "oldUnit",
                            "start": 49320025,
                            "type": "local",
                            "view": "unitObject"
                        },
                        {
                            "desc": "A unit type object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit type entry in the rules.txt, and provides a means of interacting with it. This should not be confused with the unit object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unittype)",
                            "finish": 49320048,
                            "name": "replacementType",
                            "start": 49320033,
                            "type": "local",
                            "view": "unitTypeObject"
                        }
                    ],
                    "desc": " Creates a unit to replace the old unit, \n copies the old unit's attributes, and\n deletes the old unit (applying the deletion function).\n Returns the newly created unit.\ncomment",
                    "finish": 49370003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "unitObject"
                        }
                    ],
                    "start": 49320000,
                    "type": "function",
                    "view": "function gen.replaceUnit(oldUnit: unitObject, replacementType: unitTypeObject)\n  -> unitObject"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 49320024,
                "name": "replaceUnit",
                "start": 49320009,
                "type": "setfield"
            },
            {
                "desc": "Attempts to require the module called fileName\nreturns true, modulePrefix if the module is found\nreturns false, nil if no module is found\nmakes an error if there is a problem loading the module\n\n@*param* `fileName` โ The name of the file to require\n\n@*return* `fileFound` โ true if the module was found, false otherwise\n\n@*return* `modulePrefix` โ returns the module table if it was found, or nil if not",
                "extends": {
                    "args": [
                        {
                            "desc": "The name of the file to require",
                            "finish": 1120040,
                            "name": "fileName",
                            "start": 1120032,
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "Attempts to require the module called fileName\nreturns true, modulePrefix if the module is found\nreturns false, nil if no module is found\nmakes an error if there is a problem loading the module\n\n@*param* `fileName` โ The name of the file to require\n\n@*return* `fileFound` โ true if the module was found, false otherwise\n\n@*return* `modulePrefix` โ returns the module table if it was found, or nil if not",
                    "finish": 1280003,
                    "returns": [
                        {
                            "desc": "true if the module was found, false otherwise",
                            "name": "fileFound",
                            "type": "function.return",
                            "view": "boolean"
                        },
                        {
                            "desc": "returns the module table if it was found, or nil if not",
                            "name": "modulePrefix",
                            "type": "function.return",
                            "view": "table|nil"
                        }
                    ],
                    "start": 1120000,
                    "type": "function",
                    "view": "function gen.requireIfAvailable(fileName: string)\n  -> fileFound: boolean\n  2. modulePrefix: table|nil"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 1120031,
                "name": "requireIfAvailable",
                "start": 1120009,
                "type": "setfield"
            },
            {
                "desc": " Allows Global variables to be used, if they have been disabled by\n `gen.noGlobal`",
                "extends": {
                    "args": [],
                    "desc": " Allows Global variables to be used, if they have been disabled by\n `gen.noGlobal`",
                    "finish": 42990003,
                    "start": 42930000,
                    "type": "function",
                    "view": "function gen.restoreGlobal()"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 42930026,
                "name": "restoreGlobal",
                "start": 42930009,
                "type": "setfield"
            },
            {
                "desc": "Changes the `dataTable` so that only 'valid' values can be assigned to the dataTable.  If `isValidValueFunction(value)` returns true for a `value` assigned to the table, that value is added to the table.  Otherwise, `makeValidValueFunction(value)` is assigned to the dataTable (unless an error is generated).",
                "extends": {
                    "args": [
                        {
                            "desc": "A dataTable acts as an ordinary table, but, if desired, you can forbid values from being changed, forbid new key-value pairs from being stored, and forbid trying to access keys with a `nil` value.  These features can make debugging easier by causing an error to happen on the line the mistake is made.\n\nThe following functions can be used to control the data table's features:\n\ngen.forbidReplacement(dataTable) --> void\n\ngen.allowReplacement(dataTable) --> void\n\ngen.forbidNewKeys(dataTable) --> void\n\ngen.allowNewKeys(dataTable) --> void\n\ngen.forbidNilValueAccess(dataTable) --> void\n\ngen.allowNilValueAccess(dataTable) --> void\n\ngen.restrictValues(dataTable,isValidValueFn,makeValidValueFn) --> void\n",
                            "finish": 66790037,
                            "name": "dataTable",
                            "start": 66790028,
                            "type": "local",
                            "view": "dataTable"
                        },
                        {
                            "finish": 66790058,
                            "name": "isValidValueFunction",
                            "start": 66790038,
                            "type": "local",
                            "view": "fun(value: any):boolean"
                        },
                        {
                            "finish": 66790081,
                            "name": "makeValidValueFunction",
                            "start": 66790059,
                            "type": "local",
                            "view": "fun(value: any):any"
                        }
                    ],
                    "desc": "Changes the `dataTable` so that only 'valid' values can be assigned to the dataTable.  If `isValidValueFunction(value)` returns true for a `value` assigned to the table, that value is added to the table.  Otherwise, `makeValidValueFunction(value)` is assigned to the dataTable (unless an error is generated).",
                    "finish": 66860003,
                    "start": 66790000,
                    "type": "function",
                    "view": "function gen.restrictValues(dataTable: dataTable, isValidValueFunction: fun(value: any):boolean, makeValidValueFunction: fun(value: any):any)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 66790027,
                "name": "restrictValues",
                "start": 66790009,
                "type": "setfield"
            },
            {
                "desc": " gen.revealTile(tile,tribe) -> void\n makes `tile` visible to `tribe`\n\n@*param* `tile` โ Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                "extends": {
                    "args": [
                        {
                            "desc": "Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                            "finish": 58400028,
                            "name": "tile",
                            "start": 58400024,
                            "type": "local",
                            "view": "table|tileObject"
                        },
                        {
                            "desc": "A tribe object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a tribe, which is to say the characteristics of the tribe overall, in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tribe)",
                            "finish": 58400034,
                            "name": "tribe",
                            "start": 58400029,
                            "type": "local",
                            "view": "tribeObject"
                        }
                    ],
                    "desc": " gen.revealTile(tile,tribe) -> void\n makes `tile` visible to `tribe`\n\n@*param* `tile` โ Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                    "finish": 58440003,
                    "start": 58400000,
                    "type": "function",
                    "view": "function gen.revealTile(tile: table|tileObject, tribe: tribeObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 58400023,
                "name": "revealTile",
                "start": 58400009,
                "type": "setfield"
            },
            {
                "desc": " If a unit is provided, reveals that unit and all other units on the tile\n to the tribe.\n If a tile is provided, reveals all units on the tile to the tribe (if any are present).\n\n@*param* `unitOrTile` โ Can be:<br><br>tileObject<br><br>unitObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                "extends": {
                    "args": [
                        {
                            "desc": "Can be:<br><br>tileObject<br><br>unitObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                            "finish": 58910039,
                            "name": "unitOrTile",
                            "start": 58910029,
                            "type": "local",
                            "view": "table|tileObject|unitObject"
                        },
                        {
                            "desc": "A tribe object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a tribe, which is to say the characteristics of the tribe overall, in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tribe)",
                            "finish": 58910045,
                            "name": "tribe",
                            "start": 58910040,
                            "type": "local",
                            "view": "tribeObject"
                        }
                    ],
                    "desc": " If a unit is provided, reveals that unit and all other units on the tile\n to the tribe.\n If a tile is provided, reveals all units on the tile to the tribe (if any are present).\n\n@*param* `unitOrTile` โ Can be:<br><br>tileObject<br><br>unitObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                    "finish": 59010003,
                    "start": 58910000,
                    "type": "function",
                    "view": "function gen.revealUnitStack(unitOrTile: table|tileObject|unitObject, tribe: tribeObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 58910028,
                "name": "revealUnitStack",
                "start": 58910009,
                "type": "setfield"
            },
            {
                "desc": " Part of custom unit selection (In the Lua Scenario Template, this can be activated in simpleSettings.lua -- enableCustomUnitSelection\nIf you're not using the Template, use as the first line inside the function given to `civ.scen.onActivateUnit(function(unit,source)-->void)`.\nThe line should be\n`gen.selectNextActiveUnit(unit,source,customWeightFn)`\n(note: if the arguments to function(unit,source)\naren't called 'unit' and 'source', use the actual name)\n\n@*param* `customWeightFn` โ returns the \"weight\" of each possible unit, and selects the lowest weight to be active next",
                "extends": {
                    "args": [
                        {
                            "desc": "A unit object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit in the game, and provides a means of interacting with it. This should not be confused with the unit type object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unit)",
                            "finish": 36220044,
                            "name": "activeUnit",
                            "start": 36220034,
                            "type": "local",
                            "view": "unitObject"
                        },
                        {
                            "desc": "A boolean is a data type native to Lua with exactly two possible values, <code>true</code> and <code>false</code>. These are often used when evaluating logical statements, but logical statements accept other values as well. All values except <code>false</code> and <code>nil</code> are considered 'truthy', even values such as 0 or the empty string.\n[Programming in Lua, 2.2 -- Booleans](https://www.lua.org/pil/2.2.html)",
                            "finish": 36220051,
                            "name": "source",
                            "start": 36220045,
                            "type": "local",
                            "view": "boolean"
                        },
                        {
                            "desc": "returns the \"weight\" of each possible unit, and selects the lowest weight to be active next",
                            "finish": 36220066,
                            "name": "customWeightFn",
                            "start": 36220052,
                            "type": "local",
                            "view": "fun(unit: unitObject, activeUnit: unitObject):integer"
                        }
                    ],
                    "desc": " Part of custom unit selection (In the Lua Scenario Template, this can be activated in simpleSettings.lua -- enableCustomUnitSelection\nIf you're not using the Template, use as the first line inside the function given to `civ.scen.onActivateUnit(function(unit,source)-->void)`.\nThe line should be\n`gen.selectNextActiveUnit(unit,source,customWeightFn)`\n(note: if the arguments to function(unit,source)\naren't called 'unit' and 'source', use the actual name)\n\n@*param* `customWeightFn` โ returns the \"weight\" of each possible unit, and selects the lowest weight to be active next",
                    "finish": 36910003,
                    "start": 36220000,
                    "type": "function",
                    "view": "function gen.selectNextActiveUnit(activeUnit: unitObject, source: boolean, customWeightFn: fun(unit: unitObject, activeUnit: unitObject):integer)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 36220033,
                "name": "selectNextActiveUnit",
                "start": 36220009,
                "type": "setfield"
            },
            {
                "desc": " The function of this byte in `city.attributes` is currently unknown.  If you discover it, please inform the Scenario League at Civfanatics.",
                "extends": {
                    "args": [
                        {
                            "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
                            "finish": 25080032,
                            "name": "city",
                            "start": 25080028,
                            "type": "local",
                            "view": "cityObject"
                        }
                    ],
                    "desc": " The function of this byte in `city.attributes` is currently unknown.  If you discover it, please inform the Scenario League at Civfanatics.",
                    "finish": 25100003,
                    "start": 25080000,
                    "type": "function",
                    "view": "function gen.setAttribute10(city: cityObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 25080027,
                "name": "setAttribute10",
                "start": 25080009,
                "type": "setfield"
            },
            {
                "desc": " The function of this byte in `city.attributes` is currently unknown.  If you discover it, please inform the Scenario League at Civfanatics.",
                "extends": {
                    "args": [
                        {
                            "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
                            "finish": 25330032,
                            "name": "city",
                            "start": 25330028,
                            "type": "local",
                            "view": "cityObject"
                        }
                    ],
                    "desc": " The function of this byte in `city.attributes` is currently unknown.  If you discover it, please inform the Scenario League at Civfanatics.",
                    "finish": 25350003,
                    "start": 25330000,
                    "type": "function",
                    "view": "function gen.setAttribute11(city: cityObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 25330027,
                "name": "setAttribute11",
                "start": 25330009,
                "type": "setfield"
            },
            {
                "desc": " The function of this byte in `city.attributes` is currently unknown.  If you discover it, please inform the Scenario League at Civfanatics.",
                "extends": {
                    "args": [
                        {
                            "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
                            "finish": 25800032,
                            "name": "city",
                            "start": 25800028,
                            "type": "local",
                            "view": "cityObject"
                        }
                    ],
                    "desc": " The function of this byte in `city.attributes` is currently unknown.  If you discover it, please inform the Scenario League at Civfanatics.",
                    "finish": 25820003,
                    "start": 25800000,
                    "type": "function",
                    "view": "function gen.setAttribute13(city: cityObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 25800027,
                "name": "setAttribute13",
                "start": 25800009,
                "type": "setfield"
            },
            {
                "desc": " The function of this byte in `city.attributes` is currently unknown.  If you discover it, please inform the Scenario League at Civfanatics.",
                "extends": {
                    "args": [
                        {
                            "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
                            "finish": 26050032,
                            "name": "city",
                            "start": 26050028,
                            "type": "local",
                            "view": "cityObject"
                        }
                    ],
                    "desc": " The function of this byte in `city.attributes` is currently unknown.  If you discover it, please inform the Scenario League at Civfanatics.",
                    "finish": 26070003,
                    "start": 26050000,
                    "type": "function",
                    "view": "function gen.setAttribute14(city: cityObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 26050027,
                "name": "setAttribute14",
                "start": 26050009,
                "type": "setfield"
            },
            {
                "desc": " The function of this byte in `city.attributes` is currently unknown.  If you discover it, please inform the Scenario League at Civfanatics.",
                "extends": {
                    "args": [
                        {
                            "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
                            "finish": 26300032,
                            "name": "city",
                            "start": 26300028,
                            "type": "local",
                            "view": "cityObject"
                        }
                    ],
                    "desc": " The function of this byte in `city.attributes` is currently unknown.  If you discover it, please inform the Scenario League at Civfanatics.",
                    "finish": 26320003,
                    "start": 26300000,
                    "type": "function",
                    "view": "function gen.setAttribute15(city: cityObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 26300027,
                "name": "setAttribute15",
                "start": 26300009,
                "type": "setfield"
            },
            {
                "desc": " The function of this byte in `city.attributes` is currently unknown.  If you discover it, please inform the Scenario League at Civfanatics.",
                "extends": {
                    "args": [
                        {
                            "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
                            "finish": 26550032,
                            "name": "city",
                            "start": 26550028,
                            "type": "local",
                            "view": "cityObject"
                        }
                    ],
                    "desc": " The function of this byte in `city.attributes` is currently unknown.  If you discover it, please inform the Scenario League at Civfanatics.",
                    "finish": 26570003,
                    "start": 26550000,
                    "type": "function",
                    "view": "function gen.setAttribute16(city: cityObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 26550027,
                "name": "setAttribute16",
                "start": 26550009,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 26890039,
                    "start": 26890021,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 26890018,
                "name": "setAttribute17",
                "start": 26890000,
                "type": "setfield"
            },
            {
                "desc": " The function of this byte in `city.attributes` is currently unknown.  If you discover it, please inform the Scenario League at Civfanatics.",
                "extends": {
                    "args": [
                        {
                            "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
                            "finish": 27050032,
                            "name": "city",
                            "start": 27050028,
                            "type": "local",
                            "view": "cityObject"
                        }
                    ],
                    "desc": " The function of this byte in `city.attributes` is currently unknown.  If you discover it, please inform the Scenario League at Civfanatics.",
                    "finish": 27070003,
                    "start": 27050000,
                    "type": "function",
                    "view": "function gen.setAttribute18(city: cityObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 27050027,
                "name": "setAttribute18",
                "start": 27050009,
                "type": "setfield"
            },
            {
                "desc": " The function of this byte in `city.attributes` is currently unknown.  If you discover it, please inform the Scenario League at Civfanatics.",
                "extends": {
                    "args": [
                        {
                            "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
                            "finish": 27300032,
                            "name": "city",
                            "start": 27300028,
                            "type": "local",
                            "view": "cityObject"
                        }
                    ],
                    "desc": " The function of this byte in `city.attributes` is currently unknown.  If you discover it, please inform the Scenario League at Civfanatics.",
                    "finish": 27320003,
                    "start": 27300000,
                    "type": "function",
                    "view": "function gen.setAttribute19(city: cityObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 27300027,
                "name": "setAttribute19",
                "start": 27300009,
                "type": "setfield"
            },
            {
                "desc": " The function of this byte in `city.attributes` is currently unknown.  If you discover it, please inform the Scenario League at Civfanatics.",
                "extends": {
                    "args": [
                        {
                            "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
                            "finish": 27550032,
                            "name": "city",
                            "start": 27550028,
                            "type": "local",
                            "view": "cityObject"
                        }
                    ],
                    "desc": " The function of this byte in `city.attributes` is currently unknown.  If you discover it, please inform the Scenario League at Civfanatics.",
                    "finish": 27570003,
                    "start": 27550000,
                    "type": "function",
                    "view": "function gen.setAttribute20(city: cityObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 27550027,
                "name": "setAttribute20",
                "start": 27550009,
                "type": "setfield"
            },
            {
                "desc": " The function of this byte in `city.attributes` is currently unknown.  If you discover it, please inform the Scenario League at Civfanatics.",
                "extends": {
                    "args": [
                        {
                            "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
                            "finish": 27800032,
                            "name": "city",
                            "start": 27800028,
                            "type": "local",
                            "view": "cityObject"
                        }
                    ],
                    "desc": " The function of this byte in `city.attributes` is currently unknown.  If you discover it, please inform the Scenario League at Civfanatics.",
                    "finish": 27820003,
                    "start": 27800000,
                    "type": "function",
                    "view": "function gen.setAttribute21(city: cityObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 27800027,
                "name": "setAttribute21",
                "start": 27800009,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 28360044,
                    "start": 28360021,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 28360018,
                "name": "setAttribute23",
                "start": 28360000,
                "type": "setfield"
            },
            {
                "desc": " The function of this byte in `city.attributes` is currently unknown.  If you discover it, please inform the Scenario League at Civfanatics.",
                "extends": {
                    "args": [
                        {
                            "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
                            "finish": 28530032,
                            "name": "city",
                            "start": 28530028,
                            "type": "local",
                            "view": "cityObject"
                        }
                    ],
                    "desc": " The function of this byte in `city.attributes` is currently unknown.  If you discover it, please inform the Scenario League at Civfanatics.",
                    "finish": 28550003,
                    "start": 28530000,
                    "type": "function",
                    "view": "function gen.setAttribute24(city: cityObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 28530027,
                "name": "setAttribute24",
                "start": 28530009,
                "type": "setfield"
            },
            {
                "desc": " The function of this byte in `city.attributes` is currently unknown.  If you discover it, please inform the Scenario League at Civfanatics.",
                "extends": {
                    "args": [
                        {
                            "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
                            "finish": 29470032,
                            "name": "city",
                            "start": 29470028,
                            "type": "local",
                            "view": "cityObject"
                        }
                    ],
                    "desc": " The function of this byte in `city.attributes` is currently unknown.  If you discover it, please inform the Scenario League at Civfanatics.",
                    "finish": 29490003,
                    "start": 29470000,
                    "type": "function",
                    "view": "function gen.setAttribute28(city: cityObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 29470027,
                "name": "setAttribute28",
                "start": 29470009,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 29990043,
                    "start": 29990021,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 29990018,
                "name": "setAttribute30",
                "start": 29990000,
                "type": "setfield"
            },
            {
                "desc": " The function of this byte in `city.attributes` is currently unknown.  If you discover it, please inform the Scenario League at Civfanatics.",
                "extends": {
                    "args": [
                        {
                            "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
                            "finish": 30220032,
                            "name": "city",
                            "start": 30220028,
                            "type": "local",
                            "view": "cityObject"
                        }
                    ],
                    "desc": " The function of this byte in `city.attributes` is currently unknown.  If you discover it, please inform the Scenario League at Civfanatics.",
                    "finish": 30240003,
                    "start": 30220000,
                    "type": "function",
                    "view": "function gen.setAttribute31(city: cityObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 30220027,
                "name": "setAttribute31",
                "start": 30220009,
                "type": "setfield"
            },
            {
                "desc": " The function of this byte in `city.attributes` is currently unknown.  If you discover it, please inform the Scenario League at Civfanatics.",
                "extends": {
                    "args": [
                        {
                            "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
                            "finish": 30470032,
                            "name": "city",
                            "start": 30470028,
                            "type": "local",
                            "view": "cityObject"
                        }
                    ],
                    "desc": " The function of this byte in `city.attributes` is currently unknown.  If you discover it, please inform the Scenario League at Civfanatics.",
                    "finish": 30490003,
                    "start": 30470000,
                    "type": "function",
                    "view": "function gen.setAttribute32(city: cityObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 30470027,
                "name": "setAttribute32",
                "start": 30470009,
                "type": "setfield"
            },
            {
                "desc": " The function of this byte in `city.attributes` is currently unknown.  If you discover it, please inform the Scenario League at Civfanatics.",
                "extends": {
                    "args": [
                        {
                            "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
                            "finish": 24110031,
                            "name": "city",
                            "start": 24110027,
                            "type": "local",
                            "view": "cityObject"
                        }
                    ],
                    "desc": " The function of this byte in `city.attributes` is currently unknown.  If you discover it, please inform the Scenario League at Civfanatics.",
                    "finish": 24130003,
                    "start": 24110000,
                    "type": "function",
                    "view": "function gen.setAttribute6(city: cityObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 24110026,
                "name": "setAttribute6",
                "start": 24110009,
                "type": "setfield"
            },
            {
                "desc": " The function of this byte in `city.attributes` is currently unknown.  If you discover it, please inform the Scenario League at Civfanatics.",
                "extends": {
                    "args": [
                        {
                            "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
                            "finish": 24360031,
                            "name": "city",
                            "start": 24360027,
                            "type": "local",
                            "view": "cityObject"
                        }
                    ],
                    "desc": " The function of this byte in `city.attributes` is currently unknown.  If you discover it, please inform the Scenario League at Civfanatics.",
                    "finish": 24380003,
                    "start": 24360000,
                    "type": "function",
                    "view": "function gen.setAttribute7(city: cityObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 24360026,
                "name": "setAttribute7",
                "start": 24360009,
                "type": "setfield"
            },
            {
                "desc": " The function of this byte in `city.attributes` is currently unknown.  If you discover it, please inform the Scenario League at Civfanatics.",
                "extends": {
                    "args": [
                        {
                            "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
                            "finish": 24830031,
                            "name": "city",
                            "start": 24830027,
                            "type": "local",
                            "view": "cityObject"
                        }
                    ],
                    "desc": " The function of this byte in `city.attributes` is currently unknown.  If you discover it, please inform the Scenario League at Civfanatics.",
                    "finish": 24850003,
                    "start": 24830000,
                    "type": "function",
                    "view": "function gen.setAttribute9(city: cityObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 24830026,
                "name": "setAttribute9",
                "start": 24830009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
                            "finish": 23860030,
                            "name": "city",
                            "start": 23860026,
                            "type": "local",
                            "view": "cityObject"
                        }
                    ],
                    "finish": 23880003,
                    "start": 23860000,
                    "type": "function",
                    "view": "function gen.setAutoBuild(city: cityObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 23860025,
                "name": "setAutoBuild",
                "start": 23860009,
                "type": "setfield"
            },
            {
                "desc": " sets bitNumber bit of the integer/bitmask to 0\n (1st bit is the bit for the ones position)\n```lua\ngen.setBit0(0b11111111,3) --> 0b11111011\n```\n note: lua does not actually accept integers specified in binary (though it does accept hexidecimal)",
                "extends": {
                    "args": [
                        {
                            "desc": "An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 7790028,
                            "name": "bitmask",
                            "start": 7790021,
                            "type": "local",
                            "view": "integer|bitmask"
                        },
                        {
                            "desc": "An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 7790038,
                            "name": "bitNumber",
                            "start": 7790029,
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "desc": " sets bitNumber bit of the integer/bitmask to 0\n (1st bit is the bit for the ones position)\n```lua\ngen.setBit0(0b11111111,3) --> 0b11111011\n```\n note: lua does not actually accept integers specified in binary (though it does accept hexidecimal)",
                    "finish": 7820003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "bitmask"
                        }
                    ],
                    "start": 7790000,
                    "type": "function",
                    "view": "function gen.setBit0(bitmask: integer|bitmask, bitNumber: integer)\n  -> bitmask"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 7790020,
                "name": "setBit0",
                "start": 7790009,
                "type": "setfield"
            },
            {
                "desc": " sets bitNumber bit of the integer/bitmask to 1\n (1st bit is the bit for the ones position)\n```lua\ngen.setBit1(0b00000000,3) --> 0b00000100\n```\n note: lua does not actually accept integers specified in binary (though it does accept hexidecimal)",
                "extends": {
                    "args": [
                        {
                            "desc": "An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 7600028,
                            "name": "bitmask",
                            "start": 7600021,
                            "type": "local",
                            "view": "integer|bitmask"
                        },
                        {
                            "desc": "An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 7600038,
                            "name": "bitNumber",
                            "start": 7600029,
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "desc": " sets bitNumber bit of the integer/bitmask to 1\n (1st bit is the bit for the ones position)\n```lua\ngen.setBit1(0b00000000,3) --> 0b00000100\n```\n note: lua does not actually accept integers specified in binary (though it does accept hexidecimal)",
                    "finish": 7630003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "bitmask"
                        }
                    ],
                    "start": 7600000,
                    "type": "function",
                    "view": "function gen.setBit1(bitmask: integer|bitmask, bitNumber: integer)\n  -> bitmask"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 7600020,
                "name": "setBit1",
                "start": 7600009,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 6800021,
                    "start": 6800014,
                    "type": "getlocal",
                    "view": "function"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 6800011,
                "name": "setBits",
                "start": 6800000,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
                            "finish": 24590033,
                            "name": "city",
                            "start": 24590029,
                            "type": "local",
                            "view": "cityObject"
                        }
                    ],
                    "finish": 24610003,
                    "start": 24590000,
                    "type": "function",
                    "view": "function gen.setBuildCoastal(city: cityObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 24590028,
                "name": "setBuildCoastal",
                "start": 24590009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
                            "finish": 25560036,
                            "name": "city",
                            "start": 25560032,
                            "type": "local",
                            "view": "cityObject"
                        }
                    ],
                    "finish": 25580003,
                    "start": 25560000,
                    "type": "function",
                    "view": "function gen.setBuildHydroPlant(city: cityObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 25560031,
                "name": "setBuildHydroPlant",
                "start": 25560009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
                            "finish": 28030031,
                            "name": "city",
                            "start": 28030027,
                            "type": "local",
                            "view": "cityObject"
                        }
                    ],
                    "finish": 28050003,
                    "start": 28030000,
                    "type": "function",
                    "view": "function gen.setBuildShips(city: cityObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 28030026,
                "name": "setBuildShips",
                "start": 28030009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
                            "finish": 28250037,
                            "name": "city",
                            "start": 28250033,
                            "type": "local",
                            "view": "cityObject"
                        }
                    ],
                    "finish": 28270003,
                    "start": 28250000,
                    "type": "function",
                    "view": "function gen.setCityInvestigated(city: cityObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 28250032,
                "name": "setCityInvestigated",
                "start": 28250009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
                            "finish": 22980034,
                            "name": "city",
                            "start": 22980030,
                            "type": "local",
                            "view": "cityObject"
                        }
                    ],
                    "finish": 23000003,
                    "start": 22980000,
                    "type": "function",
                    "view": "function gen.setCivilDisorder(city: cityObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 22980029,
                "name": "setCivilDisorder",
                "start": 22980009,
                "type": "setfield"
            },
            {
                "desc": " gen.setDeathFunctions(defeatFunction,deathFunction,deletionFunction) --> void\n Registers event functions for when units are killed/deleted.\n If you are using the Lua Scenario Template, this is already\n run in events.lua, and you do not need to use this function.\n      defeatFunction(loser,winner,aggressor,victim,loserLocation,winnerVetStatus,loserVetStatus)--> nil or unit\n          function for when a unit is defeated either in game combat or in an event representing combat\n          if a unit is returned, that is a replacement unit for demotion\n      deathFunction(dyingUnit) --> void\n          for when a unit 'dies', either in standard or event combat, or through some other event 'kill'\n      deletionFunction(deletedUnit,replacingUnit=nil) --> void\n          maintenance for when a unit is deleted, either because of combat, death, replacement or some other 'administrative' situation.  If no replacing unit, the replacingUnit argument is nil\n  registers functions to be performed when a unit is defeated (either in game combat or events)\n  or deleted by events in some other way\n      deathNoCombatFn(dyingUnit) --> void\n          for when a unit dies, but not in combat or through the gen.defeatUnit function",
                "extends": {
                    "args": [
                        {
                            "finish": 48660039,
                            "name": "defeatFn",
                            "start": 48660031,
                            "type": "local",
                            "view": "fun(loser: unitObject, winner: unitObject, aggressor: unitObject, victim: unitObject, loserLocation: tileObject, winnerVetStatus: boolean, loserVetStatus: boolean):unitObject|nil"
                        },
                        {
                            "finish": 48660047,
                            "name": "deathFn",
                            "start": 48660040,
                            "type": "local",
                            "view": "fun(dyingUnit: unitObject)"
                        },
                        {
                            "finish": 48660058,
                            "name": "deletionFn",
                            "start": 48660048,
                            "type": "local",
                            "view": "fun(deletedUnit: unitObject, replacingUnit: unitObject|nil)"
                        },
                        {
                            "finish": 48660074,
                            "name": "deathNoCombatFn",
                            "start": 48660059,
                            "type": "local",
                            "view": "fun(dyingUnit: unitObject)"
                        }
                    ],
                    "desc": " gen.setDeathFunctions(defeatFunction,deathFunction,deletionFunction) --> void\n Registers event functions for when units are killed/deleted.\n If you are using the Lua Scenario Template, this is already\n run in events.lua, and you do not need to use this function.\n      defeatFunction(loser,winner,aggressor,victim,loserLocation,winnerVetStatus,loserVetStatus)--> nil or unit\n          function for when a unit is defeated either in game combat or in an event representing combat\n          if a unit is returned, that is a replacement unit for demotion\n      deathFunction(dyingUnit) --> void\n          for when a unit 'dies', either in standard or event combat, or through some other event 'kill'\n      deletionFunction(deletedUnit,replacingUnit=nil) --> void\n          maintenance for when a unit is deleted, either because of combat, death, replacement or some other 'administrative' situation.  If no replacing unit, the replacingUnit argument is nil\n  registers functions to be performed when a unit is defeated (either in game combat or events)\n  or deleted by events in some other way\n      deathNoCombatFn(dyingUnit) --> void\n          for when a unit dies, but not in combat or through the gen.defeatUnit function",
                    "finish": 48710003,
                    "start": 48660000,
                    "type": "function",
                    "view": "function gen.setDeathFunctions(defeatFn: fun(loser: unitObject, winner: unitObject, aggressor: unitObject, victim: unitObject, loserLocation: tileObject, winnerVetStatus: boolean, loserVetStatus: boolean):unitObject|nil, deathFn: fun(dyingUnit: unitObject), deletionFn: fun(deletedUnit: unitObject, replacingUnit: unitObject|nil), deathNoCombatFn: fun(dyingUnit: unitObject))"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 48660030,
                "name": "setDeathFunctions",
                "start": 48660009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
                            "finish": 28980038,
                            "name": "city",
                            "start": 28980034,
                            "type": "local",
                            "view": "cityObject"
                        }
                    ],
                    "finish": 29000003,
                    "start": 28980000,
                    "type": "function",
                    "view": "function gen.setDomesticAutoBuild(city: cityObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 28980033,
                "name": "setDomesticAutoBuild",
                "start": 28980009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
                            "finish": 23420036,
                            "name": "city",
                            "start": 23420032,
                            "type": "local",
                            "view": "cityObject"
                        }
                    ],
                    "finish": 23440003,
                    "start": 23420000,
                    "type": "function",
                    "view": "function gen.setImprovementSold(city: cityObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 23420031,
                "name": "setImprovementSold",
                "start": 23420009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
                            "finish": 29700035,
                            "name": "city",
                            "start": 29700031,
                            "type": "local",
                            "view": "cityObject"
                        }
                    ],
                    "finish": 29750003,
                    "start": 29700000,
                    "type": "function",
                    "view": "function gen.setMajorObjective(city: cityObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 29700030,
                "name": "setMajorObjective",
                "start": 29700009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
                            "finish": 28760038,
                            "name": "city",
                            "start": 28760034,
                            "type": "local",
                            "view": "cityObject"
                        }
                    ],
                    "finish": 28780003,
                    "start": 28760000,
                    "type": "function",
                    "view": "function gen.setMilitaryAutoBuild(city: cityObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 28760033,
                "name": "setMilitaryAutoBuild",
                "start": 28760009,
                "type": "setfield"
            },
            {
                "desc": " The game sets this flag when a unit moves (even if no movement points are spent).  The Unit won't heal on next turn if this flag is set.",
                "extends": {
                    "args": [
                        {
                            "desc": "A unit object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit in the game, and provides a means of interacting with it. This should not be confused with the unit type object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unit)",
                            "finish": 19390026,
                            "name": "unit",
                            "start": 19390022,
                            "type": "local",
                            "view": "unitObject"
                        }
                    ],
                    "desc": " The game sets this flag when a unit moves (even if no movement points are spent).  The Unit won't heal on next turn if this flag is set.",
                    "finish": 19410003,
                    "start": 19390000,
                    "type": "function",
                    "view": "function gen.setMoved(unit: unitObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 19390021,
                "name": "setMoved",
                "start": 19390009,
                "type": "setfield"
            },
            {
                "desc": " Tells gen.playMusic to look in this directory for music files.\n In the Lua Scenario Template, the directory is <MainScenarioDirectory>\\Sound",
                "extends": {
                    "args": [
                        {
                            "desc": "A string is a data type native to Lua which consists of a sequence of characters. These often represent text to be displayed, but are also useful in other contexts. Strings are commonly used as keys in tables, since they make code more readable.\n[Programming in Lua, 2.4 -- Strings](https://www.lua.org/pil/2.4.html)",
                            "finish": 46050035,
                            "name": "path",
                            "start": 46050031,
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": " Tells gen.playMusic to look in this directory for music files.\n In the Lua Scenario Template, the directory is <MainScenarioDirectory>\\Sound",
                    "finish": 46070003,
                    "start": 46050000,
                    "type": "function",
                    "view": "function gen.setMusicDirectory(path: string)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 46050030,
                "name": "setMusicDirectory",
                "start": 46050009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
                            "finish": 29200030,
                            "name": "city",
                            "start": 29200026,
                            "type": "local",
                            "view": "cityObject"
                        }
                    ],
                    "finish": 29250003,
                    "start": 29200000,
                    "type": "function",
                    "view": "function gen.setObjective(city: cityObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 29200025,
                "name": "setObjective",
                "start": 29200009,
                "type": "setfield"
            },
            {
                "desc": " This function registers what happens when Lua code causes a\n unit to be destroyed because it is 'out of range/fuel'.  This could be\n because events expended the last movement points of an aircraft,\n or because land/sea units have been given a range using Lua.  \n (No code is run when the standard game detects an aircraft to be\n out of range)<br><br>\n If `textOrFunction` is a string, the text is shown when a unit is \n lost due to being out of range, with %STRING1 substitutes for the unit type's name.  `title` provides the title for the box.\n\n If `textOrFunction` is a `function(unit) -> void`, the\n function is exectued, and is trusted to generate the \n the function is trusted to generate a suitable message.\n <br><br> In the Lua Scenario Template, this function is called in `parameters.lua`",
                "extends": {
                    "args": [
                        {
                            "desc": "A string is a data type native to Lua which consists of a sequence of characters. These often represent text to be displayed, but are also useful in other contexts. Strings are commonly used as keys in tables, since they make code more readable.\n[Programming in Lua, 2.4 -- Strings](https://www.lua.org/pil/2.4.html)",
                            "finish": 74050048,
                            "name": "textOrFunction",
                            "start": 74050034,
                            "type": "local",
                            "view": "string|fun(unit: unitObject)"
                        },
                        {
                            "desc": "A string is a data type native to Lua which consists of a sequence of characters. These often represent text to be displayed, but are also useful in other contexts. Strings are commonly used as keys in tables, since they make code more readable.\n[Programming in Lua, 2.4 -- Strings](https://www.lua.org/pil/2.4.html)",
                            "finish": 74050054,
                            "name": "title",
                            "start": 74050049,
                            "type": "local",
                            "view": "(string|nil)?"
                        }
                    ],
                    "desc": " This function registers what happens when Lua code causes a\n unit to be destroyed because it is 'out of range/fuel'.  This could be\n because events expended the last movement points of an aircraft,\n or because land/sea units have been given a range using Lua.  \n (No code is run when the standard game detects an aircraft to be\n out of range)<br><br>\n If `textOrFunction` is a string, the text is shown when a unit is \n lost due to being out of range, with %STRING1 substitutes for the unit type's name.  `title` provides the title for the box.\n\n If `textOrFunction` is a `function(unit) -> void`, the\n function is exectued, and is trusted to generate the \n the function is trusted to generate a suitable message.\n <br><br> In the Lua Scenario Template, this function is called in `parameters.lua`",
                    "finish": 74250003,
                    "start": 74050000,
                    "type": "function",
                    "view": "function gen.setOutOfRangeMessage(textOrFunction: string|fun(unit: unitObject), title?: string)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 74050033,
                "name": "setOutOfRangeMessage",
                "start": 74050009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A unit object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit in the game, and provides a means of interacting with it. This should not be confused with the unit type object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unit)",
                            "finish": 19180032,
                            "name": "unit",
                            "start": 19180028,
                            "type": "local",
                            "view": "unitObject"
                        }
                    ],
                    "finish": 19200003,
                    "start": 19180000,
                    "type": "function",
                    "view": "function gen.setParadropped(unit: unitObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 19180027,
                "name": "setParadropped",
                "start": 19180009,
                "type": "setfield"
            },
            {
                "desc": " Registers `directory` as the path to the current scenario's main directory.  This value is returned by `gen.getScenarioDirectory()`.  If you are using the Lua Scenario Template, this is handled in events.lua, and you do not need to worry about it.",
                "extends": {
                    "args": [
                        {
                            "desc": "A string is a data type native to Lua which consists of a sequence of characters. These often represent text to be displayed, but are also useful in other contexts. Strings are commonly used as keys in tables, since they make code more readable.\n[Programming in Lua, 2.4 -- Strings](https://www.lua.org/pil/2.4.html)",
                            "finish": 66950043,
                            "name": "directory",
                            "start": 66950034,
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": " Registers `directory` as the path to the current scenario's main directory.  This value is returned by `gen.getScenarioDirectory()`.  If you are using the Lua Scenario Template, this is handled in events.lua, and you do not need to worry about it.",
                    "finish": 67010003,
                    "start": 66950000,
                    "type": "function",
                    "view": "function gen.setScenarioDirectory(directory: string)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 66950033,
                "name": "setScenarioDirectory",
                "start": 66950009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
                            "finish": 23640037,
                            "name": "city",
                            "start": 23640033,
                            "type": "local",
                            "view": "cityObject"
                        }
                    ],
                    "finish": 23660003,
                    "start": 23640000,
                    "type": "function",
                    "view": "function gen.setTechnologyStolen(city: cityObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 23640032,
                "name": "setTechnologyStolen",
                "start": 23640009,
                "type": "setfield"
            },
            {
                "desc": " changes the terrain type of tile to terrainID\n have this function, so that if\n terrainType key functionality is changed, this\n function can change instead of all code everywhere\n\n@*param* `tile` โ Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)\n\n@*param* `terrainID` โ the id (0-15) of the new baseTerrain type",
                "extends": {
                    "args": [
                        {
                            "desc": "Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                            "finish": 16680032,
                            "name": "tile",
                            "start": 16680028,
                            "type": "local",
                            "view": "table|tileObject"
                        },
                        {
                            "desc": "the id (0-15) of the new baseTerrain type",
                            "finish": 16680042,
                            "name": "terrainID",
                            "start": 16680033,
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "desc": " changes the terrain type of tile to terrainID\n have this function, so that if\n terrainType key functionality is changed, this\n function can change instead of all code everywhere\n\n@*param* `tile` โ Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)\n\n@*param* `terrainID` โ the id (0-15) of the new baseTerrain type",
                    "finish": 16720003,
                    "start": 16680000,
                    "type": "function",
                    "view": "function gen.setTerrainType(tile: table|tileObject, terrainID: integer)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 16680027,
                "name": "setTerrainType",
                "start": 16680009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A unit object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit in the game, and provides a means of interacting with it. This should not be confused with the unit type object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unit)",
                            "finish": 18220038,
                            "name": "unit",
                            "start": 18220034,
                            "type": "local",
                            "view": "unitObject"
                        }
                    ],
                    "finish": 18240003,
                    "start": 18220000,
                    "type": "function",
                    "view": "function gen.setToBuildingAirbase(unit: unitObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 18220033,
                "name": "setToBuildingAirbase",
                "start": 18220009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A unit object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit in the game, and provides a means of interacting with it. This should not be confused with the unit type object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unit)",
                            "finish": 17320039,
                            "name": "unit",
                            "start": 17320035,
                            "type": "local",
                            "view": "unitObject"
                        }
                    ],
                    "finish": 17340003,
                    "start": 17320000,
                    "type": "function",
                    "view": "function gen.setToBuildingFortress(unit: unitObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 17320034,
                "name": "setToBuildingFortress",
                "start": 17320009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A unit object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit in the game, and provides a means of interacting with it. This should not be confused with the unit type object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unit)",
                            "finish": 17470035,
                            "name": "unit",
                            "start": 17470031,
                            "type": "local",
                            "view": "unitObject"
                        }
                    ],
                    "finish": 17490003,
                    "start": 17470000,
                    "type": "function",
                    "view": "function gen.setToBuildingRoad(unit: unitObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 17470030,
                "name": "setToBuildingRoad",
                "start": 17470009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A unit object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit in the game, and provides a means of interacting with it. This should not be confused with the unit type object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unit)",
                            "finish": 18370042,
                            "name": "unit",
                            "start": 18370038,
                            "type": "local",
                            "view": "unitObject"
                        }
                    ],
                    "finish": 18390003,
                    "start": 18370000,
                    "type": "function",
                    "view": "function gen.setToBuildingTransporter(unit: unitObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 18370037,
                "name": "setToBuildingTransporter",
                "start": 18370009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A unit object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit in the game, and provides a means of interacting with it. This should not be confused with the unit type object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unit)",
                            "finish": 18080040,
                            "name": "unit",
                            "start": 18080036,
                            "type": "local",
                            "view": "unitObject"
                        }
                    ],
                    "finish": 18100003,
                    "start": 18080000,
                    "type": "function",
                    "view": "function gen.setToCleaningPollution(unit: unitObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 18080035,
                "name": "setToCleaningPollution",
                "start": 18080009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A unit object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit in the game, and provides a means of interacting with it. This should not be confused with the unit type object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unit)",
                            "finish": 17010032,
                            "name": "unit",
                            "start": 17010028,
                            "type": "local",
                            "view": "unitObject"
                        }
                    ],
                    "finish": 17030003,
                    "start": 17010000,
                    "type": "function",
                    "view": "function gen.setToFortified(unit: unitObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 17010027,
                "name": "setToFortified",
                "start": 17010009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A unit object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit in the game, and provides a means of interacting with it. This should not be confused with the unit type object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unit)",
                            "finish": 16860033,
                            "name": "unit",
                            "start": 16860029,
                            "type": "local",
                            "view": "unitObject"
                        }
                    ],
                    "finish": 16880003,
                    "start": 16860000,
                    "type": "function",
                    "view": "function gen.setToFortifying(unit: unitObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 16860028,
                "name": "setToFortifying",
                "start": 16860009,
                "type": "setfield"
            },
            {
                "desc": " gives the unit a goto order for the tile\n if nil is submitted, and the unit already\n has a goto order, the unit will be changed to no orders\n (unit.gotoTile=nil results in an error)\n if the unit has some other order, it will keep that order\n note: this also accepts a table of coordinates as a tile\n (just as all other tile functions do here)\n\n@*param* `tile` โ if table, the table must be a tile of coordinates",
                "extends": {
                    "args": [
                        {
                            "desc": "A unit object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit in the game, and provides a means of interacting with it. This should not be confused with the unit type object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unit)",
                            "finish": 18610030,
                            "name": "unit",
                            "start": 18610026,
                            "type": "local",
                            "view": "unitObject"
                        },
                        {
                            "desc": "if table, the table must be a tile of coordinates",
                            "finish": 18610035,
                            "name": "tile",
                            "start": 18610031,
                            "type": "local",
                            "view": "table|tileObject|nil"
                        }
                    ],
                    "desc": " gives the unit a goto order for the tile\n if nil is submitted, and the unit already\n has a goto order, the unit will be changed to no orders\n (unit.gotoTile=nil results in an error)\n if the unit has some other order, it will keep that order\n note: this also accepts a table of coordinates as a tile\n (just as all other tile functions do here)\n\n@*param* `tile` โ if table, the table must be a tile of coordinates",
                    "finish": 18700003,
                    "start": 18610000,
                    "type": "function",
                    "view": "function gen.setToGoingTo(unit: unitObject, tile: table|tileObject|nil)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 18610025,
                "name": "setToGoingTo",
                "start": 18610009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A unit object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit in the game, and provides a means of interacting with it. This should not be confused with the unit type object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unit)",
                            "finish": 17630033,
                            "name": "unit",
                            "start": 17630029,
                            "type": "local",
                            "view": "unitObject"
                        }
                    ],
                    "finish": 17650003,
                    "start": 17630000,
                    "type": "function",
                    "view": "function gen.setToIrrigating(unit: unitObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 17630028,
                "name": "setToIrrigating",
                "start": 17630009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A unit object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit in the game, and provides a means of interacting with it. This should not be confused with the unit type object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unit)",
                            "finish": 17780029,
                            "name": "unit",
                            "start": 17780025,
                            "type": "local",
                            "view": "unitObject"
                        }
                    ],
                    "finish": 17800003,
                    "start": 17780000,
                    "type": "function",
                    "view": "function gen.setToMining(unit: unitObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 17780024,
                "name": "setToMining",
                "start": 17780009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A unit object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit in the game, and provides a means of interacting with it. This should not be confused with the unit type object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unit)",
                            "finish": 18830031,
                            "name": "unit",
                            "start": 18830027,
                            "type": "local",
                            "view": "unitObject"
                        }
                    ],
                    "finish": 18850003,
                    "start": 18830000,
                    "type": "function",
                    "view": "function gen.setToNoOrders(unit: unitObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 18830026,
                "name": "setToNoOrders",
                "start": 18830009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A unit object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit in the game, and provides a means of interacting with it. This should not be confused with the unit type object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unit)",
                            "finish": 17160031,
                            "name": "unit",
                            "start": 17160027,
                            "type": "local",
                            "view": "unitObject"
                        }
                    ],
                    "finish": 17180003,
                    "start": 17160000,
                    "type": "function",
                    "view": "function gen.setToSleeping(unit: unitObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 17160026,
                "name": "setToSleeping",
                "start": 17160009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A unit object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit in the game, and provides a means of interacting with it. This should not be confused with the unit type object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unit)",
                            "finish": 17930042,
                            "name": "unit",
                            "start": 17930038,
                            "type": "local",
                            "view": "unitObject"
                        }
                    ],
                    "finish": 17950003,
                    "start": 17930000,
                    "type": "function",
                    "view": "function gen.setToTransformingTerrain(unit: unitObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 17930037,
                "name": "setToTransformingTerrain",
                "start": 17930009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A unit object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit in the game, and provides a means of interacting with it. This should not be confused with the unit type object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unit)",
                            "finish": 18970030,
                            "name": "unit",
                            "start": 18970026,
                            "type": "local",
                            "view": "unitObject"
                        }
                    ],
                    "finish": 19000003,
                    "start": 18970000,
                    "type": "function",
                    "view": "function gen.setToWaiting(unit: unitObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 18970025,
                "name": "setToWaiting",
                "start": 18970009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
                            "finish": 26780032,
                            "name": "city",
                            "start": 26780028,
                            "type": "local",
                            "view": "cityObject"
                        }
                    ],
                    "finish": 26800003,
                    "start": 26780000,
                    "type": "function",
                    "view": "function gen.setUsedAirport(city: cityObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 26780027,
                "name": "setUsedAirport",
                "start": 26780009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
                            "finish": 29960036,
                            "name": "city",
                            "start": 29960032,
                            "type": "local",
                            "view": "cityObject"
                        }
                    ],
                    "finish": 29980003,
                    "start": 29960000,
                    "type": "function",
                    "view": "function gen.setUsedTransporter(city: cityObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 29960031,
                "name": "setUsedTransporter",
                "start": 29960009,
                "type": "setfield"
            },
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A city object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a city in the game, and provides a means of interacting with that city.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#city)",
                            "finish": 23200034,
                            "name": "city",
                            "start": 23200030,
                            "type": "local",
                            "view": "cityObject"
                        }
                    ],
                    "finish": 23220003,
                    "start": 23200000,
                    "type": "function",
                    "view": "function gen.setWeLoveTheKing(city: cityObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 23200029,
                "name": "setWeLoveTheKing",
                "start": 23200009,
                "type": "setfield"
            },
            {
                "desc": " Reapplies the charting functions for all markers\n on all tiles for all players.  If topMarkerType isn't nil,\n that marker type is applied last again, in case there\n are conflicting markers.\n The secondMarkerType is applied just before the top marker type.\n\n@*param* `topMarkerType` โ Valid marker options are \"irrigation\", \"mine\", \"farmland\", \"road\", \"railroad\", \"fortress\", \"airbase\", \"pollution\", \"transporter\".\n\n@*param* `secondMarkerType` โ Valid marker options are \"irrigation\", \"mine\", \"farmland\", \"road\", \"railroad\", \"fortress\", \"airbase\", \"pollution\", \"transporter\".",
                "extends": {
                    "args": [
                        {
                            "desc": "Valid marker options are \"irrigation\", \"mine\", \"farmland\", \"road\", \"railroad\", \"fortress\", \"airbase\", \"pollution\", \"transporter\".",
                            "finish": 72380041,
                            "name": "topMarkerType",
                            "start": 72380028,
                            "type": "local",
                            "view": "markerOptions|nil"
                        },
                        {
                            "desc": "Valid marker options are \"irrigation\", \"mine\", \"farmland\", \"road\", \"railroad\", \"fortress\", \"airbase\", \"pollution\", \"transporter\".",
                            "finish": 72380058,
                            "name": "secondMarkerType",
                            "start": 72380042,
                            "type": "local",
                            "view": "markerOptions|nil"
                        }
                    ],
                    "desc": " Reapplies the charting functions for all markers\n on all tiles for all players.  If topMarkerType isn't nil,\n that marker type is applied last again, in case there\n are conflicting markers.\n The secondMarkerType is applied just before the top marker type.\n\n@*param* `topMarkerType` โ Valid marker options are \"irrigation\", \"mine\", \"farmland\", \"road\", \"railroad\", \"fortress\", \"airbase\", \"pollution\", \"transporter\".\n\n@*param* `secondMarkerType` โ Valid marker options are \"irrigation\", \"mine\", \"farmland\", \"road\", \"railroad\", \"fortress\", \"airbase\", \"pollution\", \"transporter\".",
                    "finish": 72510003,
                    "start": 72380000,
                    "type": "function",
                    "view": "function gen.showAllMarkers(topMarkerType: markerOptions|nil, secondMarkerType: markerOptions|nil)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 72380027,
                "name": "showAllMarkers",
                "start": 72380009,
                "type": "setfield"
            },
            {
                "desc": " Reapplies the charting functions for all markers\n on the tile for all players.  If topMarkerType isnt\n nil, that marker type is applied again last, in case\n there are conflicting markers.\n The secondMarkerType is applied just before the top marker type.\n\n@*param* `topMarkerType` โ Valid marker options are \"irrigation\", \"mine\", \"farmland\", \"road\", \"railroad\", \"fortress\", \"airbase\", \"pollution\", \"transporter\".\n\n@*param* `secondMarkerType` โ Valid marker options are \"irrigation\", \"mine\", \"farmland\", \"road\", \"railroad\", \"fortress\", \"airbase\", \"pollution\", \"transporter\".",
                "extends": {
                    "args": [
                        {
                            "desc": "A tile object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a map \"square\" in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tile)",
                            "finish": 72150038,
                            "name": "tile",
                            "start": 72150034,
                            "type": "local",
                            "view": "tileObject"
                        },
                        {
                            "desc": "Valid marker options are \"irrigation\", \"mine\", \"farmland\", \"road\", \"railroad\", \"fortress\", \"airbase\", \"pollution\", \"transporter\".",
                            "finish": 72150052,
                            "name": "topMarkerType",
                            "start": 72150039,
                            "type": "local",
                            "view": "markerOptions|nil"
                        },
                        {
                            "desc": "Valid marker options are \"irrigation\", \"mine\", \"farmland\", \"road\", \"railroad\", \"fortress\", \"airbase\", \"pollution\", \"transporter\".",
                            "finish": 72150069,
                            "name": "secondMarkerType",
                            "start": 72150053,
                            "type": "local",
                            "view": "markerOptions|nil"
                        }
                    ],
                    "desc": " Reapplies the charting functions for all markers\n on the tile for all players.  If topMarkerType isnt\n nil, that marker type is applied again last, in case\n there are conflicting markers.\n The secondMarkerType is applied just before the top marker type.\n\n@*param* `topMarkerType` โ Valid marker options are \"irrigation\", \"mine\", \"farmland\", \"road\", \"railroad\", \"fortress\", \"airbase\", \"pollution\", \"transporter\".\n\n@*param* `secondMarkerType` โ Valid marker options are \"irrigation\", \"mine\", \"farmland\", \"road\", \"railroad\", \"fortress\", \"airbase\", \"pollution\", \"transporter\".",
                    "finish": 72270003,
                    "start": 72150000,
                    "type": "function",
                    "view": "function gen.showAllMarkersOnTile(tile: tileObject, topMarkerType: markerOptions|nil, secondMarkerType: markerOptions|nil)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 72150033,
                "name": "showAllMarkersOnTile",
                "start": 72150009,
                "type": "setfield"
            },
            {
                "desc": " Shows the `markerType` for the `tribe` on the `tile`, if the marker is on the `tile`.\n\n@*param* `markerType` โ Valid marker options are \"irrigation\", \"mine\", \"farmland\", \"road\", \"railroad\", \"fortress\", \"airbase\", \"pollution\", \"transporter\".",
                "extends": {
                    "args": [
                        {
                            "desc": "A tile object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a map \"square\" in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tile)",
                            "finish": 73600028,
                            "name": "tile",
                            "start": 73600024,
                            "type": "local",
                            "view": "tileObject"
                        },
                        {
                            "desc": "A tribe object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a tribe, which is to say the characteristics of the tribe overall, in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tribe)",
                            "finish": 73600034,
                            "name": "tribe",
                            "start": 73600029,
                            "type": "local",
                            "view": "tribeObject"
                        },
                        {
                            "desc": "Valid marker options are \"irrigation\", \"mine\", \"farmland\", \"road\", \"railroad\", \"fortress\", \"airbase\", \"pollution\", \"transporter\".",
                            "finish": 73600045,
                            "name": "markerType",
                            "start": 73600035,
                            "type": "local",
                            "view": "markerOptions"
                        }
                    ],
                    "desc": " Shows the `markerType` for the `tribe` on the `tile`, if the marker is on the `tile`.\n\n@*param* `markerType` โ Valid marker options are \"irrigation\", \"mine\", \"farmland\", \"road\", \"railroad\", \"fortress\", \"airbase\", \"pollution\", \"transporter\".",
                    "finish": 73640003,
                    "start": 73600000,
                    "type": "function",
                    "view": "function gen.showMarker(tile: tileObject, tribe: tribeObject, markerType: markerOptions)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 73600023,
                "name": "showMarker",
                "start": 73600009,
                "type": "setfield"
            },
            {
                "desc": " Shows the `markerType` to `tribe` on all tiles where it exists.\n\n@*param* `markerType` โ Valid marker options are \"irrigation\", \"mine\", \"farmland\", \"road\", \"railroad\", \"fortress\", \"airbase\", \"pollution\", \"transporter\".",
                "extends": {
                    "args": [
                        {
                            "desc": "A tribe object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a tribe, which is to say the characteristics of the tribe overall, in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tribe)",
                            "finish": 73700039,
                            "name": "tribe",
                            "start": 73700034,
                            "type": "local",
                            "view": "tribeObject"
                        },
                        {
                            "desc": "Valid marker options are \"irrigation\", \"mine\", \"farmland\", \"road\", \"railroad\", \"fortress\", \"airbase\", \"pollution\", \"transporter\".",
                            "finish": 73700050,
                            "name": "markerType",
                            "start": 73700040,
                            "type": "local",
                            "view": "markerOptions"
                        }
                    ],
                    "desc": " Shows the `markerType` to `tribe` on all tiles where it exists.\n\n@*param* `markerType` โ Valid marker options are \"irrigation\", \"mine\", \"farmland\", \"road\", \"railroad\", \"fortress\", \"airbase\", \"pollution\", \"transporter\".",
                    "finish": 73740003,
                    "start": 73700000,
                    "type": "function",
                    "view": "function gen.showMarkerOnAllTiles(tribe: tribeObject, markerType: markerOptions)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 73700033,
                "name": "showMarkerOnAllTiles",
                "start": 73700009,
                "type": "setfield"
            },
            {
                "desc": " Increases the expended movement of the `unit` by `points`.\n If the unit has a range (either natural or through `gen.activateRangeForLandAndSea`) and\n uses up all its movement for the current turn, its domainSpec is incremented by 1\n and the unit is killed if it is out of range.\n (Exceptions: if the unit is the currently active unit and is a land or sea unit\n with range, it won't increment domainSpec, since that is caught immediately\n afterward with onFinalOrderGiven. A unit that has already spent its full movement allowance before the modifier is applied also won't increment)\n By default, 'full' unit movement points are used, but a different `multiplier` can be specified \n e.g. 1 if you want to spend atomic movement points.\n If points is negative, movement is restored to the unit.\n If points is not an integer, math.floor(points*multiplier) is used.\n Final move spent is bound between maxSpent and minSpent, which are by default\n 255 and 0 respectively.\n\n@*param* `maxSpent` โ default is 255\n\n@*param* `minSpent` โ default is 0",
                "extends": {
                    "args": [
                        {
                            "desc": "A unit object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit in the game, and provides a means of interacting with it. This should not be confused with the unit type object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unit)",
                            "finish": 75570037,
                            "name": "unit",
                            "start": 75570033,
                            "type": "local",
                            "view": "unitObject"
                        },
                        {
                            "desc": "A number is a data type native to Lua, which allows numerical computations to be performed. Fundamentally, Lua does not have separate data types for integers and numbers with a component after the decimal point, so any integer is also a number.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 75570044,
                            "name": "points",
                            "start": 75570038,
                            "type": "local",
                            "view": "number"
                        },
                        {
                            "desc": "An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 75570055,
                            "name": "multiplier",
                            "start": 75570045,
                            "type": "local",
                            "view": "integer?"
                        },
                        {
                            "desc": "default is 255",
                            "finish": 75570064,
                            "name": "maxSpent",
                            "start": 75570056,
                            "type": "local",
                            "view": "integer?"
                        },
                        {
                            "desc": "default is 0",
                            "finish": 75570073,
                            "name": "minSpent",
                            "start": 75570065,
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": " Increases the expended movement of the `unit` by `points`.\n If the unit has a range (either natural or through `gen.activateRangeForLandAndSea`) and\n uses up all its movement for the current turn, its domainSpec is incremented by 1\n and the unit is killed if it is out of range.\n (Exceptions: if the unit is the currently active unit and is a land or sea unit\n with range, it won't increment domainSpec, since that is caught immediately\n afterward with onFinalOrderGiven. A unit that has already spent its full movement allowance before the modifier is applied also won't increment)\n By default, 'full' unit movement points are used, but a different `multiplier` can be specified \n e.g. 1 if you want to spend atomic movement points.\n If points is negative, movement is restored to the unit.\n If points is not an integer, math.floor(points*multiplier) is used.\n Final move spent is bound between maxSpent and minSpent, which are by default\n 255 and 0 respectively.\n\n@*param* `maxSpent` โ default is 255\n\n@*param* `minSpent` โ default is 0",
                    "finish": 75990003,
                    "start": 75570000,
                    "type": "function",
                    "view": "function gen.spendMovementPoints(unit: unitObject, points: number, multiplier?: integer, maxSpent?: integer, minSpent?: integer)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 75570032,
                "name": "spendMovementPoints",
                "start": 75570009,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 83230046,
                    "start": 83230017,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 83230014,
                "name": "tableOfVDI",
                "start": 83230000,
                "type": "setfield"
            },
            {
                "desc": "  Takes a valueSpecification, and returns a valueSpecification where\n  the valid data is a table where all values are of the\n  submitted valueSpecification.\n\n@*param* `valueSpecification` โ A valueSpecification is a table with the following keys and values:<br><br>[\"nil\"] = true or nil<br>If this key is true, the specified value can be nil.<br><br>[\"boolean\"] = true, \"true\", \"false\", or nil<br>If this key is true (boolean value), the specified value can be a boolean.<br>If this key is \"true\" (string), then the specified value can be true, but not false.<br>If this key is \"false\" (string), then the specified value can be false, but not true.<br>If this key is nil, the specified value can't be a boolean.<br><br>[\"function\"] = true, string, or nil<br>if this key is true or string, the specified value can be a function.<br>If string, the string describes the function, e.g. `function(unit)-->number`.  Value specification checks do not check if the function actually matches the description, only that it is a function.<br>If this key is nil, the specified value can't be a function.<br><br>[\"number\"] = true or nil or {minVal=number/nil, maxVal=number/nil, integer=true/nil}<br>If true, the specified value can be any number.  If nil, the specified value can't be a number.<br>If table, any number must also be larger than the `minVal` (if specified) and smaller than the `maxVal` (if specified).  If the `integer` key is true, the value must also be an integer.<br><br>[\"string\"] = true or {[validString] = truthy} or nil<br>If this key is true, any string is allowed.<br>If it is a table, any string value must be a key in that table, with a truthy (anything other than false/nil) associated value.<br>If nil, the value can't be a string.<br><br>[\"table\"]=string, true, nil, or {[1]=function(table)->true or string, [2]=string}<br>If the key is a string, any table is accepted, and the string describes the kind of table needed.<br>If true, any table is accepted, and a generated description will be 'table'.<br>If the key is a table, the table's value for `1` is a function, which returns true if specified value is an acceptable table, and a string describing the problem if it is not.  The value for `2` is a string describing the required table, for generated descriptions/errors.<br>If nil, the specified value can't be a table.<br><br>[\"userdata\"] = {[dataTypeName]=isDataTypeFn} or nil<br>The keys to this table are strings that describe acceptable userdata, and the values are functions which return true if the specified value matches the type, and false otherwise.<br>E.g.<br>`{[\"unitTypeObject\"] = civ.isUnitType, [\"cityObject\"] = civ.isCity}`<br>Allows unitTypeObjects and cityObjects, but not other kinds of userdata.",
                "extends": {
                    "args": [
                        {
                            "desc": "A valueSpecification is a table with the following keys and values:<br><br>[\"nil\"] = true or nil<br>If this key is true, the specified value can be nil.<br><br>[\"boolean\"] = true, \"true\", \"false\", or nil<br>If this key is true (boolean value), the specified value can be a boolean.<br>If this key is \"true\" (string), then the specified value can be true, but not false.<br>If this key is \"false\" (string), then the specified value can be false, but not true.<br>If this key is nil, the specified value can't be a boolean.<br><br>[\"function\"] = true, string, or nil<br>if this key is true or string, the specified value can be a function.<br>If string, the string describes the function, e.g. `function(unit)-->number`.  Value specification checks do not check if the function actually matches the description, only that it is a function.<br>If this key is nil, the specified value can't be a function.<br><br>[\"number\"] = true or nil or {minVal=number/nil, maxVal=number/nil, integer=true/nil}<br>If true, the specified value can be any number.  If nil, the specified value can't be a number.<br>If table, any number must also be larger than the `minVal` (if specified) and smaller than the `maxVal` (if specified).  If the `integer` key is true, the value must also be an integer.<br><br>[\"string\"] = true or {[validString] = truthy} or nil<br>If this key is true, any string is allowed.<br>If it is a table, any string value must be a key in that table, with a truthy (anything other than false/nil) associated value.<br>If nil, the value can't be a string.<br><br>[\"table\"]=string, true, nil, or {[1]=function(table)->true or string, [2]=string}<br>If the key is a string, any table is accepted, and the string describes the kind of table needed.<br>If true, any table is accepted, and a generated description will be 'table'.<br>If the key is a table, the table's value for `1` is a function, which returns true if specified value is an acceptable table, and a string describing the problem if it is not.  The value for `2` is a string describing the required table, for generated descriptions/errors.<br>If nil, the specified value can't be a table.<br><br>[\"userdata\"] = {[dataTypeName]=isDataTypeFn} or nil<br>The keys to this table are strings that describe acceptable userdata, and the values are functions which return true if the specified value matches the type, and false otherwise.<br>E.g.<br>`{[\"unitTypeObject\"] = civ.isUnitType, [\"cityObject\"] = civ.isCity}`<br>Allows unitTypeObjects and cityObjects, but not other kinds of userdata.",
                            "finish": 83100057,
                            "name": "valueSpecification",
                            "start": 83100039,
                            "type": "local",
                            "view": "table"
                        }
                    ],
                    "desc": "  Takes a valueSpecification, and returns a valueSpecification where\n  the valid data is a table where all values are of the\n  submitted valueSpecification.\n\n@*param* `valueSpecification` โ A valueSpecification is a table with the following keys and values:<br><br>[\"nil\"] = true or nil<br>If this key is true, the specified value can be nil.<br><br>[\"boolean\"] = true, \"true\", \"false\", or nil<br>If this key is true (boolean value), the specified value can be a boolean.<br>If this key is \"true\" (string), then the specified value can be true, but not false.<br>If this key is \"false\" (string), then the specified value can be false, but not true.<br>If this key is nil, the specified value can't be a boolean.<br><br>[\"function\"] = true, string, or nil<br>if this key is true or string, the specified value can be a function.<br>If string, the string describes the function, e.g. `function(unit)-->number`.  Value specification checks do not check if the function actually matches the description, only that it is a function.<br>If this key is nil, the specified value can't be a function.<br><br>[\"number\"] = true or nil or {minVal=number/nil, maxVal=number/nil, integer=true/nil}<br>If true, the specified value can be any number.  If nil, the specified value can't be a number.<br>If table, any number must also be larger than the `minVal` (if specified) and smaller than the `maxVal` (if specified).  If the `integer` key is true, the value must also be an integer.<br><br>[\"string\"] = true or {[validString] = truthy} or nil<br>If this key is true, any string is allowed.<br>If it is a table, any string value must be a key in that table, with a truthy (anything other than false/nil) associated value.<br>If nil, the value can't be a string.<br><br>[\"table\"]=string, true, nil, or {[1]=function(table)->true or string, [2]=string}<br>If the key is a string, any table is accepted, and the string describes the kind of table needed.<br>If true, any table is accepted, and a generated description will be 'table'.<br>If the key is a table, the table's value for `1` is a function, which returns true if specified value is an acceptable table, and a string describing the problem if it is not.  The value for `2` is a string describing the required table, for generated descriptions/errors.<br>If nil, the specified value can't be a table.<br><br>[\"userdata\"] = {[dataTypeName]=isDataTypeFn} or nil<br>The keys to this table are strings that describe acceptable userdata, and the values are functions which return true if the specified value matches the type, and false otherwise.<br>E.g.<br>`{[\"unitTypeObject\"] = civ.isUnitType, [\"cityObject\"] = civ.isCity}`<br>Allows unitTypeObjects and cityObjects, but not other kinds of userdata.",
                    "finish": 83220003,
                    "returns": [
                        {
                            "name": "valueSpecification",
                            "type": "function.return",
                            "view": "table"
                        }
                    ],
                    "start": 83100000,
                    "type": "function",
                    "view": "function gen.tableOfValueSpecification(valueSpecification: table)\n  -> valueSpecification: table"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 83100038,
                "name": "tableOfValueSpecification",
                "start": 83100009,
                "type": "setfield"
            },
            {
                "desc": " gen.tableToString(table)\n Returns a string showing values in a table.\n\n@*param* `table` โ Although this is meant to be used on a table, any kind of value can be provided.  For non-table values, the `tostring` command is used.\n\n@*return* โ A representation of the table.",
                "extends": {
                    "args": [
                        {
                            "desc": "Although this is meant to be used on a table, any kind of value can be provided.  For non-table values, the `tostring` command is used.",
                            "finish": 76930032,
                            "name": "table",
                            "start": 76930027,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": " gen.tableToString(table)\n Returns a string showing values in a table.\n\n@*param* `table` โ Although this is meant to be used on a table, any kind of value can be provided.  For non-table values, the `tostring` command is used.\n\n@*return* โ A representation of the table.",
                    "finish": 77150003,
                    "returns": [
                        {
                            "desc": "A representation of the table.",
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": 76930000,
                    "type": "function",
                    "view": "function gen.tableToString(table: any)\n  -> string"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 76930026,
                "name": "tableToString",
                "start": 76930009,
                "type": "setfield"
            },
            {
                "desc": " gen.tableWrap(item)-->table\n If item is a table, return the table\n otherwise, return a table with the item as element 1.\n This is useful so that functions can accept either a single\n element or a table of such elements.\n  `needsWrapFn(item)-->boolean`\n  If true, item needs a wrapping table, if not, it doesn't\n  useful if you can distinguish between tables that represent other\n  data structures, and tables of such data structures.\n  By default, returns true if the item isn't a table, and false if it is.\n\n@*param* `needsWrapFn` โ Default: returns true if item is not a table, and false if it is.",
                "extends": {
                    "args": [
                        {
                            "finish": 47790027,
                            "name": "item",
                            "start": 47790023,
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "desc": "Default: returns true if item is not a table, and false if it is.",
                            "finish": 47790039,
                            "name": "needsWrapFn",
                            "start": 47790028,
                            "type": "local",
                            "view": "fun(item: any):boolean"
                        }
                    ],
                    "desc": " gen.tableWrap(item)-->table\n If item is a table, return the table\n otherwise, return a table with the item as element 1.\n This is useful so that functions can accept either a single\n element or a table of such elements.\n  `needsWrapFn(item)-->boolean`\n  If true, item needs a wrapping table, if not, it doesn't\n  useful if you can distinguish between tables that represent other\n  data structures, and tables of such data structures.\n  By default, returns true if the item isn't a table, and false if it is.\n\n@*param* `needsWrapFn` โ Default: returns true if item is not a table, and false if it is.",
                    "finish": 47860003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "table"
                        }
                    ],
                    "start": 47790000,
                    "type": "function",
                    "view": "function gen.tableWrap(item: any, needsWrapFn: fun(item: any):boolean)\n  -> table"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 47790022,
                "name": "tableWrap",
                "start": 47790009,
                "type": "setfield"
            },
            {
                "desc": " Takes two tiles and a 'vertical distance' (0 if absent)\n and computes the distance between them.\n Doesn't pre-process arguments like gen.distance, so might be slightly\n quicker (though this probably too trivial to ever matter).\n Computes the distance you would get by counting tiles.\n If you want the game's approximation of \"Euclidean\" distance that\n is used in many game mechanics, use gen.gameMechanicDistance\n\n@*param* `zDist` โ The distance between tiles with same x,y coordinates but differing in z by 1. 0 by default.",
                "extends": {
                    "args": [
                        {
                            "desc": "A tile object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a map \"square\" in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tile)",
                            "finish": 9940027,
                            "name": "tileA",
                            "start": 9940022,
                            "type": "local",
                            "view": "tileObject"
                        },
                        {
                            "desc": "A tile object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a map \"square\" in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tile)",
                            "finish": 9940033,
                            "name": "tileB",
                            "start": 9940028,
                            "type": "local",
                            "view": "tileObject"
                        },
                        {
                            "desc": "The distance between tiles with same x,y coordinates but differing in z by 1. 0 by default.",
                            "finish": 9940039,
                            "name": "zDist",
                            "start": 9940034,
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": " Takes two tiles and a 'vertical distance' (0 if absent)\n and computes the distance between them.\n Doesn't pre-process arguments like gen.distance, so might be slightly\n quicker (though this probably too trivial to ever matter).\n Computes the distance you would get by counting tiles.\n If you want the game's approximation of \"Euclidean\" distance that\n is used in many game mechanics, use gen.gameMechanicDistance\n\n@*param* `zDist` โ The distance between tiles with same x,y coordinates but differing in z by 1. 0 by default.",
                    "finish": 10030003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": 9940000,
                    "type": "function",
                    "view": "function gen.tileDist(tileA: tileObject, tileB: tileObject, zDist?: integer)\n  -> integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 9940021,
                "name": "tileDist",
                "start": 9940009,
                "type": "setfield"
            },
            {
                "desc": " If given a tile object, returns the tile.\n If given coordinates for a tile, returns the tile.\n Causes error otherwise\n\n@*param* `tileAnalog` โ Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                "extends": {
                    "args": [
                        {
                            "desc": "Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                            "finish": 9100030,
                            "name": "tileAnalog",
                            "start": 9100020,
                            "type": "local",
                            "view": "table|tileObject"
                        }
                    ],
                    "desc": " If given a tile object, returns the tile.\n If given coordinates for a tile, returns the tile.\n Causes error otherwise\n\n@*param* `tileAnalog` โ Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                    "finish": 9380003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "tileObject"
                        }
                    ],
                    "start": 9100000,
                    "type": "function",
                    "view": "function gen.toTile(tileAnalog: table|tileObject)\n  -> tileObject"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 9100019,
                "name": "toTile",
                "start": 9100009,
                "type": "setfield"
            },
            {
                "desc": " Uncharts Airbase on the tribe's map of tile, if Airbase has been charted.\n If Airbase is not charted, the chart remains unchanged.",
                "extends": {
                    "args": [
                        {
                            "desc": "A tile object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a map \"square\" in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tile)",
                            "finish": 61700032,
                            "name": "tile",
                            "start": 61700028,
                            "type": "local",
                            "view": "tileObject"
                        },
                        {
                            "desc": "A tribe object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a tribe, which is to say the characteristics of the tribe overall, in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tribe)",
                            "finish": 61700038,
                            "name": "tribe",
                            "start": 61700033,
                            "type": "local",
                            "view": "tribeObject"
                        }
                    ],
                    "desc": " Uncharts Airbase on the tribe's map of tile, if Airbase has been charted.\n If Airbase is not charted, the chart remains unchanged.",
                    "finish": 61700043,
                    "start": 61700000,
                    "type": "function",
                    "view": "function gen.unchartAirbase(tile: tileObject, tribe: tribeObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 61700027,
                "name": "unchartAirbase",
                "start": 61700009,
                "type": "setfield"
            },
            {
                "desc": " Makes a `city` invisible to `tribe` (but doesn't cover the tile in black)\n by changing the knownTo field.",
                "extends": {
                    "args": [
                        {
                            "finish": 59570029,
                            "name": "city",
                            "start": 59570025,
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": 59570035,
                            "name": "tribe",
                            "start": 59570030,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": " Makes a `city` invisible to `tribe` (but doesn't cover the tile in black)\n by changing the knownTo field.",
                    "finish": 59590003,
                    "start": 59570000,
                    "type": "function",
                    "view": "function gen.unchartCity(city: any, tribe: any)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 59570024,
                "name": "unchartCity",
                "start": 59570009,
                "type": "setfield"
            },
            {
                "desc": " Uncharts Farmland on the tribe's map of tile, if Farmland has been charted.\n If Farmland is not charted, the chart remains unchanged.",
                "extends": {
                    "args": [
                        {
                            "desc": "A tile object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a map \"square\" in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tile)",
                            "finish": 60530033,
                            "name": "tile",
                            "start": 60530029,
                            "type": "local",
                            "view": "tileObject"
                        },
                        {
                            "desc": "A tribe object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a tribe, which is to say the characteristics of the tribe overall, in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tribe)",
                            "finish": 60530039,
                            "name": "tribe",
                            "start": 60530034,
                            "type": "local",
                            "view": "tribeObject"
                        }
                    ],
                    "desc": " Uncharts Farmland on the tribe's map of tile, if Farmland has been charted.\n If Farmland is not charted, the chart remains unchanged.",
                    "finish": 60530044,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 60530000,
                    "type": "function",
                    "view": "function gen.unchartFarmland(tile: tileObject, tribe: tribeObject)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 60530028,
                "name": "unchartFarmland",
                "start": 60530009,
                "type": "setfield"
            },
            {
                "desc": " Uncharts Fortress on the tribe's map of tile, if Fortress has been charted.\n If Fortress is not charted, the chart remains unchanged.",
                "extends": {
                    "args": [
                        {
                            "desc": "A tile object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a map \"square\" in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tile)",
                            "finish": 61440033,
                            "name": "tile",
                            "start": 61440029,
                            "type": "local",
                            "view": "tileObject"
                        },
                        {
                            "desc": "A tribe object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a tribe, which is to say the characteristics of the tribe overall, in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tribe)",
                            "finish": 61440039,
                            "name": "tribe",
                            "start": 61440034,
                            "type": "local",
                            "view": "tribeObject"
                        }
                    ],
                    "desc": " Uncharts Fortress on the tribe's map of tile, if Fortress has been charted.\n If Fortress is not charted, the chart remains unchanged.",
                    "finish": 61440044,
                    "start": 61440000,
                    "type": "function",
                    "view": "function gen.unchartFortress(tile: tileObject, tribe: tribeObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 61440028,
                "name": "unchartFortress",
                "start": 61440009,
                "type": "setfield"
            },
            {
                "desc": " Uncharts Irrigation on the tribe's map of tile, if Irrigation has been charted.\n If Irrigation is not charted, the chart remains unchanged.",
                "extends": {
                    "args": [
                        {
                            "desc": "A tile object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a map \"square\" in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tile)",
                            "finish": 60010035,
                            "name": "tile",
                            "start": 60010031,
                            "type": "local",
                            "view": "tileObject"
                        },
                        {
                            "desc": "A tribe object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a tribe, which is to say the characteristics of the tribe overall, in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tribe)",
                            "finish": 60010041,
                            "name": "tribe",
                            "start": 60010036,
                            "type": "local",
                            "view": "tribeObject"
                        }
                    ],
                    "desc": " Uncharts Irrigation on the tribe's map of tile, if Irrigation has been charted.\n If Irrigation is not charted, the chart remains unchanged.",
                    "finish": 60010046,
                    "start": 60010000,
                    "type": "function",
                    "view": "function gen.unchartIrrigation(tile: tileObject, tribe: tribeObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 60010030,
                "name": "unchartIrrigation",
                "start": 60010009,
                "type": "setfield"
            },
            {
                "desc": " Uncharts Mine on the tribe's map of tile, if Mine has been charted.\n If Mine is not charted, the chart remains unchanged.",
                "extends": {
                    "args": [
                        {
                            "desc": "A tile object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a map \"square\" in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tile)",
                            "finish": 60270029,
                            "name": "tile",
                            "start": 60270025,
                            "type": "local",
                            "view": "tileObject"
                        },
                        {
                            "desc": "A tribe object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a tribe, which is to say the characteristics of the tribe overall, in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tribe)",
                            "finish": 60270035,
                            "name": "tribe",
                            "start": 60270030,
                            "type": "local",
                            "view": "tribeObject"
                        }
                    ],
                    "desc": " Uncharts Mine on the tribe's map of tile, if Mine has been charted.\n If Mine is not charted, the chart remains unchanged.",
                    "finish": 60270040,
                    "start": 60270000,
                    "type": "function",
                    "view": "function gen.unchartMine(tile: tileObject, tribe: tribeObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 60270024,
                "name": "unchartMine",
                "start": 60270009,
                "type": "setfield"
            },
            {
                "desc": " Uncharts Pollution on the tribe's map of tile, if Pollution has been charted.\n If Pollution is not charted, the chart remains unchanged.",
                "extends": {
                    "args": [
                        {
                            "desc": "A tile object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a map \"square\" in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tile)",
                            "finish": 61950034,
                            "name": "tile",
                            "start": 61950030,
                            "type": "local",
                            "view": "tileObject"
                        },
                        {
                            "desc": "A tribe object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a tribe, which is to say the characteristics of the tribe overall, in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tribe)",
                            "finish": 61950040,
                            "name": "tribe",
                            "start": 61950035,
                            "type": "local",
                            "view": "tribeObject"
                        }
                    ],
                    "desc": " Uncharts Pollution on the tribe's map of tile, if Pollution has been charted.\n If Pollution is not charted, the chart remains unchanged.",
                    "finish": 61950045,
                    "start": 61950000,
                    "type": "function",
                    "view": "function gen.unchartPollution(tile: tileObject, tribe: tribeObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 61950029,
                "name": "unchartPollution",
                "start": 61950009,
                "type": "setfield"
            },
            {
                "desc": " Uncharts Railroad on the tribe's map of tile, if Railroad has been charted.\n If Railroad is not charted, the chart remains unchanged.",
                "extends": {
                    "args": [
                        {
                            "desc": "A tile object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a map \"square\" in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tile)",
                            "finish": 61060035,
                            "name": "tile",
                            "start": 61060031,
                            "type": "local",
                            "view": "tileObject"
                        },
                        {
                            "desc": "A tribe object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a tribe, which is to say the characteristics of the tribe overall, in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tribe)",
                            "finish": 61060041,
                            "name": "tribe",
                            "start": 61060036,
                            "type": "local",
                            "view": "tribeObject"
                        }
                    ],
                    "desc": " Uncharts Railroad on the tribe's map of tile, if Railroad has been charted.\n If Railroad is not charted, the chart remains unchanged.",
                    "finish": 61110003,
                    "start": 61060022,
                    "type": "function",
                    "view": "function gen.unchartRailroad(tile: tileObject, tribe: tribeObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 61060019,
                "name": "unchartRailroad",
                "start": 61060000,
                "type": "setfield"
            },
            {
                "desc": " Uncharts Road on the tribe's map of tile, if Road has been charted.\n If Road is not charted, the chart remains unchanged.",
                "extends": {
                    "args": [
                        {
                            "desc": "A tile object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a map \"square\" in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tile)",
                            "finish": 60790029,
                            "name": "tile",
                            "start": 60790025,
                            "type": "local",
                            "view": "tileObject"
                        },
                        {
                            "desc": "A tribe object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a tribe, which is to say the characteristics of the tribe overall, in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tribe)",
                            "finish": 60790035,
                            "name": "tribe",
                            "start": 60790030,
                            "type": "local",
                            "view": "tribeObject"
                        }
                    ],
                    "desc": " Uncharts Road on the tribe's map of tile, if Road has been charted.\n If Road is not charted, the chart remains unchanged.",
                    "finish": 60790040,
                    "start": 60790000,
                    "type": "function",
                    "view": "function gen.unchartRoad(tile: tileObject, tribe: tribeObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 60790024,
                "name": "unchartRoad",
                "start": 60790009,
                "type": "setfield"
            },
            {
                "desc": " gen.unchartTransportation(tile,tribe) --> void\n Uncharts road and railroad on the tribe's map of tile.",
                "extends": {
                    "args": [
                        {
                            "desc": "A tile object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a map \"square\" in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tile)",
                            "finish": 61160039,
                            "name": "tile",
                            "start": 61160035,
                            "type": "local",
                            "view": "tileObject"
                        },
                        {
                            "desc": "A tribe object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a tribe, which is to say the characteristics of the tribe overall, in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tribe)",
                            "finish": 61160045,
                            "name": "tribe",
                            "start": 61160040,
                            "type": "local",
                            "view": "tribeObject"
                        }
                    ],
                    "desc": " gen.unchartTransportation(tile,tribe) --> void\n Uncharts road and railroad on the tribe's map of tile.",
                    "finish": 61190003,
                    "start": 61160000,
                    "type": "function",
                    "view": "function gen.unchartTransportation(tile: tileObject, tribe: tribeObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 61160034,
                "name": "unchartTransportation",
                "start": 61160009,
                "type": "setfield"
            },
            {
                "desc": " Uncharts Transporter on the tribe's map of tile, if Transporter has been charted.\n If Transporter is not charted, the chart remains unchanged.",
                "extends": {
                    "args": [
                        {
                            "desc": "A tile object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a map \"square\" in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tile)",
                            "finish": 62210036,
                            "name": "tile",
                            "start": 62210032,
                            "type": "local",
                            "view": "tileObject"
                        },
                        {
                            "desc": "A tribe object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a tribe, which is to say the characteristics of the tribe overall, in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tribe)",
                            "finish": 62210042,
                            "name": "tribe",
                            "start": 62210037,
                            "type": "local",
                            "view": "tribeObject"
                        }
                    ],
                    "desc": " Uncharts Transporter on the tribe's map of tile, if Transporter has been charted.\n If Transporter is not charted, the chart remains unchanged.",
                    "finish": 62210047,
                    "start": 62210000,
                    "type": "function",
                    "view": "function gen.unchartTransporter(tile: tileObject, tribe: tribeObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 62210031,
                "name": "unchartTransporter",
                "start": 62210009,
                "type": "setfield"
            },
            {
                "desc": "Returns true if tile has any of the unit types listed in the table,\nfalse otherwise. A unit or units can be excluded from the check.\n\n@*param* `tile` โ The tile to try to find specific unit types on.\n\n@*param* `unitTypeTable` โ The unit type or types to check for.\n\n@*param* `excludeFromCheck` โ These units are excluded from the check.  If they are of a matching unit type, the function still won't return true.  (Unless a different unit has a matching type.)",
                "extends": {
                    "args": [
                        {
                            "desc": "The tile to try to find specific unit types on.",
                            "finish": 39190032,
                            "name": "tile",
                            "start": 39190028,
                            "type": "local",
                            "view": "tileObject"
                        },
                        {
                            "desc": "The unit type or types to check for.",
                            "finish": 39190046,
                            "name": "unitTypeTable",
                            "start": 39190033,
                            "type": "local",
                            "view": "table<any, unitTypeObject>|unitTypeObject"
                        },
                        {
                            "desc": "These units are excluded from the check.  If they are of a matching unit type, the function still won't return true.  (Unless a different unit has a matching type.)",
                            "finish": 39190063,
                            "name": "excludeFromCheck",
                            "start": 39190047,
                            "type": "local",
                            "view": "(table<any, unitObject>|unitObject)?"
                        }
                    ],
                    "desc": "Returns true if tile has any of the unit types listed in the table,\nfalse otherwise. A unit or units can be excluded from the check.\n\n@*param* `tile` โ The tile to try to find specific unit types on.\n\n@*param* `unitTypeTable` โ The unit type or types to check for.\n\n@*param* `excludeFromCheck` โ These units are excluded from the check.  If they are of a matching unit type, the function still won't return true.  (Unless a different unit has a matching type.)",
                    "finish": 39470003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 39190000,
                    "type": "function",
                    "view": "function gen.unitTypeOnTile(tile: tileObject, unitTypeTable: table<any, unitTypeObject>|unitTypeObject, excludeFromCheck?: table<any, unitObject>|unitObject)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 39190027,
                "name": "unitTypeOnTile",
                "start": 39190009,
                "type": "setfield"
            },
            {
                "desc": " `isProtectingUnit(unit)-->bool`\n if true, the unit is a 'protecting' unit that must be moved\n e.g. air units with range >= 2 in air protected stacks\n <br>`isProtectedUnit(unit)-->bool`\n if true, the unit is a 'protected' unit, meaning that 'protecting' units\n must be moved off square if one is on it\n e.g. land and sea units in air protected stacks\n <Br>`isProtectedTile(tile)-->bool`\n if true, the protecting unit must be moved, if not it can stay\n e.g. clear tiles are true in air protected stacks,\n cities, airbases, tiles with carriers return false for air protected stacks\n <br>`destRankFn(unit,tile)--> integer or false`.\n The choice on where to move protecting units is based on this function.\n Lower values mean preferred tiles, false means unit can't move to tile.\n Default is prefer empty squares before squares with units on them.\n\n@*param* `isProtectingUnit` โ Returns true if the unit is a \"protecting\" unit that must be moved, false otherwise.\n\n@*param* `isProtectedUnit` โ Returns true if the unit is a unit that can be \"protected\" by protecting units, false otherwise.\n\n@*param* `isProtectedTile` โ Returns true if units can be protected on this tile, false otherwise.\n\n@*param* `destRankFn` โ If the unit can be placed on the tile, return an integer (lower being more preferred).  If it can't, return false.",
                "extends": {
                    "args": [
                        {
                            "desc": "A tile object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a map \"square\" in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tile)",
                            "finish": 40450031,
                            "name": "tile",
                            "start": 40450027,
                            "type": "local",
                            "view": "tileObject"
                        },
                        {
                            "desc": "Returns true if the unit is a \"protecting\" unit that must be moved, false otherwise.",
                            "finish": 40450048,
                            "name": "isProtectingUnit",
                            "start": 40450032,
                            "type": "local",
                            "view": "fun(unit: unitObject):boolean"
                        },
                        {
                            "desc": "Returns true if the unit is a unit that can be \"protected\" by protecting units, false otherwise.",
                            "finish": 40450064,
                            "name": "isProtectedUnit",
                            "start": 40450049,
                            "type": "local",
                            "view": "fun(unit: unitObject):boolean"
                        },
                        {
                            "desc": "Returns true if units can be protected on this tile, false otherwise.",
                            "finish": 40450080,
                            "name": "isProtectedTile",
                            "start": 40450065,
                            "type": "local",
                            "view": "fun(tile: tileObject):boolean"
                        },
                        {
                            "desc": "If the unit can be placed on the tile, return an integer (lower being more preferred).  If it can't, return false.",
                            "finish": 40450091,
                            "name": "destRankFn",
                            "start": 40450081,
                            "type": "local",
                            "view": "(fun(unit: unitObject, tile: tileObject):integer|false)?"
                        }
                    ],
                    "desc": " `isProtectingUnit(unit)-->bool`\n if true, the unit is a 'protecting' unit that must be moved\n e.g. air units with range >= 2 in air protected stacks\n <br>`isProtectedUnit(unit)-->bool`\n if true, the unit is a 'protected' unit, meaning that 'protecting' units\n must be moved off square if one is on it\n e.g. land and sea units in air protected stacks\n <Br>`isProtectedTile(tile)-->bool`\n if true, the protecting unit must be moved, if not it can stay\n e.g. clear tiles are true in air protected stacks,\n cities, airbases, tiles with carriers return false for air protected stacks\n <br>`destRankFn(unit,tile)--> integer or false`.\n The choice on where to move protecting units is based on this function.\n Lower values mean preferred tiles, false means unit can't move to tile.\n Default is prefer empty squares before squares with units on them.\n\n@*param* `isProtectingUnit` โ Returns true if the unit is a \"protecting\" unit that must be moved, false otherwise.\n\n@*param* `isProtectedUnit` โ Returns true if the unit is a unit that can be \"protected\" by protecting units, false otherwise.\n\n@*param* `isProtectedTile` โ Returns true if units can be protected on this tile, false otherwise.\n\n@*param* `destRankFn` โ If the unit can be placed on the tile, return an integer (lower being more preferred).  If it can't, return false.",
                    "finish": 40700003,
                    "start": 40450000,
                    "type": "function",
                    "view": "function gen.unprotectTile(tile: tileObject, isProtectingUnit: fun(unit: unitObject):boolean, isProtectedUnit: fun(unit: unitObject):boolean, isProtectedTile: fun(tile: tileObject):boolean, destRankFn?: fun(unit: unitObject, tile: tileObject):integer|false)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 40450026,
                "name": "unprotectTile",
                "start": 40450009,
                "type": "setfield"
            },
            {
                "desc": " places railroad if road exists, otherwise places road\n does nothing if city present\n\n@*param* `tile` โ Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                "extends": {
                    "args": [
                        {
                            "desc": "Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                            "finish": 14230039,
                            "name": "tile",
                            "start": 14230035,
                            "type": "local",
                            "view": "table|tileObject"
                        }
                    ],
                    "desc": " places railroad if road exists, otherwise places road\n does nothing if city present\n\n@*param* `tile` โ Can be:<br><br>tileObject<br><br>{[1]=xCoord,[2]=yCoord,[3]=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{[1]=xCoord,[2]=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)<br><br>{x=xCoord,y=yCoord,z=zCoord}<br>Converted to civ.getTile(xCoord,yCoord,zCoord) <br><br>{x=xCoord,y=yCoord}<br>Converted to civ.getTile(xCoord,yCoord,0)",
                    "finish": 14340003,
                    "start": 14230000,
                    "type": "function",
                    "view": "function gen.upgradeTransportation(tile: table|tileObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 14230034,
                "name": "upgradeTransportation",
                "start": 14230009,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 83520071,
                    "start": 83520022,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 83520019,
                "name": "vDIOrTableOfVDI",
                "start": 83520000,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 69860051,
                    "start": 69860029,
                    "type": "getlocal",
                    "view": "string"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 69860026,
                "name": "validMarkerOptionsList",
                "start": 69860000,
                "type": "setfield"
            },
            {
                "desc": "  This validates a function's argument, and provides an error if a bad value is supplied.\n\n@*param* `value` โ The argument passed to the function.\n\n@*param* `moduleName` โ The name of the module the function is in (so generated errors are more informative).\n\n@*param* `functionName` โ The name of the function this function is validating values for (so generated errors are more informative).\n\n@*param* `argumentNumber` โ The argument which is being validated (so generated errors are more informative).\n\n@*param* `argumentName` โ The name of the argument which is being validated (so generated errors are more informative).\n\n@*param* `extraInfo` โ Any extra information that might help in debugging, should an error occur.\n\n@*param* `valueSpecification` โ A valueSpecification is a table with the following keys and values:<br><br>[\"nil\"] = true or nil<br>If this key is true, the specified value can be nil.<br><br>[\"boolean\"] = true, \"true\", \"false\", or nil<br>If this key is true (boolean value), the specified value can be a boolean.<br>If this key is \"true\" (string), then the specified value can be true, but not false.<br>If this key is \"false\" (string), then the specified value can be false, but not true.<br>If this key is nil, the specified value can't be a boolean.<br><br>[\"function\"] = true, string, or nil<br>if this key is true or string, the specified value can be a function.<br>If string, the string describes the function, e.g. `function(unit)-->number`.  Value specification checks do not check if the function actually matches the description, only that it is a function.<br>If this key is nil, the specified value can't be a function.<br><br>[\"number\"] = true or nil or {minVal=number/nil, maxVal=number/nil, integer=true/nil}<br>If true, the specified value can be any number.  If nil, the specified value can't be a number.<br>If table, any number must also be larger than the `minVal` (if specified) and smaller than the `maxVal` (if specified).  If the `integer` key is true, the value must also be an integer.<br><br>[\"string\"] = true or {[validString] = truthy} or nil<br>If this key is true, any string is allowed.<br>If it is a table, any string value must be a key in that table, with a truthy (anything other than false/nil) associated value.<br>If nil, the value can't be a string.<br><br>[\"table\"]=string, true, nil, or {[1]=function(table)->true or string, [2]=string}<br>If the key is a string, any table is accepted, and the string describes the kind of table needed.<br>If true, any table is accepted, and a generated description will be 'table'.<br>If the key is a table, the table's value for `1` is a function, which returns true if specified value is an acceptable table, and a string describing the problem if it is not.  The value for `2` is a string describing the required table, for generated descriptions/errors.<br>If nil, the specified value can't be a table.<br><br>[\"userdata\"] = {[dataTypeName]=isDataTypeFn} or nil<br>The keys to this table are strings that describe acceptable userdata, and the values are functions which return true if the specified value matches the type, and false otherwise.<br>E.g.<br>`{[\"unitTypeObject\"] = civ.isUnitType, [\"cityObject\"] = civ.isCity}`<br>Allows unitTypeObjects and cityObjects, but not other kinds of userdata.",
                "extends": {
                    "args": [
                        {
                            "desc": "The argument passed to the function.",
                            "finish": 78340043,
                            "name": "value",
                            "start": 78340038,
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "desc": "The name of the module the function is in (so generated errors are more informative).",
                            "finish": 78340054,
                            "name": "moduleName",
                            "start": 78340044,
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "desc": "The name of the function this function is validating values for (so generated errors are more informative).",
                            "finish": 78340067,
                            "name": "functionName",
                            "start": 78340055,
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "desc": "The argument which is being validated (so generated errors are more informative).",
                            "finish": 78340082,
                            "name": "argumentNumber",
                            "start": 78340068,
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "desc": "The name of the argument which is being validated (so generated errors are more informative).",
                            "finish": 78340095,
                            "name": "argumentName",
                            "start": 78340083,
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "desc": "A valueSpecification is a table with the following keys and values:<br><br>[\"nil\"] = true or nil<br>If this key is true, the specified value can be nil.<br><br>[\"boolean\"] = true, \"true\", \"false\", or nil<br>If this key is true (boolean value), the specified value can be a boolean.<br>If this key is \"true\" (string), then the specified value can be true, but not false.<br>If this key is \"false\" (string), then the specified value can be false, but not true.<br>If this key is nil, the specified value can't be a boolean.<br><br>[\"function\"] = true, string, or nil<br>if this key is true or string, the specified value can be a function.<br>If string, the string describes the function, e.g. `function(unit)-->number`.  Value specification checks do not check if the function actually matches the description, only that it is a function.<br>If this key is nil, the specified value can't be a function.<br><br>[\"number\"] = true or nil or {minVal=number/nil, maxVal=number/nil, integer=true/nil}<br>If true, the specified value can be any number.  If nil, the specified value can't be a number.<br>If table, any number must also be larger than the `minVal` (if specified) and smaller than the `maxVal` (if specified).  If the `integer` key is true, the value must also be an integer.<br><br>[\"string\"] = true or {[validString] = truthy} or nil<br>If this key is true, any string is allowed.<br>If it is a table, any string value must be a key in that table, with a truthy (anything other than false/nil) associated value.<br>If nil, the value can't be a string.<br><br>[\"table\"]=string, true, nil, or {[1]=function(table)->true or string, [2]=string}<br>If the key is a string, any table is accepted, and the string describes the kind of table needed.<br>If true, any table is accepted, and a generated description will be 'table'.<br>If the key is a table, the table's value for `1` is a function, which returns true if specified value is an acceptable table, and a string describing the problem if it is not.  The value for `2` is a string describing the required table, for generated descriptions/errors.<br>If nil, the specified value can't be a table.<br><br>[\"userdata\"] = {[dataTypeName]=isDataTypeFn} or nil<br>The keys to this table are strings that describe acceptable userdata, and the values are functions which return true if the specified value matches the type, and false otherwise.<br>E.g.<br>`{[\"unitTypeObject\"] = civ.isUnitType, [\"cityObject\"] = civ.isCity}`<br>Allows unitTypeObjects and cityObjects, but not other kinds of userdata.",
                            "finish": 78340114,
                            "name": "valueSpecification",
                            "start": 78340096,
                            "type": "local",
                            "view": "table"
                        },
                        {
                            "desc": "Any extra information that might help in debugging, should an error occur.",
                            "finish": 78340124,
                            "name": "extraInfo",
                            "start": 78340115,
                            "type": "local",
                            "view": "(string|nil)?"
                        }
                    ],
                    "desc": "  This validates a function's argument, and provides an error if a bad value is supplied.\n\n@*param* `value` โ The argument passed to the function.\n\n@*param* `moduleName` โ The name of the module the function is in (so generated errors are more informative).\n\n@*param* `functionName` โ The name of the function this function is validating values for (so generated errors are more informative).\n\n@*param* `argumentNumber` โ The argument which is being validated (so generated errors are more informative).\n\n@*param* `argumentName` โ The name of the argument which is being validated (so generated errors are more informative).\n\n@*param* `extraInfo` โ Any extra information that might help in debugging, should an error occur.\n\n@*param* `valueSpecification` โ A valueSpecification is a table with the following keys and values:<br><br>[\"nil\"] = true or nil<br>If this key is true, the specified value can be nil.<br><br>[\"boolean\"] = true, \"true\", \"false\", or nil<br>If this key is true (boolean value), the specified value can be a boolean.<br>If this key is \"true\" (string), then the specified value can be true, but not false.<br>If this key is \"false\" (string), then the specified value can be false, but not true.<br>If this key is nil, the specified value can't be a boolean.<br><br>[\"function\"] = true, string, or nil<br>if this key is true or string, the specified value can be a function.<br>If string, the string describes the function, e.g. `function(unit)-->number`.  Value specification checks do not check if the function actually matches the description, only that it is a function.<br>If this key is nil, the specified value can't be a function.<br><br>[\"number\"] = true or nil or {minVal=number/nil, maxVal=number/nil, integer=true/nil}<br>If true, the specified value can be any number.  If nil, the specified value can't be a number.<br>If table, any number must also be larger than the `minVal` (if specified) and smaller than the `maxVal` (if specified).  If the `integer` key is true, the value must also be an integer.<br><br>[\"string\"] = true or {[validString] = truthy} or nil<br>If this key is true, any string is allowed.<br>If it is a table, any string value must be a key in that table, with a truthy (anything other than false/nil) associated value.<br>If nil, the value can't be a string.<br><br>[\"table\"]=string, true, nil, or {[1]=function(table)->true or string, [2]=string}<br>If the key is a string, any table is accepted, and the string describes the kind of table needed.<br>If true, any table is accepted, and a generated description will be 'table'.<br>If the key is a table, the table's value for `1` is a function, which returns true if specified value is an acceptable table, and a string describing the problem if it is not.  The value for `2` is a string describing the required table, for generated descriptions/errors.<br>If nil, the specified value can't be a table.<br><br>[\"userdata\"] = {[dataTypeName]=isDataTypeFn} or nil<br>The keys to this table are strings that describe acceptable userdata, and the values are functions which return true if the specified value matches the type, and false otherwise.<br>E.g.<br>`{[\"unitTypeObject\"] = civ.isUnitType, [\"cityObject\"] = civ.isCity}`<br>Allows unitTypeObjects and cityObjects, but not other kinds of userdata.",
                    "finish": 79090003,
                    "start": 78340000,
                    "type": "function",
                    "view": "function gen.validateFunctionArgument(value: any, moduleName: string, functionName: string, argumentNumber: integer, argumentName: string, valueSpecification: table, extraInfo?: string)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 78340037,
                "name": "validateFunctionArgument",
                "start": 78340009,
                "type": "setfield"
            },
            {
                "desc": " Generates an error if the `value` doesn't satisfy the `valueSpec`.  This is a \"building block\" function, so you probably don't want to use it.\n\n@*param* `tableDescription` โ A description of the table.\n\n@*param* `key` โ The key being evaluated.\n\n@*param* `value` โ The value being evaluated.\n\n@*param* `extraInfo` โ Extra information that might be useful when debugging.\n\n@*param* `valueSpec` โ A valueSpecification is a table with the following keys and values:<br><br>[\"nil\"] = true or nil<br>If this key is true, the specified value can be nil.<br><br>[\"boolean\"] = true, \"true\", \"false\", or nil<br>If this key is true (boolean value), the specified value can be a boolean.<br>If this key is \"true\" (string), then the specified value can be true, but not false.<br>If this key is \"false\" (string), then the specified value can be false, but not true.<br>If this key is nil, the specified value can't be a boolean.<br><br>[\"function\"] = true, string, or nil<br>if this key is true or string, the specified value can be a function.<br>If string, the string describes the function, e.g. `function(unit)-->number`.  Value specification checks do not check if the function actually matches the description, only that it is a function.<br>If this key is nil, the specified value can't be a function.<br><br>[\"number\"] = true or nil or {minVal=number/nil, maxVal=number/nil, integer=true/nil}<br>If true, the specified value can be any number.  If nil, the specified value can't be a number.<br>If table, any number must also be larger than the `minVal` (if specified) and smaller than the `maxVal` (if specified).  If the `integer` key is true, the value must also be an integer.<br><br>[\"string\"] = true or {[validString] = truthy} or nil<br>If this key is true, any string is allowed.<br>If it is a table, any string value must be a key in that table, with a truthy (anything other than false/nil) associated value.<br>If nil, the value can't be a string.<br><br>[\"table\"]=string, true, nil, or {[1]=function(table)->true or string, [2]=string}<br>If the key is a string, any table is accepted, and the string describes the kind of table needed.<br>If true, any table is accepted, and a generated description will be 'table'.<br>If the key is a table, the table's value for `1` is a function, which returns true if specified value is an acceptable table, and a string describing the problem if it is not.  The value for `2` is a string describing the required table, for generated descriptions/errors.<br>If nil, the specified value can't be a table.<br><br>[\"userdata\"] = {[dataTypeName]=isDataTypeFn} or nil<br>The keys to this table are strings that describe acceptable userdata, and the values are functions which return true if the specified value matches the type, and false otherwise.<br>E.g.<br>`{[\"unitTypeObject\"] = civ.isUnitType, [\"cityObject\"] = civ.isCity}`<br>Allows unitTypeObjects and cityObjects, but not other kinds of userdata.",
                "extends": {
                    "args": [
                        {
                            "desc": "A description of the table.",
                            "finish": 80180048,
                            "name": "tableDescription",
                            "start": 80180032,
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "desc": "The key being evaluated.",
                            "finish": 80180052,
                            "name": "key",
                            "start": 80180049,
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "desc": "The value being evaluated.",
                            "finish": 80180058,
                            "name": "value",
                            "start": 80180053,
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "desc": "A valueSpecification is a table with the following keys and values:<br><br>[\"nil\"] = true or nil<br>If this key is true, the specified value can be nil.<br><br>[\"boolean\"] = true, \"true\", \"false\", or nil<br>If this key is true (boolean value), the specified value can be a boolean.<br>If this key is \"true\" (string), then the specified value can be true, but not false.<br>If this key is \"false\" (string), then the specified value can be false, but not true.<br>If this key is nil, the specified value can't be a boolean.<br><br>[\"function\"] = true, string, or nil<br>if this key is true or string, the specified value can be a function.<br>If string, the string describes the function, e.g. `function(unit)-->number`.  Value specification checks do not check if the function actually matches the description, only that it is a function.<br>If this key is nil, the specified value can't be a function.<br><br>[\"number\"] = true or nil or {minVal=number/nil, maxVal=number/nil, integer=true/nil}<br>If true, the specified value can be any number.  If nil, the specified value can't be a number.<br>If table, any number must also be larger than the `minVal` (if specified) and smaller than the `maxVal` (if specified).  If the `integer` key is true, the value must also be an integer.<br><br>[\"string\"] = true or {[validString] = truthy} or nil<br>If this key is true, any string is allowed.<br>If it is a table, any string value must be a key in that table, with a truthy (anything other than false/nil) associated value.<br>If nil, the value can't be a string.<br><br>[\"table\"]=string, true, nil, or {[1]=function(table)->true or string, [2]=string}<br>If the key is a string, any table is accepted, and the string describes the kind of table needed.<br>If true, any table is accepted, and a generated description will be 'table'.<br>If the key is a table, the table's value for `1` is a function, which returns true if specified value is an acceptable table, and a string describing the problem if it is not.  The value for `2` is a string describing the required table, for generated descriptions/errors.<br>If nil, the specified value can't be a table.<br><br>[\"userdata\"] = {[dataTypeName]=isDataTypeFn} or nil<br>The keys to this table are strings that describe acceptable userdata, and the values are functions which return true if the specified value matches the type, and false otherwise.<br>E.g.<br>`{[\"unitTypeObject\"] = civ.isUnitType, [\"cityObject\"] = civ.isCity}`<br>Allows unitTypeObjects and cityObjects, but not other kinds of userdata.",
                            "finish": 80180068,
                            "name": "valueSpec",
                            "start": 80180059,
                            "type": "local",
                            "view": "table"
                        },
                        {
                            "desc": "Extra information that might be useful when debugging.",
                            "finish": 80180078,
                            "name": "extraInfo",
                            "start": 80180069,
                            "type": "local",
                            "view": "string?"
                        }
                    ],
                    "desc": " Generates an error if the `value` doesn't satisfy the `valueSpec`.  This is a \"building block\" function, so you probably don't want to use it.\n\n@*param* `tableDescription` โ A description of the table.\n\n@*param* `key` โ The key being evaluated.\n\n@*param* `value` โ The value being evaluated.\n\n@*param* `extraInfo` โ Extra information that might be useful when debugging.\n\n@*param* `valueSpec` โ A valueSpecification is a table with the following keys and values:<br><br>[\"nil\"] = true or nil<br>If this key is true, the specified value can be nil.<br><br>[\"boolean\"] = true, \"true\", \"false\", or nil<br>If this key is true (boolean value), the specified value can be a boolean.<br>If this key is \"true\" (string), then the specified value can be true, but not false.<br>If this key is \"false\" (string), then the specified value can be false, but not true.<br>If this key is nil, the specified value can't be a boolean.<br><br>[\"function\"] = true, string, or nil<br>if this key is true or string, the specified value can be a function.<br>If string, the string describes the function, e.g. `function(unit)-->number`.  Value specification checks do not check if the function actually matches the description, only that it is a function.<br>If this key is nil, the specified value can't be a function.<br><br>[\"number\"] = true or nil or {minVal=number/nil, maxVal=number/nil, integer=true/nil}<br>If true, the specified value can be any number.  If nil, the specified value can't be a number.<br>If table, any number must also be larger than the `minVal` (if specified) and smaller than the `maxVal` (if specified).  If the `integer` key is true, the value must also be an integer.<br><br>[\"string\"] = true or {[validString] = truthy} or nil<br>If this key is true, any string is allowed.<br>If it is a table, any string value must be a key in that table, with a truthy (anything other than false/nil) associated value.<br>If nil, the value can't be a string.<br><br>[\"table\"]=string, true, nil, or {[1]=function(table)->true or string, [2]=string}<br>If the key is a string, any table is accepted, and the string describes the kind of table needed.<br>If true, any table is accepted, and a generated description will be 'table'.<br>If the key is a table, the table's value for `1` is a function, which returns true if specified value is an acceptable table, and a string describing the problem if it is not.  The value for `2` is a string describing the required table, for generated descriptions/errors.<br>If nil, the specified value can't be a table.<br><br>[\"userdata\"] = {[dataTypeName]=isDataTypeFn} or nil<br>The keys to this table are strings that describe acceptable userdata, and the values are functions which return true if the specified value matches the type, and false otherwise.<br>E.g.<br>`{[\"unitTypeObject\"] = civ.isUnitType, [\"cityObject\"] = civ.isCity}`<br>Allows unitTypeObjects and cityObjects, but not other kinds of userdata.",
                    "finish": 80920003,
                    "start": 80180000,
                    "type": "function",
                    "view": "function gen.validateTableValue(tableDescription: string, key: any, value: any, valueSpec: table, extraInfo?: string)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 80180031,
                "name": "validateTableValue",
                "start": 80180009,
                "type": "setfield"
            },
            {
                "desc": "  Returns true if value satisfies the valueSpecification, false otherwise.\n\n@*param* `valueSpecification` โ A valueSpecification is a table with the following keys and values:<br><br>[\"nil\"] = true or nil<br>If this key is true, the specified value can be nil.<br><br>[\"boolean\"] = true, \"true\", \"false\", or nil<br>If this key is true (boolean value), the specified value can be a boolean.<br>If this key is \"true\" (string), then the specified value can be true, but not false.<br>If this key is \"false\" (string), then the specified value can be false, but not true.<br>If this key is nil, the specified value can't be a boolean.<br><br>[\"function\"] = true, string, or nil<br>if this key is true or string, the specified value can be a function.<br>If string, the string describes the function, e.g. `function(unit)-->number`.  Value specification checks do not check if the function actually matches the description, only that it is a function.<br>If this key is nil, the specified value can't be a function.<br><br>[\"number\"] = true or nil or {minVal=number/nil, maxVal=number/nil, integer=true/nil}<br>If true, the specified value can be any number.  If nil, the specified value can't be a number.<br>If table, any number must also be larger than the `minVal` (if specified) and smaller than the `maxVal` (if specified).  If the `integer` key is true, the value must also be an integer.<br><br>[\"string\"] = true or {[validString] = truthy} or nil<br>If this key is true, any string is allowed.<br>If it is a table, any string value must be a key in that table, with a truthy (anything other than false/nil) associated value.<br>If nil, the value can't be a string.<br><br>[\"table\"]=string, true, nil, or {[1]=function(table)->true or string, [2]=string}<br>If the key is a string, any table is accepted, and the string describes the kind of table needed.<br>If true, any table is accepted, and a generated description will be 'table'.<br>If the key is a table, the table's value for `1` is a function, which returns true if specified value is an acceptable table, and a string describing the problem if it is not.  The value for `2` is a string describing the required table, for generated descriptions/errors.<br>If nil, the specified value can't be a table.<br><br>[\"userdata\"] = {[dataTypeName]=isDataTypeFn} or nil<br>The keys to this table are strings that describe acceptable userdata, and the values are functions which return true if the specified value matches the type, and false otherwise.<br>E.g.<br>`{[\"unitTypeObject\"] = civ.isUnitType, [\"cityObject\"] = civ.isCity}`<br>Allows unitTypeObjects and cityObjects, but not other kinds of userdata.",
                "extends": {
                    "args": [
                        {
                            "finish": 82410046,
                            "name": "value",
                            "start": 82410041,
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "desc": "A valueSpecification is a table with the following keys and values:<br><br>[\"nil\"] = true or nil<br>If this key is true, the specified value can be nil.<br><br>[\"boolean\"] = true, \"true\", \"false\", or nil<br>If this key is true (boolean value), the specified value can be a boolean.<br>If this key is \"true\" (string), then the specified value can be true, but not false.<br>If this key is \"false\" (string), then the specified value can be false, but not true.<br>If this key is nil, the specified value can't be a boolean.<br><br>[\"function\"] = true, string, or nil<br>if this key is true or string, the specified value can be a function.<br>If string, the string describes the function, e.g. `function(unit)-->number`.  Value specification checks do not check if the function actually matches the description, only that it is a function.<br>If this key is nil, the specified value can't be a function.<br><br>[\"number\"] = true or nil or {minVal=number/nil, maxVal=number/nil, integer=true/nil}<br>If true, the specified value can be any number.  If nil, the specified value can't be a number.<br>If table, any number must also be larger than the `minVal` (if specified) and smaller than the `maxVal` (if specified).  If the `integer` key is true, the value must also be an integer.<br><br>[\"string\"] = true or {[validString] = truthy} or nil<br>If this key is true, any string is allowed.<br>If it is a table, any string value must be a key in that table, with a truthy (anything other than false/nil) associated value.<br>If nil, the value can't be a string.<br><br>[\"table\"]=string, true, nil, or {[1]=function(table)->true or string, [2]=string}<br>If the key is a string, any table is accepted, and the string describes the kind of table needed.<br>If true, any table is accepted, and a generated description will be 'table'.<br>If the key is a table, the table's value for `1` is a function, which returns true if specified value is an acceptable table, and a string describing the problem if it is not.  The value for `2` is a string describing the required table, for generated descriptions/errors.<br>If nil, the specified value can't be a table.<br><br>[\"userdata\"] = {[dataTypeName]=isDataTypeFn} or nil<br>The keys to this table are strings that describe acceptable userdata, and the values are functions which return true if the specified value matches the type, and false otherwise.<br>E.g.<br>`{[\"unitTypeObject\"] = civ.isUnitType, [\"cityObject\"] = civ.isCity}`<br>Allows unitTypeObjects and cityObjects, but not other kinds of userdata.",
                            "finish": 82410065,
                            "name": "valueSpecification",
                            "start": 82410047,
                            "type": "local",
                            "view": "table"
                        }
                    ],
                    "desc": "  Returns true if value satisfies the valueSpecification, false otherwise.\n\n@*param* `valueSpecification` โ A valueSpecification is a table with the following keys and values:<br><br>[\"nil\"] = true or nil<br>If this key is true, the specified value can be nil.<br><br>[\"boolean\"] = true, \"true\", \"false\", or nil<br>If this key is true (boolean value), the specified value can be a boolean.<br>If this key is \"true\" (string), then the specified value can be true, but not false.<br>If this key is \"false\" (string), then the specified value can be false, but not true.<br>If this key is nil, the specified value can't be a boolean.<br><br>[\"function\"] = true, string, or nil<br>if this key is true or string, the specified value can be a function.<br>If string, the string describes the function, e.g. `function(unit)-->number`.  Value specification checks do not check if the function actually matches the description, only that it is a function.<br>If this key is nil, the specified value can't be a function.<br><br>[\"number\"] = true or nil or {minVal=number/nil, maxVal=number/nil, integer=true/nil}<br>If true, the specified value can be any number.  If nil, the specified value can't be a number.<br>If table, any number must also be larger than the `minVal` (if specified) and smaller than the `maxVal` (if specified).  If the `integer` key is true, the value must also be an integer.<br><br>[\"string\"] = true or {[validString] = truthy} or nil<br>If this key is true, any string is allowed.<br>If it is a table, any string value must be a key in that table, with a truthy (anything other than false/nil) associated value.<br>If nil, the value can't be a string.<br><br>[\"table\"]=string, true, nil, or {[1]=function(table)->true or string, [2]=string}<br>If the key is a string, any table is accepted, and the string describes the kind of table needed.<br>If true, any table is accepted, and a generated description will be 'table'.<br>If the key is a table, the table's value for `1` is a function, which returns true if specified value is an acceptable table, and a string describing the problem if it is not.  The value for `2` is a string describing the required table, for generated descriptions/errors.<br>If nil, the specified value can't be a table.<br><br>[\"userdata\"] = {[dataTypeName]=isDataTypeFn} or nil<br>The keys to this table are strings that describe acceptable userdata, and the values are functions which return true if the specified value matches the type, and false otherwise.<br>E.g.<br>`{[\"unitTypeObject\"] = civ.isUnitType, [\"cityObject\"] = civ.isCity}`<br>Allows unitTypeObjects and cityObjects, but not other kinds of userdata.",
                    "finish": 82970003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 82410000,
                    "type": "function",
                    "view": "function gen.valueSatisfiesSpecification(value: any, valueSpecification: table)\n  -> boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 82410040,
                "name": "valueSatisfiesSpecification",
                "start": 82410009,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 82980065,
                    "start": 82980034,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 82980031,
                "name": "valueSatisfiesValidDataInfo",
                "start": 82980000,
                "type": "setfield"
            },
            {
                "desc": "Creates a value specification for custom data created by `gen.createDataType` (or any other data type that uses a table as the base).\n\n@*param* `isItemFn` โ A function that returns true if the item is the appropriate data type, and false otherwise.\n\n@*param* `failureDescription` โ A message explaining that the item is not the appropriate data type.\n\n@*param* `itemDescription` โ A description of the data type.",
                "extends": {
                    "args": [
                        {
                            "desc": "A function that returns true if the item is the appropriate data type, and false otherwise.",
                            "finish": 83600044,
                            "name": "isItemFn",
                            "start": 83600036,
                            "type": "local",
                            "view": "fun(item: any):boolean"
                        },
                        {
                            "desc": "A message explaining that the item is not the appropriate data type.",
                            "finish": 83600063,
                            "name": "failureDescription",
                            "start": 83600045,
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "desc": "A description of the data type.",
                            "finish": 83600079,
                            "name": "itemDescription",
                            "start": 83600064,
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "Creates a value specification for custom data created by `gen.createDataType` (or any other data type that uses a table as the base).\n\n@*param* `isItemFn` โ A function that returns true if the item is the appropriate data type, and false otherwise.\n\n@*param* `failureDescription` โ A message explaining that the item is not the appropriate data type.\n\n@*param* `itemDescription` โ A description of the data type.",
                    "finish": 83650003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "table"
                        }
                    ],
                    "start": 83600000,
                    "type": "function",
                    "view": "function gen.valueSpecForCustomData(isItemFn: fun(item: any):boolean, failureDescription: string, itemDescription: string)\n  -> table"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 83600035,
                "name": "valueSpecForCustomData",
                "start": 83600009,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 83530072,
                    "start": 83530023,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 83530020,
                "name": "valueSpecOrTable",
                "start": 83530000,
                "type": "setfield"
            },
            {
                "desc": "  Takes a valueSpecification, and returns a newValueSpecification.\n  The newValueSpecification allow both the original valueSpecification\n  and tables where values are the original valueSpecification.<br><br>\n  Limiation: the valueSpecification can't have a any tables as valid value types.  If you need that, consider `gen.tableOfValueSpecification` or writing a custom valueSpecification.\n\n@*param* `valueSpecification` โ A valueSpecification is a table with the following keys and values:<br><br>[\"nil\"] = true or nil<br>If this key is true, the specified value can be nil.<br><br>[\"boolean\"] = true, \"true\", \"false\", or nil<br>If this key is true (boolean value), the specified value can be a boolean.<br>If this key is \"true\" (string), then the specified value can be true, but not false.<br>If this key is \"false\" (string), then the specified value can be false, but not true.<br>If this key is nil, the specified value can't be a boolean.<br><br>[\"function\"] = true, string, or nil<br>if this key is true or string, the specified value can be a function.<br>If string, the string describes the function, e.g. `function(unit)-->number`.  Value specification checks do not check if the function actually matches the description, only that it is a function.<br>If this key is nil, the specified value can't be a function.<br><br>[\"number\"] = true or nil or {minVal=number/nil, maxVal=number/nil, integer=true/nil}<br>If true, the specified value can be any number.  If nil, the specified value can't be a number.<br>If table, any number must also be larger than the `minVal` (if specified) and smaller than the `maxVal` (if specified).  If the `integer` key is true, the value must also be an integer.<br><br>[\"string\"] = true or {[validString] = truthy} or nil<br>If this key is true, any string is allowed.<br>If it is a table, any string value must be a key in that table, with a truthy (anything other than false/nil) associated value.<br>If nil, the value can't be a string.<br><br>[\"table\"]=string, true, nil, or {[1]=function(table)->true or string, [2]=string}<br>If the key is a string, any table is accepted, and the string describes the kind of table needed.<br>If true, any table is accepted, and a generated description will be 'table'.<br>If the key is a table, the table's value for `1` is a function, which returns true if specified value is an acceptable table, and a string describing the problem if it is not.  The value for `2` is a string describing the required table, for generated descriptions/errors.<br>If nil, the specified value can't be a table.<br><br>[\"userdata\"] = {[dataTypeName]=isDataTypeFn} or nil<br>The keys to this table are strings that describe acceptable userdata, and the values are functions which return true if the specified value matches the type, and false otherwise.<br>E.g.<br>`{[\"unitTypeObject\"] = civ.isUnitType, [\"cityObject\"] = civ.isCity}`<br>Allows unitTypeObjects and cityObjects, but not other kinds of userdata.",
                "extends": {
                    "args": [
                        {
                            "desc": "A valueSpecification is a table with the following keys and values:<br><br>[\"nil\"] = true or nil<br>If this key is true, the specified value can be nil.<br><br>[\"boolean\"] = true, \"true\", \"false\", or nil<br>If this key is true (boolean value), the specified value can be a boolean.<br>If this key is \"true\" (string), then the specified value can be true, but not false.<br>If this key is \"false\" (string), then the specified value can be false, but not true.<br>If this key is nil, the specified value can't be a boolean.<br><br>[\"function\"] = true, string, or nil<br>if this key is true or string, the specified value can be a function.<br>If string, the string describes the function, e.g. `function(unit)-->number`.  Value specification checks do not check if the function actually matches the description, only that it is a function.<br>If this key is nil, the specified value can't be a function.<br><br>[\"number\"] = true or nil or {minVal=number/nil, maxVal=number/nil, integer=true/nil}<br>If true, the specified value can be any number.  If nil, the specified value can't be a number.<br>If table, any number must also be larger than the `minVal` (if specified) and smaller than the `maxVal` (if specified).  If the `integer` key is true, the value must also be an integer.<br><br>[\"string\"] = true or {[validString] = truthy} or nil<br>If this key is true, any string is allowed.<br>If it is a table, any string value must be a key in that table, with a truthy (anything other than false/nil) associated value.<br>If nil, the value can't be a string.<br><br>[\"table\"]=string, true, nil, or {[1]=function(table)->true or string, [2]=string}<br>If the key is a string, any table is accepted, and the string describes the kind of table needed.<br>If true, any table is accepted, and a generated description will be 'table'.<br>If the key is a table, the table's value for `1` is a function, which returns true if specified value is an acceptable table, and a string describing the problem if it is not.  The value for `2` is a string describing the required table, for generated descriptions/errors.<br>If nil, the specified value can't be a table.<br><br>[\"userdata\"] = {[dataTypeName]=isDataTypeFn} or nil<br>The keys to this table are strings that describe acceptable userdata, and the values are functions which return true if the specified value matches the type, and false otherwise.<br>E.g.<br>`{[\"unitTypeObject\"] = civ.isUnitType, [\"cityObject\"] = civ.isCity}`<br>Allows unitTypeObjects and cityObjects, but not other kinds of userdata.",
                            "finish": 83340077,
                            "name": "valueSpecification",
                            "start": 83340059,
                            "type": "local",
                            "view": "table"
                        }
                    ],
                    "desc": "  Takes a valueSpecification, and returns a newValueSpecification.\n  The newValueSpecification allow both the original valueSpecification\n  and tables where values are the original valueSpecification.<br><br>\n  Limiation: the valueSpecification can't have a any tables as valid value types.  If you need that, consider `gen.tableOfValueSpecification` or writing a custom valueSpecification.\n\n@*param* `valueSpecification` โ A valueSpecification is a table with the following keys and values:<br><br>[\"nil\"] = true or nil<br>If this key is true, the specified value can be nil.<br><br>[\"boolean\"] = true, \"true\", \"false\", or nil<br>If this key is true (boolean value), the specified value can be a boolean.<br>If this key is \"true\" (string), then the specified value can be true, but not false.<br>If this key is \"false\" (string), then the specified value can be false, but not true.<br>If this key is nil, the specified value can't be a boolean.<br><br>[\"function\"] = true, string, or nil<br>if this key is true or string, the specified value can be a function.<br>If string, the string describes the function, e.g. `function(unit)-->number`.  Value specification checks do not check if the function actually matches the description, only that it is a function.<br>If this key is nil, the specified value can't be a function.<br><br>[\"number\"] = true or nil or {minVal=number/nil, maxVal=number/nil, integer=true/nil}<br>If true, the specified value can be any number.  If nil, the specified value can't be a number.<br>If table, any number must also be larger than the `minVal` (if specified) and smaller than the `maxVal` (if specified).  If the `integer` key is true, the value must also be an integer.<br><br>[\"string\"] = true or {[validString] = truthy} or nil<br>If this key is true, any string is allowed.<br>If it is a table, any string value must be a key in that table, with a truthy (anything other than false/nil) associated value.<br>If nil, the value can't be a string.<br><br>[\"table\"]=string, true, nil, or {[1]=function(table)->true or string, [2]=string}<br>If the key is a string, any table is accepted, and the string describes the kind of table needed.<br>If true, any table is accepted, and a generated description will be 'table'.<br>If the key is a table, the table's value for `1` is a function, which returns true if specified value is an acceptable table, and a string describing the problem if it is not.  The value for `2` is a string describing the required table, for generated descriptions/errors.<br>If nil, the specified value can't be a table.<br><br>[\"userdata\"] = {[dataTypeName]=isDataTypeFn} or nil<br>The keys to this table are strings that describe acceptable userdata, and the values are functions which return true if the specified value matches the type, and false otherwise.<br>E.g.<br>`{[\"unitTypeObject\"] = civ.isUnitType, [\"cityObject\"] = civ.isCity}`<br>Allows unitTypeObjects and cityObjects, but not other kinds of userdata.",
                    "finish": 83510003,
                    "returns": [
                        {
                            "name": "newValueSpecification",
                            "type": "function.return",
                            "view": "table"
                        }
                    ],
                    "start": 83340000,
                    "type": "function",
                    "view": "function gen.valueSpecificationOrTableOfValueSpecification(valueSpecification: table)\n  -> newValueSpecification: table"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 83340058,
                "name": "valueSpecificationOrTableOfValueSpecification",
                "start": 83340009,
                "type": "setfield"
            },
            {
                "desc": "Provides module with these methods<br>\n`module:minVersion(vNumber)`<br>\nCauses an error if the module's versionNumber is below vNumber.<br>\n`module:recommendedVersion(vNumber)`<br>\nPrints a warning to the console if the module's versionNumber is below vNumber.\n<br>\nNote: Using these methods will stop Lua Language Server from recognizing a require function.  To avoid this, use ---@module \"fileName\" on the line above:\n```lua\n---@module \"someModuleName\"\nlocal someModule = require(\"someModuleName\"):minVersion(2)\n```\n\n\n@*param* `moduleTable` โ The table that has the module functions.\n\n@*param* `vNum` โ the module's current version number\n\n@*param* `fileMod` โ A boolean telling if the file has been modified by the scenario designer.  This way, the error can warn the designer that upgrading may remove some work they did.\n\n@*param* `moduleFileName` โ The module's file name.",
                "extends": {
                    "args": [
                        {
                            "desc": "The table that has the module functions.",
                            "finish": 79300041,
                            "name": "moduleTable",
                            "start": 79300030,
                            "type": "local",
                            "view": "table"
                        },
                        {
                            "desc": "the module's current version number",
                            "finish": 79300046,
                            "name": "vNum",
                            "start": 79300042,
                            "type": "local",
                            "view": "number"
                        },
                        {
                            "desc": "A boolean telling if the file has been modified by the scenario designer.  This way, the error can warn the designer that upgrading may remove some work they did.",
                            "finish": 79300054,
                            "name": "fileMod",
                            "start": 79300047,
                            "type": "local",
                            "view": "boolean"
                        },
                        {
                            "desc": "The module's file name.",
                            "finish": 79300069,
                            "name": "moduleFileName",
                            "start": 79300055,
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "Provides module with these methods<br>\n`module:minVersion(vNumber)`<br>\nCauses an error if the module's versionNumber is below vNumber.<br>\n`module:recommendedVersion(vNumber)`<br>\nPrints a warning to the console if the module's versionNumber is below vNumber.\n<br>\nNote: Using these methods will stop Lua Language Server from recognizing a require function.  To avoid this, use ---@module \"fileName\" on the line above:\n```lua\n---@module \"someModuleName\"\nlocal someModule = require(\"someModuleName\"):minVersion(2)\n```\n\n\n@*param* `moduleTable` โ The table that has the module functions.\n\n@*param* `vNum` โ the module's current version number\n\n@*param* `fileMod` โ A boolean telling if the file has been modified by the scenario designer.  This way, the error can warn the designer that upgrading may remove some work they did.\n\n@*param* `moduleFileName` โ The module's file name.",
                    "finish": 79660003,
                    "start": 79300000,
                    "type": "function",
                    "view": "function gen.versionFunctions(moduleTable: table, vNum: number, fileMod: boolean, moduleFileName: string)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 79300029,
                "name": "versionFunctions",
                "start": 79300009,
                "type": "setfield"
            },
            {
                "desc": " Returns the movement allowance of a unit after\n taking into account Nuclear Power tech, Magellan's Expedition, and Lighthouse.\n Returns \"atomic\" movement points (that is, the movement recorded by `unit.moveSpent`, or \"regular\" movement points * `totpp.movementMultipliers.aggregate`",
                "extends": {
                    "args": [
                        {
                            "desc": "A unit object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit in the game, and provides a means of interacting with it. This should not be confused with the unit type object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unit)",
                            "finish": 30680037,
                            "name": "unit",
                            "start": 30680033,
                            "type": "local",
                            "view": "unitObject"
                        }
                    ],
                    "desc": " Returns the movement allowance of a unit after\n taking into account Nuclear Power tech, Magellan's Expedition, and Lighthouse.\n Returns \"atomic\" movement points (that is, the movement recorded by `unit.moveSpent`, or \"regular\" movement points * `totpp.movementMultipliers.aggregate`",
                    "finish": 30870003,
                    "returns": [
                        {
                            "name": "atomicMovementPoints",
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": 30680000,
                    "type": "function",
                    "view": "function gen.wonderModifiedMoves(unit: unitObject)\n  -> atomicMovementPoints: integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 30680032,
                "name": "wonderModifiedMoves",
                "start": 30680009,
                "type": "setfield"
            }
        ],
        "name": "gen",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 370022,
                "start": 370009,
                "type": "doc.enum"
            }
        ],
        "desc": "```lua\n{\n    maxTribes: integer = 8,\n    maxTribeID: integer = 7,\n    maxUnitTypes: integer = 189,\n    maxUnitTypeID: integer = 188,\n    domainLand: integer = 0,\n    domainAir: integer = 1,\n    domainSea: integer = 2,\n    maxMoveSpent: integer = 255,\n    maxImprovements: integer = 40,\n    maxImprovementID: integer = 39,\n    maxWonders: integer = 28,\n    maxWonderID: integer = 27,\n    maxBaseTerrains: integer = 64,\n    maxBaseTerrainID: integer = 63,\n    maxBaseTerrainPerMap: integer = 16,\n    maxBaseTerrainType: integer = 15,\n    maxTerrains: integer = 192,\n    maxTerrainID: integer = 191,\n    maxMaps: integer = 4,\n    maxMapID: integer = 3,\n    roleAttack: integer = 0,\n    roleDefend: integer = 1,\n    roleNavalSuperiority: integer = 2,\n    roleAirSuperiority: integer = 3,\n    roleSeaTransport: integer = 4,\n    roleSettle: integer = 5,\n    roleDiplomacy: integer = 6,\n    roleTrade: integer = 7,\n    epochAncient: integer = 0,\n    epochRenaissance: integer = 1,\n    epochIndustrialRevolution: integer = 2,\n    epochModern: integer = 3,\n    categoryMilitary: integer = 0,\n    categoryEconomic: integer = 1,\n    categorySocial: integer = 2,\n    categoryAcademic: integer = 3,\n    categoryApplied: integer = 4,\n    govtAnarchy: integer = 0,\n    govtDespotism: integer = 1,\n    govtMonarchy: integer = 2,\n    govtCommunism: integer = 3,\n    govtFundamentalism: integer = 4,\n    govtRepublic: integer = 5,\n    govtDemocracy: integer = 6,\n    resourceNone: integer = 0,\n    resourceFish: integer = 1,\n    resourceWhale: integer = 2,\n    grasslandType: integer = 2,\n    leaderAggressive: integer = 1,\n    leaderRational: integer = -1,\n    leaderExpansionist: integer = 1,\n    leaderPerfectionist: integer = -1,\n    leaderCivilized: integer = 1,\n    leaderMilitaristic: integer = -1,\n    leaderNeutral: integer = 0,\n    cityStyleBronzeAge: integer = 0,\n    cityStyleClassical: integer = 1,\n    cityStyleFarEast: integer = 2,\n    cityStyleMedieval: integer = 3,\n}\n```",
        "fields": [],
        "name": "gen.constants",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 740020,
                "start": 740004,
                "type": "tablefield"
            }
        ],
        "fields": [],
        "name": "gen.constants.categoryAcademic",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 750019,
                "start": 750004,
                "type": "tablefield"
            }
        ],
        "fields": [],
        "name": "gen.constants.categoryApplied",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 720020,
                "start": 720004,
                "type": "tablefield"
            }
        ],
        "fields": [],
        "name": "gen.constants.categoryEconomic",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 710020,
                "start": 710004,
                "type": "tablefield"
            }
        ],
        "fields": [],
        "name": "gen.constants.categoryMilitary",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 730018,
                "start": 730004,
                "type": "tablefield"
            }
        ],
        "fields": [],
        "name": "gen.constants.categorySocial",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 940022,
                "start": 940004,
                "type": "tablefield"
            }
        ],
        "fields": [],
        "name": "gen.constants.cityStyleBronzeAge",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 950022,
                "start": 950004,
                "type": "tablefield"
            }
        ],
        "fields": [],
        "name": "gen.constants.cityStyleClassical",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 960020,
                "start": 960004,
                "type": "tablefield"
            }
        ],
        "fields": [],
        "name": "gen.constants.cityStyleFarEast",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 970021,
                "start": 970004,
                "type": "tablefield"
            }
        ],
        "fields": [],
        "name": "gen.constants.cityStyleMedieval",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 440013,
                "start": 440004,
                "type": "tablefield"
            }
        ],
        "fields": [],
        "name": "gen.constants.domainAir",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 430014,
                "start": 430004,
                "type": "tablefield"
            }
        ],
        "fields": [],
        "name": "gen.constants.domainLand",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 450013,
                "start": 450004,
                "type": "tablefield"
            }
        ],
        "fields": [],
        "name": "gen.constants.domainSea",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 670016,
                "start": 670004,
                "type": "tablefield"
            }
        ],
        "fields": [],
        "name": "gen.constants.epochAncient",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 690029,
                "start": 690004,
                "type": "tablefield"
            }
        ],
        "fields": [],
        "name": "gen.constants.epochIndustrialRevolution",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 700015,
                "start": 700004,
                "type": "tablefield"
            }
        ],
        "fields": [],
        "name": "gen.constants.epochModern",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 680020,
                "start": 680004,
                "type": "tablefield"
            }
        ],
        "fields": [],
        "name": "gen.constants.epochRenaissance",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 760015,
                "start": 760004,
                "type": "tablefield"
            }
        ],
        "fields": [],
        "name": "gen.constants.govtAnarchy",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 790017,
                "start": 790004,
                "type": "tablefield"
            }
        ],
        "fields": [],
        "name": "gen.constants.govtCommunism",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 820017,
                "start": 820004,
                "type": "tablefield"
            }
        ],
        "fields": [],
        "name": "gen.constants.govtDemocracy",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 770017,
                "start": 770004,
                "type": "tablefield"
            }
        ],
        "fields": [],
        "name": "gen.constants.govtDespotism",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 800022,
                "start": 800004,
                "type": "tablefield"
            }
        ],
        "fields": [],
        "name": "gen.constants.govtFundamentalism",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 780016,
                "start": 780004,
                "type": "tablefield"
            }
        ],
        "fields": [],
        "name": "gen.constants.govtMonarchy",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 810016,
                "start": 810004,
                "type": "tablefield"
            }
        ],
        "fields": [],
        "name": "gen.constants.govtRepublic",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 860017,
                "start": 860004,
                "type": "tablefield"
            }
        ],
        "fields": [],
        "name": "gen.constants.grasslandType",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 870020,
                "start": 870004,
                "type": "tablefield"
            }
        ],
        "fields": [],
        "name": "gen.constants.leaderAggressive",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 910019,
                "start": 910004,
                "type": "tablefield"
            }
        ],
        "fields": [],
        "name": "gen.constants.leaderCivilized",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 890022,
                "start": 890004,
                "type": "tablefield"
            }
        ],
        "fields": [],
        "name": "gen.constants.leaderExpansionist",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 920022,
                "start": 920004,
                "type": "tablefield"
            }
        ],
        "fields": [],
        "name": "gen.constants.leaderMilitaristic",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 930017,
                "start": 930004,
                "type": "tablefield"
            }
        ],
        "fields": [],
        "name": "gen.constants.leaderNeutral",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 900023,
                "start": 900004,
                "type": "tablefield"
            }
        ],
        "fields": [],
        "name": "gen.constants.leaderPerfectionist",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 880018,
                "start": 880004,
                "type": "tablefield"
            }
        ],
        "fields": [],
        "name": "gen.constants.leaderRational",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 520020,
                "start": 520004,
                "type": "tablefield"
            }
        ],
        "fields": [],
        "name": "gen.constants.maxBaseTerrainID",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 530024,
                "start": 530004,
                "type": "tablefield"
            }
        ],
        "fields": [],
        "name": "gen.constants.maxBaseTerrainPerMap",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 540022,
                "start": 540004,
                "type": "tablefield"
            }
        ],
        "fields": [],
        "name": "gen.constants.maxBaseTerrainType",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 510019,
                "start": 510004,
                "type": "tablefield"
            }
        ],
        "fields": [],
        "name": "gen.constants.maxBaseTerrains",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 480020,
                "start": 480004,
                "type": "tablefield"
            }
        ],
        "fields": [],
        "name": "gen.constants.maxImprovementID",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 470019,
                "start": 470004,
                "type": "tablefield"
            }
        ],
        "fields": [],
        "name": "gen.constants.maxImprovements",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 580012,
                "start": 580004,
                "type": "tablefield"
            }
        ],
        "fields": [],
        "name": "gen.constants.maxMapID",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 570011,
                "start": 570004,
                "type": "tablefield"
            }
        ],
        "fields": [],
        "name": "gen.constants.maxMaps",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 460016,
                "start": 460004,
                "type": "tablefield"
            }
        ],
        "fields": [],
        "name": "gen.constants.maxMoveSpent",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 560016,
                "start": 560004,
                "type": "tablefield"
            }
        ],
        "fields": [],
        "name": "gen.constants.maxTerrainID",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 550015,
                "start": 550004,
                "type": "tablefield"
            }
        ],
        "fields": [],
        "name": "gen.constants.maxTerrains",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 400014,
                "start": 400004,
                "type": "tablefield"
            }
        ],
        "fields": [],
        "name": "gen.constants.maxTribeID",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 390013,
                "start": 390004,
                "type": "tablefield"
            }
        ],
        "fields": [],
        "name": "gen.constants.maxTribes",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 420017,
                "start": 420004,
                "type": "tablefield"
            }
        ],
        "fields": [],
        "name": "gen.constants.maxUnitTypeID",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 410016,
                "start": 410004,
                "type": "tablefield"
            }
        ],
        "fields": [],
        "name": "gen.constants.maxUnitTypes",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 500015,
                "start": 500004,
                "type": "tablefield"
            }
        ],
        "fields": [],
        "name": "gen.constants.maxWonderID",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 490014,
                "start": 490004,
                "type": "tablefield"
            }
        ],
        "fields": [],
        "name": "gen.constants.maxWonders",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 840016,
                "start": 840004,
                "type": "tablefield"
            }
        ],
        "fields": [],
        "name": "gen.constants.resourceFish",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 830016,
                "start": 830004,
                "type": "tablefield"
            }
        ],
        "fields": [],
        "name": "gen.constants.resourceNone",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 850017,
                "start": 850004,
                "type": "tablefield"
            }
        ],
        "fields": [],
        "name": "gen.constants.resourceWhale",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 620022,
                "start": 620004,
                "type": "tablefield"
            }
        ],
        "fields": [],
        "name": "gen.constants.roleAirSuperiority",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 590014,
                "start": 590004,
                "type": "tablefield"
            }
        ],
        "fields": [],
        "name": "gen.constants.roleAttack",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 600014,
                "start": 600004,
                "type": "tablefield"
            }
        ],
        "fields": [],
        "name": "gen.constants.roleDefend",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 650017,
                "start": 650004,
                "type": "tablefield"
            }
        ],
        "fields": [],
        "name": "gen.constants.roleDiplomacy",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 610024,
                "start": 610004,
                "type": "tablefield"
            }
        ],
        "fields": [],
        "name": "gen.constants.roleNavalSuperiority",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 630020,
                "start": 630004,
                "type": "tablefield"
            }
        ],
        "fields": [],
        "name": "gen.constants.roleSeaTransport",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 640014,
                "start": 640004,
                "type": "tablefield"
            }
        ],
        "fields": [],
        "name": "gen.constants.roleSettle",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 660013,
                "start": 660004,
                "type": "tablefield"
            }
        ],
        "fields": [],
        "name": "gen.constants.roleTrade",
        "type": "type"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 790018,
                            "name": "f",
                            "start": 790017,
                            "type": "local",
                            "view": "(integer|fun(...any):...unknown)?"
                        }
                    ],
                    "desc": "\nReturns the current environment in use by the function. `f` can be a Lua function or a number that specifies the function at that stack level.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-getfenv)",
                    "finish": 790023,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "table"
                        }
                    ],
                    "start": 790000,
                    "type": "function",
                    "view": "function getfenv(f?: integer|fun(...any):...unknown)\n  -> table"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/basic.lua",
                "finish": 790016,
                "start": 790009,
                "type": "setglobal"
            }
        ],
        "desc": "\nReturns the current environment in use by the function. `f` can be a Lua function or a number that specifies the function at that stack level.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-getfenv)",
        "name": "getfenv",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 890028,
                            "name": "object",
                            "start": 890022,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "\nIf object does not have a metatable, returns nil. Otherwise, if the object's metatable has a __metatable field, returns the associated value. Otherwise, returns the metatable of the given object.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-getmetatable)",
                    "finish": 890033,
                    "returns": [
                        {
                            "name": "metatable",
                            "type": "function.return",
                            "view": "table"
                        }
                    ],
                    "start": 890000,
                    "type": "function",
                    "view": "function getmetatable(object: any)\n  -> metatable: table"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/basic.lua",
                "finish": 890021,
                "start": 890009,
                "type": "setglobal"
            }
        ],
        "desc": "\nIf object does not have a metatable, returns nil. Otherwise, if the object's metatable has a __metatable field, returns the associated value. Otherwise, returns the metatable of the given object.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-getmetatable)",
        "name": "getmetatable",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "finish": 670020,
                    "start": 670013,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 670020,
                            "start": 670013,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 670020,
                "start": 670010,
                "type": "doc.alias"
            }
        ],
        "desc": "An id number is a positive integer that corresponds to an object in the game or the rules.txt file. If you know what <em>kind</em> of object the id corresponds to, you can then use the id to get the specific item in question. The maximum value for an id will depend on its corresponding object. For example, the maximum id for a tribe object is 7, but (at least for programming purposes) there is no limit to the id number of a unit.",
        "fields": [],
        "name": "id",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 4890021,
                "start": 4890010,
                "type": "doc.class"
            }
        ],
        "desc": "A image object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents an image that can be displayed in a dialog object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#dialog)",
        "fields": [],
        "name": "imageObject",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 2940027,
                "start": 2940010,
                "type": "doc.class"
            }
        ],
        "desc": "An improvement object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents an improvement entry in the rules.txt, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#improvement)",
        "fields": [
            {
                "desc": "(get/set - ephemeral) Returns `true` if the improvement cannot be sold, `false` otherwise. Requires the \"Improvement flags\" patch.",
                "extends": {
                    "finish": 2950026,
                    "start": 2950019,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 2950026,
                            "start": 2950019,
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 2950026,
                "name": "cantSell",
                "start": 2950010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set - ephemeral) Returns the cost of the improvement in rows. Multiply by civ.cosmic.shieldRows for the actual production cost.",
                "extends": {
                    "finish": 2960022,
                    "start": 2960015,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 2960022,
                            "start": 2960015,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 2960022,
                "name": "cost",
                "start": 2960010,
                "type": "doc.field"
            },
            {
                "desc": "(get) Returns the id of the improvement.",
                "extends": {
                    "finish": 2970015,
                    "start": 2970013,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 2970015,
                            "start": 2970013,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 2970015,
                "name": "id",
                "start": 2970010,
                "type": "doc.field"
            },
            {
                "desc": "(get) Returns the name of the improvement (e.g. \"Barracks\").",
                "extends": {
                    "finish": 2980021,
                    "start": 2980015,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 2980021,
                            "start": 2980015,
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 2980021,
                "name": "name",
                "start": 2980010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set - ephemeral) Returns what happens to this improvement when a city is captured (0 - Default, 1 - Preserve, 2 - Destroy, 3 - Random). Requires the \"Improvement flags\" patch.",
                "extends": {
                    "finish": 2990027,
                    "start": 2990020,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 2990027,
                            "start": 2990020,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 2990027,
                "name": "onCapture",
                "start": 2990010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set - ephemeral) Returns the prerequisite tech of the improvement.",
                "extends": {
                    "finish": 3000027,
                    "start": 3000017,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 3000027,
                            "start": 3000017,
                            "type": "doc.type.name",
                            "view": "techObject"
                        }
                    ],
                    "view": "techObject"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 3000027,
                "name": "prereq",
                "start": 3000010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set - ephemeral) Returns the upkeep cost of the improvement.",
                "extends": {
                    "finish": 3010024,
                    "start": 3010017,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 3010024,
                            "start": 3010017,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 3010024,
                "name": "upkeep",
                "start": 3010010,
                "type": "doc.field"
            }
        ],
        "name": "improvementObject",
        "type": "type"
    },
    {
        "defines": [
            {
                "extends": {
                    "finish": 260007,
                    "start": 260005,
                    "type": "table",
                    "view": "iolib"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/io.lua",
                "finish": 260002,
                "start": 260000,
                "type": "setglobal"
            }
        ],
        "desc": "\n\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-io)\n",
        "name": "io",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "\n\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-file)\n",
                            "finish": 510022,
                            "name": "file",
                            "start": 510018,
                            "type": "local",
                            "view": "file*?"
                        }
                    ],
                    "desc": "\nClose `file` or default output file.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-io.close)\n\n\n```lua\nexitcode:\n    | \"exit\"\n    | \"signal\"\n```",
                    "finish": 510027,
                    "returns": [
                        {
                            "name": "suc",
                            "type": "function.return",
                            "view": "boolean?"
                        },
                        {
                            "name": "exitcode",
                            "type": "function.return",
                            "view": "(\"exit\"|\"signal\")?"
                        },
                        {
                            "name": "code",
                            "type": "function.return",
                            "view": "integer?"
                        }
                    ],
                    "start": 510000,
                    "type": "function",
                    "view": "function io.close(file?: file*)\n  -> suc: boolean?\n  2. exitcode: (\"exit\"|\"signal\")?\n  3. code: integer?"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/io.lua",
                "finish": 510017,
                "start": 510009,
                "type": "setfield"
            }
        ],
        "desc": "\nClose `file` or default output file.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-io.close)\n\n\n```lua\nexitcode:\n    | \"exit\"\n    | \"signal\"\n```",
        "name": "io.close",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [],
                    "desc": "\nSaves any written data to default output file.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-io.flush)",
                    "finish": 580023,
                    "start": 580000,
                    "type": "function",
                    "view": "function io.flush()"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/io.lua",
                "finish": 580017,
                "start": 580009,
                "type": "setfield"
            }
        ],
        "desc": "\nSaves any written data to default output file.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-io.flush)",
        "name": "io.flush",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A string is a data type native to Lua which consists of a sequence of characters. These often represent text to be displayed, but are also useful in other contexts. Strings are commonly used as keys in tables, since they make code more readable.\n[Programming in Lua, 2.4 -- Strings](https://www.lua.org/pil/2.4.html)",
                            "finish": 670022,
                            "name": "file",
                            "start": 670018,
                            "type": "local",
                            "view": "string|file*"
                        }
                    ],
                    "desc": "\nSets `file` as the default input file.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-io.input)",
                    "finish": 670027,
                    "start": 670000,
                    "type": "function",
                    "view": "function io.input(file: string|file*)"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/io.lua",
                "finish": 670017,
                "start": 670009,
                "type": "setfield"
            }
        ],
        "desc": "\nSets `file` as the default input file.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-io.input)",
        "name": "io.input",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A string is a data type native to Lua which consists of a sequence of characters. These often represent text to be displayed, but are also useful in other contexts. Strings are commonly used as keys in tables, since they make code more readable.\n[Programming in Lua, 2.4 -- Strings](https://www.lua.org/pil/2.4.html)",
                            "finish": 830026,
                            "name": "filename",
                            "start": 830018,
                            "type": "local",
                            "view": "string?"
                        },
                        {
                            "desc": "An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 830031,
                            "start": 830028,
                            "type": "...",
                            "view": "string|integer|\"L\"|\"a\"|\"l\"...(+1)"
                        }
                    ],
                    "desc": "\n------\n```lua\nfor c in io.lines(filename, ...) do\n    body\nend\n```\n\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-io.lines)\n\n\n```lua\n-- An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n-- [Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)\n-- An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n-- [Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)\n-- An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n-- [Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)\n-- A string is a data type native to Lua which consists of a sequence of characters. These often represent text to be displayed, but are also useful in other contexts. Strings are commonly used as keys in tables, since they make code more readable.\n-- [Programming in Lua, 2.4 -- Strings](https://www.lua.org/pil/2.4.html)\n-- A string is a data type native to Lua which consists of a sequence of characters. These often represent text to be displayed, but are also useful in other contexts. Strings are commonly used as keys in tables, since they make code more readable.\n-- [Programming in Lua, 2.4 -- Strings](https://www.lua.org/pil/2.4.html)\n...(param):\n    | \"n\" -- Reads a numeral and returns it as number.\n    | \"a\" -- Reads the whole file.\n   -> \"l\" -- Reads the next line skipping the end of line.\n    | \"L\" -- Reads the next line keeping the end of line.\n```",
                    "finish": 830036,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "fun():any, ...unknown"
                        }
                    ],
                    "start": 830000,
                    "type": "function",
                    "view": "function io.lines(filename?: string, ...string|integer|\"L\"|\"a\"|\"l\"...(+1))\n  -> fun():any, ...unknown"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/io.lua",
                "finish": 830017,
                "start": 830009,
                "type": "setfield"
            }
        ],
        "desc": "\n------\n```lua\nfor c in io.lines(filename, ...) do\n    body\nend\n```\n\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-io.lines)\n\n\n```lua\n-- An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n-- [Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)\n-- An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n-- [Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)\n-- An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n-- [Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)\n-- A string is a data type native to Lua which consists of a sequence of characters. These often represent text to be displayed, but are also useful in other contexts. Strings are commonly used as keys in tables, since they make code more readable.\n-- [Programming in Lua, 2.4 -- Strings](https://www.lua.org/pil/2.4.html)\n-- A string is a data type native to Lua which consists of a sequence of characters. These often represent text to be displayed, but are also useful in other contexts. Strings are commonly used as keys in tables, since they make code more readable.\n-- [Programming in Lua, 2.4 -- Strings](https://www.lua.org/pil/2.4.html)\n...(param):\n    | \"n\" -- Reads a numeral and returns it as number.\n    | \"a\" -- Reads the whole file.\n   -> \"l\" -- Reads the next line skipping the end of line.\n    | \"L\" -- Reads the next line keeping the end of line.\n```",
        "name": "io.lines",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A string is a data type native to Lua which consists of a sequence of characters. These often represent text to be displayed, but are also useful in other contexts. Strings are commonly used as keys in tables, since they make code more readable.\n[Programming in Lua, 2.4 -- Strings](https://www.lua.org/pil/2.4.html)",
                            "finish": 950025,
                            "name": "filename",
                            "start": 950017,
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": 950031,
                            "name": "mode",
                            "start": 950027,
                            "type": "local",
                            "view": "(\"a\"|\"a+\"|\"a+b\"|\"ab\"|\"r\"...(+7))?"
                        }
                    ],
                    "desc": "\nOpens a file, in the mode specified in the string `mode`.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-io.open)\n\n\n```lua\nmode:\n   -> \"r\" -- Read mode.\n    | \"w\" -- Write mode.\n    | \"a\" -- Append mode.\n    | \"r+\" -- Update mode, all previous data is preserved.\n    | \"w+\" -- Update mode, all previous data is erased.\n    | \"a+\" -- Append update mode, previous data is preserved, writing is only allowed at the end of file.\n    | \"rb\" -- Read mode. (in binary mode.)\n    | \"wb\" -- Write mode. (in binary mode.)\n    | \"ab\" -- Append mode. (in binary mode.)\n    | \"r+b\" -- Update mode, all previous data is preserved. (in binary mode.)\n    | \"w+b\" -- Update mode, all previous data is erased. (in binary mode.)\n    | \"a+b\" -- Append update mode, previous data is preserved, writing is only allowed at the end of file. (in binary mode.)\n```",
                    "finish": 950036,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "file*?"
                        },
                        {
                            "name": "errmsg",
                            "type": "function.return",
                            "view": "string?"
                        }
                    ],
                    "start": 950000,
                    "type": "function",
                    "view": "function io.open(filename: string, mode?: \"a\"|\"a+\"|\"a+b\"|\"ab\"|\"r\"...(+7))\n  -> file*?\n  2. errmsg: string?"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/io.lua",
                "finish": 950016,
                "start": 950009,
                "type": "setfield"
            }
        ],
        "desc": "\nOpens a file, in the mode specified in the string `mode`.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-io.open)\n\n\n```lua\nmode:\n   -> \"r\" -- Read mode.\n    | \"w\" -- Write mode.\n    | \"a\" -- Append mode.\n    | \"r+\" -- Update mode, all previous data is preserved.\n    | \"w+\" -- Update mode, all previous data is erased.\n    | \"a+\" -- Append update mode, previous data is preserved, writing is only allowed at the end of file.\n    | \"rb\" -- Read mode. (in binary mode.)\n    | \"wb\" -- Write mode. (in binary mode.)\n    | \"ab\" -- Append mode. (in binary mode.)\n    | \"r+b\" -- Update mode, all previous data is preserved. (in binary mode.)\n    | \"w+b\" -- Update mode, all previous data is erased. (in binary mode.)\n    | \"a+b\" -- Append update mode, previous data is preserved, writing is only allowed at the end of file. (in binary mode.)\n```",
        "name": "io.open",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A string is a data type native to Lua which consists of a sequence of characters. These often represent text to be displayed, but are also useful in other contexts. Strings are commonly used as keys in tables, since they make code more readable.\n[Programming in Lua, 2.4 -- Strings](https://www.lua.org/pil/2.4.html)",
                            "finish": 1040023,
                            "name": "file",
                            "start": 1040019,
                            "type": "local",
                            "view": "string|file*"
                        }
                    ],
                    "desc": "\nSets `file` as the default output file.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-io.output)",
                    "finish": 1040028,
                    "start": 1040000,
                    "type": "function",
                    "view": "function io.output(file: string|file*)"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/io.lua",
                "finish": 1040018,
                "start": 1040009,
                "type": "setfield"
            }
        ],
        "desc": "\nSets `file` as the default output file.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-io.output)",
        "name": "io.output",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A string is a data type native to Lua which consists of a sequence of characters. These often represent text to be displayed, but are also useful in other contexts. Strings are commonly used as keys in tables, since they make code more readable.\n[Programming in Lua, 2.4 -- Strings](https://www.lua.org/pil/2.4.html)",
                            "finish": 1190022,
                            "name": "prog",
                            "start": 1190018,
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": 1190028,
                            "name": "mode",
                            "start": 1190024,
                            "type": "local",
                            "view": "(\"r\"|\"w\")?"
                        }
                    ],
                    "desc": "\nStarts program prog in a separated process.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-io.popen)\n\n\n```lua\nmode:\n    | \"r\" -- Read data from this program by `file`.\n    | \"w\" -- Write data to this program by `file`.\n```",
                    "finish": 1190033,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "file*?"
                        },
                        {
                            "name": "errmsg",
                            "type": "function.return",
                            "view": "string?"
                        }
                    ],
                    "start": 1190000,
                    "type": "function",
                    "view": "function io.popen(prog: string, mode?: \"r\"|\"w\")\n  -> file*?\n  2. errmsg: string?"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/io.lua",
                "finish": 1190017,
                "start": 1190009,
                "type": "setfield"
            }
        ],
        "desc": "\nStarts program prog in a separated process.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-io.popen)\n\n\n```lua\nmode:\n    | \"r\" -- Read data from this program by `file`.\n    | \"w\" -- Write data to this program by `file`.\n```",
        "name": "io.popen",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 1300020,
                            "start": 1300017,
                            "type": "...",
                            "view": "string|integer|\"L\"|\"a\"|\"l\"...(+1)"
                        }
                    ],
                    "desc": "\nReads the `file`, according to the given formats, which specify what to read.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-io.read)\n\n\n```lua\n-- An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n-- [Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)\n-- An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n-- [Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)\n-- An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n-- [Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)\n-- A string is a data type native to Lua which consists of a sequence of characters. These often represent text to be displayed, but are also useful in other contexts. Strings are commonly used as keys in tables, since they make code more readable.\n-- [Programming in Lua, 2.4 -- Strings](https://www.lua.org/pil/2.4.html)\n-- A string is a data type native to Lua which consists of a sequence of characters. These often represent text to be displayed, but are also useful in other contexts. Strings are commonly used as keys in tables, since they make code more readable.\n-- [Programming in Lua, 2.4 -- Strings](https://www.lua.org/pil/2.4.html)\n...(param):\n    | \"n\" -- Reads a numeral and returns it as number.\n    | \"a\" -- Reads the whole file.\n   -> \"l\" -- Reads the next line skipping the end of line.\n    | \"L\" -- Reads the next line keeping the end of line.\n```",
                    "finish": 1300025,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "any"
                        },
                        {
                            "name": "...",
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": 1300000,
                    "type": "function",
                    "view": "function io.read(...string|integer|\"L\"|\"a\"|\"l\"...(+1))\n  -> any\n  2. ...any"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/io.lua",
                "finish": 1300016,
                "start": 1300009,
                "type": "setfield"
            }
        ],
        "desc": "\nReads the `file`, according to the given formats, which specify what to read.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-io.read)\n\n\n```lua\n-- An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n-- [Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)\n-- An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n-- [Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)\n-- An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n-- [Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)\n-- A string is a data type native to Lua which consists of a sequence of characters. These often represent text to be displayed, but are also useful in other contexts. Strings are commonly used as keys in tables, since they make code more readable.\n-- [Programming in Lua, 2.4 -- Strings](https://www.lua.org/pil/2.4.html)\n-- A string is a data type native to Lua which consists of a sequence of characters. These often represent text to be displayed, but are also useful in other contexts. Strings are commonly used as keys in tables, since they make code more readable.\n-- [Programming in Lua, 2.4 -- Strings](https://www.lua.org/pil/2.4.html)\n...(param):\n    | \"n\" -- Reads a numeral and returns it as number.\n    | \"a\" -- Reads the whole file.\n   -> \"l\" -- Reads the next line skipping the end of line.\n    | \"L\" -- Reads the next line keeping the end of line.\n```",
        "name": "io.read",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [],
                    "desc": "\nIn case of success, returns a handle for a temporary file.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-io.tmpfile)",
                    "finish": 1390025,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "file*"
                        }
                    ],
                    "start": 1390000,
                    "type": "function",
                    "view": "function io.tmpfile()\n  -> file*"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/io.lua",
                "finish": 1390019,
                "start": 1390009,
                "type": "setfield"
            }
        ],
        "desc": "\nIn case of success, returns a handle for a temporary file.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-io.tmpfile)",
        "name": "io.tmpfile",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "\n\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-file)\n",
                            "finish": 1540021,
                            "name": "file",
                            "start": 1540017,
                            "type": "local",
                            "view": "file*"
                        }
                    ],
                    "desc": "\nChecks whether `obj` is a valid file handle.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-io.type)\n\n\n```lua\nreturn #1:\n    | \"file\" -- Is an open file handle.\n    | \"closed file\" -- Is a closed file handle.\n    | `nil` -- Is not a file handle.\n```",
                    "finish": 1540026,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "\"closed file\"|\"file\"|`nil`"
                        }
                    ],
                    "start": 1540000,
                    "type": "function",
                    "view": "function io.type(file: file*)\n  -> \"closed file\"|\"file\"|`nil`"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/io.lua",
                "finish": 1540016,
                "start": 1540009,
                "type": "setfield"
            }
        ],
        "desc": "\nChecks whether `obj` is a valid file handle.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-io.type)\n\n\n```lua\nreturn #1:\n    | \"file\" -- Is an open file handle.\n    | \"closed file\" -- Is a closed file handle.\n    | `nil` -- Is not a file handle.\n```",
        "name": "io.type",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1630021,
                            "start": 1630018,
                            "type": "...",
                            "view": "unknown"
                        }
                    ],
                    "desc": "\nWrites the value of each of its arguments to default output file.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-io.write)",
                    "finish": 1630026,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "file*"
                        },
                        {
                            "name": "errmsg",
                            "type": "function.return",
                            "view": "string?"
                        }
                    ],
                    "start": 1630000,
                    "type": "function",
                    "view": "function io.write(...any)\n  -> file*\n  2. errmsg: string?"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/io.lua",
                "finish": 1630017,
                "start": 1630009,
                "type": "setfield"
            }
        ],
        "desc": "\nWrites the value of each of its arguments to default output file.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-io.write)",
        "name": "io.write",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1060017,
                            "name": "t",
                            "start": 1060016,
                            "type": "local",
                            "view": "<T:table>"
                        }
                    ],
                    "desc": "\nReturns three values (an iterator function, the table `t`, and `0`) so that the construction\n```lua\n    for i,v in ipairs(t) do body end\n```\nwill iterate over the keyโvalue pairs `(1,t[1]), (2,t[2]), ...`, up to the first absent index.\n\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-ipairs)",
                    "finish": 1060022,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "fun(table: <V>[], i?: integer):integer, <V>"
                        },
                        {
                            "type": "function.return",
                            "view": "<T:table>"
                        },
                        {
                            "name": "i",
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": 1060000,
                    "type": "function",
                    "view": "function ipairs(t: <T:table>)\n  -> fun(table: <V>[], i?: integer):integer, <V>\n  2. <T:table>\n  3. i: integer"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/basic.lua",
                "finish": 1060015,
                "start": 1060009,
                "type": "setglobal"
            }
        ],
        "desc": "\nReturns three values (an iterator function, the table `t`, and `0`) so that the construction\n```lua\n    for i,v in ipairs(t) do body end\n```\nwill iterate over the keyโvalue pairs `(1,t[1]), (2,t[2]), ...`, up to the first absent index.\n\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-ipairs)",
        "name": "ipairs",
        "type": "variable"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 760018,
                "start": 760010,
                "type": "doc.class"
            }
        ],
        "desc": "An iterator is a construct that enables a program to traverse the elements of a collection or container. Each time the iterator is called, a different element of the collection is provided. In practice, an iterator is usually used as part of a generic for loop:\n```lua \nfor unit in civ.iterateUnits() do\n  civ.deleteUnit(unit)\nend\n```\n[Tutorialspoint: Lua -- Iterators](https://www.tutorialspoint.com/lua/lua_iterators.htm)",
        "fields": [],
        "name": "iterator",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/keyboard.lua",
                "finish": 18,
                "start": 10,
                "type": "doc.class"
            }
        ],
        "fields": [
            {
                "extends": {
                    "finish": 830017,
                    "start": 830014,
                    "type": "integer",
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/keyboard.lua",
                "finish": 830011,
                "name": "F1",
                "start": 830000,
                "type": "setfield"
            },
            {
                "desc": "keyboard.F10 = nil -- F10 doesn't seem to exist",
                "extends": {
                    "finish": 930018,
                    "start": 930015,
                    "type": "integer",
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/keyboard.lua",
                "finish": 930012,
                "name": "F11",
                "start": 930000,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 940018,
                    "start": 940015,
                    "type": "integer",
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/keyboard.lua",
                "finish": 940012,
                "name": "F12",
                "start": 940000,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 840017,
                    "start": 840014,
                    "type": "integer",
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/keyboard.lua",
                "finish": 840011,
                "name": "F2",
                "start": 840000,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 850017,
                    "start": 850014,
                    "type": "integer",
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/keyboard.lua",
                "finish": 850011,
                "name": "F3",
                "start": 850000,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 860017,
                    "start": 860014,
                    "type": "integer",
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/keyboard.lua",
                "finish": 860011,
                "name": "F4",
                "start": 860000,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 870017,
                    "start": 870014,
                    "type": "integer",
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/keyboard.lua",
                "finish": 870011,
                "name": "F5",
                "start": 870000,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 880017,
                    "start": 880014,
                    "type": "integer",
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/keyboard.lua",
                "finish": 880011,
                "name": "F6",
                "start": 880000,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 890017,
                    "start": 890014,
                    "type": "integer",
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/keyboard.lua",
                "finish": 890011,
                "name": "F7",
                "start": 890000,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 900017,
                    "start": 900014,
                    "type": "integer",
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/keyboard.lua",
                "finish": 900011,
                "name": "F8",
                "start": 900000,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 910017,
                    "start": 910014,
                    "type": "integer",
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/keyboard.lua",
                "finish": 910011,
                "name": "F9",
                "start": 910000,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 30015,
                    "start": 30013,
                    "type": "integer",
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/keyboard.lua",
                "finish": 30010,
                "name": "a",
                "start": 30000,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 40015,
                    "start": 40013,
                    "type": "integer",
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/keyboard.lua",
                "finish": 40010,
                "name": "b",
                "start": 40000,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 300024,
                    "start": 300021,
                    "type": "integer",
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/keyboard.lua",
                "finish": 300018,
                "name": "backspace",
                "start": 300000,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 50015,
                    "start": 50013,
                    "type": "integer",
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/keyboard.lua",
                "finish": 50010,
                "name": "c",
                "start": 50000,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 970018,
                    "start": 970016,
                    "type": "table",
                    "view": "table"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/keyboard.lua",
                "finish": 970013,
                "name": "ctrl",
                "start": 970000,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 1130033,
                    "start": 1130022,
                    "type": "getlocal",
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/keyboard.lua",
                "finish": 1130019,
                "name": "ctrlOffset",
                "start": 1130000,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 60015,
                    "start": 60013,
                    "type": "integer",
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/keyboard.lua",
                "finish": 60010,
                "name": "d",
                "start": 60000,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 350021,
                    "start": 350018,
                    "type": "integer",
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/keyboard.lua",
                "finish": 350015,
                "name": "delete",
                "start": 350000,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 460019,
                    "start": 460016,
                    "type": "integer",
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/keyboard.lua",
                "finish": 460013,
                "name": "down",
                "start": 460000,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 70015,
                    "start": 70013,
                    "type": "integer",
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/keyboard.lua",
                "finish": 70010,
                "name": "e",
                "start": 70000,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 450019,
                    "start": 450016,
                    "type": "integer",
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/keyboard.lua",
                "finish": 450013,
                "name": "east",
                "start": 450000,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 590019,
                    "start": 590017,
                    "type": "integer",
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/keyboard.lua",
                "finish": 590014,
                "name": "eight",
                "start": 590000,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 780021,
                    "start": 780018,
                    "type": "integer",
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/keyboard.lua",
                "finish": 780015,
                "name": "endKey",
                "start": 780000,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 320020,
                    "start": 320017,
                    "type": "integer",
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/keyboard.lua",
                "finish": 320014,
                "name": "enter",
                "start": 320000,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 340018,
                    "start": 340015,
                    "type": "integer",
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/keyboard.lua",
                "finish": 340012,
                "name": "esc",
                "start": 340000,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 330021,
                    "start": 330018,
                    "type": "integer",
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/keyboard.lua",
                "finish": 330015,
                "name": "escape",
                "start": 330000,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 80015,
                    "start": 80013,
                    "type": "integer",
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/keyboard.lua",
                "finish": 80010,
                "name": "f",
                "start": 80000,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 560018,
                    "start": 560016,
                    "type": "integer",
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/keyboard.lua",
                "finish": 560013,
                "name": "five",
                "start": 560000,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 550018,
                    "start": 550016,
                    "type": "integer",
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/keyboard.lua",
                "finish": 550013,
                "name": "four",
                "start": 550000,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 90015,
                    "start": 90013,
                    "type": "integer",
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/keyboard.lua",
                "finish": 90010,
                "name": "g",
                "start": 90000,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 100015,
                    "start": 100013,
                    "type": "integer",
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/keyboard.lua",
                "finish": 100010,
                "name": "h",
                "start": 100000,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 800019,
                    "start": 800016,
                    "type": "integer",
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/keyboard.lua",
                "finish": 800013,
                "name": "home",
                "start": 800000,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 110015,
                    "start": 110013,
                    "type": "integer",
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/keyboard.lua",
                "finish": 110010,
                "name": "i",
                "start": 110000,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 120015,
                    "start": 120013,
                    "type": "integer",
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/keyboard.lua",
                "finish": 120010,
                "name": "j",
                "start": 120000,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 130015,
                    "start": 130013,
                    "type": "integer",
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/keyboard.lua",
                "finish": 130010,
                "name": "k",
                "start": 130000,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 140015,
                    "start": 140013,
                    "type": "integer",
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/keyboard.lua",
                "finish": 140010,
                "name": "l",
                "start": 140000,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 480019,
                    "start": 480016,
                    "type": "integer",
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/keyboard.lua",
                "finish": 480013,
                "name": "left",
                "start": 480000,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 150015,
                    "start": 150013,
                    "type": "integer",
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/keyboard.lua",
                "finish": 150010,
                "name": "m",
                "start": 150000,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 160015,
                    "start": 160013,
                    "type": "integer",
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/keyboard.lua",
                "finish": 160010,
                "name": "n",
                "start": 160000,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 600018,
                    "start": 600016,
                    "type": "integer",
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/keyboard.lua",
                "finish": 600013,
                "name": "nine",
                "start": 600000,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 430020,
                    "start": 430017,
                    "type": "integer",
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/keyboard.lua",
                "finish": 430014,
                "name": "north",
                "start": 430000,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 730024,
                    "start": 730021,
                    "type": "integer",
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/keyboard.lua",
                "finish": 730018,
                "name": "northEast",
                "start": 730000,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 790024,
                    "start": 790021,
                    "type": "integer",
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/keyboard.lua",
                "finish": 790018,
                "name": "northWest",
                "start": 790000,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 620023,
                    "start": 620020,
                    "type": "integer",
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/keyboard.lua",
                "finish": 620017,
                "name": "numlock0",
                "start": 620000,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 630023,
                    "start": 630020,
                    "type": "integer",
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/keyboard.lua",
                "finish": 630017,
                "name": "numlock1",
                "start": 630000,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 640023,
                    "start": 640020,
                    "type": "integer",
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/keyboard.lua",
                "finish": 640017,
                "name": "numlock2",
                "start": 640000,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 650023,
                    "start": 650020,
                    "type": "integer",
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/keyboard.lua",
                "finish": 650017,
                "name": "numlock3",
                "start": 650000,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 660023,
                    "start": 660020,
                    "type": "integer",
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/keyboard.lua",
                "finish": 660017,
                "name": "numlock4",
                "start": 660000,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 670023,
                    "start": 670020,
                    "type": "integer",
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/keyboard.lua",
                "finish": 670017,
                "name": "numlock5",
                "start": 670000,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 680023,
                    "start": 680020,
                    "type": "integer",
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/keyboard.lua",
                "finish": 680017,
                "name": "numlock6",
                "start": 680000,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 690023,
                    "start": 690020,
                    "type": "integer",
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/keyboard.lua",
                "finish": 690017,
                "name": "numlock7",
                "start": 690000,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 700023,
                    "start": 700020,
                    "type": "integer",
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/keyboard.lua",
                "finish": 700017,
                "name": "numlock8",
                "start": 700000,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 710023,
                    "start": 710020,
                    "type": "integer",
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/keyboard.lua",
                "finish": 710017,
                "name": "numlock9",
                "start": 710000,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 400030,
                    "start": 400027,
                    "type": "integer",
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/keyboard.lua",
                "finish": 400024,
                "name": "numlockAsterisk",
                "start": 400000,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 360027,
                    "start": 360024,
                    "type": "integer",
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/keyboard.lua",
                "finish": 360021,
                "name": "numlockMinus",
                "start": 360000,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 370026,
                    "start": 370023,
                    "type": "integer",
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/keyboard.lua",
                "finish": 370020,
                "name": "numlockPlus",
                "start": 370000,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 380027,
                    "start": 380024,
                    "type": "integer",
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/keyboard.lua",
                "finish": 380021,
                "name": "numlockSlash",
                "start": 380000,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 390026,
                    "start": 390023,
                    "type": "integer",
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/keyboard.lua",
                "finish": 390020,
                "name": "numlockStar",
                "start": 390000,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 170015,
                    "start": 170013,
                    "type": "integer",
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/keyboard.lua",
                "finish": 170010,
                "name": "o",
                "start": 170000,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 520017,
                    "start": 520015,
                    "type": "integer",
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/keyboard.lua",
                "finish": 520012,
                "name": "one",
                "start": 520000,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 180015,
                    "start": 180013,
                    "type": "integer",
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/keyboard.lua",
                "finish": 180010,
                "name": "p",
                "start": 180000,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 760023,
                    "start": 760020,
                    "type": "integer",
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/keyboard.lua",
                "finish": 760017,
                "name": "pageDown",
                "start": 760000,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 740021,
                    "start": 740018,
                    "type": "integer",
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/keyboard.lua",
                "finish": 740015,
                "name": "pageUp",
                "start": 740000,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 190015,
                    "start": 190013,
                    "type": "integer",
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/keyboard.lua",
                "finish": 190010,
                "name": "q",
                "start": 190000,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 200015,
                    "start": 200013,
                    "type": "integer",
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/keyboard.lua",
                "finish": 200010,
                "name": "r",
                "start": 200000,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 440020,
                    "start": 440017,
                    "type": "integer",
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/keyboard.lua",
                "finish": 440014,
                "name": "right",
                "start": 440000,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 210015,
                    "start": 210013,
                    "type": "integer",
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/keyboard.lua",
                "finish": 210010,
                "name": "s",
                "start": 210000,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 580019,
                    "start": 580017,
                    "type": "integer",
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/keyboard.lua",
                "finish": 580014,
                "name": "seven",
                "start": 580000,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 950019,
                    "start": 950017,
                    "type": "table",
                    "view": "table"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/keyboard.lua",
                "finish": 950014,
                "name": "shift",
                "start": 950000,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 1140035,
                    "start": 1140023,
                    "type": "getlocal",
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/keyboard.lua",
                "finish": 1140020,
                "name": "shiftOffset",
                "start": 1140000,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 570017,
                    "start": 570015,
                    "type": "integer",
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/keyboard.lua",
                "finish": 570012,
                "name": "six",
                "start": 570000,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 470020,
                    "start": 470017,
                    "type": "integer",
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/keyboard.lua",
                "finish": 470014,
                "name": "south",
                "start": 470000,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 750024,
                    "start": 750021,
                    "type": "integer",
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/keyboard.lua",
                "finish": 750018,
                "name": "southEast",
                "start": 750000,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 770024,
                    "start": 770021,
                    "type": "integer",
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/keyboard.lua",
                "finish": 770018,
                "name": "southWest",
                "start": 770000,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 220015,
                    "start": 220013,
                    "type": "integer",
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/keyboard.lua",
                "finish": 220010,
                "name": "t",
                "start": 220000,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 310018,
                    "start": 310015,
                    "type": "integer",
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/keyboard.lua",
                "finish": 310012,
                "name": "tab",
                "start": 310000,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 540019,
                    "start": 540017,
                    "type": "integer",
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/keyboard.lua",
                "finish": 540014,
                "name": "three",
                "start": 540000,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 530017,
                    "start": 530015,
                    "type": "integer",
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/keyboard.lua",
                "finish": 530012,
                "name": "two",
                "start": 530000,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 230015,
                    "start": 230013,
                    "type": "integer",
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/keyboard.lua",
                "finish": 230010,
                "name": "u",
                "start": 230000,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 420017,
                    "start": 420014,
                    "type": "integer",
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/keyboard.lua",
                "finish": 420011,
                "name": "up",
                "start": 420000,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 240015,
                    "start": 240013,
                    "type": "integer",
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/keyboard.lua",
                "finish": 240010,
                "name": "v",
                "start": 240000,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 250015,
                    "start": 250013,
                    "type": "integer",
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/keyboard.lua",
                "finish": 250010,
                "name": "w",
                "start": 250000,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 490019,
                    "start": 490016,
                    "type": "integer",
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/keyboard.lua",
                "finish": 490013,
                "name": "west",
                "start": 490000,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 260015,
                    "start": 260013,
                    "type": "integer",
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/keyboard.lua",
                "finish": 260010,
                "name": "x",
                "start": 260000,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 270015,
                    "start": 270013,
                    "type": "integer",
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/keyboard.lua",
                "finish": 270010,
                "name": "y",
                "start": 270000,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 280015,
                    "start": 280013,
                    "type": "integer",
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/keyboard.lua",
                "finish": 280010,
                "name": "z",
                "start": 280000,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 510018,
                    "start": 510016,
                    "type": "integer",
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/keyboard.lua",
                "finish": 510013,
                "name": "zero",
                "start": 510000,
                "type": "setfield"
            }
        ],
        "name": "keyboard",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 3250022,
                "start": 3250010,
                "type": "doc.class"
            }
        ],
        "desc": "A leader object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents the leader of a tribe, which is to say some characteristics of the tribe specific to the \"leader\", and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#leader)",
        "fields": [
            {
                "desc": "(get/set - ephemeral) Returns the \"attack\" value of the leader's personality.",
                "extends": {
                    "finish": 3260024,
                    "start": 3260017,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 3260024,
                            "start": 3260017,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 3260024,
                "name": "attack",
                "start": 3260010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set - ephemeral) Returns the leader's city style.",
                "extends": {
                    "finish": 3270027,
                    "start": 3270020,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 3270027,
                            "start": 3270020,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 3270027,
                "name": "cityStyle",
                "start": 3270010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set - ephemeral) Returns the \"civilize\" value of the leader's personality.",
                "extends": {
                    "finish": 3280026,
                    "start": 3280019,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 3280026,
                            "start": 3280019,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 3280026,
                "name": "civilize",
                "start": 3280010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set - ephemeral) Returns the leader's color.",
                "extends": {
                    "finish": 3290023,
                    "start": 3290016,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 3290023,
                            "start": 3290016,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 3290023,
                "name": "color",
                "start": 3290010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set - ephemeral) Returns the \"expand\" value of the leader's personality.",
                "extends": {
                    "finish": 3300024,
                    "start": 3300017,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 3300024,
                            "start": 3300017,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 3300024,
                "name": "expand",
                "start": 3300010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set) Returns whether or not the leader is female.",
                "extends": {
                    "finish": 3310024,
                    "start": 3310017,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 3310024,
                            "start": 3310017,
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 3310024,
                "name": "female",
                "start": 3310010,
                "type": "doc.field"
            },
            {
                "desc": "(get) Returns the id of the leader.",
                "extends": {
                    "finish": 3320015,
                    "start": 3320013,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 3320015,
                            "start": 3320013,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 3320015,
                "name": "id",
                "start": 3320010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set) Returns the name of the leader.",
                "extends": {
                    "finish": 3330021,
                    "start": 3330015,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 3330021,
                            "start": 3330015,
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 3330021,
                "name": "name",
                "start": 3330010,
                "type": "doc.field"
            }
        ],
        "name": "leaderObject",
        "type": "type"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A string is a data type native to Lua which consists of a sequence of characters. These often represent text to be displayed, but are also useful in other contexts. Strings are commonly used as keys in tables, since they make code more readable.\n[Programming in Lua, 2.4 -- Strings](https://www.lua.org/pil/2.4.html)",
                            "finish": 1280019,
                            "name": "chunk",
                            "start": 1280014,
                            "type": "local",
                            "view": "string|function"
                        },
                        {
                            "desc": "A string is a data type native to Lua which consists of a sequence of characters. These often represent text to be displayed, but are also useful in other contexts. Strings are commonly used as keys in tables, since they make code more readable.\n[Programming in Lua, 2.4 -- Strings](https://www.lua.org/pil/2.4.html)",
                            "finish": 1280030,
                            "name": "chunkname",
                            "start": 1280021,
                            "type": "local",
                            "view": "string?"
                        },
                        {
                            "finish": 1280036,
                            "name": "mode",
                            "start": 1280032,
                            "type": "local",
                            "view": "(\"b\"|\"bt\"|\"t\")?"
                        },
                        {
                            "desc": "A table is a data type native to Lua, and links \"keys\" (usually numbers or strings) to \"values\" (any kind of data, including other tables). This is the only data structuring mechanism in Lua, and many of the data types documented here are simply tables with restrictions on their keys or values. If a key has not been assigned a value, the table returns nil as the corresponding value, and assigning nil as a value to a key removes that key from the table.\n[Programming in Lua, 2.5 -- Tables](https://www.lua.org/pil/2.5.html)",
                            "finish": 1280041,
                            "name": "env",
                            "start": 1280038,
                            "type": "local",
                            "view": "table?"
                        }
                    ],
                    "desc": "\nLoads a chunk.\n\nIf `chunk` is a string, the chunk is this string. If `chunk` is a function, `load` calls it repeatedly to get the chunk pieces. Each call to `chunk` must return a string that concatenates with previous results. A return of an empty string, `nil`, or no value signals the end of the chunk.\n\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-load)\n\n\n```lua\nmode:\n    | \"b\" -- Only binary chunks.\n    | \"t\" -- Only text chunks.\n   -> \"bt\" -- Both binary and text.\n```",
                    "finish": 1280046,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "function?"
                        },
                        {
                            "name": "error_message",
                            "type": "function.return",
                            "view": "string?"
                        }
                    ],
                    "start": 1280000,
                    "type": "function",
                    "view": "function load(chunk: string|function, chunkname?: string, mode?: \"b\"|\"bt\"|\"t\", env?: table)\n  -> function?\n  2. error_message: string?"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/basic.lua",
                "finish": 1280013,
                "start": 1280009,
                "type": "setglobal"
            }
        ],
        "desc": "\nLoads a chunk.\n\nIf `chunk` is a string, the chunk is this string. If `chunk` is a function, `load` calls it repeatedly to get the chunk pieces. Each call to `chunk` must return a string that concatenates with previous results. A return of an empty string, `nil`, or no value signals the end of the chunk.\n\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-load)\n\n\n```lua\nmode:\n    | \"b\" -- Only binary chunks.\n    | \"t\" -- Only text chunks.\n   -> \"bt\" -- Both binary and text.\n```",
        "name": "load",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A string is a data type native to Lua which consists of a sequence of characters. These often represent text to be displayed, but are also useful in other contexts. Strings are commonly used as keys in tables, since they make code more readable.\n[Programming in Lua, 2.4 -- Strings](https://www.lua.org/pil/2.4.html)",
                            "finish": 1410026,
                            "name": "filename",
                            "start": 1410018,
                            "type": "local",
                            "view": "string?"
                        },
                        {
                            "finish": 1410032,
                            "name": "mode",
                            "start": 1410028,
                            "type": "local",
                            "view": "(\"b\"|\"bt\"|\"t\")?"
                        },
                        {
                            "desc": "A table is a data type native to Lua, and links \"keys\" (usually numbers or strings) to \"values\" (any kind of data, including other tables). This is the only data structuring mechanism in Lua, and many of the data types documented here are simply tables with restrictions on their keys or values. If a key has not been assigned a value, the table returns nil as the corresponding value, and assigning nil as a value to a key removes that key from the table.\n[Programming in Lua, 2.5 -- Tables](https://www.lua.org/pil/2.5.html)",
                            "finish": 1410037,
                            "name": "env",
                            "start": 1410034,
                            "type": "local",
                            "view": "table?"
                        }
                    ],
                    "desc": "\nLoads a chunk from file `filename` or from the standard input, if no file name is given.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-loadfile)\n\n\n```lua\nmode:\n    | \"b\" -- Only binary chunks.\n    | \"t\" -- Only text chunks.\n   -> \"bt\" -- Both binary and text.\n```",
                    "finish": 1410042,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "function?"
                        },
                        {
                            "name": "error_message",
                            "type": "function.return",
                            "view": "string?"
                        }
                    ],
                    "start": 1410000,
                    "type": "function",
                    "view": "function loadfile(filename?: string, mode?: \"b\"|\"bt\"|\"t\", env?: table)\n  -> function?\n  2. error_message: string?"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/basic.lua",
                "finish": 1410017,
                "start": 1410009,
                "type": "setglobal"
            }
        ],
        "desc": "\nLoads a chunk from file `filename` or from the standard input, if no file name is given.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-loadfile)\n\n\n```lua\nmode:\n    | \"b\" -- Only binary chunks.\n    | \"t\" -- Only text chunks.\n   -> \"bt\" -- Both binary and text.\n```",
        "name": "loadfile",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A string is a data type native to Lua which consists of a sequence of characters. These often represent text to be displayed, but are also useful in other contexts. Strings are commonly used as keys in tables, since they make code more readable.\n[Programming in Lua, 2.4 -- Strings](https://www.lua.org/pil/2.4.html)",
                            "finish": 1540024,
                            "name": "text",
                            "start": 1540020,
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "desc": "A string is a data type native to Lua which consists of a sequence of characters. These often represent text to be displayed, but are also useful in other contexts. Strings are commonly used as keys in tables, since they make code more readable.\n[Programming in Lua, 2.4 -- Strings](https://www.lua.org/pil/2.4.html)",
                            "finish": 1540035,
                            "name": "chunkname",
                            "start": 1540026,
                            "type": "local",
                            "view": "string?"
                        }
                    ],
                    "desc": "\nLoads a chunk from the given string.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-loadstring)",
                    "finish": 1540040,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "function?"
                        },
                        {
                            "name": "error_message",
                            "type": "function.return",
                            "view": "string?"
                        }
                    ],
                    "start": 1540000,
                    "type": "function",
                    "view": "function loadstring(text: string, chunkname?: string)\n  -> function?\n  2. error_message: string?"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/basic.lua",
                "finish": 1540019,
                "start": 1540009,
                "type": "setglobal"
            }
        ],
        "desc": "\nLoads a chunk from the given string.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-loadstring)",
        "name": "loadstring",
        "type": "variable"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 4130019,
                "start": 4130010,
                "type": "doc.class"
            }
        ],
        "desc": "A map object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents the overall properties of one of the four possible maps in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#map)",
        "fields": [
            {
                "desc": "Enables custom resources for this map and copies the default resource pattern. Requires the \"Custom resources\" patch.",
                "extends": {
                    "args": [
                        {
                            "finish": 4210008,
                            "name": "self",
                            "start": 4210008,
                            "type": "self",
                            "view": "mapObject"
                        }
                    ],
                    "desc": "Enables custom resources for this map and copies the default resource pattern. Requires the \"Custom resources\" patch.",
                    "finish": 4210045,
                    "start": 4210000,
                    "type": "function",
                    "view": "(method) mapObject:copyDefaultResources()"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 4210039,
                "name": "copyDefaultResources",
                "start": 4210009,
                "type": "setmethod"
            },
            {
                "desc": "(get/set) Returns `true` if custom resources are enabled for this map, `false` otherwise.",
                "extends": {
                    "finish": 4140033,
                    "start": 4140026,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 4140033,
                            "start": 4140026,
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 4140033,
                "name": "customResources",
                "start": 4140010,
                "type": "doc.field"
            },
            {
                "desc": "Alias for `civ.getBaseTerrain(map, terrainType)`\n\n@*param* `terrainId` โ The id number of the base terrain type sought",
                "extends": {
                    "args": [
                        {
                            "finish": 4260008,
                            "name": "self",
                            "start": 4260008,
                            "type": "self",
                            "view": "mapObject"
                        },
                        {
                            "desc": "The id number of the base terrain type sought",
                            "finish": 4260043,
                            "name": "terrainId",
                            "start": 4260034,
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "desc": "Alias for `civ.getBaseTerrain(map, terrainType)`\n\n@*param* `terrainId` โ The id number of the base terrain type sought",
                    "finish": 4260048,
                    "returns": [
                        {
                            "name": "baseTerrain",
                            "type": "function.return",
                            "view": "baseTerrainObject"
                        }
                    ],
                    "start": 4260000,
                    "type": "function",
                    "view": "(method) mapObject:getBaseTerrain(terrainId: integer)\n  -> baseTerrain: baseTerrainObject"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 4260033,
                "name": "getBaseTerrain",
                "start": 4260009,
                "type": "setmethod"
            },
            {
                "desc": "Alias for `civ.getTerrain(map, terrainType, resource)`\n\n@*param* `terrainId` โ The id number of the base terrain type sought.\n\n```lua\nresource:\n    | 0 -- no resource\n    | 1 -- fish resource\n    | 2 -- whales resource\n```",
                "extends": {
                    "args": [
                        {
                            "finish": 4360008,
                            "name": "self",
                            "start": 4360008,
                            "type": "self",
                            "view": "mapObject"
                        },
                        {
                            "desc": "The id number of the base terrain type sought.",
                            "finish": 4360039,
                            "name": "terrainId",
                            "start": 4360030,
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": 4360048,
                            "name": "resource",
                            "start": 4360040,
                            "type": "local",
                            "view": "0|1|2"
                        }
                    ],
                    "desc": "Alias for `civ.getTerrain(map, terrainType, resource)`\n\n@*param* `terrainId` โ The id number of the base terrain type sought.\n\n```lua\nresource:\n    | 0 -- no resource\n    | 1 -- fish resource\n    | 2 -- whales resource\n```",
                    "finish": 4360053,
                    "returns": [
                        {
                            "name": "terrain",
                            "type": "function.return",
                            "view": "terrainObject"
                        }
                    ],
                    "start": 4360000,
                    "type": "function",
                    "view": "(method) mapObject:getTerrain(terrainId: integer, resource: 0|1|2)\n  -> terrain: terrainObject"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 4360029,
                "name": "getTerrain",
                "start": 4360009,
                "type": "setmethod"
            },
            {
                "desc": "(get) Returns the height of the map.",
                "extends": {
                    "finish": 4150024,
                    "start": 4150017,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 4150024,
                            "start": 4150017,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 4150024,
                "name": "height",
                "start": 4150010,
                "type": "doc.field"
            },
            {
                "desc": "(get) Returns the id of the map.",
                "extends": {
                    "finish": 4160015,
                    "start": 4160013,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 4160015,
                            "start": 4160013,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 4160015,
                "name": "id",
                "start": 4160010,
                "type": "doc.field"
            },
            {
                "desc": "(get) Returns the width of the map.",
                "extends": {
                    "finish": 4170023,
                    "start": 4170016,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 4170023,
                            "start": 4170016,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 4170023,
                "name": "width",
                "start": 4170010,
                "type": "doc.field"
            }
        ],
        "name": "mapObject",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 70330022,
                "start": 70330009,
                "type": "doc.enum"
            }
        ],
        "desc": "```lua\n{\n    irrigation: string = irrigation,\n    mine: string = mine,\n    farmland: string = farmland,\n    road: string = road,\n    railroad: string = railroad,\n    fortress: string = fortress,\n    airbase: string = airbase,\n    pollution: string = pollution,\n    transporter: string = transporter,\n}\n```",
        "fields": [],
        "name": "markerOptions",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 70410015,
                "start": 70410004,
                "type": "tableindex"
            }
        ],
        "fields": [],
        "name": "markerOptions.airbase",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 70370016,
                "start": 70370004,
                "type": "tableindex"
            }
        ],
        "fields": [],
        "name": "markerOptions.farmland",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 70400016,
                "start": 70400004,
                "type": "tableindex"
            }
        ],
        "fields": [],
        "name": "markerOptions.fortress",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 70350018,
                "start": 70350004,
                "type": "tableindex"
            }
        ],
        "fields": [],
        "name": "markerOptions.irrigation",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 70360012,
                "start": 70360004,
                "type": "tableindex"
            }
        ],
        "fields": [],
        "name": "markerOptions.mine",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 70420017,
                "start": 70420004,
                "type": "tableindex"
            }
        ],
        "fields": [],
        "name": "markerOptions.pollution",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 70390016,
                "start": 70390004,
                "type": "tableindex"
            }
        ],
        "fields": [],
        "name": "markerOptions.railroad",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 70380012,
                "start": 70380004,
                "type": "tableindex"
            }
        ],
        "fields": [],
        "name": "markerOptions.road",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 70430019,
                "start": 70430004,
                "type": "tableindex"
            }
        ],
        "fields": [],
        "name": "markerOptions.transporter",
        "type": "type"
    },
    {
        "defines": [
            {
                "extends": {
                    "finish": 320009,
                    "start": 320007,
                    "type": "table",
                    "view": "mathlib"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/math.lua",
                "finish": 320004,
                "start": 320000,
                "type": "setglobal"
            }
        ],
        "desc": "\n\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-math)\n",
        "name": "math",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 430019,
                            "name": "x",
                            "start": 430018,
                            "type": "local",
                            "view": "<Number:number>"
                        }
                    ],
                    "desc": "\nReturns the absolute value of `x`.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-math.abs)",
                    "finish": 430024,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "<Number:number>"
                        }
                    ],
                    "start": 430000,
                    "type": "function",
                    "view": "function math.abs(x: <Number:number>)\n  -> <Number:number>"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/math.lua",
                "finish": 430017,
                "start": 430009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the absolute value of `x`.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-math.abs)",
        "name": "math.abs",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A number is a data type native to Lua, which allows numerical computations to be performed. Fundamentally, Lua does not have separate data types for integers and numbers with a component after the decimal point, so any integer is also a number.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 530020,
                            "name": "x",
                            "start": 530019,
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the arc cosine of `x` (in radians).\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-math.acos)",
                    "finish": 530025,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": 530000,
                    "type": "function",
                    "view": "function math.acos(x: number)\n  -> number"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/math.lua",
                "finish": 530018,
                "start": 530009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the arc cosine of `x` (in radians).\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-math.acos)",
        "name": "math.acos",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A number is a data type native to Lua, which allows numerical computations to be performed. Fundamentally, Lua does not have separate data types for integers and numbers with a component after the decimal point, so any integer is also a number.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 630020,
                            "name": "x",
                            "start": 630019,
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the arc sine of `x` (in radians).\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-math.asin)",
                    "finish": 630025,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": 630000,
                    "type": "function",
                    "view": "function math.asin(x: number)\n  -> number"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/math.lua",
                "finish": 630018,
                "start": 630009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the arc sine of `x` (in radians).\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-math.asin)",
        "name": "math.asin",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A number is a data type native to Lua, which allows numerical computations to be performed. Fundamentally, Lua does not have separate data types for integers and numbers with a component after the decimal point, so any integer is also a number.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 740020,
                            "name": "y",
                            "start": 740019,
                            "type": "local",
                            "view": "number"
                        },
                        {
                            "desc": "A number is a data type native to Lua, which allows numerical computations to be performed. Fundamentally, Lua does not have separate data types for integers and numbers with a component after the decimal point, so any integer is also a number.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 740023,
                            "name": "x",
                            "start": 740022,
                            "type": "local",
                            "view": "number?"
                        }
                    ],
                    "desc": "\nReturns the arc tangent of `y/x` (in radians).\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-math.atan)",
                    "finish": 740028,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": 740000,
                    "type": "function",
                    "view": "function math.atan(y: number, x?: number)\n  -> number"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/math.lua",
                "finish": 740018,
                "start": 740009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the arc tangent of `y/x` (in radians).\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-math.atan)",
        "name": "math.atan",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A number is a data type native to Lua, which allows numerical computations to be performed. Fundamentally, Lua does not have separate data types for integers and numbers with a component after the decimal point, so any integer is also a number.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 860021,
                            "name": "y",
                            "start": 860020,
                            "type": "local",
                            "view": "number"
                        },
                        {
                            "desc": "A number is a data type native to Lua, which allows numerical computations to be performed. Fundamentally, Lua does not have separate data types for integers and numbers with a component after the decimal point, so any integer is also a number.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 860024,
                            "name": "x",
                            "start": 860023,
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the arc tangent of `y/x` (in radians).\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-math.atan2)",
                    "finish": 860029,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": 860000,
                    "type": "function",
                    "view": "function math.atan2(y: number, x: number)\n  -> number"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/math.lua",
                "finish": 860019,
                "start": 860009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the arc tangent of `y/x` (in radians).\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-math.atan2)",
        "name": "math.atan2",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A number is a data type native to Lua, which allows numerical computations to be performed. Fundamentally, Lua does not have separate data types for integers and numbers with a component after the decimal point, so any integer is also a number.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 960020,
                            "name": "x",
                            "start": 960019,
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the smallest integral value larger than or equal to `x`.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-math.ceil)",
                    "finish": 960025,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": 960000,
                    "type": "function",
                    "view": "function math.ceil(x: number)\n  -> integer"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/math.lua",
                "finish": 960018,
                "start": 960009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the smallest integral value larger than or equal to `x`.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-math.ceil)",
        "name": "math.ceil",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A number is a data type native to Lua, which allows numerical computations to be performed. Fundamentally, Lua does not have separate data types for integers and numbers with a component after the decimal point, so any integer is also a number.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 1060019,
                            "name": "x",
                            "start": 1060018,
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the cosine of `x` (assumed to be in radians).\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-math.cos)",
                    "finish": 1060024,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": 1060000,
                    "type": "function",
                    "view": "function math.cos(x: number)\n  -> number"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/math.lua",
                "finish": 1060017,
                "start": 1060009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the cosine of `x` (assumed to be in radians).\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-math.cos)",
        "name": "math.cos",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A number is a data type native to Lua, which allows numerical computations to be performed. Fundamentally, Lua does not have separate data types for integers and numbers with a component after the decimal point, so any integer is also a number.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 1170020,
                            "name": "x",
                            "start": 1170019,
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the hyperbolic cosine of `x` (assumed to be in radians).\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-math.cosh)",
                    "finish": 1170025,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": 1170000,
                    "type": "function",
                    "view": "function math.cosh(x: number)\n  -> number"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/math.lua",
                "finish": 1170018,
                "start": 1170009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the hyperbolic cosine of `x` (assumed to be in radians).\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-math.cosh)",
        "name": "math.cosh",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A number is a data type native to Lua, which allows numerical computations to be performed. Fundamentally, Lua does not have separate data types for integers and numbers with a component after the decimal point, so any integer is also a number.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 1270019,
                            "name": "x",
                            "start": 1270018,
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nConverts the angle `x` from radians to degrees.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-math.deg)",
                    "finish": 1270024,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": 1270000,
                    "type": "function",
                    "view": "function math.deg(x: number)\n  -> number"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/math.lua",
                "finish": 1270017,
                "start": 1270009,
                "type": "setfield"
            }
        ],
        "desc": "\nConverts the angle `x` from radians to degrees.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-math.deg)",
        "name": "math.deg",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A number is a data type native to Lua, which allows numerical computations to be performed. Fundamentally, Lua does not have separate data types for integers and numbers with a component after the decimal point, so any integer is also a number.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 1370019,
                            "name": "x",
                            "start": 1370018,
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the value `e^x` (where `e` is the base of natural logarithms).\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-math.exp)",
                    "finish": 1370024,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": 1370000,
                    "type": "function",
                    "view": "function math.exp(x: number)\n  -> number"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/math.lua",
                "finish": 1370017,
                "start": 1370009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the value `e^x` (where `e` is the base of natural logarithms).\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-math.exp)",
        "name": "math.exp",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A number is a data type native to Lua, which allows numerical computations to be performed. Fundamentally, Lua does not have separate data types for integers and numbers with a component after the decimal point, so any integer is also a number.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 1470021,
                            "name": "x",
                            "start": 1470020,
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the largest integral value smaller than or equal to `x`.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-math.floor)",
                    "finish": 1470026,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": 1470000,
                    "type": "function",
                    "view": "function math.floor(x: number)\n  -> integer"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/math.lua",
                "finish": 1470019,
                "start": 1470009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the largest integral value smaller than or equal to `x`.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-math.floor)",
        "name": "math.floor",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A number is a data type native to Lua, which allows numerical computations to be performed. Fundamentally, Lua does not have separate data types for integers and numbers with a component after the decimal point, so any integer is also a number.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 1580020,
                            "name": "x",
                            "start": 1580019,
                            "type": "local",
                            "view": "number"
                        },
                        {
                            "desc": "A number is a data type native to Lua, which allows numerical computations to be performed. Fundamentally, Lua does not have separate data types for integers and numbers with a component after the decimal point, so any integer is also a number.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 1580023,
                            "name": "y",
                            "start": 1580022,
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the remainder of the division of `x` by `y` that rounds the quotient towards zero.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-math.fmod)",
                    "finish": 1580028,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": 1580000,
                    "type": "function",
                    "view": "function math.fmod(x: number, y: number)\n  -> number"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/math.lua",
                "finish": 1580018,
                "start": 1580009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the remainder of the division of `x` by `y` that rounds the quotient towards zero.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-math.fmod)",
        "name": "math.fmod",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A number is a data type native to Lua, which allows numerical computations to be performed. Fundamentally, Lua does not have separate data types for integers and numbers with a component after the decimal point, so any integer is also a number.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 1700021,
                            "name": "x",
                            "start": 1700020,
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nDecompose `x` into tails and exponents. Returns `m` and `e` such that `x = m * (2 ^ e)`, `e` is an integer and the absolute value of `m` is in the range [0.5, 1) (or zero when `x` is zero).\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-math.frexp)",
                    "finish": 1700026,
                    "returns": [
                        {
                            "name": "m",
                            "type": "function.return",
                            "view": "number"
                        },
                        {
                            "name": "e",
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": 1700000,
                    "type": "function",
                    "view": "function math.frexp(x: number)\n  -> m: number\n  2. e: number"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/math.lua",
                "finish": 1700019,
                "start": 1700009,
                "type": "setfield"
            }
        ],
        "desc": "\nDecompose `x` into tails and exponents. Returns `m` and `e` such that `x = m * (2 ^ e)`, `e` is an integer and the absolute value of `m` is in the range [0.5, 1) (or zero when `x` is zero).\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-math.frexp)",
        "name": "math.frexp",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A number is a data type native to Lua, which allows numerical computations to be performed. Fundamentally, Lua does not have separate data types for integers and numbers with a component after the decimal point, so any integer is also a number.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 1820021,
                            "name": "m",
                            "start": 1820020,
                            "type": "local",
                            "view": "number"
                        },
                        {
                            "desc": "A number is a data type native to Lua, which allows numerical computations to be performed. Fundamentally, Lua does not have separate data types for integers and numbers with a component after the decimal point, so any integer is also a number.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 1820024,
                            "name": "e",
                            "start": 1820023,
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns `m * (2 ^ e)` .\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-math.ldexp)",
                    "finish": 1820029,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": 1820000,
                    "type": "function",
                    "view": "function math.ldexp(m: number, e: number)\n  -> number"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/math.lua",
                "finish": 1820019,
                "start": 1820009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns `m * (2 ^ e)` .\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-math.ldexp)",
        "name": "math.ldexp",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A number is a data type native to Lua, which allows numerical computations to be performed. Fundamentally, Lua does not have separate data types for integers and numbers with a component after the decimal point, so any integer is also a number.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 1930019,
                            "name": "x",
                            "start": 1930018,
                            "type": "local",
                            "view": "number"
                        },
                        {
                            "desc": "An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 1930025,
                            "name": "base",
                            "start": 1930021,
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nReturns the logarithm of `x` in the given base.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-math.log)",
                    "finish": 1930030,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": 1930000,
                    "type": "function",
                    "view": "function math.log(x: number, base?: integer)\n  -> number"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/math.lua",
                "finish": 1930017,
                "start": 1930009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the logarithm of `x` in the given base.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-math.log)",
        "name": "math.log",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A number is a data type native to Lua, which allows numerical computations to be performed. Fundamentally, Lua does not have separate data types for integers and numbers with a component after the decimal point, so any integer is also a number.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 2040021,
                            "name": "x",
                            "start": 2040020,
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the base-10 logarithm of x.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-math.log10)",
                    "finish": 2040026,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": 2040000,
                    "type": "function",
                    "view": "function math.log10(x: number)\n  -> number"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/math.lua",
                "finish": 2040019,
                "start": 2040009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the base-10 logarithm of x.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-math.log10)",
        "name": "math.log10",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 2160019,
                            "name": "x",
                            "start": 2160018,
                            "type": "local",
                            "view": "<Number:number>"
                        },
                        {
                            "finish": 2160024,
                            "start": 2160021,
                            "type": "...",
                            "view": "<Number:number>"
                        }
                    ],
                    "desc": "\nReturns the argument with the maximum value, according to the Lua operator `<`.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-math.max)",
                    "finish": 2160029,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "<Number:number>"
                        }
                    ],
                    "start": 2160000,
                    "type": "function",
                    "view": "function math.max(x: <Number:number>, ...<Number:number>)\n  -> <Number:number>"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/math.lua",
                "finish": 2160017,
                "start": 2160009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the argument with the maximum value, according to the Lua operator `<`.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-math.max)",
        "name": "math.max",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 2280019,
                            "name": "x",
                            "start": 2280018,
                            "type": "local",
                            "view": "<Number:number>"
                        },
                        {
                            "finish": 2280024,
                            "start": 2280021,
                            "type": "...",
                            "view": "<Number:number>"
                        }
                    ],
                    "desc": "\nReturns the argument with the minimum value, according to the Lua operator `<`.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-math.min)",
                    "finish": 2280029,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "<Number:number>"
                        }
                    ],
                    "start": 2280000,
                    "type": "function",
                    "view": "function math.min(x: <Number:number>, ...<Number:number>)\n  -> <Number:number>"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/math.lua",
                "finish": 2280017,
                "start": 2280009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the argument with the minimum value, according to the Lua operator `<`.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-math.min)",
        "name": "math.min",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A number is a data type native to Lua, which allows numerical computations to be performed. Fundamentally, Lua does not have separate data types for integers and numbers with a component after the decimal point, so any integer is also a number.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 2390020,
                            "name": "x",
                            "start": 2390019,
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the integral part of `x` and the fractional part of `x`.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-math.modf)",
                    "finish": 2390025,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "integer"
                        },
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": 2390000,
                    "type": "function",
                    "view": "function math.modf(x: number)\n  -> integer\n  2. number"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/math.lua",
                "finish": 2390018,
                "start": 2390009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the integral part of `x` and the fractional part of `x`.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-math.modf)",
        "name": "math.modf",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A number is a data type native to Lua, which allows numerical computations to be performed. Fundamentally, Lua does not have separate data types for integers and numbers with a component after the decimal point, so any integer is also a number.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 2510019,
                            "name": "x",
                            "start": 2510018,
                            "type": "local",
                            "view": "number"
                        },
                        {
                            "desc": "A number is a data type native to Lua, which allows numerical computations to be performed. Fundamentally, Lua does not have separate data types for integers and numbers with a component after the decimal point, so any integer is also a number.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 2510022,
                            "name": "y",
                            "start": 2510021,
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns `x ^ y` .\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-math.pow)",
                    "finish": 2510027,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": 2510000,
                    "type": "function",
                    "view": "function math.pow(x: number, y: number)\n  -> number"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/math.lua",
                "finish": 2510017,
                "start": 2510009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns `x ^ y` .\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-math.pow)",
        "name": "math.pow",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A number is a data type native to Lua, which allows numerical computations to be performed. Fundamentally, Lua does not have separate data types for integers and numbers with a component after the decimal point, so any integer is also a number.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 2610019,
                            "name": "x",
                            "start": 2610018,
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nConverts the angle `x` from degrees to radians.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-math.rad)",
                    "finish": 2610024,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": 2610000,
                    "type": "function",
                    "view": "function math.rad(x: number)\n  -> number"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/math.lua",
                "finish": 2610017,
                "start": 2610009,
                "type": "setfield"
            }
        ],
        "desc": "\nConverts the angle `x` from degrees to radians.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-math.rad)",
        "name": "math.rad",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 2770022,
                            "name": "m",
                            "start": 2770021,
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "desc": "An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 2770025,
                            "name": "n",
                            "start": 2770024,
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "desc": "\n* `math.random()`: Returns a float in the range [0,1).\n* `math.random(n)`: Returns a integer in the range [1, n].\n* `math.random(m, n)`: Returns a integer in the range [m, n].\n\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-math.random)",
                    "finish": 2770030,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": 2770000,
                    "type": "function",
                    "view": "function math.random(m: integer, n: integer)\n  -> integer"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/math.lua",
                "finish": 2770020,
                "start": 2770009,
                "type": "setfield"
            }
        ],
        "desc": "\n* `math.random()`: Returns a float in the range [0,1).\n* `math.random(n)`: Returns a integer in the range [1, n].\n* `math.random(m, n)`: Returns a integer in the range [m, n].\n\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-math.random)",
        "name": "math.random",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 2890026,
                            "name": "x",
                            "start": 2890025,
                            "type": "local",
                            "view": "integer?"
                        },
                        {
                            "desc": "An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 2890029,
                            "name": "y",
                            "start": 2890028,
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\n* `math.randomseed(x, y)`: Concatenate `x` and `y` into a 128-bit `seed` to reinitialize the pseudo-random generator.\n* `math.randomseed(x)`: Equate to `math.randomseed(x, 0)` .\n* `math.randomseed()`: Generates a seed with a weak attempt for randomness.\n\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-math.randomseed)",
                    "finish": 2890034,
                    "start": 2890000,
                    "type": "function",
                    "view": "function math.randomseed(x?: integer, y?: integer)"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/math.lua",
                "finish": 2890024,
                "start": 2890009,
                "type": "setfield"
            }
        ],
        "desc": "\n* `math.randomseed(x, y)`: Concatenate `x` and `y` into a 128-bit `seed` to reinitialize the pseudo-random generator.\n* `math.randomseed(x)`: Equate to `math.randomseed(x, 0)` .\n* `math.randomseed()`: Generates a seed with a weak attempt for randomness.\n\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-math.randomseed)",
        "name": "math.randomseed",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A number is a data type native to Lua, which allows numerical computations to be performed. Fundamentally, Lua does not have separate data types for integers and numbers with a component after the decimal point, so any integer is also a number.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 2990019,
                            "name": "x",
                            "start": 2990018,
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the sine of `x` (assumed to be in radians).\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-math.sin)",
                    "finish": 2990024,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": 2990000,
                    "type": "function",
                    "view": "function math.sin(x: number)\n  -> number"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/math.lua",
                "finish": 2990017,
                "start": 2990009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the sine of `x` (assumed to be in radians).\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-math.sin)",
        "name": "math.sin",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A number is a data type native to Lua, which allows numerical computations to be performed. Fundamentally, Lua does not have separate data types for integers and numbers with a component after the decimal point, so any integer is also a number.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 3100020,
                            "name": "x",
                            "start": 3100019,
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the hyperbolic sine of `x` (assumed to be in radians).\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-math.sinh)",
                    "finish": 3100025,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": 3100000,
                    "type": "function",
                    "view": "function math.sinh(x: number)\n  -> number"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/math.lua",
                "finish": 3100018,
                "start": 3100009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the hyperbolic sine of `x` (assumed to be in radians).\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-math.sinh)",
        "name": "math.sinh",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A number is a data type native to Lua, which allows numerical computations to be performed. Fundamentally, Lua does not have separate data types for integers and numbers with a component after the decimal point, so any integer is also a number.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 3200020,
                            "name": "x",
                            "start": 3200019,
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the square root of `x`.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-math.sqrt)",
                    "finish": 3200025,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": 3200000,
                    "type": "function",
                    "view": "function math.sqrt(x: number)\n  -> number"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/math.lua",
                "finish": 3200018,
                "start": 3200009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the square root of `x`.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-math.sqrt)",
        "name": "math.sqrt",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A number is a data type native to Lua, which allows numerical computations to be performed. Fundamentally, Lua does not have separate data types for integers and numbers with a component after the decimal point, so any integer is also a number.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 3300019,
                            "name": "x",
                            "start": 3300018,
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the tangent of `x` (assumed to be in radians).\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-math.tan)",
                    "finish": 3300024,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": 3300000,
                    "type": "function",
                    "view": "function math.tan(x: number)\n  -> number"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/math.lua",
                "finish": 3300017,
                "start": 3300009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the tangent of `x` (assumed to be in radians).\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-math.tan)",
        "name": "math.tan",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A number is a data type native to Lua, which allows numerical computations to be performed. Fundamentally, Lua does not have separate data types for integers and numbers with a component after the decimal point, so any integer is also a number.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 3410020,
                            "name": "x",
                            "start": 3410019,
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the hyperbolic tangent of `x` (assumed to be in radians).\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-math.tanh)",
                    "finish": 3410025,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": 3410000,
                    "type": "function",
                    "view": "function math.tanh(x: number)\n  -> number"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/math.lua",
                "finish": 3410018,
                "start": 3410009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the hyperbolic tangent of `x` (assumed to be in radians).\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-math.tanh)",
        "name": "math.tanh",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 3520025,
                            "name": "x",
                            "start": 3520024,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "\nIf the value `x` is convertible to an integer, returns that integer.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-math.tointeger)",
                    "finish": 3520030,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "integer?"
                        }
                    ],
                    "start": 3520000,
                    "type": "function",
                    "view": "function math.tointeger(x: any)\n  -> integer?"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/math.lua",
                "finish": 3520023,
                "start": 3520009,
                "type": "setfield"
            }
        ],
        "desc": "\nIf the value `x` is convertible to an integer, returns that integer.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-math.tointeger)",
        "name": "math.tointeger",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 3650020,
                            "name": "x",
                            "start": 3650019,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "\nReturns `\"integer\"` if `x` is an integer, `\"float\"` if it is a float, or `nil` if `x` is not a number.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-math.type)\n\n\n```lua\nreturn #1:\n    | \"integer\"\n    | \"float\"\n    | 'nil'\n```",
                    "finish": 3650025,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "\"float\"|\"integer\"|'nil'"
                        }
                    ],
                    "start": 3650000,
                    "type": "function",
                    "view": "function math.type(x: any)\n  -> \"float\"|\"integer\"|'nil'"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/math.lua",
                "finish": 3650018,
                "start": 3650009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns `\"integer\"` if `x` is an integer, `\"float\"` if it is a float, or `nil` if `x` is not a number.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-math.type)\n\n\n```lua\nreturn #1:\n    | \"integer\"\n    | \"float\"\n    | 'nil'\n```",
        "name": "math.type",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 3760019,
                            "name": "m",
                            "start": 3760018,
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "desc": "An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 3760022,
                            "name": "n",
                            "start": 3760021,
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "desc": "\nReturns `true` if and only if `m` is below `n` when they are compared as unsigned integers.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-math.ult)",
                    "finish": 3760027,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 3760000,
                    "type": "function",
                    "view": "function math.ult(m: integer, n: integer)\n  -> boolean"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/math.lua",
                "finish": 3760017,
                "start": 3760009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns `true` if and only if `m` is below `n` when they are compared as unsigned integers.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-math.ult)",
        "name": "math.ult",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A string is a data type native to Lua which consists of a sequence of characters. These often represent text to be displayed, but are also useful in other contexts. Strings are commonly used as keys in tables, since they make code more readable.\n[Programming in Lua, 2.4 -- Strings](https://www.lua.org/pil/2.4.html)",
                            "finish": 1690020,
                            "name": "name",
                            "start": 1690016,
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": 1690025,
                            "start": 1690022,
                            "type": "...",
                            "view": "unknown"
                        }
                    ],
                    "desc": "\nCreates a module.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-module)",
                    "finish": 1690030,
                    "start": 1690000,
                    "type": "function",
                    "view": "function module(name: string, ...any)"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/basic.lua",
                "finish": 1690015,
                "start": 1690009,
                "type": "setglobal"
            }
        ],
        "desc": "\nCreates a module.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-module)",
        "name": "module",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A boolean is a data type native to Lua with exactly two possible values, <code>true</code> and <code>false</code>. These are often used when evaluating logical statements, but logical statements accept other values as well. All values except <code>false</code> and <code>nil</code> are considered 'truthy', even values such as 0 or the empty string.\n[Programming in Lua, 2.2 -- Booleans](https://www.lua.org/pil/2.2.html)",
                            "finish": 1600023,
                            "name": "proxy",
                            "start": 1600018,
                            "type": "local",
                            "view": "boolean|table|userdata"
                        }
                    ],
                    "finish": 1600028,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "userdata"
                        }
                    ],
                    "start": 1600000,
                    "type": "function",
                    "view": "function newproxy(proxy: boolean|table|userdata)\n  -> userdata"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/basic.lua",
                "finish": 1600017,
                "start": 1600009,
                "type": "setglobal"
            }
        ],
        "name": "newproxy",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1870019,
                            "name": "table",
                            "start": 1870014,
                            "type": "local",
                            "view": "table<<K>, <V>>"
                        },
                        {
                            "finish": 1870026,
                            "name": "index",
                            "start": 1870021,
                            "type": "local",
                            "view": "<K>?"
                        }
                    ],
                    "desc": "\nAllows a program to traverse all fields of a table. Its first argument is a table and its second argument is an index in this table. A call to `next` returns the next index of the table and its associated value. When called with `nil` as its second argument, `next` returns an initial index and its associated value. When called with the last index, or with `nil` in an empty table, `next` returns `nil`. If the second argument is absent, then it is interpreted as `nil`. In particular, you can use `next(t)` to check whether a table is empty.\n\nThe order in which the indices are enumerated is not specified, *even for numeric indices*. (To traverse a table in numerical order, use a numerical `for`.)\n\nThe behavior of `next` is undefined if, during the traversal, you assign any value to a non-existent field in the table. You may however modify existing fields. In particular, you may set existing fields to nil.\n\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-next)",
                    "finish": 1870031,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "<K>?"
                        },
                        {
                            "type": "function.return",
                            "view": "<V>?"
                        }
                    ],
                    "start": 1870000,
                    "type": "function",
                    "view": "function next(table: table<<K>, <V>>, index?: <K>)\n  -> <K>?\n  2. <V>?"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/basic.lua",
                "finish": 1870013,
                "start": 1870009,
                "type": "setglobal"
            }
        ],
        "desc": "\nAllows a program to traverse all fields of a table. Its first argument is a table and its second argument is an index in this table. A call to `next` returns the next index of the table and its associated value. When called with `nil` as its second argument, `next` returns an initial index and its associated value. When called with the last index, or with `nil` in an empty table, `next` returns `nil`. If the second argument is absent, then it is interpreted as `nil`. In particular, you can use `next(t)` to check whether a table is empty.\n\nThe order in which the indices are enumerated is not specified, *even for numeric indices*. (To traverse a table in numerical order, use a numerical `for`.)\n\nThe behavior of `next` is undefined if, during the traversal, you assign any value to a non-existent field in the table. You may however modify existing fields. In particular, you may set existing fields to nil.\n\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-next)",
        "name": "next",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "finish": 80007,
                    "start": 80005,
                    "type": "table",
                    "view": "oslib"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/os.lua",
                "finish": 80002,
                "start": 80000,
                "type": "setglobal"
            }
        ],
        "desc": "\n\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-os)\n",
        "name": "os",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [],
                    "desc": "\nReturns an approximation of the amount in seconds of CPU time used by the program.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-os.clock)",
                    "finish": 170023,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": 170000,
                    "type": "function",
                    "view": "function os.clock()\n  -> number"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/os.lua",
                "finish": 170017,
                "start": 170009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns an approximation of the amount in seconds of CPU time used by the program.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-os.clock)",
        "name": "os.clock",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A string is a data type native to Lua which consists of a sequence of characters. These often represent text to be displayed, but are also useful in other contexts. Strings are commonly used as keys in tables, since they make code more readable.\n[Programming in Lua, 2.4 -- Strings](https://www.lua.org/pil/2.4.html)",
                            "finish": 840023,
                            "name": "format",
                            "start": 840017,
                            "type": "local",
                            "view": "string?"
                        },
                        {
                            "desc": "An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 840029,
                            "name": "time",
                            "start": 840025,
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nReturns a string or a table containing date and time, formatted according to the given string `format`.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-os.date)",
                    "finish": 840034,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string|osdate"
                        }
                    ],
                    "start": 840000,
                    "type": "function",
                    "view": "function os.date(format?: string, time?: integer)\n  -> string|osdate"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/os.lua",
                "finish": 840016,
                "start": 840009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns a string or a table containing date and time, formatted according to the given string `format`.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-os.date)",
        "name": "os.date",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 950023,
                            "name": "t2",
                            "start": 950021,
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "desc": "An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 950027,
                            "name": "t1",
                            "start": 950025,
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "desc": "\nReturns the difference, in seconds, from time `t1` to time `t2`.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-os.difftime)",
                    "finish": 950032,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": 950000,
                    "type": "function",
                    "view": "function os.difftime(t2: integer, t1: integer)\n  -> integer"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/os.lua",
                "finish": 950020,
                "start": 950009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the difference, in seconds, from time `t1` to time `t2`.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-os.difftime)",
        "name": "os.difftime",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A string is a data type native to Lua which consists of a sequence of characters. These often represent text to be displayed, but are also useful in other contexts. Strings are commonly used as keys in tables, since they make code more readable.\n[Programming in Lua, 2.4 -- Strings](https://www.lua.org/pil/2.4.html)",
                            "finish": 1060027,
                            "name": "command",
                            "start": 1060020,
                            "type": "local",
                            "view": "string?"
                        }
                    ],
                    "desc": "\nPasses `command` to be executed by an operating system shell.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-os.execute)\n\n\n```lua\nexitcode:\n    | \"exit\"\n    | \"signal\"\n```",
                    "finish": 1060032,
                    "returns": [
                        {
                            "name": "suc",
                            "type": "function.return",
                            "view": "boolean?"
                        },
                        {
                            "name": "exitcode",
                            "type": "function.return",
                            "view": "(\"exit\"|\"signal\")?"
                        },
                        {
                            "name": "code",
                            "type": "function.return",
                            "view": "integer?"
                        }
                    ],
                    "start": 1060000,
                    "type": "function",
                    "view": "function os.execute(command?: string)\n  -> suc: boolean?\n  2. exitcode: (\"exit\"|\"signal\")?\n  3. code: integer?"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/os.lua",
                "finish": 1060019,
                "start": 1060009,
                "type": "setfield"
            }
        ],
        "desc": "\nPasses `command` to be executed by an operating system shell.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-os.execute)\n\n\n```lua\nexitcode:\n    | \"exit\"\n    | \"signal\"\n```",
        "name": "os.execute",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A boolean is a data type native to Lua with exactly two possible values, <code>true</code> and <code>false</code>. These are often used when evaluating logical statements, but logical statements accept other values as well. All values except <code>false</code> and <code>nil</code> are considered 'truthy', even values such as 0 or the empty string.\n[Programming in Lua, 2.2 -- Booleans](https://www.lua.org/pil/2.2.html)",
                            "finish": 1150021,
                            "name": "code",
                            "start": 1150017,
                            "type": "local",
                            "view": "(boolean|integer)?"
                        },
                        {
                            "desc": "A boolean is a data type native to Lua with exactly two possible values, <code>true</code> and <code>false</code>. These are often used when evaluating logical statements, but logical statements accept other values as well. All values except <code>false</code> and <code>nil</code> are considered 'truthy', even values such as 0 or the empty string.\n[Programming in Lua, 2.2 -- Booleans](https://www.lua.org/pil/2.2.html)",
                            "finish": 1150028,
                            "name": "close",
                            "start": 1150023,
                            "type": "local",
                            "view": "boolean?"
                        }
                    ],
                    "desc": "\nCalls the ISO C function `exit` to terminate the host program.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-os.exit)",
                    "finish": 1150033,
                    "start": 1150000,
                    "type": "function",
                    "view": "function os.exit(code?: boolean|integer, close?: boolean)"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/os.lua",
                "finish": 1150016,
                "start": 1150009,
                "type": "setfield"
            }
        ],
        "desc": "\nCalls the ISO C function `exit` to terminate the host program.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-os.exit)",
        "name": "os.exit",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A string is a data type native to Lua which consists of a sequence of characters. These often represent text to be displayed, but are also useful in other contexts. Strings are commonly used as keys in tables, since they make code more readable.\n[Programming in Lua, 2.4 -- Strings](https://www.lua.org/pil/2.4.html)",
                            "finish": 1250026,
                            "name": "varname",
                            "start": 1250019,
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "\nReturns the value of the process environment variable `varname`.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-os.getenv)",
                    "finish": 1250031,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string?"
                        }
                    ],
                    "start": 1250000,
                    "type": "function",
                    "view": "function os.getenv(varname: string)\n  -> string?"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/os.lua",
                "finish": 1250018,
                "start": 1250009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the value of the process environment variable `varname`.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-os.getenv)",
        "name": "os.getenv",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A string is a data type native to Lua which consists of a sequence of characters. These often represent text to be displayed, but are also useful in other contexts. Strings are commonly used as keys in tables, since they make code more readable.\n[Programming in Lua, 2.4 -- Strings](https://www.lua.org/pil/2.4.html)",
                            "finish": 1350027,
                            "name": "filename",
                            "start": 1350019,
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "\nDeletes the file with the given name.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-os.remove)",
                    "finish": 1350032,
                    "returns": [
                        {
                            "name": "suc",
                            "type": "function.return",
                            "view": "boolean"
                        },
                        {
                            "name": "errmsg",
                            "type": "function.return",
                            "view": "string?"
                        }
                    ],
                    "start": 1350000,
                    "type": "function",
                    "view": "function os.remove(filename: string)\n  -> suc: boolean\n  2. errmsg: string?"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/os.lua",
                "finish": 1350018,
                "start": 1350009,
                "type": "setfield"
            }
        ],
        "desc": "\nDeletes the file with the given name.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-os.remove)",
        "name": "os.remove",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A string is a data type native to Lua which consists of a sequence of characters. These often represent text to be displayed, but are also useful in other contexts. Strings are commonly used as keys in tables, since they make code more readable.\n[Programming in Lua, 2.4 -- Strings](https://www.lua.org/pil/2.4.html)",
                            "finish": 1460026,
                            "name": "oldname",
                            "start": 1460019,
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "desc": "A string is a data type native to Lua which consists of a sequence of characters. These often represent text to be displayed, but are also useful in other contexts. Strings are commonly used as keys in tables, since they make code more readable.\n[Programming in Lua, 2.4 -- Strings](https://www.lua.org/pil/2.4.html)",
                            "finish": 1460035,
                            "name": "newname",
                            "start": 1460028,
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "\nRenames the file or directory named `oldname` to `newname`.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-os.rename)",
                    "finish": 1460040,
                    "returns": [
                        {
                            "name": "suc",
                            "type": "function.return",
                            "view": "boolean"
                        },
                        {
                            "name": "errmsg",
                            "type": "function.return",
                            "view": "string?"
                        }
                    ],
                    "start": 1460000,
                    "type": "function",
                    "view": "function os.rename(oldname: string, newname: string)\n  -> suc: boolean\n  2. errmsg: string?"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/os.lua",
                "finish": 1460018,
                "start": 1460009,
                "type": "setfield"
            }
        ],
        "desc": "\nRenames the file or directory named `oldname` to `newname`.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-os.rename)",
        "name": "os.rename",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A string is a data type native to Lua which consists of a sequence of characters. These often represent text to be displayed, but are also useful in other contexts. Strings are commonly used as keys in tables, since they make code more readable.\n[Programming in Lua, 2.4 -- Strings](https://www.lua.org/pil/2.4.html)",
                            "finish": 1640028,
                            "name": "locale",
                            "start": 1640022,
                            "type": "local",
                            "view": "string|nil"
                        },
                        {
                            "finish": 1640038,
                            "name": "category",
                            "start": 1640030,
                            "type": "local",
                            "view": "(\"all\"|\"collate\"|\"ctype\"|\"monetary\"|\"numeric\"...(+1))?"
                        }
                    ],
                    "desc": "\nSets the current locale of the program.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-os.setlocale)\n\n\n```lua\ncategory:\n   -> \"all\"\n    | \"collate\"\n    | \"ctype\"\n    | \"monetary\"\n    | \"numeric\"\n    | \"time\"\n```",
                    "finish": 1640043,
                    "returns": [
                        {
                            "name": "localecategory",
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": 1640000,
                    "type": "function",
                    "view": "function os.setlocale(locale: string|nil, category?: \"all\"|\"collate\"|\"ctype\"|\"monetary\"|\"numeric\"...(+1))\n  -> localecategory: string"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/os.lua",
                "finish": 1640021,
                "start": 1640009,
                "type": "setfield"
            }
        ],
        "desc": "\nSets the current locale of the program.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-os.setlocale)\n\n\n```lua\ncategory:\n   -> \"all\"\n    | \"collate\"\n    | \"ctype\"\n    | \"monetary\"\n    | \"numeric\"\n    | \"time\"\n```",
        "name": "os.setlocale",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1740021,
                            "name": "date",
                            "start": 1740017,
                            "type": "local",
                            "view": "osdate?"
                        }
                    ],
                    "desc": "\nReturns the current time when called without arguments, or a time representing the local date and time specified by the given table.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-os.time)",
                    "finish": 1740026,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": 1740000,
                    "type": "function",
                    "view": "function os.time(date?: osdate)\n  -> integer"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/os.lua",
                "finish": 1740016,
                "start": 1740009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the current time when called without arguments, or a time representing the local date and time specified by the given table.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-os.time)",
        "name": "os.time",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [],
                    "desc": "\nReturns a string with a file name that can be used for a temporary file.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-os.tmpname)",
                    "finish": 1830025,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": 1830000,
                    "type": "function",
                    "view": "function os.tmpname()\n  -> string"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/os.lua",
                "finish": 1830019,
                "start": 1830009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns a string with a file name that can be used for a temporary file.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-os.tmpname)",
        "name": "os.tmpname",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "finish": 420012,
                    "start": 420010,
                    "type": "table",
                    "view": "packagelib"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/package.lua",
                "finish": 420007,
                "start": 420000,
                "type": "setglobal"
            }
        ],
        "desc": "\n\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-package)\n",
        "name": "package",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "finish": 540003,
                    "start": 490017,
                    "type": "string",
                    "view": "string"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/package.lua",
                "finish": 490014,
                "start": 490000,
                "type": "setfield"
            }
        ],
        "desc": "\nA string describing some compile-time configurations for packages.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-package.config)\n",
        "name": "package.config",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "finish": 620020,
                    "start": 620018,
                    "type": "table",
                    "view": "table"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/package.lua",
                "finish": 620015,
                "start": 620000,
                "type": "setfield"
            }
        ],
        "desc": "\nA table used by `require` to control how to load modules.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-package.loaders)\n",
        "name": "package.loaders",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A string is a data type native to Lua which consists of a sequence of characters. These often represent text to be displayed, but are also useful in other contexts. Strings are commonly used as keys in tables, since they make code more readable.\n[Programming in Lua, 2.4 -- Strings](https://www.lua.org/pil/2.4.html)",
                            "finish": 720032,
                            "name": "libname",
                            "start": 720025,
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "desc": "A string is a data type native to Lua which consists of a sequence of characters. These often represent text to be displayed, but are also useful in other contexts. Strings are commonly used as keys in tables, since they make code more readable.\n[Programming in Lua, 2.4 -- Strings](https://www.lua.org/pil/2.4.html)",
                            "finish": 720042,
                            "name": "funcname",
                            "start": 720034,
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "\nDynamically links the host program with the C library `libname`.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-package.loadlib)",
                    "finish": 720047,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": 720000,
                    "type": "function",
                    "view": "function package.loadlib(libname: string, funcname: string)\n  -> any"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/package.lua",
                "finish": 720024,
                "start": 720009,
                "type": "setfield"
            }
        ],
        "desc": "\nDynamically links the host program with the C library `libname`.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-package.loadlib)",
        "name": "package.loadlib",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "finish": 160063,
                    "start": 130019,
                    "type": "binary",
                    "view": "string"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/Scripts/PolygonScript.lua",
                "finish": 130016,
                "start": 130004,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 930053,
                    "start": 910019,
                    "type": "binary",
                    "view": "string"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/events.lua",
                "finish": 910016,
                "start": 910004,
                "type": "setfield"
            }
        ],
        "desc": "A string is a data type native to Lua which consists of a sequence of characters. These often represent text to be displayed, but are also useful in other contexts. Strings are commonly used as keys in tables, since they make code more readable.\n[Programming in Lua, 2.4 -- Strings](https://www.lua.org/pil/2.4.html)",
        "name": "package.path",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "finish": 800022,
                    "start": 800020,
                    "type": "table",
                    "view": "table"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/package.lua",
                "finish": 800017,
                "start": 800000,
                "type": "setfield"
            }
        ],
        "desc": "\nA table used by `require` to control how to load modules.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-package.searchers)\n",
        "name": "package.searchers",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A string is a data type native to Lua which consists of a sequence of characters. These often represent text to be displayed, but are also useful in other contexts. Strings are commonly used as keys in tables, since they make code more readable.\n[Programming in Lua, 2.4 -- Strings](https://www.lua.org/pil/2.4.html)",
                            "finish": 950032,
                            "name": "name",
                            "start": 950028,
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "desc": "A string is a data type native to Lua which consists of a sequence of characters. These often represent text to be displayed, but are also useful in other contexts. Strings are commonly used as keys in tables, since they make code more readable.\n[Programming in Lua, 2.4 -- Strings](https://www.lua.org/pil/2.4.html)",
                            "finish": 950038,
                            "name": "path",
                            "start": 950034,
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "desc": "A string is a data type native to Lua which consists of a sequence of characters. These often represent text to be displayed, but are also useful in other contexts. Strings are commonly used as keys in tables, since they make code more readable.\n[Programming in Lua, 2.4 -- Strings](https://www.lua.org/pil/2.4.html)",
                            "finish": 950043,
                            "name": "sep",
                            "start": 950040,
                            "type": "local",
                            "view": "string?"
                        },
                        {
                            "desc": "A string is a data type native to Lua which consists of a sequence of characters. These often represent text to be displayed, but are also useful in other contexts. Strings are commonly used as keys in tables, since they make code more readable.\n[Programming in Lua, 2.4 -- Strings](https://www.lua.org/pil/2.4.html)",
                            "finish": 950048,
                            "name": "rep",
                            "start": 950045,
                            "type": "local",
                            "view": "string?"
                        }
                    ],
                    "desc": "\nSearches for the given `name` in the given `path`.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-package.searchpath)",
                    "finish": 950053,
                    "returns": [
                        {
                            "name": "filename",
                            "type": "function.return",
                            "view": "string?"
                        },
                        {
                            "name": "errmsg",
                            "type": "function.return",
                            "view": "string?"
                        }
                    ],
                    "start": 950000,
                    "type": "function",
                    "view": "function package.searchpath(name: string, path: string, sep?: string, rep?: string)\n  -> filename: string?\n  2. errmsg: string?"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/package.lua",
                "finish": 950027,
                "start": 950009,
                "type": "setfield"
            }
        ],
        "desc": "\nSearches for the given `name` in the given `path`.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-package.searchpath)",
        "name": "package.searchpath",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A table is a data type native to Lua, and links \"keys\" (usually numbers or strings) to \"values\" (any kind of data, including other tables). This is the only data structuring mechanism in Lua, and many of the data types documented here are simply tables with restrictions on their keys or values. If a key has not been assigned a value, the table returns nil as the corresponding value, and assigning nil as a value to a key removes that key from the table.\n[Programming in Lua, 2.5 -- Tables](https://www.lua.org/pil/2.5.html)",
                            "finish": 1040030,
                            "name": "module",
                            "start": 1040024,
                            "type": "local",
                            "view": "table"
                        }
                    ],
                    "desc": "\nSets a metatable for `module` with its `__index` field referring to the global environment, so that this module inherits values from the global environment. To be used as an option to function `module` .\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-package.seeall)",
                    "finish": 1040035,
                    "start": 1040000,
                    "type": "function",
                    "view": "function package.seeall(module: table)"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/package.lua",
                "finish": 1040023,
                "start": 1040009,
                "type": "setfield"
            }
        ],
        "desc": "\nSets a metatable for `module` with its `__index` field referring to the global environment, so that this module inherits values from the global environment. To be used as an option to function `module` .\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-package.seeall)",
        "name": "package.seeall",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 2070016,
                            "name": "t",
                            "start": 2070015,
                            "type": "local",
                            "view": "<T:table>"
                        }
                    ],
                    "desc": "\nIf `t` has a metamethod `__pairs`, calls it with t as argument and returns the first three results from the call.\n\nOtherwise, returns three values: the [next](http://www.lua.org/manual/5.4/manual.html#pdf-next) function, the table `t`, and `nil`, so that the construction\n```lua\n    for k,v in pairs(t) do body end\n```\nwill iterate over all keyโvalue pairs of table `t`.\n\nSee function [next](http://www.lua.org/manual/5.4/manual.html#pdf-next) for the caveats of modifying the table during its traversal.\n\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-pairs)",
                    "finish": 2070021,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "fun(table: table<<K>, <V>>, index?: <K>):<K>, <V>"
                        },
                        {
                            "type": "function.return",
                            "view": "<T:table>"
                        }
                    ],
                    "start": 2070000,
                    "type": "function",
                    "view": "function pairs(t: <T:table>)\n  -> fun(table: table<<K>, <V>>, index?: <K>):<K>, <V>\n  2. <T:table>"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/basic.lua",
                "finish": 2070014,
                "start": 2070009,
                "type": "setglobal"
            }
        ],
        "desc": "\nIf `t` has a metamethod `__pairs`, calls it with t as argument and returns the first three results from the call.\n\nOtherwise, returns three values: the [next](http://www.lua.org/manual/5.4/manual.html#pdf-next) function, the table `t`, and `nil`, so that the construction\n```lua\n    for k,v in pairs(t) do body end\n```\nwill iterate over all keyโvalue pairs of table `t`.\n\nSee function [next](http://www.lua.org/manual/5.4/manual.html#pdf-next) for the caveats of modifying the table during its traversal.\n\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-pairs)",
        "name": "pairs",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 2200016,
                            "name": "f",
                            "start": 2200015,
                            "type": "local",
                            "view": "fun(...any):...unknown"
                        },
                        {
                            "finish": 2200022,
                            "name": "arg1",
                            "start": 2200018,
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": 2200027,
                            "start": 2200024,
                            "type": "...",
                            "view": "unknown"
                        }
                    ],
                    "desc": "\nCalls the function `f` with the given arguments in *protected mode*. This means that any error inside `f` is not propagated; instead, `pcall` catches the error and returns a status code. Its first result is the status code (a boolean), which is true if the call succeeds without errors. In such case, `pcall` also returns all results from the call, after this first result. In case of any error, `pcall` returns `false` plus the error object.\n\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-pcall)",
                    "finish": 2200032,
                    "returns": [
                        {
                            "name": "success",
                            "type": "function.return",
                            "view": "boolean"
                        },
                        {
                            "name": "result",
                            "type": "function.return",
                            "view": "any"
                        },
                        {
                            "name": "...",
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": 2200000,
                    "type": "function",
                    "view": "function pcall(f: fun(...any):...unknown, arg1?: any, ...any)\n  -> success: boolean\n  2. result: any\n  3. ...any"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/basic.lua",
                "finish": 2200014,
                "start": 2200009,
                "type": "setglobal"
            }
        ],
        "desc": "\nCalls the function `f` with the given arguments in *protected mode*. This means that any error inside `f` is not propagated; instead, `pcall` catches the error and returns a status code. Its first result is the status code (a boolean), which is true if the call succeeds without errors. In such case, `pcall` also returns all results from the call, after this first result. In case of any error, `pcall` returns `false` plus the error object.\n\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-pcall)",
        "name": "pcall",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 2290018,
                            "start": 2290015,
                            "type": "...",
                            "view": "unknown"
                        }
                    ],
                    "desc": "\nReceives any number of arguments and prints their values to `stdout`, converting each argument to a string following the same rules of [tostring](http://www.lua.org/manual/5.4/manual.html#pdf-tostring).\nThe function print is not intended for formatted output, but only as a quick way to show a value, for instance for debugging. For complete control over the output, use [string.format](http://www.lua.org/manual/5.4/manual.html#pdf-string.format) and [io.write](http://www.lua.org/manual/5.4/manual.html#pdf-io.write).\n\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-print)",
                    "finish": 2290023,
                    "start": 2290000,
                    "type": "function",
                    "view": "function print(...any)"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/basic.lua",
                "finish": 2290014,
                "start": 2290009,
                "type": "setglobal"
            }
        ],
        "desc": "\nReceives any number of arguments and prints their values to `stdout`, converting each argument to a string following the same rules of [tostring](http://www.lua.org/manual/5.4/manual.html#pdf-tostring).\nThe function print is not intended for formatted output, but only as a quick way to show a value, for instance for debugging. For complete control over the output, use [string.format](http://www.lua.org/manual/5.4/manual.html#pdf-string.format) and [io.write](http://www.lua.org/manual/5.4/manual.html#pdf-io.write).\n\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-print)",
        "name": "print",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "finish": 3590017,
                    "start": 3560018,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 3570019,
                            "start": 3570005,
                            "type": "doc.type.name",
                            "view": "unitTypeObject"
                        },
                        {
                            "finish": 3580022,
                            "start": 3580005,
                            "type": "doc.type.name",
                            "view": "improvementObject"
                        },
                        {
                            "finish": 3590017,
                            "start": 3590005,
                            "type": "doc.type.name",
                            "view": "wonderObject"
                        }
                    ],
                    "view": "improvementObject|unitTypeObject|wonderObject"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 3590017,
                "start": 3560010,
                "type": "doc.alias"
            }
        ],
        "desc": "A production item is an object that can be under production in a city. It can be a unit type object, an improvement object, or a wonder object. Note that it is a unit type object, not a unit object, since the unit hasn't been added to the game yet.",
        "fields": [],
        "name": "prodItem",
        "type": "type"
    },
    {
        "defines": [
            {
                "extends": {
                    "finish": 10250017,
                    "start": 10220022,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 10230015,
                            "start": 10230005,
                            "type": "doc.type.name",
                            "view": "unitObject"
                        },
                        {
                            "finish": 10240022,
                            "start": 10240005,
                            "type": "doc.type.name",
                            "view": "improvementObject"
                        },
                        {
                            "finish": 10250017,
                            "start": 10250005,
                            "type": "doc.type.name",
                            "view": "wonderObject"
                        }
                    ],
                    "view": "improvementObject|unitObject|wonderObject"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 10250017,
                "start": 10220010,
                "type": "doc.alias"
            }
        ],
        "desc": "A unit object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit in the game, and provides a means of interacting with it. This should not be confused with the unit type object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unit)",
        "fields": [],
        "name": "producedItem",
        "type": "type"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 2400020,
                            "name": "v1",
                            "start": 2400018,
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": 2400024,
                            "name": "v2",
                            "start": 2400022,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "\nChecks whether v1 is equal to v2, without invoking the `__eq` metamethod.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-rawequal)",
                    "finish": 2400029,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 2400000,
                    "type": "function",
                    "view": "function rawequal(v1: any, v2: any)\n  -> boolean"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/basic.lua",
                "finish": 2400017,
                "start": 2400009,
                "type": "setglobal"
            }
        ],
        "desc": "\nChecks whether v1 is equal to v2, without invoking the `__eq` metamethod.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-rawequal)",
        "name": "rawequal",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A table is a data type native to Lua, and links \"keys\" (usually numbers or strings) to \"values\" (any kind of data, including other tables). This is the only data structuring mechanism in Lua, and many of the data types documented here are simply tables with restrictions on their keys or values. If a key has not been assigned a value, the table returns nil as the corresponding value, and assigning nil as a value to a key removes that key from the table.\n[Programming in Lua, 2.5 -- Tables](https://www.lua.org/pil/2.5.html)",
                            "finish": 2510021,
                            "name": "table",
                            "start": 2510016,
                            "type": "local",
                            "view": "table"
                        },
                        {
                            "finish": 2510028,
                            "name": "index",
                            "start": 2510023,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "\nGets the real value of `table[index]`, without invoking the `__index` metamethod.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-rawget)",
                    "finish": 2510033,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": 2510000,
                    "type": "function",
                    "view": "function rawget(table: table, index: any)\n  -> any"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/basic.lua",
                "finish": 2510015,
                "start": 2510009,
                "type": "setglobal"
            }
        ],
        "desc": "\nGets the real value of `table[index]`, without invoking the `__index` metamethod.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-rawget)",
        "name": "rawget",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A table is a data type native to Lua, and links \"keys\" (usually numbers or strings) to \"values\" (any kind of data, including other tables). This is the only data structuring mechanism in Lua, and many of the data types documented here are simply tables with restrictions on their keys or values. If a key has not been assigned a value, the table returns nil as the corresponding value, and assigning nil as a value to a key removes that key from the table.\n[Programming in Lua, 2.5 -- Tables](https://www.lua.org/pil/2.5.html)",
                            "finish": 2610017,
                            "name": "v",
                            "start": 2610016,
                            "type": "local",
                            "view": "string|table"
                        }
                    ],
                    "desc": "\nReturns the length of the object `v`, without invoking the `__len` metamethod.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-rawlen)",
                    "finish": 2610022,
                    "returns": [
                        {
                            "name": "len",
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": 2610000,
                    "type": "function",
                    "view": "function rawlen(v: string|table)\n  -> len: integer"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/basic.lua",
                "finish": 2610015,
                "start": 2610009,
                "type": "setglobal"
            }
        ],
        "desc": "\nReturns the length of the object `v`, without invoking the `__len` metamethod.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-rawlen)",
        "name": "rawlen",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A table is a data type native to Lua, and links \"keys\" (usually numbers or strings) to \"values\" (any kind of data, including other tables). This is the only data structuring mechanism in Lua, and many of the data types documented here are simply tables with restrictions on their keys or values. If a key has not been assigned a value, the table returns nil as the corresponding value, and assigning nil as a value to a key removes that key from the table.\n[Programming in Lua, 2.5 -- Tables](https://www.lua.org/pil/2.5.html)",
                            "finish": 2740021,
                            "name": "table",
                            "start": 2740016,
                            "type": "local",
                            "view": "table"
                        },
                        {
                            "finish": 2740028,
                            "name": "index",
                            "start": 2740023,
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": 2740035,
                            "name": "value",
                            "start": 2740030,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "\nSets the real value of `table[index]` to `value`, without using the `__newindex` metavalue. `table` must be a table, `index` any value different from `nil` and `NaN`, and `value` any Lua value.\nThis function returns `table`.\n\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-rawset)",
                    "finish": 2740040,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "table"
                        }
                    ],
                    "start": 2740000,
                    "type": "function",
                    "view": "function rawset(table: table, index: any, value: any)\n  -> table"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/basic.lua",
                "finish": 2740015,
                "start": 2740009,
                "type": "setglobal"
            }
        ],
        "desc": "\nSets the real value of `table[index]` to `value`, without using the `__newindex` metavalue. `table` must be a table, `index` any value different from `nil` and `NaN`, and `value` any Lua value.\nThis function returns `table`.\n\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-rawset)",
        "name": "rawset",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A string is a data type native to Lua which consists of a sequence of characters. These often represent text to be displayed, but are also useful in other contexts. Strings are commonly used as keys in tables, since they make code more readable.\n[Programming in Lua, 2.4 -- Strings](https://www.lua.org/pil/2.4.html)",
                            "finish": 100024,
                            "name": "modname",
                            "start": 100017,
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "\nLoads the given module, returns any value returned by the searcher(`true` when `nil`). Besides that value, also returns as a second result the loader data returned by the searcher, which indicates how `require` found the module. (For instance, if the module came from a file, this loader data is the file path.)\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-require)",
                    "finish": 100029,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "unknown"
                        },
                        {
                            "name": "loaderdata",
                            "type": "function.return",
                            "view": "unknown"
                        }
                    ],
                    "start": 100000,
                    "type": "function",
                    "view": "function require(modname: string)\n  -> unknown\n  2. loaderdata: unknown"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/package.lua",
                "finish": 100016,
                "start": 100009,
                "type": "setglobal"
            }
        ],
        "desc": "\nLoads the given module, returns any value returned by the searcher(`true` when `nil`). Besides that value, also returns as a second result the loader data returned by the searcher, which indicates how `require` found the module. (For instance, if the module came from a file, this loader data is the file path.)\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-require)",
        "name": "require",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 2840021,
                            "name": "index",
                            "start": 2840016,
                            "type": "local",
                            "view": "integer|\"#\""
                        },
                        {
                            "finish": 2840026,
                            "start": 2840023,
                            "type": "...",
                            "view": "unknown"
                        }
                    ],
                    "desc": "\nIf `index` is a number, returns all arguments after argument number `index`; a negative number indexes from the end (`-1` is the last argument). Otherwise, `index` must be the string `\"#\"`, and `select` returns the total number of extra arguments it received.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-select)\n\n\n```lua\n-- An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n-- [Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)\n-- An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n-- [Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)\nindex:\n    | \"#\"\n```",
                    "finish": 2840031,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": 2840000,
                    "type": "function",
                    "view": "function select(index: integer|\"#\", ...any)\n  -> any"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/basic.lua",
                "finish": 2840015,
                "start": 2840009,
                "type": "setglobal"
            }
        ],
        "desc": "\nIf `index` is a number, returns all arguments after argument number `index`; a negative number indexes from the end (`-1` is the last argument). Otherwise, `index` must be the string `\"#\"`, and `select` returns the total number of extra arguments it received.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-select)\n\n\n```lua\n-- An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n-- [Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)\n-- An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n-- [Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)\nindex:\n    | \"#\"\n```",
        "name": "select",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 2950018,
                            "name": "f",
                            "start": 2950017,
                            "type": "local",
                            "view": "fun(...any):...integer|unknown"
                        },
                        {
                            "desc": "A table is a data type native to Lua, and links \"keys\" (usually numbers or strings) to \"values\" (any kind of data, including other tables). This is the only data structuring mechanism in Lua, and many of the data types documented here are simply tables with restrictions on their keys or values. If a key has not been assigned a value, the table returns nil as the corresponding value, and assigning nil as a value to a key removes that key from the table.\n[Programming in Lua, 2.5 -- Tables](https://www.lua.org/pil/2.5.html)",
                            "finish": 2950025,
                            "name": "table",
                            "start": 2950020,
                            "type": "local",
                            "view": "table"
                        }
                    ],
                    "desc": "\nSets the environment to be used by the given function.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-setfenv)",
                    "finish": 2950030,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "function"
                        }
                    ],
                    "start": 2950000,
                    "type": "function",
                    "view": "function setfenv(f: fun(...any):...integer|unknown, table: table)\n  -> function"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/basic.lua",
                "finish": 2950016,
                "start": 2950009,
                "type": "setglobal"
            }
        ],
        "desc": "\nSets the environment to be used by the given function.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-setfenv)",
        "name": "setfenv",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A table is a data type native to Lua, and links \"keys\" (usually numbers or strings) to \"values\" (any kind of data, including other tables). This is the only data structuring mechanism in Lua, and many of the data types documented here are simply tables with restrictions on their keys or values. If a key has not been assigned a value, the table returns nil as the corresponding value, and assigning nil as a value to a key removes that key from the table.\n[Programming in Lua, 2.5 -- Tables](https://www.lua.org/pil/2.5.html)",
                            "finish": 3100027,
                            "name": "table",
                            "start": 3100022,
                            "type": "local",
                            "view": "table"
                        },
                        {
                            "desc": "A table is a data type native to Lua, and links \"keys\" (usually numbers or strings) to \"values\" (any kind of data, including other tables). This is the only data structuring mechanism in Lua, and many of the data types documented here are simply tables with restrictions on their keys or values. If a key has not been assigned a value, the table returns nil as the corresponding value, and assigning nil as a value to a key removes that key from the table.\n[Programming in Lua, 2.5 -- Tables](https://www.lua.org/pil/2.5.html)",
                            "finish": 3100038,
                            "name": "metatable",
                            "start": 3100029,
                            "type": "local",
                            "view": "table?"
                        }
                    ],
                    "desc": "\nSets the metatable for the given table. If `metatable` is `nil`, removes the metatable of the given table. If the original metatable has a `__metatable` field, raises an error.\n\nThis function returns `table`.\n\nTo change the metatable of other types from Lua code, you must use the debug library ([ยง6.10](http://www.lua.org/manual/5.4/manual.html#6.10)).\n\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-setmetatable)",
                    "finish": 3100043,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "table"
                        }
                    ],
                    "start": 3100000,
                    "type": "function",
                    "view": "function setmetatable(table: table, metatable?: table)\n  -> table"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/basic.lua",
                "finish": 3100021,
                "start": 3100009,
                "type": "setglobal"
            }
        ],
        "desc": "\nSets the metatable for the given table. If `metatable` is `nil`, removes the metatable of the given table. If the original metatable has a `__metatable` field, raises an error.\n\nThis function returns `table`.\n\nTo change the metatable of other types from Lua code, you must use the debug library ([ยง6.10](http://www.lua.org/manual/5.4/manual.html#6.10)).\n\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-setmetatable)",
        "name": "setmetatable",
        "type": "variable"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 3640025,
                "start": 3640010,
                "type": "doc.class"
            }
        ],
        "desc": "A spaceship object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents the status of a tribe's spaceship, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#spaceship)",
        "fields": [
            {
                "desc": "(get) Returns the number of fuel components of the space ship.",
                "extends": {
                    "finish": 3650022,
                    "start": 3650015,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 3650022,
                            "start": 3650015,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 3650022,
                "name": "fuel",
                "start": 3650010,
                "type": "doc.field"
            },
            {
                "desc": "(get) Returns the number of habitation modules of the space ship.",
                "extends": {
                    "finish": 3660028,
                    "start": 3660021,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 3660028,
                            "start": 3660021,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 3660028,
                "name": "habitation",
                "start": 3660010,
                "type": "doc.field"
            },
            {
                "desc": "(get) Returns the number of life support modules of the space ship.",
                "extends": {
                    "finish": 3670029,
                    "start": 3670022,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 3670029,
                            "start": 3670022,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 3670029,
                "name": "lifesupport",
                "start": 3670010,
                "type": "doc.field"
            },
            {
                "desc": "(get) Returns the number of propulsion components of the space ship.",
                "extends": {
                    "finish": 3680028,
                    "start": 3680021,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 3680028,
                            "start": 3680021,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 3680028,
                "name": "propulsion",
                "start": 3680010,
                "type": "doc.field"
            },
            {
                "desc": "(get) Returns the number of solar modules of the space ship.",
                "extends": {
                    "finish": 3690023,
                    "start": 3690016,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 3690023,
                            "start": 3690016,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 3690023,
                "name": "solar",
                "start": 3690010,
                "type": "doc.field"
            },
            {
                "desc": "(get) Returns the number of structural improvements of the space ship.",
                "extends": {
                    "finish": 3700028,
                    "start": 3700021,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 3700028,
                            "start": 3700021,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 3700028,
                "name": "structural",
                "start": 3700010,
                "type": "doc.field"
            }
        ],
        "name": "spaceshipObject",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 83870015,
                "start": 83870010,
                "type": "doc.class"
            }
        ],
        "desc": "A \"stack\" is a data structure where you can 'push' a value onto the top of the stack, or you can 'pop' a value off the top of the stack.  The popped value is returned, but is no longer on the stack.  This implementation of the stack also lets you find the ith element in the stack, starting from the top, and lets you see the size of the stack.  See: [Wikipedia: Stack](https://en.wikipedia.org/wiki/Stack_(abstract_data_type))\n<br><br> `stack.push = function(value:any)-->void` <br><br> When called, adds `value` to the top of the stack.<br>`stack.push(5)` adds `5` to the top of the stack.\n<br><br> `stack.pop = function()-->any` <br><br> When called, removes the top item of the stack, and returns it.<br><br>If the stack is formed by<br>`stack.push(1)`<br>`stack.push(2)`<br>`stack.push(3)`<br>then<br>`stack.pop()`-->`3`<br>`stack.pop()`-->`2`<br>`stack.pop()`-->`1`<br>`stack.pop()`-->`nil`\n<br><br> `stack.size = integer` <br><br> Returns the current size of the stack.\n<br><br> `stack[i] = any` <br><br>`stack[i]` returns the ith value in the stack, counting from the top, or nil if there aren't `i` values in the stack. The stack remains unchanged.<br><br>If the stack is formed by `stack.push(1)`<br>`stack.push(2)`<br>`stack.push(3)`<br>then<br>`stack[1]`-->`3`<br>`stack[2]`-->`2`<br>`stack[3]`-->`1`<br>`stack[4]`-->`nil`",
        "fields": [
            {
                "desc": "<br>`stack[i]` returns the ith value in the stack, counting from the top, or nil if there aren't `i` values in the stack. The stack remains unchanged.<br><br>If the stack is formed by `stack.push(1)`<br>`stack.push(2)`<br>`stack.push(3)`<br>then<br>`stack[1]`-->`3`<br>`stack[2]`-->`2`<br>`stack[3]`-->`1`<br>`stack[4]`-->`nil`",
                "extends": {
                    "finish": 83910023,
                    "start": 83910020,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 83910023,
                            "start": 83910020,
                            "type": "doc.type.name",
                            "view": "any"
                        }
                    ],
                    "view": "any"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 83910023,
                "name": "[integer]",
                "start": 83910011,
                "type": "doc.field"
            },
            {
                "desc": "When called, removes the top item of the stack, and returns it.<br><br>If the stack is formed by `stack.push(1)`<br>`stack.push(2)`<br>`stack.push(3)`<br>then<br>`stack.pop()`-->`3`<br>`stack.pop()`-->`2`<br>`stack.pop()`-->`1`<br>`stack.pop()`-->`nil`",
                "extends": {
                    "finish": 83890023,
                    "start": 83890014,
                    "type": "doc.type",
                    "types": [
                        {
                            "args": {
                                "view": "unknown"
                            },
                            "finish": 83890023,
                            "returns": [
                                {
                                    "finish": 83890023,
                                    "start": 83890020,
                                    "type": "doc.type",
                                    "types": [
                                        {
                                            "finish": 83890023,
                                            "start": 83890020,
                                            "type": "doc.type.name",
                                            "view": "any"
                                        }
                                    ],
                                    "view": "any"
                                }
                            ],
                            "start": 83890014,
                            "type": "doc.type.function",
                            "view": "fun():any"
                        }
                    ],
                    "view": "fun():any"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 83890023,
                "name": "pop",
                "start": 83890010,
                "type": "doc.field"
            },
            {
                "desc": "When called, adds `value` to the top of the stack.<br>`stack.push(5)` adds `5` to the top of the stack.",
                "extends": {
                    "finish": 83880029,
                    "start": 83880015,
                    "type": "doc.type",
                    "types": [
                        {
                            "args": [
                                {
                                    "finish": 83880028,
                                    "name": {
                                        "[1]": "value",
                                        "finish": 83880024,
                                        "start": 83880019,
                                        "type": "doc.type.arg.name",
                                        "view": "value"
                                    },
                                    "start": 83880019,
                                    "type": "doc.type.arg",
                                    "view": "any"
                                }
                            ],
                            "finish": 83880029,
                            "returns": {
                                "view": "unknown"
                            },
                            "start": 83880015,
                            "type": "doc.type.function",
                            "view": "fun(value: any)"
                        }
                    ],
                    "view": "fun(value: any)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 83880029,
                "name": "push",
                "start": 83880010,
                "type": "doc.field"
            },
            {
                "desc": "Returns the current size of the stack.",
                "extends": {
                    "finish": 83900022,
                    "start": 83900015,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 83900022,
                            "start": 83900015,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 83900022,
                "name": "size",
                "start": 83900010,
                "type": "doc.field"
            }
        ],
        "name": "stack",
        "type": "type"
    },
    {
        "defines": [
            {
                "extends": {
                    "finish": 46280086,
                    "start": 46280028,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 46280068,
                            "start": 46280028,
                            "type": "doc.type.sign",
                            "view": "table<string|number, string|number|table>"
                        },
                        {
                            "finish": 46280077,
                            "start": 46280071,
                            "type": "doc.type.name",
                            "view": "string"
                        },
                        {
                            "finish": 46280086,
                            "start": 46280080,
                            "type": "doc.type.name",
                            "view": "number"
                        }
                    ],
                    "view": "string|number|table<string|number, string|number|table>"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 46280086,
                "start": 46280010,
                "type": "doc.alias"
            }
        ],
        "desc": "A state savable table can be saved in the 'state' table, which is to say, the table where data is saved to the saved game file. A state savable table is a table where the keys are integers and strings, and the values are integers, strings, and other state savable tables.",
        "fields": [],
        "name": "stateSavableTable",
        "type": "type"
    },
    {
        "defines": [
            {
                "extends": {
                    "finish": 80011,
                    "start": 80009,
                    "type": "table",
                    "view": "stringlib"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/string.lua",
                "finish": 80006,
                "start": 80000,
                "type": "setglobal"
            }
        ],
        "desc": "\n\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-string)\n",
        "name": "string",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A string is a data type native to Lua which consists of a sequence of characters. These often represent text to be displayed, but are also useful in other contexts. Strings are commonly used as keys in tables, since they make code more readable.\n[Programming in Lua, 2.4 -- Strings](https://www.lua.org/pil/2.4.html)",
                            "finish": 200022,
                            "name": "s",
                            "start": 200021,
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "desc": "An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 200025,
                            "name": "i",
                            "start": 200024,
                            "type": "local",
                            "view": "integer?"
                        },
                        {
                            "desc": "An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 200028,
                            "name": "j",
                            "start": 200027,
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nReturns the internal numeric codes of the characters `s[i], s[i+1], ..., s[j]`.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-string.byte)",
                    "finish": 200033,
                    "returns": [
                        {
                            "name": "...",
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": 200000,
                    "type": "function",
                    "view": "function string.byte(s: string|number, i?: integer, j?: integer)\n  -> ...integer"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/string.lua",
                "finish": 200020,
                "start": 200009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the internal numeric codes of the characters `s[i], s[i+1], ..., s[j]`.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-string.byte)",
        "name": "string.byte",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 310025,
                            "name": "byte",
                            "start": 310021,
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "desc": "An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 310030,
                            "start": 310027,
                            "type": "...",
                            "view": "integer"
                        }
                    ],
                    "desc": "\nReturns a string with length equal to the number of arguments, in which each character has the internal numeric code equal to its corresponding argument.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-string.char)",
                    "finish": 310035,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": 310000,
                    "type": "function",
                    "view": "function string.char(byte: integer, ...integer)\n  -> string"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/string.lua",
                "finish": 310020,
                "start": 310009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns a string with length equal to the number of arguments, in which each character has the internal numeric code equal to its corresponding argument.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-string.char)",
        "name": "string.char",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 420022,
                            "name": "f",
                            "start": 420021,
                            "type": "local",
                            "view": "fun(...any):...unknown"
                        },
                        {
                            "desc": "A boolean is a data type native to Lua with exactly two possible values, <code>true</code> and <code>false</code>. These are often used when evaluating logical statements, but logical statements accept other values as well. All values except <code>false</code> and <code>nil</code> are considered 'truthy', even values such as 0 or the empty string.\n[Programming in Lua, 2.2 -- Booleans](https://www.lua.org/pil/2.2.html)",
                            "finish": 420029,
                            "name": "strip",
                            "start": 420024,
                            "type": "local",
                            "view": "boolean?"
                        }
                    ],
                    "desc": "\nReturns a string containing a binary representation (a *binary chunk*) of the given function.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-string.dump)",
                    "finish": 420034,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": 420000,
                    "type": "function",
                    "view": "function string.dump(f: fun(...any):...unknown, strip?: boolean)\n  -> string"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/string.lua",
                "finish": 420020,
                "start": 420009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns a string containing a binary representation (a *binary chunk*) of the given function.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-string.dump)",
        "name": "string.dump",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A string is a data type native to Lua which consists of a sequence of characters. These often represent text to be displayed, but are also useful in other contexts. Strings are commonly used as keys in tables, since they make code more readable.\n[Programming in Lua, 2.4 -- Strings](https://www.lua.org/pil/2.4.html)",
                            "finish": 570022,
                            "name": "s",
                            "start": 570021,
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "desc": "A string is a data type native to Lua which consists of a sequence of characters. These often represent text to be displayed, but are also useful in other contexts. Strings are commonly used as keys in tables, since they make code more readable.\n[Programming in Lua, 2.4 -- Strings](https://www.lua.org/pil/2.4.html)",
                            "finish": 570031,
                            "name": "pattern",
                            "start": 570024,
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "desc": "An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 570037,
                            "name": "init",
                            "start": 570033,
                            "type": "local",
                            "view": "integer?"
                        },
                        {
                            "desc": "A boolean is a data type native to Lua with exactly two possible values, <code>true</code> and <code>false</code>. These are often used when evaluating logical statements, but logical statements accept other values as well. All values except <code>false</code> and <code>nil</code> are considered 'truthy', even values such as 0 or the empty string.\n[Programming in Lua, 2.2 -- Booleans](https://www.lua.org/pil/2.2.html)",
                            "finish": 570044,
                            "name": "plain",
                            "start": 570039,
                            "type": "local",
                            "view": "boolean?"
                        }
                    ],
                    "desc": "\nLooks for the first match of `pattern` (see [ยง6.4.1](http://www.lua.org/manual/5.4/manual.html#6.4.1)) in the string.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-string.find)\n\n@*return* `start`\n\n@*return* `end`\n\n@*return* `...` โ captured",
                    "finish": 570049,
                    "returns": [
                        {
                            "name": "start",
                            "type": "function.return",
                            "view": "integer"
                        },
                        {
                            "name": "end",
                            "type": "function.return",
                            "view": "integer"
                        },
                        {
                            "desc": "captured",
                            "name": "...",
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": 570000,
                    "type": "function",
                    "view": "function string.find(s: string|number, pattern: string|number, init?: integer, plain?: boolean)\n  -> start: integer\n  2. end: integer\n  3. ...any"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/string.lua",
                "finish": 570020,
                "start": 570009,
                "type": "setfield"
            }
        ],
        "desc": "\nLooks for the first match of `pattern` (see [ยง6.4.1](http://www.lua.org/manual/5.4/manual.html#6.4.1)) in the string.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-string.find)\n\n@*return* `start`\n\n@*return* `end`\n\n@*return* `...` โ captured",
        "name": "string.find",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A string is a data type native to Lua which consists of a sequence of characters. These often represent text to be displayed, but are also useful in other contexts. Strings are commonly used as keys in tables, since they make code more readable.\n[Programming in Lua, 2.4 -- Strings](https://www.lua.org/pil/2.4.html)",
                            "finish": 680024,
                            "name": "s",
                            "start": 680023,
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": 680029,
                            "start": 680026,
                            "type": "...",
                            "view": "any"
                        }
                    ],
                    "desc": "\nReturns a formatted version of its variable number of arguments following the description given in its first argument.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-string.format)",
                    "finish": 680034,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": 680000,
                    "type": "function",
                    "view": "function string.format(s: string|number, ...any)\n  -> string"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/string.lua",
                "finish": 680022,
                "start": 680009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns a formatted version of its variable number of arguments following the description given in its first argument.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-string.format)",
        "name": "string.format",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A string is a data type native to Lua which consists of a sequence of characters. These often represent text to be displayed, but are also useful in other contexts. Strings are commonly used as keys in tables, since they make code more readable.\n[Programming in Lua, 2.4 -- Strings](https://www.lua.org/pil/2.4.html)",
                            "finish": 890024,
                            "name": "s",
                            "start": 890023,
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "desc": "A string is a data type native to Lua which consists of a sequence of characters. These often represent text to be displayed, but are also useful in other contexts. Strings are commonly used as keys in tables, since they make code more readable.\n[Programming in Lua, 2.4 -- Strings](https://www.lua.org/pil/2.4.html)",
                            "finish": 890033,
                            "name": "pattern",
                            "start": 890026,
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "desc": "An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 890039,
                            "name": "init",
                            "start": 890035,
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nReturns an iterator function that, each time it is called, returns the next captures from `pattern` (see [ยง6.4.1](http://www.lua.org/manual/5.4/manual.html#6.4.1)) over the string s.\n\nAs an example, the following loop will iterate over all the words from string s, printing one per line:\n```lua\n    s =\n\"hello world from Lua\"\n    for w in string.gmatch(s, \"%a+\") do\n        print(w)\n    end\n```\n\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-string.gmatch)",
                    "finish": 890044,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "fun():string, ...unknown"
                        }
                    ],
                    "start": 890000,
                    "type": "function",
                    "view": "function string.gmatch(s: string|number, pattern: string|number, init?: integer)\n  -> fun():string, ...unknown"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/string.lua",
                "finish": 890022,
                "start": 890009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns an iterator function that, each time it is called, returns the next captures from `pattern` (see [ยง6.4.1](http://www.lua.org/manual/5.4/manual.html#6.4.1)) over the string s.\n\nAs an example, the following loop will iterate over all the words from string s, printing one per line:\n```lua\n    s =\n\"hello world from Lua\"\n    for w in string.gmatch(s, \"%a+\") do\n        print(w)\n    end\n```\n\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-string.gmatch)",
        "name": "string.gmatch",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A string is a data type native to Lua which consists of a sequence of characters. These often represent text to be displayed, but are also useful in other contexts. Strings are commonly used as keys in tables, since they make code more readable.\n[Programming in Lua, 2.4 -- Strings](https://www.lua.org/pil/2.4.html)",
                            "finish": 1030022,
                            "name": "s",
                            "start": 1030021,
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "desc": "A string is a data type native to Lua which consists of a sequence of characters. These often represent text to be displayed, but are also useful in other contexts. Strings are commonly used as keys in tables, since they make code more readable.\n[Programming in Lua, 2.4 -- Strings](https://www.lua.org/pil/2.4.html)",
                            "finish": 1030031,
                            "name": "pattern",
                            "start": 1030024,
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "desc": "A string is a data type native to Lua which consists of a sequence of characters. These often represent text to be displayed, but are also useful in other contexts. Strings are commonly used as keys in tables, since they make code more readable.\n[Programming in Lua, 2.4 -- Strings](https://www.lua.org/pil/2.4.html)",
                            "finish": 1030037,
                            "name": "repl",
                            "start": 1030033,
                            "type": "local",
                            "view": "string|number|function|table"
                        },
                        {
                            "desc": "An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 1030040,
                            "name": "n",
                            "start": 1030039,
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nReturns a copy of s in which all (or the first `n`, if given) occurrences of the `pattern` (see [ยง6.4.1](http://www.lua.org/manual/5.4/manual.html#6.4.1)) have been replaced by a replacement string specified by `repl`.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-string.gsub)",
                    "finish": 1030045,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        },
                        {
                            "name": "count",
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": 1030000,
                    "type": "function",
                    "view": "function string.gsub(s: string|number, pattern: string|number, repl: string|number|function|table, n?: integer)\n  -> string\n  2. count: integer"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/string.lua",
                "finish": 1030020,
                "start": 1030009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns a copy of s in which all (or the first `n`, if given) occurrences of the `pattern` (see [ยง6.4.1](http://www.lua.org/manual/5.4/manual.html#6.4.1)) have been replaced by a replacement string specified by `repl`.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-string.gsub)",
        "name": "string.gsub",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A string is a data type native to Lua which consists of a sequence of characters. These often represent text to be displayed, but are also useful in other contexts. Strings are commonly used as keys in tables, since they make code more readable.\n[Programming in Lua, 2.4 -- Strings](https://www.lua.org/pil/2.4.html)",
                            "finish": 1130021,
                            "name": "s",
                            "start": 1130020,
                            "type": "local",
                            "view": "string|number"
                        }
                    ],
                    "desc": "\nReturns its length.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-string.len)",
                    "finish": 1130026,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": 1130000,
                    "type": "function",
                    "view": "function string.len(s: string|number)\n  -> integer"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/string.lua",
                "finish": 1130019,
                "start": 1130009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns its length.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-string.len)",
        "name": "string.len",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A string is a data type native to Lua which consists of a sequence of characters. These often represent text to be displayed, but are also useful in other contexts. Strings are commonly used as keys in tables, since they make code more readable.\n[Programming in Lua, 2.4 -- Strings](https://www.lua.org/pil/2.4.html)",
                            "finish": 1230023,
                            "name": "s",
                            "start": 1230022,
                            "type": "local",
                            "view": "string|number"
                        }
                    ],
                    "desc": "\nReturns a copy of this string with all uppercase letters changed to lowercase.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-string.lower)",
                    "finish": 1230028,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": 1230000,
                    "type": "function",
                    "view": "function string.lower(s: string|number)\n  -> string"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/string.lua",
                "finish": 1230021,
                "start": 1230009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns a copy of this string with all uppercase letters changed to lowercase.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-string.lower)",
        "name": "string.lower",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A string is a data type native to Lua which consists of a sequence of characters. These often represent text to be displayed, but are also useful in other contexts. Strings are commonly used as keys in tables, since they make code more readable.\n[Programming in Lua, 2.4 -- Strings](https://www.lua.org/pil/2.4.html)",
                            "finish": 1350023,
                            "name": "s",
                            "start": 1350022,
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "desc": "A string is a data type native to Lua which consists of a sequence of characters. These often represent text to be displayed, but are also useful in other contexts. Strings are commonly used as keys in tables, since they make code more readable.\n[Programming in Lua, 2.4 -- Strings](https://www.lua.org/pil/2.4.html)",
                            "finish": 1350032,
                            "name": "pattern",
                            "start": 1350025,
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "desc": "An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 1350038,
                            "name": "init",
                            "start": 1350034,
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nLooks for the first match of `pattern` (see [ยง6.4.1](http://www.lua.org/manual/5.4/manual.html#6.4.1)) in the string.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-string.match)",
                    "finish": 1350043,
                    "returns": [
                        {
                            "name": "...",
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": 1350000,
                    "type": "function",
                    "view": "function string.match(s: string|number, pattern: string|number, init?: integer)\n  -> ...any"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/string.lua",
                "finish": 1350021,
                "start": 1350009,
                "type": "setfield"
            }
        ],
        "desc": "\nLooks for the first match of `pattern` (see [ยง6.4.1](http://www.lua.org/manual/5.4/manual.html#6.4.1)) in the string.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-string.match)",
        "name": "string.match",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A string is a data type native to Lua which consists of a sequence of characters. These often represent text to be displayed, but are also useful in other contexts. Strings are commonly used as keys in tables, since they make code more readable.\n[Programming in Lua, 2.4 -- Strings](https://www.lua.org/pil/2.4.html)",
                            "finish": 1480024,
                            "name": "fmt",
                            "start": 1480021,
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "desc": "A string is a data type native to Lua which consists of a sequence of characters. These often represent text to be displayed, but are also useful in other contexts. Strings are commonly used as keys in tables, since they make code more readable.\n[Programming in Lua, 2.4 -- Strings](https://www.lua.org/pil/2.4.html)",
                            "finish": 1480028,
                            "name": "v1",
                            "start": 1480026,
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": 1480032,
                            "name": "v2",
                            "start": 1480030,
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "desc": "A string is a data type native to Lua which consists of a sequence of characters. These often represent text to be displayed, but are also useful in other contexts. Strings are commonly used as keys in tables, since they make code more readable.\n[Programming in Lua, 2.4 -- Strings](https://www.lua.org/pil/2.4.html)",
                            "finish": 1480037,
                            "start": 1480034,
                            "type": "...",
                            "view": "string|number"
                        }
                    ],
                    "desc": "\nReturns a binary string containing the values `v1`, `v2`, etc. packed (that is, serialized in binary form) according to the format string `fmt` (see [ยง6.4.2](http://www.lua.org/manual/5.4/manual.html#6.4.2)) .\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-string.pack)",
                    "finish": 1480042,
                    "returns": [
                        {
                            "name": "binary",
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": 1480000,
                    "type": "function",
                    "view": "function string.pack(fmt: string, v1: string|number, v2: any, ...string|number)\n  -> binary: string"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/string.lua",
                "finish": 1480020,
                "start": 1480009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns a binary string containing the values `v1`, `v2`, etc. packed (that is, serialized in binary form) according to the format string `fmt` (see [ยง6.4.2](http://www.lua.org/manual/5.4/manual.html#6.4.2)) .\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-string.pack)",
        "name": "string.pack",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A string is a data type native to Lua which consists of a sequence of characters. These often represent text to be displayed, but are also useful in other contexts. Strings are commonly used as keys in tables, since they make code more readable.\n[Programming in Lua, 2.4 -- Strings](https://www.lua.org/pil/2.4.html)",
                            "finish": 1590028,
                            "name": "fmt",
                            "start": 1590025,
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "\nReturns the size of a string resulting from `string.pack` with the given format string `fmt` (see [ยง6.4.2](http://www.lua.org/manual/5.4/manual.html#6.4.2)) .\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-string.packsize)",
                    "finish": 1590033,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": 1590000,
                    "type": "function",
                    "view": "function string.packsize(fmt: string)\n  -> integer"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/string.lua",
                "finish": 1590024,
                "start": 1590009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the size of a string resulting from `string.pack` with the given format string `fmt` (see [ยง6.4.2](http://www.lua.org/manual/5.4/manual.html#6.4.2)) .\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-string.packsize)",
        "name": "string.packsize",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A string is a data type native to Lua which consists of a sequence of characters. These often represent text to be displayed, but are also useful in other contexts. Strings are commonly used as keys in tables, since they make code more readable.\n[Programming in Lua, 2.4 -- Strings](https://www.lua.org/pil/2.4.html)",
                            "finish": 1710021,
                            "name": "s",
                            "start": 1710020,
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "desc": "An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 1710024,
                            "name": "n",
                            "start": 1710023,
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "desc": "A string is a data type native to Lua which consists of a sequence of characters. These often represent text to be displayed, but are also useful in other contexts. Strings are commonly used as keys in tables, since they make code more readable.\n[Programming in Lua, 2.4 -- Strings](https://www.lua.org/pil/2.4.html)",
                            "finish": 1710029,
                            "name": "sep",
                            "start": 1710026,
                            "type": "local",
                            "view": "(string|number)?"
                        }
                    ],
                    "desc": "\nReturns a string that is the concatenation of `n` copies of the string `s` separated by the string `sep`.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-string.rep)",
                    "finish": 1710034,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": 1710000,
                    "type": "function",
                    "view": "function string.rep(s: string|number, n: integer, sep?: string|number)\n  -> string"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/string.lua",
                "finish": 1710019,
                "start": 1710009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns a string that is the concatenation of `n` copies of the string `s` separated by the string `sep`.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-string.rep)",
        "name": "string.rep",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A string is a data type native to Lua which consists of a sequence of characters. These often represent text to be displayed, but are also useful in other contexts. Strings are commonly used as keys in tables, since they make code more readable.\n[Programming in Lua, 2.4 -- Strings](https://www.lua.org/pil/2.4.html)",
                            "finish": 1810025,
                            "name": "s",
                            "start": 1810024,
                            "type": "local",
                            "view": "string|number"
                        }
                    ],
                    "desc": "\nReturns a string that is the string `s` reversed.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-string.reverse)",
                    "finish": 1810030,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": 1810000,
                    "type": "function",
                    "view": "function string.reverse(s: string|number)\n  -> string"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/string.lua",
                "finish": 1810023,
                "start": 1810009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns a string that is the string `s` reversed.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-string.reverse)",
        "name": "string.reverse",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A string is a data type native to Lua which consists of a sequence of characters. These often represent text to be displayed, but are also useful in other contexts. Strings are commonly used as keys in tables, since they make code more readable.\n[Programming in Lua, 2.4 -- Strings](https://www.lua.org/pil/2.4.html)",
                            "finish": 1930021,
                            "name": "s",
                            "start": 1930020,
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "desc": "An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 1930024,
                            "name": "i",
                            "start": 1930023,
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "desc": "An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 1930027,
                            "name": "j",
                            "start": 1930026,
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nReturns the substring of the string that starts at `i` and continues until `j`.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-string.sub)",
                    "finish": 1930032,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": 1930000,
                    "type": "function",
                    "view": "function string.sub(s: string|number, i: integer, j?: integer)\n  -> string"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/string.lua",
                "finish": 1930019,
                "start": 1930009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the substring of the string that starts at `i` and continues until `j`.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-string.sub)",
        "name": "string.sub",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A string is a data type native to Lua which consists of a sequence of characters. These often represent text to be displayed, but are also useful in other contexts. Strings are commonly used as keys in tables, since they make code more readable.\n[Programming in Lua, 2.4 -- Strings](https://www.lua.org/pil/2.4.html)",
                            "finish": 2070026,
                            "name": "fmt",
                            "start": 2070023,
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "desc": "A string is a data type native to Lua which consists of a sequence of characters. These often represent text to be displayed, but are also useful in other contexts. Strings are commonly used as keys in tables, since they make code more readable.\n[Programming in Lua, 2.4 -- Strings](https://www.lua.org/pil/2.4.html)",
                            "finish": 2070029,
                            "name": "s",
                            "start": 2070028,
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "desc": "An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 2070034,
                            "name": "pos",
                            "start": 2070031,
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nReturns the values packed in string according to the format string `fmt` (see [ยง6.4.2](http://www.lua.org/manual/5.4/manual.html#6.4.2)) .\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-string.unpack)",
                    "finish": 2070039,
                    "returns": [
                        {
                            "name": "...",
                            "type": "function.return",
                            "view": "any"
                        },
                        {
                            "name": "offset",
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": 2070000,
                    "type": "function",
                    "view": "function string.unpack(fmt: string, s: string, pos?: integer)\n  -> ...any\n  2. offset: integer"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/string.lua",
                "finish": 2070022,
                "start": 2070009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the values packed in string according to the format string `fmt` (see [ยง6.4.2](http://www.lua.org/manual/5.4/manual.html#6.4.2)) .\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-string.unpack)",
        "name": "string.unpack",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A string is a data type native to Lua which consists of a sequence of characters. These often represent text to be displayed, but are also useful in other contexts. Strings are commonly used as keys in tables, since they make code more readable.\n[Programming in Lua, 2.4 -- Strings](https://www.lua.org/pil/2.4.html)",
                            "finish": 2170023,
                            "name": "s",
                            "start": 2170022,
                            "type": "local",
                            "view": "string|number"
                        }
                    ],
                    "desc": "\nReturns a copy of this string with all lowercase letters changed to uppercase.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-string.upper)",
                    "finish": 2170028,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": 2170000,
                    "type": "function",
                    "view": "function string.upper(s: string|number)\n  -> string"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/string.lua",
                "finish": 2170021,
                "start": 2170009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns a copy of this string with all lowercase letters changed to uppercase.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-string.upper)",
        "name": "string.upper",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "finish": 80010,
                    "start": 80008,
                    "type": "table",
                    "view": "tablelib"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/table.lua",
                "finish": 80005,
                "start": 80000,
                "type": "setglobal"
            }
        ],
        "desc": "\n\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-table)\n",
        "name": "table",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A table is a data type native to Lua, and links \"keys\" (usually numbers or strings) to \"values\" (any kind of data, including other tables). This is the only data structuring mechanism in Lua, and many of the data types documented here are simply tables with restrictions on their keys or values. If a key has not been assigned a value, the table returns nil as the corresponding value, and assigning nil as a value to a key removes that key from the table.\n[Programming in Lua, 2.5 -- Tables](https://www.lua.org/pil/2.5.html)",
                            "finish": 210026,
                            "name": "list",
                            "start": 210022,
                            "type": "local",
                            "view": "table"
                        },
                        {
                            "desc": "A string is a data type native to Lua which consists of a sequence of characters. These often represent text to be displayed, but are also useful in other contexts. Strings are commonly used as keys in tables, since they make code more readable.\n[Programming in Lua, 2.4 -- Strings](https://www.lua.org/pil/2.4.html)",
                            "finish": 210031,
                            "name": "sep",
                            "start": 210028,
                            "type": "local",
                            "view": "string?"
                        },
                        {
                            "desc": "An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 210034,
                            "name": "i",
                            "start": 210033,
                            "type": "local",
                            "view": "integer?"
                        },
                        {
                            "desc": "An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 210037,
                            "name": "j",
                            "start": 210036,
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nGiven a list where all elements are strings or numbers, returns the string `list[i]..sep..list[i+1] ยทยทยท sep..list[j]`.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-table.concat)",
                    "finish": 210042,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": 210000,
                    "type": "function",
                    "view": "function table.concat(list: table, sep?: string, i?: integer, j?: integer)\n  -> string"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/table.lua",
                "finish": 210021,
                "start": 210009,
                "type": "setfield"
            }
        ],
        "desc": "\nGiven a list where all elements are strings or numbers, returns the string `list[i]..sep..list[i+1] ยทยทยท sep..list[j]`.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-table.concat)",
        "name": "table.concat",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1250027,
                            "name": "list",
                            "start": 1250023,
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": 1250037,
                            "name": "callback",
                            "start": 1250029,
                            "type": "local",
                            "view": "fun(key: string, value: any):<T>|nil"
                        }
                    ],
                    "desc": "\nExecutes the given f over all elements of table. For each element, f is called with the index and respective value as arguments. If f returns a non-nil value, then the loop is broken, and this value is returned as the final value of foreach.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-table.foreach)",
                    "finish": 1250042,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "<T>|nil"
                        }
                    ],
                    "start": 1250000,
                    "type": "function",
                    "view": "function table.foreach(list: any, callback: fun(key: string, value: any):<T>|nil)\n  -> <T>|nil"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/table.lua",
                "finish": 1250022,
                "start": 1250009,
                "type": "setfield"
            }
        ],
        "desc": "\nExecutes the given f over all elements of table. For each element, f is called with the index and respective value as arguments. If f returns a non-nil value, then the loop is broken, and this value is returned as the final value of foreach.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-table.foreach)",
        "name": "table.foreach",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1380028,
                            "name": "list",
                            "start": 1380024,
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": 1380038,
                            "name": "callback",
                            "start": 1380030,
                            "type": "local",
                            "view": "fun(key: string, value: any):<T>|nil"
                        }
                    ],
                    "desc": "\nExecutes the given f over the numerical indices of table. For each index, f is called with the index and respective value as arguments. Indices are visited in sequential order, from 1 to n, where n is the size of the table. If f returns a non-nil value, then the loop is broken and this value is returned as the result of foreachi.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-table.foreachi)",
                    "finish": 1380043,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "<T>|nil"
                        }
                    ],
                    "start": 1380000,
                    "type": "function",
                    "view": "function table.foreachi(list: any, callback: fun(key: string, value: any):<T>|nil)\n  -> <T>|nil"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/table.lua",
                "finish": 1380023,
                "start": 1380009,
                "type": "setfield"
            }
        ],
        "desc": "\nExecutes the given f over the numerical indices of table. For each index, f is called with the index and respective value as arguments. Indices are visited in sequential order, from 1 to n, where n is the size of the table. If f returns a non-nil value, then the loop is broken and this value is returned as the result of foreachi.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-table.foreachi)",
        "name": "table.foreachi",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1510024,
                            "name": "list",
                            "start": 1510020,
                            "type": "local",
                            "view": "<T>[]"
                        }
                    ],
                    "desc": "\nReturns the number of elements in the table. This function is equivalent to `#list`.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-table.getn)",
                    "finish": 1510029,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": 1510000,
                    "type": "function",
                    "view": "function table.getn(list: <T>[])\n  -> integer"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/table.lua",
                "finish": 1510019,
                "start": 1510009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the number of elements in the table. This function is equivalent to `#list`.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-table.getn)",
        "name": "table.getn",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A table is a data type native to Lua, and links \"keys\" (usually numbers or strings) to \"values\" (any kind of data, including other tables). This is the only data structuring mechanism in Lua, and many of the data types documented here are simply tables with restrictions on their keys or values. If a key has not been assigned a value, the table returns nil as the corresponding value, and assigning nil as a value to a key removes that key from the table.\n[Programming in Lua, 2.5 -- Tables](https://www.lua.org/pil/2.5.html)",
                            "finish": 320026,
                            "name": "list",
                            "start": 320022,
                            "type": "local",
                            "view": "table"
                        },
                        {
                            "desc": "An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 320031,
                            "name": "pos",
                            "start": 320028,
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": 320038,
                            "name": "value",
                            "start": 320033,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "\nInserts element `value` at position `pos` in `list`.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-table.insert)",
                    "finish": 320043,
                    "start": 320000,
                    "type": "function",
                    "view": "function table.insert(list: table, pos: integer, value: any)"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/table.lua",
                "finish": 320021,
                "start": 320009,
                "type": "setfield"
            }
        ],
        "desc": "\nInserts element `value` at position `pos` in `list`.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-table.insert)",
        "name": "table.insert",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A table is a data type native to Lua, and links \"keys\" (usually numbers or strings) to \"values\" (any kind of data, including other tables). This is the only data structuring mechanism in Lua, and many of the data types documented here are simply tables with restrictions on their keys or values. If a key has not been assigned a value, the table returns nil as the corresponding value, and assigning nil as a value to a key removes that key from the table.\n[Programming in Lua, 2.5 -- Tables](https://www.lua.org/pil/2.5.html)",
                            "finish": 430025,
                            "name": "table",
                            "start": 430020,
                            "type": "local",
                            "view": "table"
                        }
                    ],
                    "desc": "\nReturns the largest positive numerical index of the given table, or zero if the table has no positive numerical indices.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-table.maxn)",
                    "finish": 430030,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": 430000,
                    "type": "function",
                    "view": "function table.maxn(table: table)\n  -> integer"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/table.lua",
                "finish": 430019,
                "start": 430009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the largest positive numerical index of the given table, or zero if the table has no positive numerical indices.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-table.maxn)",
        "name": "table.maxn",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A table is a data type native to Lua, and links \"keys\" (usually numbers or strings) to \"values\" (any kind of data, including other tables). This is the only data structuring mechanism in Lua, and many of the data types documented here are simply tables with restrictions on their keys or values. If a key has not been assigned a value, the table returns nil as the corresponding value, and assigning nil as a value to a key removes that key from the table.\n[Programming in Lua, 2.5 -- Tables](https://www.lua.org/pil/2.5.html)",
                            "finish": 630022,
                            "name": "a1",
                            "start": 630020,
                            "type": "local",
                            "view": "table"
                        },
                        {
                            "desc": "An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 630025,
                            "name": "f",
                            "start": 630024,
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "desc": "An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 630028,
                            "name": "e",
                            "start": 630027,
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "desc": "An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 630031,
                            "name": "t",
                            "start": 630030,
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "desc": "A table is a data type native to Lua, and links \"keys\" (usually numbers or strings) to \"values\" (any kind of data, including other tables). This is the only data structuring mechanism in Lua, and many of the data types documented here are simply tables with restrictions on their keys or values. If a key has not been assigned a value, the table returns nil as the corresponding value, and assigning nil as a value to a key removes that key from the table.\n[Programming in Lua, 2.5 -- Tables](https://www.lua.org/pil/2.5.html)",
                            "finish": 630035,
                            "name": "a2",
                            "start": 630033,
                            "type": "local",
                            "view": "table?"
                        }
                    ],
                    "desc": "\nMoves elements from table `a1` to table `a2`.\n```lua\na2[t],ยทยทยท =\na1[f],ยทยทยท,a1[e]\nreturn a2\n```\n\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-table.move)",
                    "finish": 630040,
                    "returns": [
                        {
                            "name": "a2",
                            "type": "function.return",
                            "view": "table"
                        }
                    ],
                    "start": 630000,
                    "type": "function",
                    "view": "function table.move(a1: table, f: integer, e: integer, t: integer, a2?: table)\n  -> a2: table"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/table.lua",
                "finish": 630019,
                "start": 630009,
                "type": "setfield"
            }
        ],
        "desc": "\nMoves elements from table `a1` to table `a2`.\n```lua\na2[t],ยทยทยท =\na1[f],ยทยทยท,a1[e]\nreturn a2\n```\n\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-table.move)",
        "name": "table.move",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 730023,
                            "start": 730020,
                            "type": "...",
                            "view": "unknown"
                        }
                    ],
                    "desc": "\nReturns a new table with all arguments stored into keys `1`, `2`, etc. and with a field `\"n\"` with the total number of arguments.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-table.pack)",
                    "finish": 730028,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "table"
                        }
                    ],
                    "start": 730000,
                    "type": "function",
                    "view": "function table.pack(...any)\n  -> table"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/table.lua",
                "finish": 730019,
                "start": 730009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns a new table with all arguments stored into keys `1`, `2`, etc. and with a field `\"n\"` with the total number of arguments.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-table.pack)",
        "name": "table.pack",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A table is a data type native to Lua, and links \"keys\" (usually numbers or strings) to \"values\" (any kind of data, including other tables). This is the only data structuring mechanism in Lua, and many of the data types documented here are simply tables with restrictions on their keys or values. If a key has not been assigned a value, the table returns nil as the corresponding value, and assigning nil as a value to a key removes that key from the table.\n[Programming in Lua, 2.5 -- Tables](https://www.lua.org/pil/2.5.html)",
                            "finish": 830026,
                            "name": "list",
                            "start": 830022,
                            "type": "local",
                            "view": "table"
                        },
                        {
                            "desc": "An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 830031,
                            "name": "pos",
                            "start": 830028,
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nRemoves from `list` the element at position `pos`, returning the value of the removed element.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-table.remove)",
                    "finish": 830036,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": 830000,
                    "type": "function",
                    "view": "function table.remove(list: table, pos?: integer)\n  -> any"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/table.lua",
                "finish": 830021,
                "start": 830009,
                "type": "setfield"
            }
        ],
        "desc": "\nRemoves from `list` the element at position `pos`, returning the value of the removed element.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-table.remove)",
        "name": "table.remove",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 930024,
                            "name": "list",
                            "start": 930020,
                            "type": "local",
                            "view": "<T>[]"
                        },
                        {
                            "finish": 930030,
                            "name": "comp",
                            "start": 930026,
                            "type": "local",
                            "view": "(fun(a: <T>, b: <T>):boolean)?"
                        }
                    ],
                    "desc": "\nSorts list elements in a given order, *in-place*, from `list[1]` to `list[#list]`.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-table.sort)",
                    "finish": 930035,
                    "start": 930000,
                    "type": "function",
                    "view": "function table.sort(list: <T>[], comp?: fun(a: <T>, b: <T>):boolean)"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/table.lua",
                "finish": 930019,
                "start": 930009,
                "type": "setfield"
            }
        ],
        "desc": "\nSorts list elements in a given order, *in-place*, from `list[1]` to `list[#list]`.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-table.sort)",
        "name": "table.sort",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1120026,
                            "name": "list",
                            "start": 1120022,
                            "type": "local",
                            "view": "<T>[]"
                        },
                        {
                            "desc": "An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 1120029,
                            "name": "i",
                            "start": 1120028,
                            "type": "local",
                            "view": "integer?"
                        },
                        {
                            "desc": "An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 1120032,
                            "name": "j",
                            "start": 1120031,
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nReturns the elements from the given list. This function is equivalent to\n```lua\n    return list[i], list[i+1], ยทยทยท, list[j]\n```\nBy default, `i` is `1` and `j` is `#list`.\n\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-table.unpack)",
                    "finish": 1120037,
                    "returns": [
                        {
                            "name": "...",
                            "type": "function.return",
                            "view": "<T>"
                        }
                    ],
                    "start": 1120000,
                    "type": "function",
                    "view": "function table.unpack(list: <T>[], i?: integer, j?: integer)\n  -> ...<T>"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/table.lua",
                "finish": 1120021,
                "start": 1120009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the elements from the given list. This function is equivalent to\n```lua\n    return list[i], list[i+1], ยทยทยท, list[j]\n```\nBy default, `i` is `1` and `j` is `#list`.\n\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-table.unpack)",
        "name": "table.unpack",
        "type": "variable"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 3080020,
                "start": 3080010,
                "type": "doc.class"
            }
        ],
        "desc": "A technology object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a technology entry in the rules.txt, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tech)",
        "fields": [
            {
                "desc": "(get/set - ephemeral) Returns the AI value of the tech.",
                "extends": {
                    "finish": 3090025,
                    "start": 3090018,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 3090025,
                            "start": 3090018,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 3090025,
                "name": "aiValue",
                "start": 3090010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set - ephemeral) Returns the category of the tech.",
                "extends": {
                    "finish": 3100026,
                    "start": 3100019,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 3100026,
                            "start": 3100019,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 3100026,
                "name": "category",
                "start": 3100010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set - ephemeral) Returns the epoch of the tech.",
                "extends": {
                    "finish": 3110023,
                    "start": 3110016,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 3110023,
                            "start": 3110016,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 3110023,
                "name": "epoch",
                "start": 3110010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set - ephemeral) Returns the group of the tech.",
                "extends": {
                    "finish": 3120023,
                    "start": 3120016,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 3120023,
                            "start": 3120016,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 3120023,
                "name": "group",
                "start": 3120010,
                "type": "doc.field"
            },
            {
                "desc": "(get) Returns the id of the tech.",
                "extends": {
                    "finish": 3130015,
                    "start": 3130013,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 3130015,
                            "start": 3130013,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 3130015,
                "name": "id",
                "start": 3130010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set - ephemeral) Returns the modifier to the AI value based on leader personality.",
                "extends": {
                    "finish": 3140026,
                    "start": 3140019,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 3140026,
                            "start": 3140019,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 3140026,
                "name": "modifier",
                "start": 3140010,
                "type": "doc.field"
            },
            {
                "desc": "(get) Returns the name of the tech.",
                "extends": {
                    "finish": 3150021,
                    "start": 3150015,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 3150021,
                            "start": 3150015,
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 3150021,
                "name": "name",
                "start": 3150010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set - ephemeral) Returns the first prerequisite of the tech.",
                "extends": {
                    "finish": 3160028,
                    "start": 3160018,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 3160028,
                            "start": 3160018,
                            "type": "doc.type.name",
                            "view": "techObject"
                        }
                    ],
                    "view": "techObject"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 3160028,
                "name": "prereq1",
                "start": 3160010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set - ephemeral) Returns the second prerequisite of the tech.",
                "extends": {
                    "finish": 3170028,
                    "start": 3170018,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 3170028,
                            "start": 3170018,
                            "type": "doc.type.name",
                            "view": "techObject"
                        }
                    ],
                    "view": "techObject"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 3170028,
                "name": "prereq2",
                "start": 3170010,
                "type": "doc.field"
            },
            {
                "desc": "(get) Returns whether or not any tribe has researched the tech.",
                "extends": {
                    "finish": 3180028,
                    "start": 3180021,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 3180028,
                            "start": 3180021,
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 3180028,
                "name": "researched",
                "start": 3180010,
                "type": "doc.field"
            }
        ],
        "name": "techObject",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 4740023,
                "start": 4740010,
                "type": "doc.class"
            }
        ],
        "desc": "A terrain object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents the terrain characteristics which change for special resources. The 'base terrain' object deals with the characteristics that do not change for special resources.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#terrain)",
        "fields": [
            {
                "desc": "(get) The underlying baseterrain of the terrain object.",
                "extends": {
                    "finish": 4750039,
                    "start": 4750022,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 4750039,
                            "start": 4750022,
                            "type": "doc.type.name",
                            "view": "baseTerrainObject"
                        }
                    ],
                    "view": "baseTerrainObject"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 4750039,
                "name": "baseTerrain",
                "start": 4750010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set - ephemeral) The amount of food produced by the terrain.",
                "extends": {
                    "finish": 4760022,
                    "start": 4760015,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 4760022,
                            "start": 4760015,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 4760022,
                "name": "food",
                "start": 4760010,
                "type": "doc.field"
            },
            {
                "desc": "(get) The map associated with the terrain object.",
                "extends": {
                    "finish": 4770021,
                    "start": 4770014,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 4770021,
                            "start": 4770014,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 4770021,
                "name": "map",
                "start": 4770010,
                "type": "doc.field"
            },
            {
                "desc": "(get) The name of the terrain.",
                "extends": {
                    "finish": 4780021,
                    "start": 4780015,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 4780021,
                            "start": 4780015,
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 4780021,
                "name": "name",
                "start": 4780010,
                "type": "doc.field"
            },
            {
                "desc": "(get) The resource associated with the terrain object.",
                "extends": {
                    "finish": 4790026,
                    "start": 4790019,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 4790026,
                            "start": 4790019,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 4790026,
                "name": "resource",
                "start": 4790010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set - ephemeral) The amount of shields produced by the terrain.",
                "extends": {
                    "finish": 4800025,
                    "start": 4800018,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 4800025,
                            "start": 4800018,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 4800025,
                "name": "shields",
                "start": 4800010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set - ephemeral) The amount of trade produced by the terrain.",
                "extends": {
                    "finish": 4810023,
                    "start": 4810016,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 4810023,
                            "start": 4810016,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 4810023,
                "name": "trade",
                "start": 4810010,
                "type": "doc.field"
            },
            {
                "desc": "(get) The terrain type associated with the terrain object.",
                "extends": {
                    "finish": 4820022,
                    "start": 4820015,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 4820022,
                            "start": 4820015,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 4820022,
                "name": "type",
                "start": 4820010,
                "type": "doc.field"
            }
        ],
        "name": "terrainObject",
        "type": "type"
    },
    {
        "defines": [
            {
                "extends": [
                    {
                        "finish": 8150031,
                        "start": 8150026,
                        "type": "doc.extends.name",
                        "view": "table"
                    }
                ],
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 8150031,
                "start": 8150010,
                "type": "doc.class"
            }
        ],
        "desc": " A threshold table is a table where if a numerical key is indexed, and that\n numerical key doesn't correspond to an index, the value of the largest\n numerical index less than the key is used.\n If there is no numerical index smaller than the key, false is returned\n (nil is returned for non-numerical keys not in table)\n Use an index -math.huge to provide values for arbitrarily small numerical keys\n example \n myTable = gen.makeThresholdTable({[-1]=-1,[0]=0,[1]=1,})\n myTable[-2] = false\n myTable[-1] = -1\n myTable[-0.6] = -1\n myTable[3.5]=1\n myTable[\"three\"] = nil\n myTable[0.5]=0",
        "fields": [],
        "name": "thresholdTable",
        "type": "type"
    },
    {
        "defines": [
            {
                "extends": {
                    "finish": 8960010,
                    "start": 8940020,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 8950015,
                            "start": 8950005,
                            "type": "doc.type.name",
                            "view": "tileObject"
                        },
                        {
                            "finish": 8960010,
                            "start": 8960005,
                            "type": "doc.type.name",
                            "view": "table"
                        }
                    ],
                    "view": "table|tileObject"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/generalLibrary.lua",
                "finish": 8960010,
                "start": 8940010,
                "type": "doc.alias"
            }
        ],
        "desc": "A tileAnalog is either a tileObject or a table with\none of the following forms: {[1]=x,[2]=y,[3]=z}, {[1]=x,[2]=y}\n(and assumes z=0), {x=x,y=y,z=z}, or {x=x, y=y} (and assumes z=0).\nThe x,y,z values (but not keys) correspond to tile coordinates.\n",
        "fields": [],
        "name": "tileAnalog",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 1510020,
                "start": 1510010,
                "type": "doc.class"
            }
        ],
        "desc": "A tile object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a map \"square\" in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tile)",
        "fields": [
            {
                "desc": "(get/set) Returns the baseterrain object associated with the tile.",
                "extends": {
                    "finish": 1520039,
                    "start": 1520022,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 1520039,
                            "start": 1520022,
                            "type": "doc.type.name",
                            "view": "baseTerrainObject"
                        }
                    ],
                    "view": "baseTerrainObject"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 1520039,
                "name": "baseTerrain",
                "start": 1520010,
                "type": "doc.field"
            },
            {
                "desc": "(get) Returns the city at the tile's location, or `nil` if there's no city there.",
                "extends": {
                    "finish": 1530029,
                    "start": 1530015,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 1530025,
                            "start": 1530015,
                            "type": "doc.type.name",
                            "view": "cityObject"
                        },
                        {
                            "finish": 1530029,
                            "start": 1530026,
                            "type": "doc.type.name",
                            "view": "nil"
                        }
                    ],
                    "view": "cityObject|nil"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 1530029,
                "name": "city",
                "start": 1530010,
                "type": "doc.field"
            },
            {
                "desc": "(get) Returns the tile's defender. Returns `nil` if the tile has no defender.",
                "extends": {
                    "finish": 1540034,
                    "start": 1540019,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 1540030,
                            "start": 1540019,
                            "type": "doc.type.name",
                            "view": "tribeObject"
                        },
                        {
                            "finish": 1540034,
                            "start": 1540031,
                            "type": "doc.type.name",
                            "view": "nil"
                        }
                    ],
                    "view": "tribeObject|nil"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 1540034,
                "name": "defender",
                "start": 1540010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set) Returns the tile's fertility.",
                "extends": {
                    "finish": 1550027,
                    "start": 1550020,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 1550027,
                            "start": 1550020,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 1550027,
                "name": "fertility",
                "start": 1550010,
                "type": "doc.field"
            },
            {
                "desc": "(get) Returns `true` if the tile would have a shield when changed to grassland, `false` otherwise.",
                "extends": {
                    "finish": 1560033,
                    "start": 1560026,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 1560033,
                            "start": 1560026,
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 1560033,
                "name": "grasslandShield",
                "start": 1560010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set) Returns the tile's improvements (bitmask).",
                "extends": {
                    "finish": 1570030,
                    "start": 1570023,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 1570030,
                            "start": 1570023,
                            "type": "doc.type.name",
                            "view": "bitmask"
                        }
                    ],
                    "view": "bitmask"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 1570030,
                "name": "improvements",
                "start": 1570010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set) Returns the tile's landmass index.",
                "extends": {
                    "finish": 1580026,
                    "start": 1580019,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 1580026,
                            "start": 1580019,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 1580026,
                "name": "landmass",
                "start": 1580010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set) Returns the tribe owning the tile.",
                "extends": {
                    "finish": 1590027,
                    "start": 1590016,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 1590027,
                            "start": 1590016,
                            "type": "doc.type.name",
                            "view": "tribeObject"
                        }
                    ],
                    "view": "tribeObject"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 1590027,
                "name": "owner",
                "start": 1590010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set) Returns `true` if the tile has a river, `false` otherwise.",
                "extends": {
                    "finish": 1600023,
                    "start": 1600016,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 1600023,
                            "start": 1600016,
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 1600023,
                "name": "river",
                "start": 1600010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set) Returns the terrain object associated with the tile.",
                "extends": {
                    "finish": 1610031,
                    "start": 1610018,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 1610031,
                            "start": 1610018,
                            "type": "doc.type.name",
                            "view": "terrainObject"
                        }
                    ],
                    "view": "terrainObject"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 1610031,
                "name": "terrain",
                "start": 1610010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set) Returns an integer representing the terrain type of the tile, as well as whether the tile has a river, whether there is an special resource being animated, and whether an ocean resource is suppressed for being too far from land. It is recommended to use the baseTerrain property to check and change terrain types instead of this. If checking a terrain type with this property, use % 16 to only get the terrain index.",
                "extends": {
                    "finish": 1620029,
                    "start": 1620022,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 1620029,
                            "start": 1620022,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 1620029,
                "name": "terrainType",
                "start": 1620010,
                "type": "doc.field"
            },
            {
                "desc": "(get) Returns an iterator yielding all units at the tile's location.",
                "extends": {
                    "finish": 1630024,
                    "start": 1630016,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 1630024,
                            "start": 1630016,
                            "type": "doc.type.name",
                            "view": "iterator"
                        }
                    ],
                    "view": "iterator"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 1630024,
                "name": "units",
                "start": 1630010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set) Returns the tile's visibility for each tribe (bitmask).",
                "extends": {
                    "finish": 1640028,
                    "start": 1640021,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 1640028,
                            "start": 1640021,
                            "type": "doc.type.name",
                            "view": "bitmask"
                        }
                    ],
                    "view": "bitmask"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 1640028,
                "name": "visibility",
                "start": 1640010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set) Returns the tile's improvements as known by the given tribe (bitmask).",
                "extends": {
                    "finish": 1650037,
                    "start": 1650030,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 1650037,
                            "start": 1650030,
                            "type": "doc.type.name",
                            "view": "bitmask"
                        }
                    ],
                    "view": "bitmask"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 1650037,
                "name": "visibleImprovements",
                "start": 1650010,
                "type": "doc.field"
            },
            {
                "desc": "(get) Returns the `x` coordinate of the tile.",
                "extends": {
                    "finish": 1660019,
                    "start": 1660012,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 1660019,
                            "start": 1660012,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 1660019,
                "name": "x",
                "start": 1660010,
                "type": "doc.field"
            },
            {
                "desc": "(get) Returns the `y` coordinate of the tile.",
                "extends": {
                    "finish": 1670019,
                    "start": 1670012,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 1670019,
                            "start": 1670012,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 1670019,
                "name": "y",
                "start": 1670010,
                "type": "doc.field"
            },
            {
                "desc": "(get) Returns the `z` coordinate of the tile (map number).",
                "extends": {
                    "finish": 1680019,
                    "start": 1680012,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 1680019,
                            "start": 1680012,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 1680019,
                "name": "z",
                "start": 1680010,
                "type": "doc.field"
            }
        ],
        "name": "tileObject",
        "type": "type"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 3240019,
                            "name": "e",
                            "start": 3240018,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "\nWhen called with no `base`, `tonumber` tries to convert its argument to a number. If the argument is already a number or a string convertible to a number, then `tonumber` returns this number; otherwise, it returns `fail`.\n\nThe conversion of strings can result in integers or floats, according to the lexical conventions of Lua (see [ยง3.1](http://www.lua.org/manual/5.4/manual.html#3.1)). The string may have leading and trailing spaces and a sign.\n\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-tonumber)",
                    "finish": 3240024,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number?"
                        }
                    ],
                    "start": 3240000,
                    "type": "function",
                    "view": "function tonumber(e: any)\n  -> number?"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/basic.lua",
                "finish": 3240017,
                "start": 3240009,
                "type": "setglobal"
            }
        ],
        "desc": "\nWhen called with no `base`, `tonumber` tries to convert its argument to a number. If the argument is already a number or a string convertible to a number, then `tonumber` returns this number; otherwise, it returns `fail`.\n\nThe conversion of strings can result in integers or floats, according to the lexical conventions of Lua (see [ยง3.1](http://www.lua.org/manual/5.4/manual.html#3.1)). The string may have leading and trailing spaces and a sign.\n\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-tonumber)",
        "name": "tonumber",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 3390019,
                            "name": "v",
                            "start": 3390018,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "\nReceives a value of any type and converts it to a string in a human-readable format.\n\nIf the metatable of `v` has a `__tostring` field, then `tostring` calls the corresponding value with `v` as argument, and uses the result of the call as its result. Otherwise, if the metatable of `v` has a `__name` field with a string value, `tostring` may use that string in its final result.\n\nFor complete control of how numbers are converted, use [string.format](http://www.lua.org/manual/5.4/manual.html#pdf-string.format).\n\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-tostring)",
                    "finish": 3390024,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": 3390000,
                    "type": "function",
                    "view": "function tostring(v: any)\n  -> string"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/basic.lua",
                "finish": 3390017,
                "start": 3390009,
                "type": "setglobal"
            }
        ],
        "desc": "\nReceives a value of any type and converts it to a string in a human-readable format.\n\nIf the metatable of `v` has a `__tostring` field, then `tostring` calls the corresponding value with `v` as argument, and uses the result of the call as its result. Otherwise, if the metatable of `v` has a `__name` field with a string value, `tostring` may use that string in its final result.\n\nFor complete control of how numbers are converted, use [string.format](http://www.lua.org/manual/5.4/manual.html#pdf-string.format).\n\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-tostring)",
        "name": "tostring",
        "type": "variable"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/totpp.lua",
                "finish": 910015,
                "start": 910010,
                "type": "doc.class"
            }
        ],
        "fields": [
            {
                "desc": "",
                "extends": {
                    "finish": 940023,
                    "start": 940014,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 940023,
                            "start": 940014,
                            "type": "doc.type.name",
                            "view": "totpp.mod"
                        }
                    ],
                    "view": "totpp.mod"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/totpp.lua",
                "finish": 940023,
                "name": "mod",
                "start": 940010,
                "type": "doc.field"
            },
            {
                "desc": "",
                "extends": {
                    "finish": 930055,
                    "start": 930030,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 930055,
                            "start": 930030,
                            "type": "doc.type.name",
                            "view": "totpp.movementMultipliers"
                        }
                    ],
                    "view": "totpp.movementMultipliers"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/totpp.lua",
                "finish": 930055,
                "name": "movementMultipliers",
                "start": 930010,
                "type": "doc.field"
            },
            {
                "desc": "(get) Returns a table with the enabled status for all patches. The string keys are the same as the ones used in TOTPP.ini",
                "extends": {
                    "finish": 950031,
                    "start": 950018,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 950031,
                            "start": 950018,
                            "type": "doc.type.name",
                            "view": "totpp.patches"
                        }
                    ],
                    "view": "totpp.patches"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/totpp.lua",
                "finish": 950031,
                "name": "patches",
                "start": 950010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set - ephemeral) totpp.roadTrade[map] -> bitmask <br> Returns a bitmask with the terrain types that receive an initial trade arrow when a road is built. Provided by the Initial trade arrow for roads patch.",
                "extends": {
                    "finish": 960047,
                    "start": 960020,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 960047,
                            "start": 960020,
                            "type": "doc.type.sign",
                            "view": "table<integer|mapObject, bitmask>"
                        }
                    ],
                    "view": "table<integer|mapObject, bitmask>"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/totpp.lua",
                "finish": 960047,
                "name": "roadTrade",
                "start": 960010,
                "type": "doc.field"
            },
            {
                "desc": "",
                "extends": {
                    "finish": 920031,
                    "start": 920018,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 920031,
                            "start": 920018,
                            "type": "doc.type.name",
                            "view": "totpp.version"
                        }
                    ],
                    "view": "totpp.version"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/totpp.lua",
                "finish": 920031,
                "name": "version",
                "start": 920010,
                "type": "doc.field"
            }
        ],
        "name": "totpp",
        "type": "type"
    },
    {
        "defines": [
            {
                "extends": {
                    "finish": 970010,
                    "start": 970008,
                    "type": "table",
                    "view": "totpp"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/totpp.lua",
                "finish": 970005,
                "start": 970000,
                "type": "setglobal"
            }
        ],
        "name": "totpp",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "finish": 1190014,
                    "start": 1190012,
                    "type": "table",
                    "view": "totpp.mod"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/totpp.lua",
                "finish": 1190009,
                "start": 1190000,
                "type": "setfield"
            }
        ],
        "desc": "",
        "name": "totpp.mod",
        "type": "variable"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/totpp.lua",
                "finish": 1170019,
                "start": 1170010,
                "type": "doc.class"
            }
        ],
        "desc": "",
        "fields": [
            {
                "desc": "(get) Returns `true` if the game was started on a pre-made map, `false` otherwise. Only valid right after starting a new game.",
                "extends": {
                    "finish": 1180028,
                    "start": 1180021,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 1180028,
                            "start": 1180021,
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/totpp.lua",
                "finish": 1180028,
                "name": "premadeMap",
                "start": 1180010,
                "type": "doc.field"
            }
        ],
        "name": "totpp.mod",
        "type": "type"
    },
    {
        "defines": [
            {
                "extends": {
                    "finish": 1130030,
                    "start": 1130028,
                    "type": "table",
                    "view": "totpp.movementMultipliers"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/totpp.lua",
                "finish": 1130025,
                "start": 1130000,
                "type": "setfield"
            }
        ],
        "desc": "",
        "name": "totpp.movementMultipliers",
        "type": "variable"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/totpp.lua",
                "finish": 1070035,
                "start": 1070010,
                "type": "doc.class"
            }
        ],
        "desc": "",
        "fields": [
            {
                "desc": "(get) Returns the aggregate movement multiplier (the lcm of the four multipliers above). This value is recalculated when setting any of the individual multipliers. This is an alias for `civ.cosmic.roadMultiplier`.",
                "extends": {
                    "finish": 1080027,
                    "start": 1080020,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 1080027,
                            "start": 1080020,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/totpp.lua",
                "finish": 1080027,
                "name": "aggregate",
                "start": 1080010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set - ephemeral) Returns the alpine movement multiplier if it is set, `nil` otherwise.",
                "extends": {
                    "finish": 1090028,
                    "start": 1090017,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 1090024,
                            "start": 1090017,
                            "type": "doc.type.name",
                            "view": "integer"
                        },
                        {
                            "finish": 1090028,
                            "start": 1090025,
                            "type": "doc.type.name",
                            "view": "nil"
                        }
                    ],
                    "view": "integer|nil"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/totpp.lua",
                "finish": 1090028,
                "name": "alpine",
                "start": 1090010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set - ephemeral) Returns the railroad movement multiplier if it is set, `nil` otherwise.",
                "extends": {
                    "finish": 1100030,
                    "start": 1100019,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 1100026,
                            "start": 1100019,
                            "type": "doc.type.name",
                            "view": "integer"
                        },
                        {
                            "finish": 1100030,
                            "start": 1100027,
                            "type": "doc.type.name",
                            "view": "nil"
                        }
                    ],
                    "view": "integer|nil"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/totpp.lua",
                "finish": 1100030,
                "name": "railroad",
                "start": 1100010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set - ephemeral) Returns the river movement multiplier if it is set, `nil` otherwise.",
                "extends": {
                    "finish": 1110027,
                    "start": 1110016,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 1110023,
                            "start": 1110016,
                            "type": "doc.type.name",
                            "view": "integer"
                        },
                        {
                            "finish": 1110027,
                            "start": 1110024,
                            "type": "doc.type.name",
                            "view": "nil"
                        }
                    ],
                    "view": "integer|nil"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/totpp.lua",
                "finish": 1110027,
                "name": "river",
                "start": 1110010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set - ephemeral) Returns the road movement multiplier if it is set, `nil` otherwise.",
                "extends": {
                    "finish": 1120026,
                    "start": 1120015,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 1120022,
                            "start": 1120015,
                            "type": "doc.type.name",
                            "view": "integer"
                        },
                        {
                            "finish": 1120026,
                            "start": 1120023,
                            "type": "doc.type.name",
                            "view": "nil"
                        }
                    ],
                    "view": "integer|nil"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/totpp.lua",
                "finish": 1120026,
                "name": "road",
                "start": 1120010,
                "type": "doc.field"
            }
        ],
        "name": "totpp.movementMultipliers",
        "type": "type"
    },
    {
        "defines": [
            {
                "extends": {
                    "finish": 18000119,
                    "start": 18000043,
                    "type": "getindex",
                    "view": "unknown"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/changeRules.lua",
                "finish": 18000040,
                "start": 18000008,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 9590057,
                    "start": 9590039,
                    "type": "getfield",
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/customCosmic.lua",
                "finish": 9590036,
                "start": 9590004,
                "type": "setfield"
            }
        ],
        "desc": "An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
        "name": "totpp.movementMultipliers.alpine",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "finish": 17980123,
                    "start": 17980045,
                    "type": "getindex",
                    "view": "unknown"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/changeRules.lua",
                "finish": 17980042,
                "start": 17980008,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 9570061,
                    "start": 9570041,
                    "type": "getfield",
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/customCosmic.lua",
                "finish": 9570038,
                "start": 9570004,
                "type": "setfield"
            }
        ],
        "desc": "An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
        "name": "totpp.movementMultipliers.railroad",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "finish": 17990117,
                    "start": 17990042,
                    "type": "getindex",
                    "view": "unknown"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/changeRules.lua",
                "finish": 17990039,
                "start": 17990008,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 9580055,
                    "start": 9580038,
                    "type": "getfield",
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/customCosmic.lua",
                "finish": 9580035,
                "start": 9580004,
                "type": "setfield"
            }
        ],
        "desc": "An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
        "name": "totpp.movementMultipliers.river",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "finish": 17970115,
                    "start": 17970041,
                    "type": "getindex",
                    "view": "unknown"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/changeRules.lua",
                "finish": 17970038,
                "start": 17970008,
                "type": "setfield"
            },
            {
                "extends": {
                    "finish": 9560053,
                    "start": 9560037,
                    "type": "getfield",
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaCore/customCosmic.lua",
                "finish": 9560034,
                "start": 9560004,
                "type": "setfield"
            }
        ],
        "desc": "An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
        "name": "totpp.movementMultipliers.road",
        "type": "variable"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/totpp.lua",
                "finish": 60023,
                "start": 60010,
                "type": "doc.class"
            }
        ],
        "fields": [
            {
                "desc": "",
                "extends": {
                    "finish": 540026,
                    "start": 540019,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 540026,
                            "start": 540019,
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/totpp.lua",
                "finish": 540026,
                "name": "AITweaks",
                "start": 540010,
                "type": "doc.field"
            },
            {
                "desc": "",
                "extends": {
                    "finish": 320038,
                    "start": 320031,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 320038,
                            "start": 320031,
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/totpp.lua",
                "finish": 320038,
                "name": "AcivateUnitScrollbar",
                "start": 320010,
                "type": "doc.field"
            },
            {
                "desc": "Enables a new section in RULES.TXT, @ATTACKS.<br>The numbers in this section define the number of attacks per turn per unit type. The section itself consist of a list of numbers, 10 per line, corresponding in order to the entries in @UNITS. For the Original game, it would look like this:<br><br>@ATTACKS<br>1, 2, 1, 1, 1, 1, 1, 1, 1, 1,<br>1, 1, 1, 1, 3, 2, 2, 2, 2, 2,<br>2, 2, 3, 1, 1, 1, 2, 10, 8, 6,<br>14, 12, 3, 3, 4, 4, 4, 6, 5, 5,<br>4, 3, 5, 5, 12, 16, 2, 3, 1, 2,<br>1, 1, 4, 8, 1, 1, 1, 1, 1, 1,<br>1, 1, 1, 1, 1, 1, 1, 1, 1, 1,<br>1, 1, 1, 1, 1, 1, 1, 1, 1, 1,<br><br>The number of attacks is limited by the movement rate, as each attack still costs 1 movement point.<br><br>The popup shown when a unit is out of attacks can be overridden in GAME.TXT using the key @ATTACKSPERTURN.",
                "extends": {
                    "finish": 490032,
                    "start": 490025,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 490032,
                            "start": 490025,
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/totpp.lua",
                "finish": 490032,
                "name": "AttacksPerTurn",
                "start": 490010,
                "type": "doc.field"
            },
            {
                "desc": "Makes the build transporter map dialog not select invalid maps as the default option, and also fixes the check for invalid art types.",
                "extends": {
                    "finish": 130034,
                    "start": 130027,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 130034,
                            "start": 130027,
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/totpp.lua",
                "finish": 130034,
                "name": "BuildTransporter",
                "start": 130010,
                "type": "doc.field"
            },
            {
                "desc": "",
                "extends": {
                    "finish": 820036,
                    "start": 820029,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 820036,
                            "start": 820029,
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/totpp.lua",
                "finish": 820036,
                "name": "CityPopulationLoss",
                "start": 820010,
                "type": "doc.field"
            },
            {
                "desc": "",
                "extends": {
                    "finish": 630029,
                    "start": 630022,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 630029,
                            "start": 630022,
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/totpp.lua",
                "finish": 630029,
                "name": "CitySprites",
                "start": 630010,
                "type": "doc.field"
            },
            {
                "desc": "",
                "extends": {
                    "finish": 620032,
                    "start": 620025,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 620032,
                            "start": 620025,
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/totpp.lua",
                "finish": 620032,
                "name": "CityUnitLimits",
                "start": 620010,
                "type": "doc.field"
            },
            {
                "desc": "",
                "extends": {
                    "finish": 350026,
                    "start": 350019,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 350026,
                            "start": 350019,
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/totpp.lua",
                "finish": 350026,
                "name": "CityView",
                "start": 350010,
                "type": "doc.field"
            },
            {
                "desc": "Disables the \"Disband\" option in the city screen's \"Supported units\" box for non-disbandable units.",
                "extends": {
                    "finish": 170036,
                    "start": 170029,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 170036,
                            "start": 170029,
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/totpp.lua",
                "finish": 170036,
                "name": "CityWinUnitDisband",
                "start": 170010,
                "type": "doc.field"
            },
            {
                "desc": "",
                "extends": {
                    "finish": 880035,
                    "start": 880028,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 880035,
                            "start": 880028,
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/totpp.lua",
                "finish": 880035,
                "name": "CityWinUnitSelect",
                "start": 880010,
                "type": "doc.field"
            },
            {
                "desc": "",
                "extends": {
                    "finish": 500034,
                    "start": 500027,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 500034,
                            "start": 500027,
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/totpp.lua",
                "finish": 500034,
                "name": "CityWorkingTiles",
                "start": 500010,
                "type": "doc.field"
            },
            {
                "desc": "",
                "extends": {
                    "finish": 700043,
                    "start": 700036,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 700043,
                            "start": 700036,
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/totpp.lua",
                "finish": 700043,
                "name": "CivilopediaWonderGraphics",
                "start": 700010,
                "type": "doc.field"
            },
            {
                "desc": "Enables the 8-frame combat animation from Icons.bmp when animated units are disabled. For an example and placement see the 8 frames in Icons.gif in the ToT root folder, starting from coordinates (1, 356).",
                "extends": {
                    "finish": 110033,
                    "start": 110026,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 110033,
                            "start": 110026,
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/totpp.lua",
                "finish": 110033,
                "name": "CombatAnimation",
                "start": 110010,
                "type": "doc.field"
            },
            {
                "desc": "",
                "extends": {
                    "finish": 560024,
                    "start": 560017,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 560024,
                            "start": 560017,
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/totpp.lua",
                "finish": 560024,
                "name": "Cosmic",
                "start": 560010,
                "type": "doc.field"
            },
            {
                "desc": "",
                "extends": {
                    "finish": 570036,
                    "start": 570029,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 570036,
                            "start": 570029,
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/totpp.lua",
                "finish": 570036,
                "name": "CustomModResources",
                "start": 570010,
                "type": "doc.field"
            },
            {
                "desc": "Adds support for maps with custom resource placement. Maps both with and without custom resources can be combined when loading maps in-game.<br>Saved games with custom-resource maps are incompatible with the vanilla game.<br>When loading a custom-resource map, the dialog that asks whether to randomize resources and huts will only randomize huts.<br><br>In cheat mode, custom resources can be enabled/disabled for a map by pressing Ctrl-F8. Subsequently, they can be placed on tiles with Ctrl-1 (resource #1) and Ctrl-2 (resource #2). Ctrl-0 removes a resource from a tile.",
                "extends": {
                    "finish": 210033,
                    "start": 210026,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 210033,
                            "start": 210026,
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/totpp.lua",
                "finish": 210033,
                "name": "CustomResources",
                "start": 210010,
                "type": "doc.field"
            },
            {
                "desc": "",
                "extends": {
                    "finish": 370030,
                    "start": 370023,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 370030,
                            "start": 370023,
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/totpp.lua",
                "finish": 370030,
                "name": "DebugScripts",
                "start": 370010,
                "type": "doc.field"
            },
            {
                "desc": "",
                "extends": {
                    "finish": 420032,
                    "start": 420025,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 420032,
                            "start": 420025,
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/totpp.lua",
                "finish": 420032,
                "name": "DecreaseCPUUse",
                "start": 420010,
                "type": "doc.field"
            },
            {
                "desc": "",
                "extends": {
                    "finish": 260030,
                    "start": 260023,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 260030,
                            "start": 260023,
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/totpp.lua",
                "finish": 260030,
                "name": "DefenseBonus",
                "start": 260010,
                "type": "doc.field"
            },
            {
                "desc": "Fixes the crash for difficulty levels above Deity, and accepts an unlimited number of difficulties in the @DIFFICULTY section of RULES.TXT. In practice though, the limit is around 10, as very high levels will cause AI food / shield rows to go negative.",
                "extends": {
                    "finish": 150028,
                    "start": 150021,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 150028,
                            "start": 150021,
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/totpp.lua",
                "finish": 150028,
                "name": "Difficulty",
                "start": 150010,
                "type": "doc.field"
            },
            {
                "desc": "",
                "extends": {
                    "finish": 760038,
                    "start": 760031,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 760038,
                            "start": 760031,
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/totpp.lua",
                "finish": 760038,
                "name": "DiplomacyScreenCrash",
                "start": 760010,
                "type": "doc.field"
            },
            {
                "desc": "",
                "extends": {
                    "finish": 670033,
                    "start": 670026,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 670033,
                            "start": 670026,
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/totpp.lua",
                "finish": 670033,
                "name": "DirectShowAudio",
                "start": 670010,
                "type": "doc.field"
            },
            {
                "desc": "",
                "extends": {
                    "finish": 810033,
                    "start": 810026,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 810033,
                            "start": 810026,
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/totpp.lua",
                "finish": 810033,
                "name": "DirectShowMusic",
                "start": 810010,
                "type": "doc.field"
            },
            {
                "desc": "",
                "extends": {
                    "finish": 430033,
                    "start": 430026,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 430033,
                            "start": 430026,
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/totpp.lua",
                "finish": 430033,
                "name": "DirectShowVideo",
                "start": 430010,
                "type": "doc.field"
            },
            {
                "desc": "",
                "extends": {
                    "finish": 750032,
                    "start": 750025,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 750032,
                            "start": 750025,
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/totpp.lua",
                "finish": 750032,
                "name": "DisabledButton",
                "start": 750010,
                "type": "doc.field"
            },
            {
                "desc": "",
                "extends": {
                    "finish": 460033,
                    "start": 460026,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 460033,
                            "start": 460026,
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/totpp.lua",
                "finish": 460033,
                "name": "EditTerrainKeys",
                "start": 460010,
                "type": "doc.field"
            },
            {
                "desc": "",
                "extends": {
                    "finish": 380031,
                    "start": 380024,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 380031,
                            "start": 380024,
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/totpp.lua",
                "finish": 380031,
                "name": "EndPlayerTurn",
                "start": 380010,
                "type": "doc.field"
            },
            {
                "desc": "",
                "extends": {
                    "finish": 780027,
                    "start": 780020,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 780027,
                            "start": 780020,
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/totpp.lua",
                "finish": 780027,
                "name": "EventHeap",
                "start": 780010,
                "type": "doc.field"
            },
            {
                "desc": "",
                "extends": {
                    "finish": 390027,
                    "start": 390020,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 390027,
                            "start": 390020,
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/totpp.lua",
                "finish": 390027,
                "name": "Fertility",
                "start": 390010,
                "type": "doc.field"
            },
            {
                "desc": "",
                "extends": {
                    "finish": 790032,
                    "start": 790025,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 790032,
                            "start": 790025,
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/totpp.lua",
                "finish": 790032,
                "name": "FixEditControl",
                "start": 790010,
                "type": "doc.field"
            },
            {
                "desc": "",
                "extends": {
                    "finish": 290030,
                    "start": 290023,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 290030,
                            "start": 290023,
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/totpp.lua",
                "finish": 290030,
                "name": "FixHostility",
                "start": 290010,
                "type": "doc.field"
            },
            {
                "desc": "",
                "extends": {
                    "finish": 330031,
                    "start": 330024,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 330031,
                            "start": 330024,
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/totpp.lua",
                "finish": 330031,
                "name": "GlobalWarming",
                "start": 330010,
                "type": "doc.field"
            },
            {
                "desc": "Allows hiding of unit health bars for specific unit types, by setting the 16th bit of the flags in @UNITS (i.e. by adding a 1 on the left).",
                "extends": {
                    "finish": 190028,
                    "start": 190021,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 190028,
                            "start": 190021,
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/totpp.lua",
                "finish": 190028,
                "name": "HealthBars",
                "start": 190010,
                "type": "doc.field"
            },
            {
                "desc": "",
                "extends": {
                    "finish": 840031,
                    "start": 840024,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 840031,
                            "start": 840024,
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/totpp.lua",
                "finish": 840031,
                "name": "ImpassableAir",
                "start": 840010,
                "type": "doc.field"
            },
            {
                "desc": "",
                "extends": {
                    "finish": 770034,
                    "start": 770027,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 770034,
                            "start": 770027,
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/totpp.lua",
                "finish": 770034,
                "name": "ImprovementFlags",
                "start": 770010,
                "type": "doc.field"
            },
            {
                "desc": "",
                "extends": {
                    "finish": 610034,
                    "start": 610027,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 610034,
                            "start": 610027,
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/totpp.lua",
                "finish": 610034,
                "name": "ImprovementIcons",
                "start": 610010,
                "type": "doc.field"
            },
            {
                "desc": "",
                "extends": {
                    "finish": 360028,
                    "start": 360021,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 360028,
                            "start": 360021,
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/totpp.lua",
                "finish": 360028,
                "name": "LWSettings",
                "start": 360010,
                "type": "doc.field"
            },
            {
                "desc": "",
                "extends": {
                    "finish": 550027,
                    "start": 550020,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 550027,
                            "start": 550020,
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/totpp.lua",
                "finish": 550027,
                "name": "Landmarks",
                "start": 550010,
                "type": "doc.field"
            },
            {
                "desc": "",
                "extends": {
                    "finish": 870029,
                    "start": 870022,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 870029,
                            "start": 870022,
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/totpp.lua",
                "finish": 870029,
                "name": "LuaScenario",
                "start": 870010,
                "type": "doc.field"
            },
            {
                "desc": "",
                "extends": {
                    "finish": 520030,
                    "start": 520023,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 520030,
                            "start": 520023,
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/totpp.lua",
                "finish": 520030,
                "name": "LuaScripting",
                "start": 520010,
                "type": "doc.field"
            },
            {
                "desc": "Restores the x3 major objective for cities as in Fantastic Worlds.",
                "extends": {
                    "finish": 160032,
                    "start": 160025,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 160032,
                            "start": 160025,
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/totpp.lua",
                "finish": 160032,
                "name": "MajorObjective",
                "start": 160010,
                "type": "doc.field"
            },
            {
                "desc": "",
                "extends": {
                    "finish": 590027,
                    "start": 590020,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 590027,
                            "start": 590020,
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/totpp.lua",
                "finish": 590027,
                "name": "MapLayout",
                "start": 590010,
                "type": "doc.field"
            },
            {
                "desc": "",
                "extends": {
                    "finish": 680034,
                    "start": 680027,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 680034,
                            "start": 680027,
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/totpp.lua",
                "finish": 680034,
                "name": "ModifyReputation",
                "start": 680010,
                "type": "doc.field"
            },
            {
                "desc": "",
                "extends": {
                    "finish": 510022,
                    "start": 510015,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 510022,
                            "start": 510015,
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/totpp.lua",
                "finish": 510022,
                "name": "Mods",
                "start": 510010,
                "type": "doc.field"
            },
            {
                "desc": "",
                "extends": {
                    "finish": 600028,
                    "start": 600021,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 600028,
                            "start": 600021,
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/totpp.lua",
                "finish": 600028,
                "name": "MouseWheel",
                "start": 600010,
                "type": "doc.field"
            },
            {
                "desc": "",
                "extends": {
                    "finish": 340031,
                    "start": 340024,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 340031,
                            "start": 340024,
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/totpp.lua",
                "finish": 340031,
                "name": "MoveUnitEvent",
                "start": 340010,
                "type": "doc.field"
            },
            {
                "desc": "",
                "extends": {
                    "finish": 440027,
                    "start": 440020,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 440027,
                            "start": 440020,
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/totpp.lua",
                "finish": 440027,
                "name": "Movedebug",
                "start": 440010,
                "type": "doc.field"
            },
            {
                "desc": "",
                "extends": {
                    "finish": 710030,
                    "start": 710023,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 710030,
                            "start": 710023,
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/totpp.lua",
                "finish": 710030,
                "name": "MovementRate",
                "start": 710010,
                "type": "doc.field"
            },
            {
                "desc": "",
                "extends": {
                    "finish": 470023,
                    "start": 470016,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 470023,
                            "start": 470016,
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/totpp.lua",
                "finish": 470023,
                "name": "Mutex",
                "start": 470010,
                "type": "doc.field"
            },
            {
                "desc": "Makes native transport respect \"not allowed on map\" settings from @UNITS_ADVANCED.",
                "extends": {
                    "finish": 180033,
                    "start": 180026,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 180033,
                            "start": 180026,
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/totpp.lua",
                "finish": 180033,
                "name": "NativeTransport",
                "start": 180010,
                "type": "doc.field"
            },
            {
                "desc": "",
                "extends": {
                    "finish": 270033,
                    "start": 270026,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 270033,
                            "start": 270026,
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/totpp.lua",
                "finish": 270033,
                "name": "NavigableRivers",
                "start": 270010,
                "type": "doc.field"
            },
            {
                "desc": "",
                "extends": {
                    "finish": 860022,
                    "start": 860015,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 860022,
                            "start": 860015,
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/totpp.lua",
                "finish": 860022,
                "name": "NoCD",
                "start": 860010,
                "type": "doc.field"
            },
            {
                "desc": "",
                "extends": {
                    "finish": 800026,
                    "start": 800019,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 800026,
                            "start": 800019,
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/totpp.lua",
                "finish": 800026,
                "name": "NoLimits",
                "start": 800010,
                "type": "doc.field"
            },
            {
                "desc": "",
                "extends": {
                    "finish": 730030,
                    "start": 730023,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 730030,
                            "start": 730023,
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/totpp.lua",
                "finish": 730030,
                "name": "NoStackKills",
                "start": 730010,
                "type": "doc.field"
            },
            {
                "desc": "",
                "extends": {
                    "finish": 400026,
                    "start": 400019,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 400026,
                            "start": 400019,
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/totpp.lua",
                "finish": 400026,
                "name": "Overview",
                "start": 400010,
                "type": "doc.field"
            },
            {
                "desc": "",
                "extends": {
                    "finish": 480029,
                    "start": 480022,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 480029,
                            "start": 480022,
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/totpp.lua",
                "finish": 480029,
                "name": "PikemenFlag",
                "start": 480010,
                "type": "doc.field"
            },
            {
                "desc": "",
                "extends": {
                    "finish": 530026,
                    "start": 530019,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 530026,
                            "start": 530019,
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/totpp.lua",
                "finish": 530026,
                "name": "Playable",
                "start": 530010,
                "type": "doc.field"
            },
            {
                "desc": "",
                "extends": {
                    "finish": 410037,
                    "start": 410030,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 410037,
                            "start": 410030,
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/totpp.lua",
                "finish": 410037,
                "name": "ProductionCarryOver",
                "start": 410010,
                "type": "doc.field"
            },
            {
                "desc": "",
                "extends": {
                    "finish": 720030,
                    "start": 720023,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 720030,
                            "start": 720023,
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/totpp.lua",
                "finish": 720030,
                "name": "RRMultiplier",
                "start": 720010,
                "type": "doc.field"
            },
            {
                "desc": "",
                "extends": {
                    "finish": 240027,
                    "start": 240020,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 240027,
                            "start": 240020,
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/totpp.lua",
                "finish": 240027,
                "name": "Reporting",
                "start": 240010,
                "type": "doc.field"
            },
            {
                "desc": "",
                "extends": {
                    "finish": 830031,
                    "start": 830024,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 830031,
                            "start": 830024,
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/totpp.lua",
                "finish": 830031,
                "name": "ResetCityName",
                "start": 830010,
                "type": "doc.field"
            },
            {
                "desc": "Fixes a bug where the last frame of a looping resource animation would be rendered even when animated resources were disabled.",
                "extends": {
                    "finish": 90039,
                    "start": 90032,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 90039,
                            "start": 90032,
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/totpp.lua",
                "finish": 90039,
                "name": "ResourceAnimationLoop",
                "start": 90010,
                "type": "doc.field"
            },
            {
                "desc": "",
                "extends": {
                    "finish": 280027,
                    "start": 280020,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 280027,
                            "start": 280020,
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/totpp.lua",
                "finish": 280027,
                "name": "RoadTrade",
                "start": 280010,
                "type": "doc.field"
            },
            {
                "desc": "",
                "extends": {
                    "finish": 740025,
                    "start": 740018,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 740025,
                            "start": 740018,
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/totpp.lua",
                "finish": 740025,
                "name": "RushBuy",
                "start": 740010,
                "type": "doc.field"
            },
            {
                "desc": "Allows patches to store arbitrary data in the saved game file, by extending the format. Saved games with extensions are stored with version number '3' (ToT 1.1 uses '2'), so they cannot be read by the vanilla game.<br><br>Purely infrastructural, this patch does not modify anything visible in the game by itself, but makes extension data available to other patches.<br><br>Technical details:<br>Extension information is stored towards the end of the file (right after the 'Destroyed tribes' block, but before multiplayer / event data).<br>The first 4 bytes are the number of extensions, followed by that many extension blocks.<br>An extension consists of 3 parts, length (4 bytes), extension name (4 bytes, ASCII), and extension data ('length' bytes).",
                "extends": {
                    "finish": 80025,
                    "start": 80018,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 80025,
                            "start": 80018,
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/totpp.lua",
                "finish": 80025,
                "name": "SaveExt",
                "start": 80010,
                "type": "doc.field"
            },
            {
                "desc": "",
                "extends": {
                    "finish": 220030,
                    "start": 220023,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 220030,
                            "start": 220023,
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/totpp.lua",
                "finish": 220030,
                "name": "SettlerFlags",
                "start": 220010,
                "type": "doc.field"
            },
            {
                "desc": "",
                "extends": {
                    "finish": 890030,
                    "start": 890023,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 890030,
                            "start": 890023,
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/totpp.lua",
                "finish": 890030,
                "name": "ShieldColors",
                "start": 890010,
                "type": "doc.field"
            },
            {
                "desc": "",
                "extends": {
                    "finish": 230029,
                    "start": 230022,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 230029,
                            "start": 230022,
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/totpp.lua",
                "finish": 230029,
                "name": "ShipDisband",
                "start": 230010,
                "type": "doc.field"
            },
            {
                "desc": "Fixes the rule 2 restrictions in @LEADERS2 so that forbidden technologies cannot be stolen.",
                "extends": {
                    "finish": 100027,
                    "start": 100020,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 100027,
                            "start": 100020,
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/totpp.lua",
                "finish": 100027,
                "name": "StealTech",
                "start": 100010,
                "type": "doc.field"
            },
            {
                "desc": "",
                "extends": {
                    "finish": 450029,
                    "start": 450022,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 450029,
                            "start": 450022,
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/totpp.lua",
                "finish": 450029,
                "name": "TOTPPConfig",
                "start": 450010,
                "type": "doc.field"
            },
            {
                "desc": "",
                "extends": {
                    "finish": 690032,
                    "start": 690025,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 690032,
                            "start": 690025,
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/totpp.lua",
                "finish": 690032,
                "name": "TakeTechnology",
                "start": 690010,
                "type": "doc.field"
            },
            {
                "desc": "",
                "extends": {
                    "finish": 300023,
                    "start": 300016,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 300023,
                            "start": 300016,
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/totpp.lua",
                "finish": 300023,
                "name": "Techs",
                "start": 300010,
                "type": "doc.field"
            },
            {
                "desc": "",
                "extends": {
                    "finish": 310036,
                    "start": 310029,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 310036,
                            "start": 310029,
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/totpp.lua",
                "finish": 310036,
                "name": "TeleporterMapCheck",
                "start": 310010,
                "type": "doc.field"
            },
            {
                "desc": "Enables custom overlays from TERRAIN2.bmp for arbitrary terrain types.<br><br>Overlays are configured with a new section @OVERLAYS in RULES.txt. This section consists of a list of terrain types followed by 3 numbers, e.g.:<br><br>@OVERLAYS<br>Forest, 16, 32, 133<br>Hills, 16, 32, 297<br>Mountains, 16, 48, 199<br>Boreal Forest, 16, 48, 363<br>Jungle, 3, 48, 461<br><br>- For the terrain type you can either use its ordinal index (0-15), the abbreviation used in @TERRAIN (Drt, Pln, etc.), or the full name as in this example.<br>- The first number is the number of tiles to read, either 1, 3 or 16. When 16, tiles are read in 2 rows of 8, similar to the original overlays. When 1 or 3, tiles are read from a single row.<br>The use for the 3-tile overlay is to prevent the dithering used between different terrain types to render on top of the tile. These tiles correspond to the three tiles in TERRAIN1.bmp.<br>- The second number is the height of the tiles, 32, 48 or 64.<br>- The third number is the y-coordinate in TERRAIN2.bmp from where to start reading the tiles. The starting x-coordinate is always 1.<br><br>Notes:<br>- Tiles are expected to be separated from each other by a one-pixel border.<br>- River tiles are always read from their original position of (1, 67). River mouths and coastal tiles shift down, they are read from right below the bottommost overlay.<br>- In the absence of an @OVERLAYS section, overlays are defined to correspond to a default TERRAIN2.bmp file.<br>- This patch replaces the mountain height patch, but respects the \"MountainHeight\" key in COSMIC2 for compatibility when no overlays are defined.<br>- @OVERLAYS1 .. @OVERLAYS3 can be used for secondary maps, similarly to @TERRAIN1-3.",
                "extends": {
                    "finish": 120033,
                    "start": 120026,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 120033,
                            "start": 120026,
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/totpp.lua",
                "finish": 120033,
                "name": "TerrainOverlays",
                "start": 120010,
                "type": "doc.field"
            },
            {
                "desc": "",
                "extends": {
                    "finish": 650030,
                    "start": 650023,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 650030,
                            "start": 650023,
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/totpp.lua",
                "finish": 650030,
                "name": "TerrainTypes",
                "start": 650010,
                "type": "doc.field"
            },
            {
                "desc": "Enables building of throne room improvements. This feature was never removed from ToT, just disabled. The patch also adds a new menu item to the game settings. <br>The associated key bindings are Shift-H to view the throne room, and Shift-Q as a unit order to build an improvement (cheat-mode only).<br><br>The text of the menu item (\"Enable throne room.\") can be overridden by adding a line to @GAMEOPTIONS in GAME.TXT.",
                "extends": {
                    "finish": 70028,
                    "start": 70021,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 70028,
                            "start": 70021,
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/totpp.lua",
                "finish": 70028,
                "name": "Throneroom",
                "start": 70010,
                "type": "doc.field"
            },
            {
                "desc": "Enables the @COSMIC2 keys 'TradeGoldMultiplier', 'TradeScienceMultiplier' and 'TradeWonderMultiplier'.<br><br>For the first two, their value is a percentage applied to the gold/science revenue when a trade route is created. So at 50, revenues are halved. For 'TradeWonderMultiplier' it's a percentage of the cost of the trade unit that will be added to the wonder under construction, if the respective option is selected. Defaults to 100.",
                "extends": {
                    "finish": 200030,
                    "start": 200023,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 200030,
                            "start": 200023,
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/totpp.lua",
                "finish": 200030,
                "name": "TradeRevenue",
                "start": 200010,
                "type": "doc.field"
            },
            {
                "desc": "",
                "extends": {
                    "finish": 850032,
                    "start": 850025,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 850032,
                            "start": 850025,
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/totpp.lua",
                "finish": 850032,
                "name": "TransformCheck",
                "start": 850010,
                "type": "doc.field"
            },
            {
                "desc": "",
                "extends": {
                    "finish": 660031,
                    "start": 660024,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 660031,
                            "start": 660024,
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/totpp.lua",
                "finish": 660031,
                "name": "TransformTech",
                "start": 660010,
                "type": "doc.field"
            },
            {
                "desc": "",
                "extends": {
                    "finish": 580032,
                    "start": 580025,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 580032,
                            "start": 580025,
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/totpp.lua",
                "finish": 580032,
                "name": "UnitIndicators",
                "start": 580010,
                "type": "doc.field"
            },
            {
                "desc": "",
                "extends": {
                    "finish": 640033,
                    "start": 640026,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 640033,
                            "start": 640026,
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/totpp.lua",
                "finish": 640033,
                "name": "UnitOrientation",
                "start": 640010,
                "type": "doc.field"
            },
            {
                "desc": "",
                "extends": {
                    "finish": 140023,
                    "start": 140016,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 140023,
                            "start": 140016,
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/totpp.lua",
                "finish": 140023,
                "name": "Units",
                "start": 140010,
                "type": "doc.field"
            },
            {
                "desc": "",
                "extends": {
                    "finish": 250027,
                    "start": 250020,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 250027,
                            "start": 250020,
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/totpp.lua",
                "finish": 250027,
                "name": "ZoomLevel",
                "start": 250010,
                "type": "doc.field"
            }
        ],
        "name": "totpp.patches",
        "type": "type"
    },
    {
        "defines": [
            {
                "extends": {
                    "finish": 1040018,
                    "start": 1040016,
                    "type": "table",
                    "view": "totpp.version"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/totpp.lua",
                "finish": 1040013,
                "start": 1040000,
                "type": "setfield"
            }
        ],
        "desc": "",
        "name": "totpp.version",
        "type": "variable"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/totpp.lua",
                "finish": 1000023,
                "start": 1000010,
                "type": "doc.class"
            }
        ],
        "desc": "",
        "fields": [
            {
                "desc": "(get) Returns the major version of the TOTPP dll.",
                "extends": {
                    "finish": 1010023,
                    "start": 1010016,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 1010023,
                            "start": 1010016,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/totpp.lua",
                "finish": 1010023,
                "name": "major",
                "start": 1010010,
                "type": "doc.field"
            },
            {
                "desc": "(get) Returns the minor version of the TOTPP dll.",
                "extends": {
                    "finish": 1020023,
                    "start": 1020016,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 1020023,
                            "start": 1020016,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/totpp.lua",
                "finish": 1020023,
                "name": "minor",
                "start": 1020010,
                "type": "doc.field"
            },
            {
                "desc": "(get) Returns the patch version of the TOTPP dll.",
                "extends": {
                    "finish": 1030023,
                    "start": 1030016,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 1030023,
                            "start": 1030016,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/totpp.lua",
                "finish": 1030023,
                "name": "patch",
                "start": 1030010,
                "type": "doc.field"
            }
        ],
        "name": "totpp.version",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 5040026,
                "start": 5040010,
                "type": "doc.class"
            }
        ],
        "desc": "A traderoute object is a data type that describes a trade route that exists between two cities, and offers a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#traderoute)",
        "fields": [
            {
                "desc": "(get/set) The commodity of the trade route.",
                "extends": {
                    "finish": 5050035,
                    "start": 5050020,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 5050035,
                            "start": 5050020,
                            "type": "doc.type.name",
                            "view": "commodityObject"
                        }
                    ],
                    "view": "commodityObject"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 5050035,
                "name": "commodity",
                "start": 5050010,
                "type": "doc.field"
            },
            {
                "desc": "(get) The origin of the trade route.",
                "extends": {
                    "finish": 5060025,
                    "start": 5060015,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 5060025,
                            "start": 5060015,
                            "type": "doc.type.name",
                            "view": "cityObject"
                        }
                    ],
                    "view": "cityObject"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 5060025,
                "name": "from",
                "start": 5060010,
                "type": "doc.field"
            },
            {
                "desc": "(get) The id of the trade route.",
                "extends": {
                    "finish": 5070015,
                    "start": 5070013,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 5070015,
                            "start": 5070013,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 5070015,
                "name": "id",
                "start": 5070010,
                "type": "doc.field"
            },
            {
                "desc": "Alias for city:removeTradeRoute(id).",
                "extends": {
                    "args": [
                        {
                            "finish": 5120008,
                            "name": "self",
                            "start": 5120008,
                            "type": "self",
                            "view": "traderouteObject"
                        }
                    ],
                    "desc": "Alias for city:removeTradeRoute(id).",
                    "finish": 5120038,
                    "start": 5120000,
                    "type": "function",
                    "view": "(method) traderouteObject:remove()"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 5120032,
                "name": "remove",
                "start": 5120009,
                "type": "setmethod"
            },
            {
                "desc": "(get/set) The destination of the trade route.",
                "extends": {
                    "finish": 5080023,
                    "start": 5080013,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 5080023,
                            "start": 5080013,
                            "type": "doc.type.name",
                            "view": "cityObject"
                        }
                    ],
                    "view": "cityObject"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 5080023,
                "name": "to",
                "start": 5080010,
                "type": "doc.field"
            }
        ],
        "name": "traderouteObject",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 2370021,
                "start": 2370010,
                "type": "doc.class"
            }
        ],
        "desc": "A tribe object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a tribe, which is to say the characteristics of the tribe overall, in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tribe)",
        "fields": [
            {
                "desc": "(get) Returns whether the tribe is active, i.e. a human or AI player in the current game.",
                "extends": {
                    "finish": 2380024,
                    "start": 2380017,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 2380024,
                            "start": 2380017,
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 2380024,
                "name": "active",
                "start": 2380010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set) Returns the adjectival form of the tribe's name (e.g. \"Roman\").",
                "extends": {
                    "finish": 2390026,
                    "start": 2390020,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 2390026,
                            "start": 2390020,
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 2390026,
                "name": "adjective",
                "start": 2390010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set) Returns the tribe's attitude to `otherTribe`.",
                "extends": {
                    "finish": 2400026,
                    "start": 2400019,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 2400026,
                            "start": 2400019,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 2400026,
                "name": "attitude",
                "start": 2400010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set) Returns the number of times the tribe has betrayed another tribe.",
                "extends": {
                    "finish": 2410027,
                    "start": 2410020,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 2410027,
                            "start": 2410020,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 2410027,
                "name": "betrayals",
                "start": 2410010,
                "type": "doc.field"
            },
            {
                "desc": "Alias for `civ.enableTechGroup(tribe, techgroup, value)`.\nSets the value of tech group `techgroup` (0-7) to value `value` (0-2, 0 = can research, can own, 1 = can't research, can own, 2 = can't research, can't own) for tribe.\n\n@*param* `techgroup` โ integer in [0,7]\n\n```lua\nvalue:\n    | 0 -- can research, can own\n    | 1 -- can't research, can own\n    | 2 -- can't research, can't own\n```",
                "extends": {
                    "args": [
                        {
                            "finish": 2710008,
                            "name": "self",
                            "start": 2710008,
                            "type": "self",
                            "view": "tribeObject"
                        },
                        {
                            "desc": "integer in [0,7]",
                            "finish": 2710046,
                            "name": "techgroup",
                            "start": 2710037,
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": 2710052,
                            "name": "value",
                            "start": 2710047,
                            "type": "local",
                            "view": "0|1|2"
                        }
                    ],
                    "desc": "Alias for `civ.enableTechGroup(tribe, techgroup, value)`.\nSets the value of tech group `techgroup` (0-7) to value `value` (0-2, 0 = can research, can own, 1 = can't research, can own, 2 = can't research, can't own) for tribe.\n\n@*param* `techgroup` โ integer in [0,7]\n\n```lua\nvalue:\n    | 0 -- can research, can own\n    | 1 -- can't research, can own\n    | 2 -- can't research, can't own\n```",
                    "finish": 2710057,
                    "start": 2710000,
                    "type": "function",
                    "view": "(method) tribeObject:enableTechGroup(techgroup: integer, value: 0|1|2)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 2710036,
                "name": "enableTechGroup",
                "start": 2710009,
                "type": "setmethod"
            },
            {
                "desc": "(get/set) Returns the number of future techs the tribe has researched.",
                "extends": {
                    "finish": 2420029,
                    "start": 2420022,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 2420029,
                            "start": 2420022,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 2420029,
                "name": "futureTechs",
                "start": 2420010,
                "type": "doc.field"
            },
            {
                "desc": "Alias for `civ.giveTech(tribe, tech)`.",
                "extends": {
                    "args": [
                        {
                            "finish": 2750008,
                            "name": "self",
                            "start": 2750008,
                            "type": "self",
                            "view": "tribeObject"
                        },
                        {
                            "desc": "A technology object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a technology entry in the rules.txt, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tech)",
                            "finish": 2750034,
                            "name": "tech",
                            "start": 2750030,
                            "type": "local",
                            "view": "techObject"
                        }
                    ],
                    "desc": "Alias for `civ.giveTech(tribe, tech)`.",
                    "finish": 2750039,
                    "start": 2750000,
                    "type": "function",
                    "view": "(method) tribeObject:giveTech(tech: techObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 2750029,
                "name": "giveTech",
                "start": 2750009,
                "type": "setmethod"
            },
            {
                "desc": "(get/set) Returns the government (0 - 6) of the tribe.",
                "extends": {
                    "finish": 2430028,
                    "start": 2430021,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 2430028,
                            "start": 2430021,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 2430028,
                "name": "government",
                "start": 2430010,
                "type": "doc.field"
            },
            {
                "desc": "Alias for `civ.hasTech(tribe, tech)`.",
                "extends": {
                    "args": [
                        {
                            "finish": 2800008,
                            "name": "self",
                            "start": 2800008,
                            "type": "self",
                            "view": "tribeObject"
                        },
                        {
                            "desc": "A technology object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a technology entry in the rules.txt, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tech)",
                            "finish": 2800033,
                            "name": "tech",
                            "start": 2800029,
                            "type": "local",
                            "view": "techObject"
                        }
                    ],
                    "desc": "Alias for `civ.hasTech(tribe, tech)`.",
                    "finish": 2800038,
                    "returns": [
                        {
                            "name": "boolean",
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 2800000,
                    "type": "function",
                    "view": "(method) tribeObject:hasTech(tech: techObject)\n  -> boolean: boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 2800028,
                "name": "hasTech",
                "start": 2800009,
                "type": "setmethod"
            },
            {
                "desc": "(get) Returns the id of the tribe.",
                "extends": {
                    "finish": 2440015,
                    "start": 2440013,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 2440015,
                            "start": 2440013,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 2440015,
                "name": "id",
                "start": 2440010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set) Returns whether the tribe is a/the human player.",
                "extends": {
                    "finish": 2450025,
                    "start": 2450018,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 2450025,
                            "start": 2450018,
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 2450025,
                "name": "isHuman",
                "start": 2450010,
                "type": "doc.field"
            },
            {
                "desc": "Alias for `civ.killTribe(tribe)`.",
                "extends": {
                    "args": [
                        {
                            "finish": 2830008,
                            "name": "self",
                            "start": 2830008,
                            "type": "self",
                            "view": "tribeObject"
                        }
                    ],
                    "desc": "Alias for `civ.killTribe(tribe)`.",
                    "finish": 2830031,
                    "start": 2830000,
                    "type": "function",
                    "view": "(method) tribeObject:kill()"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 2830025,
                "name": "kill",
                "start": 2830009,
                "type": "setmethod"
            },
            {
                "desc": "(get) Returns the leader of the tribe.",
                "extends": {
                    "finish": 2460029,
                    "start": 2460017,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 2460029,
                            "start": 2460017,
                            "type": "doc.type.name",
                            "view": "leaderObject"
                        }
                    ],
                    "view": "leaderObject"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 2460029,
                "name": "leader",
                "start": 2460010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set) Returns the amount of money/gold in the tribe's treasury.",
                "extends": {
                    "finish": 2470023,
                    "start": 2470016,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 2470023,
                            "start": 2470016,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 2470023,
                "name": "money",
                "start": 2470010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set) Returns the name of the tribe (e.g. \"Romans\").",
                "extends": {
                    "finish": 2480021,
                    "start": 2480015,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 2480021,
                            "start": 2480015,
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 2480021,
                "name": "name",
                "start": 2480010,
                "type": "doc.field"
            },
            {
                "desc": "(get) Returns the number of cities the tribe has.",
                "extends": {
                    "finish": 2490027,
                    "start": 2490020,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 2490027,
                            "start": 2490020,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 2490027,
                "name": "numCities",
                "start": 2490010,
                "type": "doc.field"
            },
            {
                "desc": "(get) Returns the number of techs the tribe has.",
                "extends": {
                    "finish": 2500026,
                    "start": 2500019,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 2500026,
                            "start": 2500019,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 2500026,
                "name": "numTechs",
                "start": 2500010,
                "type": "doc.field"
            },
            {
                "desc": "(get) Returns the number of units the tribe has.",
                "extends": {
                    "finish": 2510026,
                    "start": 2510019,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 2510026,
                            "start": 2510019,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 2510026,
                "name": "numUnits",
                "start": 2510010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set) Returns the tribe's patience.",
                "extends": {
                    "finish": 2520026,
                    "start": 2520019,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 2520026,
                            "start": 2520019,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 2520026,
                "name": "patience",
                "start": 2520010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set) Returns the tribe's reputation with `otherTribe`.",
                "extends": {
                    "finish": 2530028,
                    "start": 2530021,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 2530028,
                            "start": 2530021,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 2530028,
                "name": "reputation",
                "start": 2530010,
                "type": "doc.field"
            },
            {
                "desc": "(get) Returns the research cost of the tribe.",
                "extends": {
                    "finish": 2540030,
                    "start": 2540023,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 2540030,
                            "start": 2540023,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 2540030,
                "name": "researchCost",
                "start": 2540010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set) Returns the progress towards the current research (range between 0 and tribe.researchCost).",
                "extends": {
                    "finish": 2550034,
                    "start": 2550027,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 2550034,
                            "start": 2550027,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 2550034,
                "name": "researchProgress",
                "start": 2550010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set) Returns the tech the tribe is currently researching, or `nil` if not researching anything.",
                "extends": {
                    "finish": 2560036,
                    "start": 2560022,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 2560032,
                            "start": 2560022,
                            "type": "doc.type.name",
                            "view": "techObject"
                        },
                        {
                            "finish": 2560036,
                            "start": 2560033,
                            "type": "doc.type.name",
                            "view": "nil"
                        }
                    ],
                    "view": "techObject|nil"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 2560036,
                "name": "researching",
                "start": 2560010,
                "type": "doc.field"
            },
            {
                "desc": "(get) Returns the science rate of the tribe.",
                "extends": {
                    "finish": 2570029,
                    "start": 2570022,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 2570029,
                            "start": 2570022,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 2570029,
                "name": "scienceRate",
                "start": 2570010,
                "type": "doc.field"
            },
            {
                "desc": "(get) Returns the space ship object of the tribe.",
                "extends": {
                    "finish": 2580035,
                    "start": 2580020,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 2580035,
                            "start": 2580020,
                            "type": "doc.type.name",
                            "view": "spaceshipObject"
                        }
                    ],
                    "view": "spaceshipObject"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 2580035,
                "name": "spaceship",
                "start": 2580010,
                "type": "doc.field"
            },
            {
                "desc": "Alias for `civ.takeTech(tribe, tech, collapse=false)`.\n\n@*param* `collapse` โ Default value is false.",
                "extends": {
                    "args": [
                        {
                            "finish": 2880008,
                            "name": "self",
                            "start": 2880008,
                            "type": "self",
                            "view": "tribeObject"
                        },
                        {
                            "desc": "A technology object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a technology entry in the rules.txt, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tech)",
                            "finish": 2880034,
                            "name": "tech",
                            "start": 2880030,
                            "type": "local",
                            "view": "techObject"
                        },
                        {
                            "desc": "Default value is false.",
                            "finish": 2880043,
                            "name": "collapse",
                            "start": 2880035,
                            "type": "local",
                            "view": "boolean"
                        }
                    ],
                    "desc": "Alias for `civ.takeTech(tribe, tech, collapse=false)`.\n\n@*param* `collapse` โ Default value is false.",
                    "finish": 2880048,
                    "start": 2880000,
                    "type": "function",
                    "view": "(method) tribeObject:takeTech(tech: techObject, collapse: boolean)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 2880029,
                "name": "takeTech",
                "start": 2880009,
                "type": "setmethod"
            },
            {
                "desc": "(get) Returns the tax rate of the tribe.",
                "extends": {
                    "finish": 2590025,
                    "start": 2590018,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 2590025,
                            "start": 2590018,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 2590025,
                "name": "taxRate",
                "start": 2590010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set) Returns the tribe's treaties with `otherTribe`.",
                "extends": {
                    "finish": 2600026,
                    "start": 2600019,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 2600026,
                            "start": 2600019,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 2600026,
                "name": "treaties",
                "start": 2600010,
                "type": "doc.field"
            }
        ],
        "name": "tribeObject",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 790020,
                "start": 790010,
                "type": "doc.class"
            }
        ],
        "desc": "Accepts a tribeObject as the key, and returns an integer",
        "fields": [],
        "name": "tribeToInt",
        "type": "type"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 3600015,
                            "name": "v",
                            "start": 3600014,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "\nReturns the type of its only argument, coded as a string. The possible results of this function are `\"nil\"` (a string, not the value `nil`), `\"number\"`, `\"string\"`, `\"boolean\"`, `\"table\"`, `\"function\"`, `\"thread\"`, and `\"userdata\"`.\n\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-type)\n\n\n```lua\ntype:\n    | \"nil\"\n    | \"number\"\n    | \"string\"\n    | \"boolean\"\n    | \"table\"\n    | \"function\"\n    | \"thread\"\n    | \"userdata\"\n```",
                    "finish": 3600020,
                    "returns": [
                        {
                            "name": "type",
                            "type": "function.return",
                            "view": "\"boolean\"|\"function\"|\"nil\"|\"number\"|\"string\"...(+3)"
                        }
                    ],
                    "start": 3600000,
                    "type": "function",
                    "view": "function type(v: any)\n  -> type: \"boolean\"|\"function\"|\"nil\"|\"number\"|\"string\"...(+3)"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/basic.lua",
                "finish": 3600013,
                "start": 3600009,
                "type": "setglobal"
            }
        ],
        "desc": "\nReturns the type of its only argument, coded as a string. The possible results of this function are `\"nil\"` (a string, not the value `nil`), `\"number\"`, `\"string\"`, `\"boolean\"`, `\"table\"`, `\"function\"`, `\"thread\"`, and `\"userdata\"`.\n\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-type)\n\n\n```lua\ntype:\n    | \"nil\"\n    | \"number\"\n    | \"string\"\n    | \"boolean\"\n    | \"table\"\n    | \"function\"\n    | \"thread\"\n    | \"userdata\"\n```",
        "name": "type",
        "type": "variable"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 1750020,
                "start": 1750010,
                "type": "doc.class"
            }
        ],
        "desc": "A unit object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit in the game, and provides a means of interacting with it. This should not be confused with the unit type object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unit)",
        "fields": [
            {
                "desc": "Activates a unit, clearing its orders, and, if it has a human owner and movement points left, selects it on the map.",
                "extends": {
                    "args": [
                        {
                            "finish": 1930008,
                            "name": "self",
                            "start": 1930008,
                            "type": "self",
                            "view": "unitObject"
                        }
                    ],
                    "desc": "Activates a unit, clearing its orders, and, if it has a human owner and movement points left, selects it on the map.",
                    "finish": 1930034,
                    "start": 1930000,
                    "type": "function",
                    "view": "(method) unitObject:activate()"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 1930028,
                "name": "activate",
                "start": 1930009,
                "type": "setmethod"
            },
            {
                "desc": "(get/set) Returns the attributes of the unit (bitmask).",
                "extends": {
                    "finish": 1760028,
                    "start": 1760021,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 1760028,
                            "start": 1760021,
                            "type": "doc.type.name",
                            "view": "bitmask"
                        }
                    ],
                    "view": "bitmask"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 1760028,
                "name": "attributes",
                "start": 1760010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set) Returns the carrying unit if this unit is currently on board, `nil` otherwise.",
                "extends": {
                    "finish": 1770034,
                    "start": 1770020,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 1770030,
                            "start": 1770020,
                            "type": "doc.type.name",
                            "view": "unitObject"
                        },
                        {
                            "finish": 1770034,
                            "start": 1770031,
                            "type": "doc.type.name",
                            "view": "nil"
                        }
                    ],
                    "view": "unitObject|nil"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 1770034,
                "name": "carriedBy",
                "start": 1770010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set) Returns the damage taken by the unit in hitpoints.",
                "extends": {
                    "finish": 1780024,
                    "start": 1780017,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 1780024,
                            "start": 1780017,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 1780024,
                "name": "damage",
                "start": 1780010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set) Returns the value of the 'domain-specific counter' of the unit.",
                "extends": {
                    "finish": 1790028,
                    "start": 1790021,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 1790028,
                            "start": 1790021,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 1790028,
                "name": "domainSpec",
                "start": 1790010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set) Returns the tile the unit is moving to under the goto order, or `nil` if it doesn't have the goto order.",
                "extends": {
                    "finish": 1800033,
                    "start": 1800019,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 1800029,
                            "start": 1800019,
                            "type": "doc.type.name",
                            "view": "tileObject"
                        },
                        {
                            "finish": 1800033,
                            "start": 1800030,
                            "type": "doc.type.name",
                            "view": "nil"
                        }
                    ],
                    "view": "tileObject|nil"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 1800033,
                "name": "gotoTile",
                "start": 1800010,
                "type": "doc.field"
            },
            {
                "desc": "(get) Returns the number of hitpoints left. It is defined as unit.type.hitpoints - unit.damage.",
                "extends": {
                    "finish": 1810027,
                    "start": 1810020,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 1810027,
                            "start": 1810020,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 1810027,
                "name": "hitpoints",
                "start": 1810010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set) Returns the unit's home city, or `nil` if it doesn't have one.",
                "extends": {
                    "finish": 1820033,
                    "start": 1820019,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 1820029,
                            "start": 1820019,
                            "type": "doc.type.name",
                            "view": "cityObject"
                        },
                        {
                            "finish": 1820033,
                            "start": 1820030,
                            "type": "doc.type.name",
                            "view": "nil"
                        }
                    ],
                    "view": "cityObject|nil"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 1820033,
                "name": "homeCity",
                "start": 1820010,
                "type": "doc.field"
            },
            {
                "desc": "(get) Returns the unit's id.",
                "extends": {
                    "finish": 1830015,
                    "start": 1830013,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 1830015,
                            "start": 1830013,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 1830015,
                "name": "id",
                "start": 1830010,
                "type": "doc.field"
            },
            {
                "desc": "(get) Returns the unit's location.",
                "extends": {
                    "finish": 1840029,
                    "start": 1840019,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 1840029,
                            "start": 1840019,
                            "type": "doc.type.name",
                            "view": "tileObject"
                        }
                    ],
                    "view": "tileObject"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 1840029,
                "name": "location",
                "start": 1840010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set) Returns the number of moves spent by the unit.  Consider using `gen.spendMovementPoints` instead of setting directly.",
                "extends": {
                    "finish": 1850027,
                    "start": 1850020,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 1850027,
                            "start": 1850020,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 1850027,
                "name": "moveSpent",
                "start": 1850010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set) Returns the current order of the unit.",
                "extends": {
                    "finish": 1860023,
                    "start": 1860016,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 1860023,
                            "start": 1860016,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 1860023,
                "name": "order",
                "start": 1860010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set) Returns the unit's owner.",
                "extends": {
                    "finish": 1870027,
                    "start": 1870016,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 1870027,
                            "start": 1870016,
                            "type": "doc.type.name",
                            "view": "tribeObject"
                        }
                    ],
                    "view": "tribeObject"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 1870027,
                "name": "owner",
                "start": 1870010,
                "type": "doc.field"
            },
            {
                "desc": "Alias for `civ.teleportUnit(unit, tile)`.",
                "extends": {
                    "args": [
                        {
                            "finish": 1970008,
                            "name": "self",
                            "start": 1970008,
                            "type": "self",
                            "view": "unitObject"
                        },
                        {
                            "desc": "A tile object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a map \"square\" in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tile)",
                            "finish": 1970033,
                            "name": "tile",
                            "start": 1970029,
                            "type": "local",
                            "view": "tileObject"
                        }
                    ],
                    "desc": "Alias for `civ.teleportUnit(unit, tile)`.",
                    "finish": 1970038,
                    "start": 1970000,
                    "type": "function",
                    "view": "(method) unitObject:teleport(tile: tileObject)"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 1970028,
                "name": "teleport",
                "start": 1970009,
                "type": "setmethod"
            },
            {
                "desc": "(get) Returns the unit's type.",
                "extends": {
                    "finish": 1880029,
                    "start": 1880015,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 1880029,
                            "start": 1880015,
                            "type": "doc.type.name",
                            "view": "unitTypeObject"
                        }
                    ],
                    "view": "unitTypeObject"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 1880029,
                "name": "type",
                "start": 1880010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set) Returns the veteran status of the unit.",
                "extends": {
                    "finish": 1890025,
                    "start": 1890018,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 1890025,
                            "start": 1890018,
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 1890025,
                "name": "veteran",
                "start": 1890010,
                "type": "doc.field"
            }
        ],
        "name": "unitObject",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 2030024,
                "start": 2030010,
                "type": "doc.class"
            }
        ],
        "desc": "A unit type object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a unit type entry in the rules.txt, and provides a means of interacting with it. This should not be confused with the unit object.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#unittype)",
        "fields": [
            {
                "desc": "(get/set - ephemeral) Returns the 'advanced flags' settings of the unit type (bitmask).",
                "extends": {
                    "finish": 2040031,
                    "start": 2040024,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 2040031,
                            "start": 2040024,
                            "type": "doc.type.name",
                            "view": "bitmask"
                        }
                    ],
                    "view": "bitmask"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 2040031,
                "name": "advancedFlags",
                "start": 2040010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set - ephemeral) Returns the attack factor of the unit type.",
                "extends": {
                    "finish": 2050024,
                    "start": 2050017,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 2050024,
                            "start": 2050017,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 2050024,
                "name": "attack",
                "start": 2050010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set) Returns the 'build transport site' settings of the unit type (bitmask).",
                "extends": {
                    "finish": 2060032,
                    "start": 2060025,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 2060032,
                            "start": 2060025,
                            "type": "doc.type.name",
                            "view": "bitmask"
                        }
                    ],
                    "view": "bitmask"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 2060032,
                "name": "buildTransport",
                "start": 2060010,
                "type": "doc.field"
            },
            {
                "desc": "Alias for `civ.canEnter(unittype, tile)`",
                "extends": {
                    "args": [
                        {
                            "finish": 2310008,
                            "name": "self",
                            "start": 2310008,
                            "type": "self",
                            "view": "unitTypeObject"
                        },
                        {
                            "desc": "A tile object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a map \"square\" in the game, and provides a means of interacting with it.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#tile)",
                            "finish": 2310037,
                            "name": "tile",
                            "start": 2310033,
                            "type": "local",
                            "view": "tileObject"
                        }
                    ],
                    "desc": "Alias for `civ.canEnter(unittype, tile)`",
                    "finish": 2310042,
                    "returns": [
                        {
                            "name": "boolean",
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 2310000,
                    "type": "function",
                    "view": "(method) unitTypeObject:canEnter(tile: tileObject)\n  -> boolean: boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 2310032,
                "name": "canEnter",
                "start": 2310009,
                "type": "setmethod"
            },
            {
                "desc": "(get/set - ephemeral) Returns the cost of the unit type.",
                "extends": {
                    "finish": 2070022,
                    "start": 2070015,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 2070022,
                            "start": 2070015,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 2070022,
                "name": "cost",
                "start": 2070010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set - ephemeral) Returns the defense factor of the unit type.",
                "extends": {
                    "finish": 2080025,
                    "start": 2080018,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 2080025,
                            "start": 2080018,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 2080025,
                "name": "defense",
                "start": 2080010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set - ephemeral) Returns the domain of the unit type (0 - Ground, 1 - Air, 2 - Sea).",
                "extends": {
                    "finish": 2090024,
                    "start": 2090017,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 2090024,
                            "start": 2090017,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 2090024,
                "name": "domain",
                "start": 2090010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set - ephemeral) Returns the tech that renders the unit obsolete, or `nil` if there isn't any.",
                "extends": {
                    "finish": 2100032,
                    "start": 2100018,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 2100028,
                            "start": 2100018,
                            "type": "doc.type.name",
                            "view": "techObject"
                        },
                        {
                            "finish": 2100032,
                            "start": 2100029,
                            "type": "doc.type.name",
                            "view": "nil"
                        }
                    ],
                    "view": "techObject|nil"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 2100032,
                "name": "expires",
                "start": 2100010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set - ephemeral) Returns the firepower of the unit type.",
                "extends": {
                    "finish": 2110027,
                    "start": 2110020,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 2110027,
                            "start": 2110020,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 2110027,
                "name": "firepower",
                "start": 2110010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set - ephemeral) Returns the flags of the unit type (bitmask).",
                "extends": {
                    "finish": 2120023,
                    "start": 2120016,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 2120023,
                            "start": 2120016,
                            "type": "doc.type.name",
                            "view": "bitmask"
                        }
                    ],
                    "view": "bitmask"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 2120023,
                "name": "flags",
                "start": 2120010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set - ephemeral) Returns the number of hit points of the unit type.",
                "extends": {
                    "finish": 2130027,
                    "start": 2130020,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 2130027,
                            "start": 2130020,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 2130027,
                "name": "hitpoints",
                "start": 2130010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set - ephemeral) Returns the number of holds of the unit type.",
                "extends": {
                    "finish": 2140022,
                    "start": 2140015,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 2140022,
                            "start": 2140015,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 2140022,
                "name": "hold",
                "start": 2140010,
                "type": "doc.field"
            },
            {
                "desc": "(get) Returns the id of the unit type.",
                "extends": {
                    "finish": 2150015,
                    "start": 2150013,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 2150015,
                            "start": 2150013,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 2150015,
                "name": "id",
                "start": 2150010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set - ephemeral) Returns the minimum amount to bribe the unit type.",
                "extends": {
                    "finish": 2160030,
                    "start": 2160023,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 2160030,
                            "start": 2160023,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 2160030,
                "name": "minimumBribe",
                "start": 2160010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set - ephemeral) Returns the movement rate of the unit type.",
                "extends": {
                    "finish": 2170022,
                    "start": 2170015,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 2170022,
                            "start": 2170015,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 2170022,
                "name": "move",
                "start": 2170010,
                "type": "doc.field"
            },
            {
                "desc": "(get) Returns the name of the unit type.",
                "extends": {
                    "finish": 2180021,
                    "start": 2180015,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 2180021,
                            "start": 2180015,
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 2180021,
                "name": "name",
                "start": 2180010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set) Returns the 'native transport' settings of the unit type (bitmask).",
                "extends": {
                    "finish": 2190033,
                    "start": 2190026,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 2190033,
                            "start": 2190026,
                            "type": "doc.type.name",
                            "view": "bitmask"
                        }
                    ],
                    "view": "bitmask"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 2190033,
                "name": "nativeTransport",
                "start": 2190010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set - ephemeral) Returns the 'not allowed on map' settings of the unit type (bitmask).",
                "extends": {
                    "finish": 2200033,
                    "start": 2200026,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 2200033,
                            "start": 2200026,
                            "type": "doc.type.name",
                            "view": "bitmask"
                        }
                    ],
                    "view": "bitmask"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 2200033,
                "name": "notAllowedOnMap",
                "start": 2200010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set - ephemeral) Returns the prerequisite technology of the unit type, or `nil` if it doesn't have one.",
                "extends": {
                    "finish": 2210031,
                    "start": 2210017,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 2210027,
                            "start": 2210017,
                            "type": "doc.type.name",
                            "view": "techObject"
                        },
                        {
                            "finish": 2210031,
                            "start": 2210028,
                            "type": "doc.type.name",
                            "view": "nil"
                        }
                    ],
                    "view": "techObject|nil"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 2210031,
                "name": "prereq",
                "start": 2210010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set - ephemeral) Returns the range of the unit type.",
                "extends": {
                    "finish": 2220023,
                    "start": 2220016,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 2220023,
                            "start": 2220016,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 2220023,
                "name": "range",
                "start": 2220010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set - ephemeral) Returns the role of the unit type.",
                "extends": {
                    "finish": 2230022,
                    "start": 2230015,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 2230022,
                            "start": 2230015,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 2230022,
                "name": "role",
                "start": 2230010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set - ephemeral) Returns the 'tribe may build' settings of the unit type (bitmask).",
                "extends": {
                    "finish": 2240031,
                    "start": 2240024,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 2240031,
                            "start": 2240024,
                            "type": "doc.type.name",
                            "view": "bitmask"
                        }
                    ],
                    "view": "bitmask"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 2240031,
                "name": "tribeMayBuild",
                "start": 2240010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set) Returns the 'use transport site' settings of the unit type (bitmask).",
                "extends": {
                    "finish": 2250030,
                    "start": 2250023,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 2250030,
                            "start": 2250023,
                            "type": "doc.type.name",
                            "view": "bitmask"
                        }
                    ],
                    "view": "bitmask"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 2250030,
                "name": "useTransport",
                "start": 2250010,
                "type": "doc.field"
            }
        ],
        "name": "unitTypeObject",
        "type": "type"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 4070020,
                            "name": "list",
                            "start": 4070016,
                            "type": "local",
                            "view": "<T>[]"
                        },
                        {
                            "desc": "An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 4070023,
                            "name": "i",
                            "start": 4070022,
                            "type": "local",
                            "view": "integer?"
                        },
                        {
                            "desc": "An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 4070026,
                            "name": "j",
                            "start": 4070025,
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nReturns the elements from the given `list`. This function is equivalent to\n```lua\n    return list[i], list[i+1], ยทยทยท, list[j]\n```\n\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-unpack)",
                    "finish": 4070031,
                    "returns": [
                        {
                            "name": "...",
                            "type": "function.return",
                            "view": "<T>"
                        }
                    ],
                    "start": 4070000,
                    "type": "function",
                    "view": "function unpack(list: <T>[], i?: integer, j?: integer)\n  -> ...<T>"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/basic.lua",
                "finish": 4070015,
                "start": 4070009,
                "type": "setglobal"
            }
        ],
        "desc": "\nReturns the elements from the given `list`. This function is equivalent to\n```lua\n    return list[i], list[i+1], ยทยทยท, list[j]\n```\n\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-unpack)",
        "name": "unpack",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "finish": 150009,
                    "start": 150007,
                    "type": "table",
                    "view": "utf8lib"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/utf8.lua",
                "finish": 150004,
                "start": 150000,
                "type": "setglobal"
            }
        ],
        "desc": "\n\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-utf8)\n",
        "name": "utf8",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 260023,
                            "name": "code",
                            "start": 260019,
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "desc": "An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 260028,
                            "start": 260025,
                            "type": "...",
                            "view": "integer"
                        }
                    ],
                    "desc": "\nReceives zero or more integers, converts each one to its corresponding UTF-8 byte sequence and returns a string with the concatenation of all these sequences.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-utf8.char)",
                    "finish": 260033,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": 260000,
                    "type": "function",
                    "view": "function utf8.char(code: integer, ...integer)\n  -> string"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/utf8.lua",
                "finish": 260018,
                "start": 260009,
                "type": "setfield"
            }
        ],
        "desc": "\nReceives zero or more integers, converts each one to its corresponding UTF-8 byte sequence and returns a string with the concatenation of all these sequences.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-utf8.char)",
        "name": "utf8.char",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A string is a data type native to Lua which consists of a sequence of characters. These often represent text to be displayed, but are also useful in other contexts. Strings are commonly used as keys in tables, since they make code more readable.\n[Programming in Lua, 2.4 -- Strings](https://www.lua.org/pil/2.4.html)",
                            "finish": 570025,
                            "name": "s",
                            "start": 570024,
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "desc": "An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 570028,
                            "name": "i",
                            "start": 570027,
                            "type": "local",
                            "view": "integer?"
                        },
                        {
                            "desc": "An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 570031,
                            "name": "j",
                            "start": 570030,
                            "type": "local",
                            "view": "integer?"
                        },
                        {
                            "desc": "A boolean is a data type native to Lua with exactly two possible values, <code>true</code> and <code>false</code>. These are often used when evaluating logical statements, but logical statements accept other values as well. All values except <code>false</code> and <code>nil</code> are considered 'truthy', even values such as 0 or the empty string.\n[Programming in Lua, 2.2 -- Booleans](https://www.lua.org/pil/2.2.html)",
                            "finish": 570036,
                            "name": "lax",
                            "start": 570033,
                            "type": "local",
                            "view": "boolean?"
                        }
                    ],
                    "desc": "\nReturns the codepoints (as integers) from all characters in `s` that start between byte position `i` and `j` (both included).\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-utf8.codepoint)",
                    "finish": 570041,
                    "returns": [
                        {
                            "name": "code",
                            "type": "function.return",
                            "view": "integer"
                        },
                        {
                            "name": "...",
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": 570000,
                    "type": "function",
                    "view": "function utf8.codepoint(s: string, i?: integer, j?: integer, lax?: boolean)\n  -> code: integer\n  2. ...integer"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/utf8.lua",
                "finish": 570023,
                "start": 570009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the codepoints (as integers) from all characters in `s` that start between byte position `i` and `j` (both included).\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-utf8.codepoint)",
        "name": "utf8.codepoint",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A string is a data type native to Lua which consists of a sequence of characters. These often represent text to be displayed, but are also useful in other contexts. Strings are commonly used as keys in tables, since they make code more readable.\n[Programming in Lua, 2.4 -- Strings](https://www.lua.org/pil/2.4.html)",
                            "finish": 430021,
                            "name": "s",
                            "start": 430020,
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "desc": "A boolean is a data type native to Lua with exactly two possible values, <code>true</code> and <code>false</code>. These are often used when evaluating logical statements, but logical statements accept other values as well. All values except <code>false</code> and <code>nil</code> are considered 'truthy', even values such as 0 or the empty string.\n[Programming in Lua, 2.2 -- Booleans](https://www.lua.org/pil/2.2.html)",
                            "finish": 430026,
                            "name": "lax",
                            "start": 430023,
                            "type": "local",
                            "view": "boolean?"
                        }
                    ],
                    "desc": "\nReturns values so that the construction\n```lua\nfor p, c in utf8.codes(s) do\n    body\nend\n```\nwill iterate over all UTF-8 characters in string s, with p being the position (in bytes) and c the code point of each character. It raises an error if it meets any invalid byte sequence.\n\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-utf8.codes)",
                    "finish": 430031,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "fun(s: string, p: integer):integer, integer"
                        }
                    ],
                    "start": 430000,
                    "type": "function",
                    "view": "function utf8.codes(s: string, lax?: boolean)\n  -> fun(s: string, p: integer):integer, integer"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/utf8.lua",
                "finish": 430019,
                "start": 430009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns values so that the construction\n```lua\nfor p, c in utf8.codes(s) do\n    body\nend\n```\nwill iterate over all UTF-8 characters in string s, with p being the position (in bytes) and c the code point of each character. It raises an error if it meets any invalid byte sequence.\n\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-utf8.codes)",
        "name": "utf8.codes",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A string is a data type native to Lua which consists of a sequence of characters. These often represent text to be displayed, but are also useful in other contexts. Strings are commonly used as keys in tables, since they make code more readable.\n[Programming in Lua, 2.4 -- Strings](https://www.lua.org/pil/2.4.html)",
                            "finish": 710019,
                            "name": "s",
                            "start": 710018,
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "desc": "An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 710022,
                            "name": "i",
                            "start": 710021,
                            "type": "local",
                            "view": "integer?"
                        },
                        {
                            "desc": "An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 710025,
                            "name": "j",
                            "start": 710024,
                            "type": "local",
                            "view": "integer?"
                        },
                        {
                            "desc": "A boolean is a data type native to Lua with exactly two possible values, <code>true</code> and <code>false</code>. These are often used when evaluating logical statements, but logical statements accept other values as well. All values except <code>false</code> and <code>nil</code> are considered 'truthy', even values such as 0 or the empty string.\n[Programming in Lua, 2.2 -- Booleans](https://www.lua.org/pil/2.2.html)",
                            "finish": 710030,
                            "name": "lax",
                            "start": 710027,
                            "type": "local",
                            "view": "boolean?"
                        }
                    ],
                    "desc": "\nReturns the number of UTF-8 characters in string `s` that start between positions `i` and `j` (both inclusive).\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-utf8.len)",
                    "finish": 710035,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "integer?"
                        },
                        {
                            "name": "errpos",
                            "type": "function.return",
                            "view": "integer?"
                        }
                    ],
                    "start": 710000,
                    "type": "function",
                    "view": "function utf8.len(s: string, i?: integer, j?: integer, lax?: boolean)\n  -> integer?\n  2. errpos: integer?"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/utf8.lua",
                "finish": 710017,
                "start": 710009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the number of UTF-8 characters in string `s` that start between positions `i` and `j` (both inclusive).\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-utf8.len)",
        "name": "utf8.len",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A string is a data type native to Lua which consists of a sequence of characters. These often represent text to be displayed, but are also useful in other contexts. Strings are commonly used as keys in tables, since they make code more readable.\n[Programming in Lua, 2.4 -- Strings](https://www.lua.org/pil/2.4.html)",
                            "finish": 830022,
                            "name": "s",
                            "start": 830021,
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "desc": "An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 830025,
                            "name": "n",
                            "start": 830024,
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "desc": "An integer is a number without a fractional part. Unlike other programming Languages, Lua does not distinguish between integers and 'floating point' numbers. You can convert a number to an integer by using commands like <code>math.floor</code> and <code>math.ceil</code>.\n[Programming in Lua, 2.3 -- Numbers](https://www.lua.org/pil/2.3.html)",
                            "finish": 830028,
                            "name": "i",
                            "start": 830027,
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nReturns the position (in bytes) where the encoding of the `n`-th character of `s` (counting from position `i`) starts.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-utf8.offset)",
                    "finish": 830033,
                    "returns": [
                        {
                            "name": "p",
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": 830000,
                    "type": "function",
                    "view": "function utf8.offset(s: string, n: integer, i?: integer)\n  -> p: integer"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/utf8.lua",
                "finish": 830020,
                "start": 830009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the position (in bytes) where the encoding of the `n`-th character of `s` (counting from position `i`) starts.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-utf8.offset)",
        "name": "utf8.offset",
        "type": "variable"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 100014,
                "start": 100010,
                "type": "doc.class"
            }
        ],
        "desc": "\"Void\" isn't a proper data type in Lua. Instead, it is an indication that a function or method is not returning a value at all. A function with a simple <code>return</code>, or without a <code>return</code> line will return (or, rather, not return) a \"void\", wheras <code>return nil</code> will return a proper nil value. If your function <em>never</em> returns useful information, returning \"void\" is appropriate. However, if your code <em>sometimes</em> returns useful data, it should return nil when it does not.",
        "fields": [],
        "name": "void",
        "type": "type"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "A string is a data type native to Lua which consists of a sequence of characters. These often represent text to be displayed, but are also useful in other contexts. Strings are commonly used as keys in tables, since they make code more readable.\n[Programming in Lua, 2.4 -- Strings](https://www.lua.org/pil/2.4.html)",
                            "finish": 3760021,
                            "name": "message",
                            "start": 3760014,
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": 3760026,
                            "start": 3760023,
                            "type": "...",
                            "view": "unknown"
                        }
                    ],
                    "desc": "\nEmits a warning with a message composed by the concatenation of all its arguments (which should be strings).\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-warn)",
                    "finish": 3760031,
                    "start": 3760000,
                    "type": "function",
                    "view": "function warn(message: string, ...any)"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/basic.lua",
                "finish": 3760013,
                "start": 3760009,
                "type": "setglobal"
            }
        ],
        "desc": "\nEmits a warning with a message composed by the concatenation of all its arguments (which should be strings).\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-warn)",
        "name": "warn",
        "type": "variable"
    },
    {
        "defines": [
            {
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 3400022,
                "start": 3400010,
                "type": "doc.class"
            }
        ],
        "desc": "A wonder object is a data type provided by the Test of Time Patch Project Lua Interpreter. It represents a Wonder of the World, both its entry in the rules.txt and also its characteristics within the game.\n[Lua Function Reference](https://forums.civfanatics.com/threads/totpp-lua-function-reference.557527/#wonder)",
        "fields": [
            {
                "desc": "(get/set) Returns the city that has built the wonder, `nil` if not built yet or destroyed.",
                "extends": {
                    "finish": 3410029,
                    "start": 3410015,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 3410025,
                            "start": 3410015,
                            "type": "doc.type.name",
                            "view": "cityObject"
                        },
                        {
                            "finish": 3410029,
                            "start": 3410026,
                            "type": "doc.type.name",
                            "view": "nil"
                        }
                    ],
                    "view": "cityObject|nil"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 3410029,
                "name": "city",
                "start": 3410010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set - ephemeral) Returns the cost of the wonder.",
                "extends": {
                    "finish": 3420022,
                    "start": 3420015,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 3420022,
                            "start": 3420015,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 3420022,
                "name": "cost",
                "start": 3420010,
                "type": "doc.field"
            },
            {
                "desc": "Alias for `civ.destroyWonder(wonder)`.",
                "extends": {
                    "args": [
                        {
                            "finish": 3510008,
                            "name": "self",
                            "start": 3510008,
                            "type": "self",
                            "view": "wonderObject"
                        }
                    ],
                    "desc": "Alias for `civ.destroyWonder(wonder)`.",
                    "finish": 3510035,
                    "start": 3510000,
                    "type": "function",
                    "view": "(method) wonderObject:destroy()"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 3510029,
                "name": "destroy",
                "start": 3510009,
                "type": "setmethod"
            },
            {
                "desc": "(get) Returns whether or not the wonder is destroyed. Use wonder:destroy() to set this field.",
                "extends": {
                    "finish": 3430027,
                    "start": 3430020,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 3430027,
                            "start": 3430020,
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 3430027,
                "name": "destroyed",
                "start": 3430010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set - ephemeral) Returns the tech that renders the wonder obsolete, or `nil` if there isn't any.",
                "extends": {
                    "finish": 3440032,
                    "start": 3440018,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 3440028,
                            "start": 3440018,
                            "type": "doc.type.name",
                            "view": "techObject"
                        },
                        {
                            "finish": 3440032,
                            "start": 3440029,
                            "type": "doc.type.name",
                            "view": "nil"
                        }
                    ],
                    "view": "techObject|nil"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 3440032,
                "name": "expires",
                "start": 3440010,
                "type": "doc.field"
            },
            {
                "desc": "(get) Returns the id of the wonder.",
                "extends": {
                    "finish": 3450015,
                    "start": 3450013,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 3450015,
                            "start": 3450013,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 3450015,
                "name": "id",
                "start": 3450010,
                "type": "doc.field"
            },
            {
                "desc": "(get) Returns the name of the wonder.",
                "extends": {
                    "finish": 3460021,
                    "start": 3460015,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 3460021,
                            "start": 3460015,
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 3460021,
                "name": "name",
                "start": 3460010,
                "type": "doc.field"
            },
            {
                "desc": "(get/set - ephemeral) Returns the prerequisite technology of the wonder.",
                "extends": {
                    "finish": 3470027,
                    "start": 3470017,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 3470027,
                            "start": 3470017,
                            "type": "doc.type.name",
                            "view": "techObject"
                        }
                    ],
                    "view": "techObject"
                },
                "file": "file:///home/thomas/Desktop/Link%20to%20Test%20of%20Time%2016/Template/LuaDocumentation/civ.lua",
                "finish": 3470027,
                "name": "prereq",
                "start": 3470010,
                "type": "doc.field"
            }
        ],
        "name": "wonderObject",
        "type": "type"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 3890017,
                            "name": "f",
                            "start": 3890016,
                            "type": "local",
                            "view": "fun(...any):...unknown"
                        },
                        {
                            "desc": "A function is a sequence of instructions, which frequently depend on values that are provided (\"arguments\"). In Lua, functions are considered values, and can be stored in variables or tables. They can also be supplied as arguments to other functions.\n[Programming in Lua, 2.6 -- Functions](https://www.lua.org/pil/2.6.html)",
                            "finish": 3890023,
                            "name": "msgh",
                            "start": 3890019,
                            "type": "local",
                            "view": "function"
                        },
                        {
                            "finish": 3890029,
                            "name": "arg1",
                            "start": 3890025,
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": 3890034,
                            "start": 3890031,
                            "type": "...",
                            "view": "unknown"
                        }
                    ],
                    "desc": "\nCalls function `f` with the given arguments in protected mode with a new message handler.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-xpcall)",
                    "finish": 3890039,
                    "returns": [
                        {
                            "name": "success",
                            "type": "function.return",
                            "view": "boolean"
                        },
                        {
                            "name": "result",
                            "type": "function.return",
                            "view": "any"
                        },
                        {
                            "name": "...",
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": 3890000,
                    "type": "function",
                    "view": "function xpcall(f: fun(...any):...unknown, msgh: function, arg1?: any, ...any)\n  -> success: boolean\n  2. result: any\n  3. ...any"
                },
                "file": "file:///home/thomas/.vscode/extensions/sumneko.lua-3.6.19-linux-x64/server/meta/Lua%205.4%20en-us%20utf8/basic.lua",
                "finish": 3890015,
                "start": 3890009,
                "type": "setglobal"
            }
        ],
        "desc": "\nCalls function `f` with the given arguments in protected mode with a new message handler.\n\n[View documents](http://www.lua.org/manual/5.4/manual.html#pdf-xpcall)",
        "name": "xpcall",
        "type": "variable"
    }
]